/*
@license

dhtmlxSpreadsheet v.5.1.8 Professional

This software is covered by DHTMLX Individual License.
Usage without proper license is prohibited.

(c) XB Software.

*/
if (window.dhx){ window.dhx_legacy = dhx; delete window.dhx; }(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["dhx"] = factory();
	else
		root["dhx"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/codebase/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 96);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTextLines = exports.getCloneObject = exports.rgbToHex = exports.getStringWidth = exports.getMinArrayNumber = exports.getMaxArrayNumber = exports.isEmptyObj = exports.isType = exports.compare = exports.debounce = exports.downloadFile = exports.isNumeric = exports.range = exports.isId = exports.isDefined = exports.wrapBox = exports.unwrapBox = exports.detectWidgetClick = exports.singleOuterClick = exports.isExistValue = exports.findIndex = exports.naturalSort = exports.copy = exports.extend = exports.uid = void 0;
var html_1 = __webpack_require__(4);
var counter = new Date().valueOf();
function uid() {
    return "u" + counter++;
}
exports.uid = uid;
function extend(target, source, deep) {
    if (deep === void 0) { deep = true; }
    if (source) {
        for (var key in source) {
            var sobj = source[key];
            var tobj = target[key];
            if (sobj === undefined) {
                delete target[key];
            }
            else if (deep &&
                typeof tobj === "object" &&
                !(tobj instanceof Date) &&
                !(tobj instanceof Array)) {
                extend(tobj, sobj);
            }
            else {
                target[key] = sobj;
            }
        }
    }
    return target;
}
exports.extend = extend;
function copy(source, withoutInner) {
    var result = {};
    for (var key in source) {
        if (!withoutInner || !key.startsWith("$")) {
            result[key] = source[key];
        }
    }
    return result;
}
exports.copy = copy;
function naturalSort(arr) {
    return arr.sort(function (a, b) {
        var nn = typeof a === "string" ? a.localeCompare(b) : a - b;
        return nn;
    });
}
exports.naturalSort = naturalSort;
function findIndex(arr, predicate) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (predicate(arr[i])) {
            return i;
        }
    }
    return -1;
}
exports.findIndex = findIndex;
function isExistValue(target, value) {
    var str = value.toString();
    var text = target.toString();
    if (str.length > text.length)
        return false;
    return text.toLowerCase().includes(str.toLowerCase());
}
exports.isExistValue = isExistValue;
function singleOuterClick(fn) {
    var click = function (e) {
        if (fn(e)) {
            document.removeEventListener("click", click);
        }
    };
    document.addEventListener("click", click);
}
exports.singleOuterClick = singleOuterClick;
function detectWidgetClick(widgetId, cb) {
    var click = function (e) { return cb((0, html_1.locate)(e, "data-dhx-widget-id") === widgetId); };
    document.addEventListener("click", click);
    return function () { return document.removeEventListener("click", click); };
}
exports.detectWidgetClick = detectWidgetClick;
function unwrapBox(box) {
    if (Array.isArray(box)) {
        return box[0];
    }
    return box;
}
exports.unwrapBox = unwrapBox;
function wrapBox(unboxed) {
    if (Array.isArray(unboxed)) {
        return unboxed;
    }
    return [unboxed];
}
exports.wrapBox = wrapBox;
function isDefined(some) {
    return some !== null && some !== undefined;
}
exports.isDefined = isDefined;
function isId(some) {
    return typeof some === "number" || (typeof some === "string" && some !== "");
}
exports.isId = isId;
function range(from, to) {
    if (from > to) {
        return [];
    }
    var result = [];
    while (from <= to) {
        result.push(from++);
    }
    return result;
}
exports.range = range;
function isNumeric(val) {
    return !isNaN(val - parseFloat(val));
}
exports.isNumeric = isNumeric;
function downloadFile(data, filename, mimeType) {
    if (mimeType === void 0) { mimeType = "text/plain"; }
    var file = new Blob([data], { type: mimeType });
    if (window.navigator.msSaveOrOpenBlob) {
        // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    }
    else {
        var a_1 = document.createElement("a");
        var url_1 = URL.createObjectURL(file);
        a_1.href = url_1;
        a_1.download = filename;
        document.body.appendChild(a_1);
        a_1.click();
        setTimeout(function () {
            document.body.removeChild(a_1);
            window.URL.revokeObjectURL(url_1);
        }, 0);
    }
}
exports.downloadFile = downloadFile;
function debounce(func, wait, immediate) {
    var timeout;
    return function executedFunction() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(_this, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            func.apply(this, args);
        }
    };
}
exports.debounce = debounce;
function compare(obj1, obj2) {
    for (var p in obj1) {
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
            return false;
        }
        switch (typeof obj1[p]) {
            case "object":
                if (!compare(obj1[p], obj2[p])) {
                    return false;
                }
                break;
            case "function":
                if (typeof obj2[p] === "undefined" ||
                    (p !== "compare" && obj1[p].toString() !== obj2[p].toString())) {
                    return false;
                }
                break;
            default:
                if (obj1[p] !== obj2[p]) {
                    return false;
                }
        }
    }
    for (var p in obj2) {
        if (!obj1.hasOwnProperty(p)) {
            return false;
        }
    }
    return true;
}
exports.compare = compare;
var isType = function (value) {
    var regex = /^\[object (\S+?)\]$/;
    var matches = Object.prototype.toString.call(value).match(regex) || [];
    return (matches[1] || "undefined").toLowerCase();
};
exports.isType = isType;
var isEmptyObj = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
exports.isEmptyObj = isEmptyObj;
var getMaxArrayNumber = function (array) {
    if (!array.length)
        return;
    var maxNumber = -Infinity;
    var index = 0;
    var length = array.length;
    for (index; index < length; index++) {
        if (array[index] > maxNumber)
            maxNumber = array[index];
    }
    return maxNumber;
};
exports.getMaxArrayNumber = getMaxArrayNumber;
var getMinArrayNumber = function (array) {
    if (!array.length)
        return;
    var minNumber = +Infinity;
    var index = 0;
    var length = array.length;
    for (index; index < length; index++) {
        if (array[index] < minNumber)
            minNumber = array[index];
    }
    return minNumber;
};
exports.getMinArrayNumber = getMinArrayNumber;
var getStringWidth = function (value, config) {
    config = __assign({ font: "normal 14px Roboto", lineHeight: 20 }, config);
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (config.font)
        ctx.font = config.font;
    var width = ctx.measureText(value).width;
    if (!(0, html_1.isIE)())
        canvas.remove();
    return width;
};
exports.getStringWidth = getStringWidth;
var rgbToHex = function (color) {
    if (color.substr(0, 1) === "#") {
        return color;
    }
    if (color.substr(0, 3) !== "rgb") {
        return;
    }
    var digits = /(.*?)rgb[a]?\((\d+), *(\d+), *(\d+),* *([\d+.]*)\)/.exec(color);
    var red = parseInt(digits[2], 10)
        .toString(16)
        .padStart(2, "0");
    var green = parseInt(digits[3], 10)
        .toString(16)
        .padStart(2, "0");
    var blue = parseInt(digits[4], 10)
        .toString(16)
        .padStart(2, "0");
    return "#".concat(red).concat(green).concat(blue);
};
exports.rgbToHex = rgbToHex;
function getCloneObject(obj) {
    if (!obj) {
        return obj;
    }
    var clone = Array.isArray(obj) ? [] : {};
    for (var key in obj) {
        var value = obj[key];
        if (value instanceof Date) {
            clone[key] = new Date(value);
            continue;
        }
        clone[key] = typeof value === "object" ? getCloneObject(value) : value;
    }
    return clone;
}
exports.getCloneObject = getCloneObject;
function getTextLines(ctx, text, maxWidth) {
    var words = text.split(" ");
    var line = "";
    var testLine = "";
    var lineArray = [];
    for (var n = 0; n < words.length; n++) {
        testLine += "".concat(words[n], " ");
        var metrics = ctx.measureText(testLine.trimEnd());
        var testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
            lineArray.push(line);
            line = "".concat(words[n], " ");
            testLine = "".concat(words[n], " ");
        }
        else {
            line += "".concat(words[n], " ");
        }
        if (n === words.length - 1) {
            lineArray.push(line);
        }
    }
    return lineArray;
}
exports.getTextLines = getTextLines;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTheme = exports.awaitRedraw = exports.resizeHandler = exports.resizer = exports.disableHelp = exports.KEYED_LIST = exports.inject = exports.create = exports.view = exports.sv = exports.el = void 0;
var dom = __webpack_require__(112);
var html_1 = __webpack_require__(4);
exports.el = dom.defineElement;
exports.sv = dom.defineSvgElement;
exports.view = dom.defineView;
exports.create = dom.createView;
exports.inject = dom.injectView;
exports.KEYED_LIST = dom.KEYED_LIST;
function disableHelp() {
    dom.DEVMODE.mutations = false;
    dom.DEVMODE.warnings = false;
    dom.DEVMODE.verbose = false;
    dom.DEVMODE.UNKEYED_INPUT = false;
}
exports.disableHelp = disableHelp;
function resizer(handler) {
    var resize = window.ResizeObserver;
    var activeHandler = function (node) {
        var height = node.el.offsetHeight;
        var width = node.el.offsetWidth;
        handler(width, height);
    };
    if (resize) {
        return (0, exports.el)("div.dhx-resize-observer", {
            _hooks: {
                didInsert: function (node) {
                    new resize(function () { return activeHandler(node); }).observe(node.el);
                },
            },
        });
    }
    return (0, exports.el)("iframe.dhx-resize-observer", {
        _hooks: {
            didInsert: function (node) {
                node.el.contentWindow.onresize = function () { return activeHandler(node); };
                activeHandler(node);
            },
        },
    });
}
exports.resizer = resizer;
function resizeHandler(container, handler) {
    return (0, exports.create)({
        render: function () {
            return resizer(handler);
        },
    }).mount(container);
}
exports.resizeHandler = resizeHandler;
function awaitRedraw() {
    return new Promise(function (res) {
        requestAnimationFrame(function () {
            res();
        });
    });
}
exports.awaitRedraw = awaitRedraw;
function setTheme(theme, container) {
    if (theme === void 0) { theme = "light"; }
    var dhxAttr = "data-dhx-theme";
    if (!container) {
        var elements = document.querySelectorAll("[".concat(dhxAttr, "]"));
        elements.forEach(function (el) { return el.removeAttribute(dhxAttr); });
    }
    container = container || document.documentElement;
    (0, html_1.toNode)(container).setAttribute(dhxAttr, theme);
}
exports.setTheme = setTheme;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showAlert = exports.isCellSpaned = exports.isCellFixed = exports.checkSpanByNames = exports.checkSpan = exports.getStylesObject = exports.doesContainUrl = exports.isURL = exports.getCellNode = exports.isMac = exports.convertStyles = exports.getTextHeight = exports.parseFromText = exports.parseHtmlTable = exports.analyzeMSOFormat = exports.getSeparatorsFromMSO = exports.fetchFile = exports.isWasmSupported = exports.cleanActionConfig = exports.extendConfig = exports.getCellsArray = exports.getPrevRangeCell = exports.getNextRangeCell = exports.getRangeMatrix = exports.getRangeArray = exports.getRangeIndexes = exports.isRangeId = exports.getCellInfo = exports.getCellNameById = exports.getCellNameByIndex = exports.getCellIndex = exports.getCellIds = exports.getNumberFromLetter = exports.getLetterFromNumber = void 0;
var core_1 = __webpack_require__(0);
var muon_1 = __webpack_require__(25);
var ts_message_1 = __webpack_require__(17);
var en_1 = __webpack_require__(11);
var format_1 = __webpack_require__(12);
var date_1 = __webpack_require__(28);
function getLetterFromNumber(num) {
    if (!num) {
        return "";
    }
    num = --num;
    var numeric = num % 26;
    var letter = String.fromCharCode(65 + numeric);
    var group = Math.floor(num / 26);
    if (group > 0) {
        return getLetterFromNumber(group) + letter;
    }
    return letter;
}
exports.getLetterFromNumber = getLetterFromNumber;
function getNumberFromLetter(str) {
    if (!str) {
        return -1;
    }
    str = str.toUpperCase();
    var letters = str.split("");
    return letters.reduce(function (total, item, i, arr) {
        var num = item.charCodeAt(0) - 64;
        var pow = Math.pow(26, arr.length - (i + 1));
        total += num * pow;
        return total;
    }, 0);
}
exports.getNumberFromLetter = getNumberFromLetter;
function getCellIds(cell, grid) {
    if (!cell) {
        return {};
    }
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var match = cell.match(/([a-zA-Z]*\d*):([a-zA-Z]*\d*)/);
    if (match) {
        var start = getCellIds(match[1], grid);
        var end = getCellIds(match[2], grid);
        var startRow = +start.row <= end.row ? start.row : end.row;
        var startCol = +start.col <= end.col ? start.col : end.col;
        return {
            start: { row: startRow, col: startCol },
            end: {
                row: startRow === end.row ? start.row : end.row,
                col: startCol === end.col ? start.col : end.col,
            },
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    var index = getCellIndex(cell, grid);
    if (!index) {
        return {};
    }
    var _a = (0, muon_1.str2pos)(cell), row = _a[0], col = _a[1];
    return {
        col: col,
        row: row,
    };
}
exports.getCellIds = getCellIds;
function findBinaryIndex(arr, x, start, end) {
    // Base Condition
    if (start > end)
        return -1;
    // Find the middle index
    var mid = Math.floor((start + end) / 2);
    if (!arr[mid])
        return mid;
    var id = +arr[mid].id;
    // Compare mid with given key x
    if (id === x)
        return mid;
    // If element at mid is greater than x,
    // search in the left half of mid
    if (id > x)
        return findBinaryIndex(arr, x, start, mid - 1);
    // If element at mid is smaller than x,
    // search in the right half of mid
    else
        return findBinaryIndex(arr, x, mid + 1, end);
}
function getCellIndex(cell, grid, includeHidden) {
    if (includeHidden === void 0) { includeHidden = false; }
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var match = cell.match(/([a-zA-Z]*)(\d*)/);
    if (!match || !match[1] || !match[2]) {
        return;
    }
    var r = parseInt(match[2], 10);
    var arr = grid.data[includeHidden ? "_initOrder" : "_order"];
    while (arr.length < r - 1) {
        arr.push({ id: arr.length });
    }
    return {
        col: getNumberFromLetter(match[1]),
        row: findBinaryIndex(arr, r, 0, r),
    };
}
exports.getCellIndex = getCellIndex;
function getCellNameByIndex(rowIndex, colIndex, grid) {
    var row = grid.data.getId(rowIndex) || rowIndex + 1;
    return "".concat(getLetterFromNumber(colIndex)).concat(row);
}
exports.getCellNameByIndex = getCellNameByIndex;
function getCellNameById(grid, row, col) {
    var _a;
    if (!row) {
        return "";
    }
    var rowId = ((_a = grid.data.getItem(row)) === null || _a === void 0 ? void 0 : _a.$index) || row;
    var colId = (0, core_1.findIndex)(grid.config.columns, function (item) { return col.toString() === item.id; });
    if (colId < 0 && +col > 0) {
        colId = +col;
    }
    if (rowId < 0 || colId < 0) {
        return;
    }
    return "".concat(getLetterFromNumber(colId)).concat(rowId);
}
exports.getCellNameById = getCellNameById;
function getCellInfo(cell, page, grid) {
    var cellId = getCellIds(cell, grid);
    if (cellId.start) {
        cellId = cellId.start;
    }
    if (!cellId || !cell) {
        return {
            locked: false,
        };
    }
    return page.getCell(cellId.row, cellId.col) || {};
}
exports.getCellInfo = getCellInfo;
function isRangeId(id) {
    return new RegExp(/([A-Z]+\d+:[A-Z]+\d+)|(?:,)([A-Z]+\d+)/).test(id);
}
exports.isRangeId = isRangeId;
function getRangeIndexes(range, grid, includeHidden) {
    if (includeHidden === void 0) { includeHidden = false; }
    var cells;
    if (range.includes(":")) {
        cells = range.split(":").map(function (item) { return getCellIndex(item, grid, includeHidden); });
    }
    else {
        cells = range.split(",").map(function (item) { return getCellIndex(item, grid, includeHidden); });
    }
    var res = {
        start: {
            row: Math.min(cells[0].row, cells[1].row),
            col: Math.min(cells[0].col, cells[1].col),
        },
        end: {
            row: Math.max(cells[0].row, cells[1].row),
            col: Math.max(cells[0].col, cells[1].col),
        },
    };
    return res;
}
exports.getRangeIndexes = getRangeIndexes;
function getRangeArray(range, grid, dir) {
    if (dir === void 0) { dir = "row"; }
    var arr = [];
    var opp = dir === "row" ? "col" : "row";
    if (range) {
        var _a = getRangeIndexes(range, grid, true), start = _a.start, end = _a.end;
        for (var i = start[dir]; i <= end[dir]; i++) {
            for (var k = start[opp]; k <= end[opp]; k++) {
                var cell = dir === "row" ? getCellNameById(grid, i + 1, k) : getCellNameById(grid, k + 1, i);
                arr.push(cell);
            }
        }
    }
    return arr;
}
exports.getRangeArray = getRangeArray;
function getRangeMatrix(range, grid, dir) {
    if (dir === void 0) { dir = "row"; }
    var arr = [];
    var opp = dir === "row" ? "col" : "row";
    if (range) {
        var _a = getRangeIndexes(range, grid), start = _a.start, end = _a.end;
        for (var i = start[dir]; i <= end[dir]; i++) {
            var f = [];
            for (var k = start[opp]; k <= end[opp]; k++) {
                var cell = dir === "row" ? getCellNameByIndex(i, k, grid) : getCellNameByIndex(k, i, grid);
                f.push(cell);
            }
            arr.push(f);
        }
    }
    return arr;
}
exports.getRangeMatrix = getRangeMatrix;
function getNextRangeCell(range, current, grid, dir) {
    if (dir === void 0) { dir = "row"; }
    var rangeArr = getRangeArray(range, grid, dir);
    return rangeArr[rangeArr.indexOf(current) + 1] || rangeArr[0];
}
exports.getNextRangeCell = getNextRangeCell;
function getPrevRangeCell(range, current, grid, dir) {
    if (dir === void 0) { dir = "row"; }
    var rangeArr = getRangeArray(range, grid, dir);
    return rangeArr[rangeArr.indexOf(current) - 1] || rangeArr[rangeArr.length - 1];
}
exports.getPrevRangeCell = getPrevRangeCell;
function getCellsArray(cells, grid) {
    if (!cells) {
        return;
    }
    var arr = cells.split(",");
    return arr.reduce(function (total, cell) {
        cell = cell.toUpperCase();
        if (isRangeId(cell)) {
            total = total.concat(getRangeArray(cell, grid));
        }
        else {
            total.push(cell);
        }
        return total;
    }, []);
}
exports.getCellsArray = getCellsArray;
function extendConfig(target, source, deep) {
    if (target === void 0) { target = {}; }
    if (source === void 0) { source = {}; }
    if (deep === void 0) { deep = true; }
    for (var key in target) {
        var sobj = source[key];
        var tobj = target[key];
        if (tobj && "validate" in tobj) {
            source[key] = tobj.validate(sobj) ? sobj : tobj.default;
            target[key] = tobj.default;
        }
    }
    return (0, core_1.extend)(target, source, deep);
}
exports.extendConfig = extendConfig;
function cleanActionConfig(config) {
    var dataStore = config.dataStore, sheets = config.sheets, editLine = config.editLine, grid = config.grid, activePage = config.activePage, spreadsheet = config.spreadsheet, mouseEvent = config.mouseEvent, events = config.events, actionConfig = __rest(config, ["dataStore", "sheets", "editLine", "grid", "activePage", "spreadsheet", "mouseEvent", "events"]);
    return actionConfig;
}
exports.cleanActionConfig = cleanActionConfig;
function isWasmSupported() {
    try {
        if (typeof WebAssembly === "object" && typeof WebAssembly.instantiate === "function") {
            var module_1 = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));
            if (module_1 instanceof WebAssembly.Module) {
                return new WebAssembly.Instance(module_1) instanceof WebAssembly.Instance;
            }
        }
    }
    catch (e) {
        return false;
    }
    return false;
}
exports.isWasmSupported = isWasmSupported;
function fetchFile(url, method, responseType) {
    return new Promise(function (res, rej) {
        var req = new XMLHttpRequest();
        req.open(method, url, true);
        req.responseType = responseType;
        req.onload = function () {
            var response = req.response;
            if (response) {
                res(response);
            }
            else {
                rej(req);
            }
        };
        req.onerror = function () { return rej(req); };
        req.send(null);
    });
}
exports.fetchFile = fetchFile;
function getSeparatorsFromMSO(html) {
    var separators = { decimal: ".", thousands: "," };
    function getSymbol(str) {
        var splitted = html.split(str)[1];
        var symbol = splitted.split(";")[0];
        return cleanMSO(symbol);
    }
    if (html.includes("mso-displayed-decimal-separator")) {
        separators.decimal = getSymbol("mso-displayed-decimal-separator:");
    }
    if (html.includes("mso-displayed-thousand-separator")) {
        separators.thousands = getSymbol("mso-displayed-thousand-separator:");
    }
    return separators;
}
exports.getSeparatorsFromMSO = getSeparatorsFromMSO;
function cleanMSO(str) {
    return str.replace(/[\"&\\]/g, "");
}
function analyzeMSOFormat(format, separators) {
    var positive = format.split(";")[0];
    if (!separators) {
        separators = (0, format_1.getSeparators)();
    }
    var clean = cleanMSO(positive);
    if (clean.includes("[$") && //not sure for this check
        (clean.includes("d") ||
            clean.includes("m") ||
            clean.includes("y") ||
            clean.includes("h") ||
            clean.includes("s"))) {
        clean = clean.substr(clean.indexOf("]") + 1);
    }
    if ((0, date_1.isDateFormat)(clean) && clean.includes("[")) {
        clean = clean.replace("[", "").replace("]", "");
    }
    if (!clean.includes("0") && !clean.includes("#")) {
    }
    clean = clean.replace(",", separators.thousands).replace(".", separators.decimal);
    return clean;
}
exports.analyzeMSOFormat = analyzeMSOFormat;
function parseHtmlTable(html) {
    var _a, _b;
    var styleString = html.substring(html.indexOf("<style"), html.indexOf("</style>"));
    var css = {};
    var msoFormat = {};
    if (styleString.includes(".x")) {
        var classesString = styleString.substring(styleString.indexOf(".x"), styleString.indexOf("-->"));
        var classes = classesString.split("\r\n.");
        classes[0] = classes[0].substr(1);
        for (var _i = 0, classes_1 = classes; _i < classes_1.length; _i++) {
            var item = classes_1[_i];
            if (!item)
                continue;
            var name_1 = item.substring(0, item.indexOf("\r\n\t"));
            if (item.includes("mso-number-format")) {
                var msoIndex = item.indexOf("mso-number-format");
                var mso = item.split("mso-number-format")[1];
                var msoIndexLast = mso.indexOf('";');
                mso = mso.substring(0, msoIndexLast > -1 ? msoIndexLast : mso.indexOf(";"));
                msoFormat[name_1] = mso.split(mso.indexOf(':"') > -1 ? ':"' : ":")[1];
                item = item.substring(0, msoIndex) + item.substring(msoIndexLast + 1);
            }
            css[name_1] = stylesFromString(item.substring(item.indexOf("{") + 1, item.indexOf("}")).trim());
        }
    }
    var tableString = html.substring(html.indexOf("<table"), html.indexOf("</table>") + 8);
    var container = document.createElement("div");
    container.innerHTML = tableString;
    var table = container.querySelector("table");
    var col = container.querySelector("col");
    var rowsCount = table.rows.length;
    var colsCount = 0;
    for (var i = 0; i < rowsCount; i++) {
        var cols = ((_b = (_a = table.rows[i]) === null || _a === void 0 ? void 0 : _a.cells) === null || _b === void 0 ? void 0 : _b.length) || 0;
        colsCount = Math.max(colsCount, cols);
    }
    var grid = new Array(rowsCount);
    for (var i = 0; i < rowsCount; i++) {
        grid[i] = new Array(colsCount);
    }
    var separators = (0, format_1.getSeparators)();
    if (msoFormat) {
        separators = getSeparatorsFromMSO(html);
    }
    var spans = [];
    for (var i = 0; i < table.rows.length; i++) {
        var row = table.rows[i];
        var colIndex = 0;
        for (var d = 0; d < row.cells.length; d++) {
            while (grid[i][colIndex] !== undefined) {
                colIndex++;
            }
            var cell = row.cells[d];
            var rowSpan = cell.rowSpan, colSpan = cell.colSpan, innerText = cell.innerText, classList = cell.classList;
            if (rowSpan > 1 || colSpan > 1) {
                var span = {
                    from: { row: i, column: colIndex },
                    to: { row: i + rowSpan - 1, column: colIndex + colSpan - 1 },
                };
                spans.push(span);
                for (var c = colIndex; c < colSpan + colIndex - 1; c++) {
                    grid[i][c + 1] = { val: "", style: {}, format: "" };
                    spans.push(null);
                }
                for (var r = 1; r < rowSpan; r++) {
                    if (i + r < rowsCount) {
                        grid[i + r][colIndex] = { val: "", style: {}, format: "" };
                        spans.push(null);
                    }
                    for (var c = colIndex; c < colIndex + colSpan - 1; c++) {
                        grid[i + r][colIndex + 1] = { val: "", style: {}, format: "" };
                        spans.push(null);
                    }
                }
            }
            else {
                spans.push(null);
            }
            var val = innerText.trim().replace(/\n/, "");
            var style = {};
            var format = "";
            for (var s = 0; s < classList.length; s++) {
                var classItem = classList[s];
                if (css[classItem]) {
                    style = __assign(__assign({}, style), css[classItem]);
                }
                if (msoFormat[classItem]) {
                    format = analyzeMSOFormat(msoFormat[classItem], separators);
                }
            }
            style = __assign(__assign({}, style), stylesFromString(cell.getAttribute("style")));
            grid[i][colIndex] = { val: val, style: style, format: format };
            colIndex++;
        }
    }
    var values = [];
    var styles = [];
    var formats = [];
    grid.forEach(function (r) {
        r.forEach(function (c) {
            values.push(c.val);
            styles.push(c.style);
            formats.push(c.format);
        });
    });
    return { values: values, styles: styles, rowsCount: rowsCount, colsCount: colsCount, formats: formats, spans: spans };
}
exports.parseHtmlTable = parseHtmlTable;
function parseFromText(str) {
    var parsed = str.split(/\n/);
    var values = [];
    for (var _i = 0, parsed_1 = parsed; _i < parsed_1.length; _i++) {
        var item = parsed_1[_i];
        var newItems = item.split(/\t/);
        values = values.concat(newItems);
    }
    var rowsCount = parsed.length;
    var colsCount = parsed[0].split("\t").length;
    return { values: values, rowsCount: rowsCount, colsCount: colsCount, formats: [""] };
}
exports.parseFromText = parseFromText;
function stylesFromString(str) {
    if (!str)
        return;
    var styles = str.split(";");
    var objStyles = {};
    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
        var style = styles_1[_i];
        if (!style)
            continue;
        var keys = style.trim().split(":");
        if (keys[0] === "height" || keys[0] === "width")
            continue;
        objStyles[keys[0]] = keys[1];
    }
    return objStyles;
}
function getTextHeight(text, width) {
    var el = document.createElement("div");
    el.style.width = "".concat(width, "px");
    el.innerText = text;
    el.classList.add("dhx-spreadsheet-height-detector");
    document.body.appendChild(el);
    var height = el.scrollHeight;
    el.remove();
    return height;
}
exports.getTextHeight = getTextHeight;
function convertStyles(styles) {
    if (!styles)
        return {};
    var justify = null;
    var space = "nowrap";
    var wordBreak = "normal";
    var align;
    var css = __assign({}, styles);
    var textAlign = css.textAlign || css["text-align"];
    var verticalAlign = css.verticalAlign || css["vertical-align"];
    if (textAlign) {
        switch (textAlign) {
            case "left":
                justify = "flex-start";
                break;
            case "center":
                justify = "center";
                break;
            case "right":
                justify = "flex-end";
                break;
        }
        css["justify-content"] = justify;
    }
    if (verticalAlign) {
        switch (verticalAlign) {
            case "top":
                align = "flex-start";
                break;
            case "center":
                align = "center";
                break;
            case "bottom":
                align = "flex-end";
                break;
        }
        css["align-items"] = "".concat(align, " !important");
    }
    var multiline = styles.multiline, color = styles.color, background = styles.background, bc = styles["background-color"];
    if (multiline) {
        space = multiline === "wrap" ? "normal" : "nowrap";
        wordBreak = multiline === "wrap" ? "break-all" : "normal";
        css["white-space"] = space;
        css["word-break"] = wordBreak;
    }
    if (color) {
        css["color"] = color.startsWith("#") ? (0, core_1.rgbToHex)(color) : color;
    }
    if (bc) {
        css["background-color"] = bc.startsWith("#") ? (0, core_1.rgbToHex)(bc) : bc;
    }
    if (background) {
        css["background"] = background.startsWith("#") ? (0, core_1.rgbToHex)(background) : background;
    }
    return css;
}
exports.convertStyles = convertStyles;
function isMac() {
    var _a;
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    return !!((_a = navigator.userAgentData) === null || _a === void 0 ? void 0 : _a.platform.match(/(Mac)/i));
}
exports.isMac = isMac;
function getCellNode(cell, grid, includeHidden) {
    if (includeHidden === void 0) { includeHidden = false; }
    var _a = getCellIndex(cell, grid, includeHidden), row = _a.row, col = _a.col;
    var gridNode = grid.getRootNode();
    var rowNode = gridNode.querySelector(".dhx_grid_data [data-dhx-id='".concat(row + 1, "']"));
    if (!rowNode)
        return;
    return rowNode.querySelector("[data-dhx-col-id='".concat(col, "']"));
}
exports.getCellNode = getCellNode;
function isURL(text) {
    if (typeof text !== "string" || text.includes(" "))
        return false;
    var urlRegex = /^(https?:\/\/)?((([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,})|localhost)(:\d+)?(\/.*)?$/;
    return urlRegex.test(text) ? text : false;
}
exports.isURL = isURL;
function doesContainUrl(value) {
    if (typeof value !== "string")
        return;
    return value.split(" ").find(function (text) { return isURL(text); });
}
exports.doesContainUrl = doesContainUrl;
function getStylesObject(claasName) {
    if (claasName === void 0) { claasName = ""; }
    var cssClasses = claasName || "";
    var css = cssClasses.split(" ") || [];
    var styles = {};
    css.forEach(function (className) {
        styles = __assign(__assign({}, styles), dhx.css.get(className));
    });
    return styles;
}
exports.getStylesObject = getStylesObject;
function checkSpan(_a, leftSplit, topSplit, grid) {
    var from = _a.from, to = _a.to;
    var fColumn = from.column, fRow = from.row;
    var tColumn = to.column, tRow = to.row;
    var firstCell = getCellNameByIndex(fRow, fColumn + 1, grid);
    var lastCell = getCellNameByIndex(tRow, tColumn + 1, grid);
    return checkSpanByNames("".concat(firstCell, ":").concat(lastCell), leftSplit, topSplit, grid);
}
exports.checkSpan = checkSpan;
function checkSpanByNames(cell, leftSplit, topSplit, grid) {
    var _a = cell.split(":"), firstCell = _a[0], lastCell = _a[1];
    return (0, core_1.compare)(isCellFixed(firstCell, leftSplit, topSplit, grid), isCellFixed(lastCell, leftSplit, topSplit, grid));
}
exports.checkSpanByNames = checkSpanByNames;
function isCellFixed(cell, leftSplit, topSplit, grid) {
    var _a = getCellIds(cell, grid), col = _a.col, row = _a.row;
    var ls = leftSplit !== null && leftSplit !== void 0 ? leftSplit : -1;
    var ts = topSplit !== null && topSplit !== void 0 ? topSplit : -1;
    var isLeftFixed = ls > col;
    var isTopFixed = ts > row;
    return { isTopFixed: isTopFixed, isLeftFixed: isLeftFixed };
}
exports.isCellFixed = isCellFixed;
function isCellSpaned(cell, merged) {
    if (!(merged === null || merged === void 0 ? void 0 : merged.length))
        return;
    var _a = (0, muon_1.str2pos)(cell), row = _a[0], col = _a[1];
    return merged.find(function (_a) {
        var from = _a.from, to = _a.to;
        var fRow = from.row, fCol = from.column;
        var tRow = to.row, tCol = to.column;
        return fRow <= row && tRow >= row && fCol <= col && tCol >= col;
    });
}
exports.isCellSpaned = isCellSpaned;
function showAlert(text) {
    (0, ts_message_1.alert)({
        header: en_1.default.alertTitle,
        text: text,
        buttons: [en_1.default.ok],
        buttonsAlignment: "right",
    });
}
exports.showAlert = showAlert;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsMixin = exports.EventSystem = void 0;
var EventSystem = /** @class */ (function () {
    function EventSystem(context) {
        this.events = {};
        this.context = context || this;
    }
    EventSystem.prototype.on = function (name, callback, context) {
        var event = name.toLowerCase();
        this.events[event] = this.events[event] || [];
        this.events[event].push({ callback: callback, context: context || this.context });
    };
    EventSystem.prototype.detach = function (name, context) {
        var event = name.toLowerCase();
        var eStack = this.events[event];
        if (context && eStack && eStack.length) {
            for (var i = eStack.length - 1; i >= 0; i--) {
                if (eStack[i].context === context) {
                    eStack.splice(i, 1);
                }
            }
        }
        else {
            this.events[event] = [];
        }
    };
    EventSystem.prototype.fire = function (name, args) {
        if (typeof args === "undefined") {
            args = [];
        }
        var event = name.toLowerCase();
        if (this.events[event]) {
            var res = this.events[event].map(function (e) { return e.callback.apply(e.context, args); });
            return !res.includes(false);
        }
        return true;
    };
    EventSystem.prototype.clear = function () {
        this.events = {};
    };
    return EventSystem;
}());
exports.EventSystem = EventSystem;
function EventsMixin(obj) {
    obj = obj || {};
    var eventSystem = new EventSystem(obj);
    obj.detachEvent = eventSystem.detach.bind(eventSystem);
    obj.attachEvent = eventSystem.on.bind(eventSystem);
    obj.callEvent = eventSystem.fire.bind(eventSystem);
}
exports.EventsMixin = EventsMixin;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPageLinksCss = exports.getLabelStyle = exports.getPageInlineCss = exports.fitPosition = exports.calculatePosition = exports.getRealPosition = exports.isFirefox = exports.isSafari = exports.isIE = exports.getScrollbarHeight = exports.getScrollbarWidth = exports.getBox = exports.locateNodeByClassName = exports.locate = exports.locateNode = exports.eventHandler = exports.toNode = void 0;
function toNode(node) {
    var _a;
    return typeof node === "string"
        ? document.getElementById(node) || document.querySelector("[data-cell-id=".concat(node, "]")) || document.querySelector(node) || ((_a = document.querySelector("[data-dhx-root-id=".concat(node, "]"))) === null || _a === void 0 ? void 0 : _a.parentElement) || document.body
        : node || document.body;
}
exports.toNode = toNode;
function eventHandler(prepare, hash, afterCall) {
    var keys = Object.keys(hash);
    return function (ev) {
        var data = prepare(ev);
        if (data !== undefined) {
            var node = ev.target;
            outer_block: while (node) {
                var cssstring = node.getAttribute ? node.getAttribute("class") || "" : "";
                if (cssstring.length) {
                    var css = cssstring.split(" ");
                    for (var j = 0; j < keys.length; j++) {
                        if (css.includes(keys[j])) {
                            if (hash[keys[j]](ev, data) === false || ev.cancelBubble)
                                return false;
                            else
                                break outer_block;
                        }
                    }
                }
                node = node.parentNode;
            }
        }
        if (typeof afterCall === "function")
            afterCall(ev);
        return true;
    };
}
exports.eventHandler = eventHandler;
function locateNode(target, attr, dir) {
    if (attr === void 0) { attr = "data-dhx-id"; }
    if (dir === void 0) { dir = "target"; }
    if (target instanceof Event) {
        target = target[dir];
    }
    while (target) {
        if (target.getAttribute && target.getAttribute(attr)) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNode = locateNode;
function locate(target, attr) {
    if (attr === void 0) { attr = "data-dhx-id"; }
    var node = locateNode(target, attr);
    return node ? node.getAttribute(attr) : "";
}
exports.locate = locate;
function locateNodeByClassName(target, className) {
    if (!(target instanceof Element)) {
        target = target.target;
    }
    while (target) {
        if (className) {
            if (target.classList && target.classList.contains(className)) {
                return target;
            }
        }
        else if (target.getAttribute && target.getAttribute("data-dhx-id")) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNodeByClassName = locateNodeByClassName;
function getBox(elem) {
    var box = elem.getBoundingClientRect();
    var body = document.body;
    var scrollTop = window.pageYOffset || body.scrollTop;
    var scrollLeft = window.pageXOffset || body.scrollLeft;
    var top = box.top + scrollTop;
    var left = box.left + scrollLeft;
    var right = body.offsetWidth - box.right;
    var bottom = body.offsetHeight - box.bottom;
    var width = box.right - box.left;
    var height = box.bottom - box.top;
    return { top: top, left: left, right: right, bottom: bottom, width: width, height: height };
}
exports.getBox = getBox;
var scrollWidth = -1;
function getScrollbarWidth() {
    if (scrollWidth > -1) {
        return scrollWidth;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollWidth;
}
exports.getScrollbarWidth = getScrollbarWidth;
var scrollHeight = -1;
function getScrollbarHeight() {
    if (scrollHeight > -1) {
        return scrollHeight;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);
    return scrollHeight;
}
exports.getScrollbarHeight = getScrollbarHeight;
function isIE() {
    var ua = window.navigator.userAgent;
    return ua.includes("MSIE ") || ua.includes("Trident/");
}
exports.isIE = isIE;
function isSafari() {
    var check = function (str) { return str.test(window.navigator.userAgent); };
    var chrome = check(/Chrome/);
    var firefox = check(/Firefox/);
    return !chrome && !firefox && check(/Safari/);
}
exports.isSafari = isSafari;
function isFirefox() {
    var check = function (str) { return str.test(window.navigator.userAgent); };
    var chrome = check(/Chrome/);
    var safari = check(/Safari/);
    return !chrome && !safari && check(/Firefox/);
}
exports.isFirefox = isFirefox;
function getRealPosition(node) {
    var rects = node.getBoundingClientRect();
    return {
        left: rects.left + window.pageXOffset,
        right: rects.right + window.pageXOffset,
        top: rects.top + window.pageYOffset,
        bottom: rects.bottom + window.pageYOffset,
    };
}
exports.getRealPosition = getRealPosition;
function getWindowBorders() {
    return {
        rightBorder: window.pageXOffset + window.innerWidth,
        bottomBorder: window.pageYOffset + window.innerHeight,
    };
}
function horizontalCentering(pos, width, rightBorder) {
    var nodeWidth = pos.right - pos.left;
    var diff = (width - nodeWidth) / 2;
    var left = pos.left - diff;
    var right = pos.right + diff;
    if (left >= 0 && right <= rightBorder) {
        return left;
    }
    if (left < 0) {
        return 0;
    }
    return rightBorder - width;
}
function verticalCentering(pos, height, bottomBorder) {
    var nodeHeight = pos.bottom - pos.top;
    var diff = (height - nodeHeight) / 2;
    var top = pos.top - diff;
    var bottom = pos.bottom + diff;
    if (top >= 0 && bottom <= bottomBorder) {
        return top;
    }
    if (top < 0) {
        return 0;
    }
    return bottomBorder - height;
}
function placeBottomOrTop(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var bottomDiff = bottomBorder - pos.bottom - config.height;
    var topDiff = pos.top - config.height;
    if (config.mode === "bottom") {
        if (bottomDiff >= 0) {
            top = pos.bottom;
        }
        else if (topDiff >= 0) {
            top = topDiff;
        }
    }
    else {
        if (topDiff >= 0) {
            top = topDiff;
        }
        else if (bottomDiff >= 0) {
            top = pos.bottom;
        }
    }
    if (bottomDiff < 0 && topDiff < 0) {
        if (config.auto) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return placeRightOrLeft(pos, __assign(__assign({}, config), { mode: "right", auto: false }));
        }
        top = bottomDiff > topDiff ? pos.bottom : topDiff;
    }
    if (config.centering) {
        left = horizontalCentering(pos, config.width, rightBorder);
    }
    else {
        var leftDiff = rightBorder - pos.left - config.width;
        var rightDiff = pos.right - config.width;
        if (leftDiff >= 0) {
            left = pos.left;
        }
        else if (rightDiff >= 0) {
            left = rightDiff;
        }
        else {
            left = rightDiff > leftDiff ? pos.left : rightDiff;
        }
    }
    return { left: left, top: top };
}
function placeRightOrLeft(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var rightDiff = rightBorder - pos.right - config.width;
    var leftDiff = pos.left - config.width;
    if (config.mode === "right") {
        if (rightDiff >= 0) {
            left = pos.right;
        }
        else if (leftDiff >= 0) {
            left = leftDiff;
        }
    }
    else {
        if (leftDiff >= 0) {
            left = leftDiff;
        }
        else if (rightDiff >= 0) {
            left = pos.right;
        }
    }
    if (leftDiff < 0 && rightDiff < 0) {
        if (config.auto) {
            return placeBottomOrTop(pos, __assign(__assign({}, config), { mode: "bottom", auto: false }));
        }
        left = leftDiff > rightDiff ? leftDiff : pos.right;
    }
    if (config.centering) {
        top = verticalCentering(pos, config.height, bottomBorder);
    }
    else {
        var bottomDiff = pos.bottom - config.height;
        var topDiff = bottomBorder - pos.top - config.height;
        if (topDiff >= 0) {
            top = pos.top;
        }
        else if (bottomDiff > 0) {
            top = bottomDiff;
        }
        else {
            top = bottomDiff > topDiff ? bottomDiff : pos.top;
        }
    }
    return { left: left, top: top };
}
function calculatePosition(pos, config) {
    var _a = config.mode === "bottom" || config.mode === "top"
        ? placeBottomOrTop(pos, config)
        : placeRightOrLeft(pos, config), left = _a.left, top = _a.top;
    return {
        left: Math.round(left) + "px",
        top: Math.round(top) + "px",
        minWidth: Math.round(config.width) + "px",
        position: "absolute",
    };
}
exports.calculatePosition = calculatePosition;
function fitPosition(node, config) {
    return calculatePosition(getRealPosition(node), config);
}
exports.fitPosition = fitPosition;
var checkCrossLink = function (sheet) { return sheet.href
    && sheet.ownerNode.outerHTML.indexOf(window.location.origin) === -1
    && (sheet.ownerNode.outerHTML.indexOf("http") !== -1
        || sheet.ownerNode.outerHTML.indexOf("https") !== -1
        || sheet.ownerNode.outerHTML.indexOf("href=\"//") !== -1); };
function getPageInlineCss() {
    var css = [];
    for (var i = 0; i < document.styleSheets.length; i++) {
        var sheet = document.styleSheets[i];
        if (!checkCrossLink(sheet)) {
            var rules = "cssRules" in sheet && sheet.cssRules.length ? sheet.cssRules : sheet.rules;
            for (var j = 0; j < rules.length; j++) {
                var rule = rules[j];
                if ("cssText" in rule) {
                    css.push(rule.cssText);
                }
                else {
                    css.push("".concat(rule.selectorText, " {\n").concat(rule.style.cssText, "\n}\n"));
                }
            }
        }
    }
    return css.join("\n");
}
exports.getPageInlineCss = getPageInlineCss;
function getLabelStyle(config) {
    var helpMessage = config.helpMessage, type = config.type, labelWidth = config.labelWidth, label = config.label;
    var isZero = labelWidth && labelWidth.toString().startsWith("0");
    var required = type !== "text" && config.required;
    if (!helpMessage && !required && (!label || (label && isZero)) && (!labelWidth || isZero)) {
        return false;
    }
    return {
        style: (label || labelWidth) && !isZero && { width: labelWidth, "max-width": "100%" },
        label: label && isZero ? null : label,
    };
}
exports.getLabelStyle = getLabelStyle;
// const checkCrossLink = sheet => sheet.href && !sheet.href.startsWith(window.location.origin);
function getPageLinksCss(exportStyles) {
    var css = [];
    if (exportStyles) {
        exportStyles.forEach(function (link) { return css.push("<link href=\"".concat(link, "\" rel=\"stylesheet\"/>")); });
    }
    else {
        for (var i = 0; i < document.styleSheets.length; i++) {
            var sheet = document.styleSheets[i];
            if (checkCrossLink(sheet)) {
                css.push("<link href=\"".concat(sheet.href, "\" rel=\"stylesheet\"/>"));
            }
        }
    }
    return css.join("\n");
}
exports.getPageLinksCss = getPageLinksCss;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemEvent = exports.ValidationStatus = exports.FormEvents = exports.ClearMethod = void 0;
var ClearMethod;
(function (ClearMethod) {
    ClearMethod["value"] = "value";
    ClearMethod["validation"] = "validation";
})(ClearMethod || (exports.ClearMethod = ClearMethod = {}));
var FormEvents;
(function (FormEvents) {
    FormEvents["beforeChange"] = "beforeChange";
    FormEvents["change"] = "change";
    FormEvents["click"] = "click";
    FormEvents["focus"] = "focus";
    FormEvents["blur"] = "blur";
    FormEvents["keydown"] = "keydown";
    FormEvents["beforeShow"] = "beforeShow";
    FormEvents["afterShow"] = "afterShow";
    FormEvents["beforeHide"] = "beforeHide";
    FormEvents["afterHide"] = "afterHide";
    FormEvents["afterValidate"] = "afterValidate";
    FormEvents["beforeValidate"] = "beforeValidate";
    FormEvents["beforeChangeProperties"] = "beforeChangeProperties";
    FormEvents["afterChangeProperties"] = "afterChangeProperties";
    FormEvents["beforeSend"] = "beforesend";
    FormEvents["afterSend"] = "aftersend";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    FormEvents["buttonClick"] = "buttonClick";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    FormEvents["validationFail"] = "validationfail";
})(FormEvents || (exports.FormEvents = FormEvents = {}));
var ValidationStatus;
(function (ValidationStatus) {
    ValidationStatus[ValidationStatus["pre"] = 0] = "pre";
    ValidationStatus[ValidationStatus["error"] = 1] = "error";
    ValidationStatus[ValidationStatus["success"] = 2] = "success";
})(ValidationStatus || (exports.ValidationStatus = ValidationStatus = {}));
var ItemEvent;
(function (ItemEvent) {
    ItemEvent["click"] = "click";
    ItemEvent["beforeChange"] = "beforeChange";
    ItemEvent["change"] = "change";
    ItemEvent["input"] = "input";
    ItemEvent["focus"] = "focus";
    ItemEvent["blur"] = "blur";
    ItemEvent["keydown"] = "keydown";
    ItemEvent["beforeChangeOptions"] = "beforeChangeOptions";
    ItemEvent["changeOptions"] = "changeOptions";
    ItemEvent["beforeShow"] = "beforeShow";
    ItemEvent["afterShow"] = "afterShow";
    ItemEvent["beforeHide"] = "beforeHide";
    ItemEvent["afterHide"] = "afterHide";
    ItemEvent["beforeValidate"] = "beforeValidate";
    ItemEvent["afterValidate"] = "afterValidate";
    ItemEvent["beforeUploadFile"] = "beforeUploadFile";
    ItemEvent["uploadFile"] = "uploadfile";
    ItemEvent["uploadBegin"] = "uploadBegin";
    ItemEvent["uploadComplete"] = "uploadComplete";
    ItemEvent["uploadFail"] = "uploadFail";
    ItemEvent["uploadProgress"] = "uploadProgress";
    ItemEvent["beforeChangeProperties"] = "beforeChangeProperties";
    ItemEvent["afterChangeProperties"] = "afterChangeProperties";
})(ItemEvent || (exports.ItemEvent = ItemEvent = {}));


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterConditions = exports.Actions = exports.SpreadsheetEvents = void 0;
var SpreadsheetEvents;
(function (SpreadsheetEvents) {
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeValueChange"] = "beforeValueChange";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterValueChange"] = "afterValueChange";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeStyleChange"] = "beforeStyleChange";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterStyleChange"] = "afterStyleChange";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeFormatChange"] = "beforeFormatChange";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterFormatChange"] = "afterFormatChange";
    SpreadsheetEvents["beforeSelectionSet"] = "beforeSelectionSet";
    SpreadsheetEvents["afterSelectionSet"] = "afterSelectionSet";
    SpreadsheetEvents["beforeSelectionRemove"] = "beforeSelectionRemove";
    SpreadsheetEvents["afterSelectionRemove"] = "afterSelectionRemove";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeRowAdd"] = "beforeRowAdd";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterRowAdd"] = "afterRowAdd";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeRowDelete"] = "beforeRowDelete";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterRowDelete"] = "afterRowDelete";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeColumnAdd"] = "beforeColumnAdd";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterColumnAdd"] = "afterColumnAdd";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeColumnDelete"] = "beforeColumnDelete";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterColumnDelete"] = "afterColumnDelete";
    SpreadsheetEvents["beforeFocusSet"] = "beforeFocusSet";
    SpreadsheetEvents["afterFocusSet"] = "afterFocusSet";
    SpreadsheetEvents["beforeEditStart"] = "beforeEditStart";
    SpreadsheetEvents["afterEditStart"] = "afterEditStart";
    SpreadsheetEvents["beforeAction"] = "beforeAction";
    SpreadsheetEvents["afterAction"] = "afterAction";
    SpreadsheetEvents["beforeEditEnd"] = "beforeEditEnd";
    SpreadsheetEvents["afterEditEnd"] = "afterEditEnd";
    SpreadsheetEvents["groupFill"] = "groupFill";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeSheetAdd"] = "beforeSheetAdd";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterSheetAdd"] = "afterSheetAdd";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeSheetRemove"] = "beforeSheetRemove";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterSheetRemove"] = "afterSheetRemove";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeSheetRename"] = "beforeSheetRename";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterSheetRename"] = "afterSheetRename";
    SpreadsheetEvents["beforeSheetChange"] = "beforeSheetChange";
    SpreadsheetEvents["afterSheetChange"] = "afterSheetChange";
    /** @deprecated use beforeAction instead */
    SpreadsheetEvents["beforeSheetClear"] = "beforeSheetClear";
    /** @deprecated use afterAction instead */
    SpreadsheetEvents["afterSheetClear"] = "afterSheetClear";
    // private
    SpreadsheetEvents["beforeClear"] = "beforeClear";
    SpreadsheetEvents["afterClear"] = "afterClear";
    SpreadsheetEvents["editLineInput"] = "editLineInput";
    SpreadsheetEvents["editLineFocus"] = "editLineFocus";
    SpreadsheetEvents["editLineBlur"] = "editLineBlur";
    SpreadsheetEvents["cellInput"] = "cellInput";
    SpreadsheetEvents["gridRedraw"] = "gridRedraw";
    SpreadsheetEvents["afterPopupHide"] = "afterPopupHide";
})(SpreadsheetEvents || (exports.SpreadsheetEvents = SpreadsheetEvents = {}));
var Actions;
(function (Actions) {
    Actions["setCellStyle"] = "setCellStyle";
    Actions["setCellValue"] = "setCellValue";
    Actions["setCellFormat"] = "setCellFormat";
    Actions["removeCellStyles"] = "removeCellStyles";
    Actions["lockCell"] = "lockCell";
    Actions["deleteRow"] = "deleteRow";
    Actions["addRow"] = "addRow";
    Actions["deleteColumn"] = "deleteColumn";
    Actions["addColumn"] = "addColumn";
    Actions["groupAction"] = "groupAction";
    Actions["groupRowAction"] = "groupRowAction";
    Actions["groupColAction"] = "groupColAction";
    Actions["addSheet"] = "addSheet";
    Actions["deleteSheet"] = "deleteSheet";
    Actions["renameSheet"] = "renameSheet";
    Actions["clearSheet"] = "clearSheet";
    Actions["clear"] = "clear";
    Actions["resizeCol"] = "resizeCol";
    Actions["resizeRow"] = "resizeRow";
    Actions["setValidation"] = "setValidation";
    Actions["sortCells"] = "sortCells";
    Actions["insertLink"] = "insertLink";
    Actions["fitColumn"] = "fitColumn";
    Actions["filter"] = "filter";
    Actions["merge"] = "merge";
    Actions["unmerge"] = "unmerge";
})(Actions || (exports.Actions = Actions = {}));
var FilterConditions;
(function (FilterConditions) {
    FilterConditions["e"] = "e";
    FilterConditions["ne"] = "ne";
    FilterConditions["tc"] = "tc";
    FilterConditions["tdc"] = "tdc";
    FilterConditions["ts"] = "ts";
    FilterConditions["te"] = "te";
    FilterConditions["tex"] = "tex";
    FilterConditions["d"] = "d";
    FilterConditions["db"] = "db";
    FilterConditions["da"] = "da";
    FilterConditions["gt"] = "gt";
    FilterConditions["geq"] = "geq";
    FilterConditions["lt"] = "lt";
    FilterConditions["leq"] = "leq";
    FilterConditions["eq"] = "eq";
    FilterConditions["neq"] = "neq";
    FilterConditions["ib"] = "ib";
    FilterConditions["inb"] = "inb";
})(FilterConditions || (exports.FilterConditions = FilterConditions = {}));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAttacments = exports.widgetConfig = exports.baseProps = exports.isVerify = exports.isTimeFormat = exports.baseInputValidate = exports.validateInput = exports.isBlock = exports.validateTemplate = exports.getValidationMessage = exports.getFormItemCss = void 0;
/* eslint-disable no-useless-escape */
var types_1 = __webpack_require__(5);
var input_1 = __webpack_require__(45);
var core_1 = __webpack_require__(0);
function getFormItemCss(item, validate, focus) {
    var _a;
    if (focus === void 0) { focus = false; }
    var labelPosition = item.labelPosition, required = item.required, disabled = item.disabled, hiddenLabel = item.hiddenLabel, $validationStatus = item.$validationStatus;
    var cssStatus = (_a = {},
        _a[types_1.ValidationStatus.pre] = "",
        _a[types_1.ValidationStatus.error] = " dhx_form-group--state_error",
        _a[types_1.ValidationStatus.success] = " dhx_form-group--state_success",
        _a)[$validationStatus] || "";
    var labelPositionCss = labelPosition === "left" ? " dhx_form-group--inline" : "";
    var requiredCss = required ? " dhx_form-group--required" : "";
    var disabledCss = disabled ? " dhx_form-group--disabled" : "";
    var labelSrCss = hiddenLabel ? " dhx_form-group--label_sr" : "";
    var focusStatus = focus ? "" : cssStatus;
    if (validate) {
        return labelPositionCss + focusStatus + requiredCss + disabledCss + labelSrCss;
    }
    return labelPositionCss + disabledCss + labelSrCss;
}
exports.getFormItemCss = getFormItemCss;
var validators = (_a = {},
    _a[input_1.Validation.validAlphaNumeric] = /^[a-zA-Z0-9_]+$/,
    _a[input_1.Validation.validEmail] = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    _a[input_1.Validation.validInteger] = /^-?\d+$/,
    _a[input_1.Validation.validIPv4] = /\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b/,
    _a[input_1.Validation.validNumeric] = /^-?\d+(\.\d+)?$/,
    _a);
function getValidationMessage(item) {
    var _a;
    var validationMessage = (_a = {
            undefined: item.preMessage
        },
        _a[types_1.ValidationStatus.pre] = item.preMessage,
        _a[types_1.ValidationStatus.error] = item.errorMessage,
        _a[types_1.ValidationStatus.success] = item.successMessage,
        _a)[item.$validationStatus] || "";
    return validationMessage;
}
exports.getValidationMessage = getValidationMessage;
function validateTemplate(template, str) {
    return validators[template] ? validators[template].test(str) : true;
}
exports.validateTemplate = validateTemplate;
function isBlock(config) {
    return config.type !== "fieldset" && (Boolean(config.rows) || Boolean(config.cols));
}
exports.isBlock = isBlock;
function validateInput(value, validation) {
    var isValid = true;
    if (typeof validation === "function") {
        isValid = validation(value);
    }
    else {
        var regExp = validators[validation];
        if (regExp) {
            isValid = regExp.test(value.toString());
        }
    }
    return isValid;
}
exports.validateInput = validateInput;
function baseInputValidate(value, config) {
    var val = value !== null && value !== void 0 ? value : "";
    if (config.required && !String(val).trim())
        return false;
    var validate = function (num, min, max) {
        var isMin = (0, core_1.isDefined)(min);
        var isMax = (0, core_1.isDefined)(max);
        if (isMin && isMax) {
            return Number(min) <= Number(max) && Number(min) <= num && Number(max) >= num;
        }
        else if (isMin) {
            return Number(min) <= num;
        }
        else if (isMax) {
            return Number(max) >= num;
        }
        else {
            return true;
        }
    };
    return config.inputType === "number"
        ? validate(Number(val), config.min, config.max)
        : validate(String(val).length, config.minlength, config.maxlength);
}
exports.baseInputValidate = baseInputValidate;
function isTimeFormat(value, timeFormat) {
    if (timeFormat === 12) {
        return /(^0?([1-9][0-2]?):[0-5][0-9]?([AP][M]?)$)/i.test(value);
    }
    return /(^(0[0-9]|1[0-9]|2[0-3]|[0-9]):[0-5][0-9]$)/i.test(value);
}
exports.isTimeFormat = isTimeFormat;
function isVerify(config) {
    var validationProp = ["required", "validation", "minlength", "maxlength", "min", "max"];
    return validationProp.some(function (prop) {
        switch (prop) {
            case "required":
                return !!config[prop];
            case "validation":
                return (typeof config[prop] === "function" ||
                    config[prop] === "email" ||
                    config[prop] === "integer" ||
                    config[prop] === "numeric" ||
                    config[prop] === "alphanumeric" ||
                    config[prop] === "IPv4");
            case "minlength":
            case "maxlength":
                return typeof config[prop] === "number" || typeof config[prop] === "string";
            case "min":
            case "max":
                return ((typeof config[prop] === "number" || typeof config[prop] === "string") &&
                    config.inputType === "number");
        }
    });
}
exports.isVerify = isVerify;
exports.baseProps = ["width", "height", "padding", "css"];
var widgetConfig = function (_a) {
    var width = _a.width, type = _a.type, id = _a.id, name = _a.name, hidden = _a.hidden, editable = _a.editable, css = _a.css, required = _a.required, helpMessage = _a.helpMessage, preMessage = _a.preMessage, successMessage = _a.successMessage, errorMessage = _a.errorMessage, label = _a.label, labelWidth = _a.labelWidth, labelPosition = _a.labelPosition, hiddenLabel = _a.hiddenLabel, validation = _a.validation, icon = _a.icon, res = __rest(_a, ["width", "type", "id", "name", "hidden", "editable", "css", "required", "helpMessage", "preMessage", "successMessage", "errorMessage", "label", "labelWidth", "labelPosition", "hiddenLabel", "validation", "icon"]);
    return res;
};
exports.widgetConfig = widgetConfig;
function getFlatAttacments(arr, attachments, parent) {
    if (arr === void 0) { arr = []; }
    var items = [];
    for (var index = 0; index < arr.length; index++) {
        var conf = arr[index];
        if (conf.type) {
            attachments[conf.name].parent = parent;
            items.push(attachments[conf.name]);
        }
        if (isBlock(conf)) {
            items.push.apply(items, getFlatAttacments(conf.rows || conf.cols, attachments, parent));
        }
    }
    return items;
}
function setAttacments(attachments, layout) {
    var _a;
    for (var name_1 in attachments) {
        var item = attachments[name_1];
        if (item.config.type === "fieldset") {
            item.setAttachments(getFlatAttacments(item.config.rows || item.config.cols, attachments, item));
            item.setCell(layout.getCell(name_1));
        }
        else {
            (_a = layout.getCell(name_1)) === null || _a === void 0 ? void 0 : _a.attach(item);
        }
    }
}
exports.setAttacments = setAttacments;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.toViewLike = exports.View = void 0;
var core_1 = __webpack_require__(0);
var html_1 = __webpack_require__(4);
var View = /** @class */ (function () {
    function View(_container, config) {
        var _a;
        this.config = config || {};
        this._uid = (_a = this.config.rootId) !== null && _a !== void 0 ? _a : (0, core_1.uid)();
    }
    View.prototype.mount = function (container, vnode) {
        if (vnode) {
            this._view = vnode;
        }
        if (container && this._view && this._view.mount) {
            // init view inside of HTML container
            this._container = (0, html_1.toNode)(container);
            if (this._container.tagName) {
                this._view.mount(this._container);
            }
            else if (this._container.attach) {
                this._container.attach(this);
            }
        }
    };
    View.prototype.unmount = function () {
        var rootView = this.getRootView();
        if (rootView && rootView.node) {
            rootView.unmount();
            this._view = null;
        }
    };
    View.prototype.getRootView = function () {
        return this._view;
    };
    View.prototype.getRootNode = function () {
        return this._view && this._view.node && this._view.node.el;
    };
    View.prototype.paint = function () {
        if (this._view && // was mounted
            (this._view.node || // already rendered node
                this._container)) {
            // not rendered, but has container
            this._doNotRepaint = false;
            this._view.redraw();
        }
    };
    return View;
}());
exports.View = View;
function toViewLike(view) {
    return {
        getRootView: function () { return view; },
        paint: function () { return view.node && view.redraw(); },
        mount: function (container) { return view.mount(container); },
    };
}
exports.toViewLike = toViewLike;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Split = exports.GridSelectionEvents = exports.GridSystemEvents = exports.GridEvents = exports.HeaderFilterEvent = void 0;
var HeaderFilterEvent;
(function (HeaderFilterEvent) {
    HeaderFilterEvent["change"] = "change";
})(HeaderFilterEvent || (exports.HeaderFilterEvent = HeaderFilterEvent = {}));
var GridEvents;
(function (GridEvents) {
    GridEvents["scroll"] = "scroll";
    GridEvents["expand"] = "expand";
    GridEvents["filterChange"] = "filterChange";
    GridEvents["beforeFilter"] = "beforeFilter";
    GridEvents["beforeResizeStart"] = "beforeResizeStart";
    GridEvents["resize"] = "resize";
    GridEvents["afterResizeEnd"] = "afterResizeEnd";
    GridEvents["cellClick"] = "cellClick";
    GridEvents["cellRightClick"] = "cellRightClick";
    GridEvents["cellMouseOver"] = "cellMouseOver";
    GridEvents["cellMouseDown"] = "cellMouseDown";
    GridEvents["cellDblClick"] = "cellDblClick";
    GridEvents["headerCellClick"] = "headerCellClick";
    GridEvents["footerCellClick"] = "footerCellClick";
    GridEvents["headerCellMouseOver"] = "headerCellMouseOver";
    GridEvents["footerCellMouseOver"] = "footerCellMouseOver";
    GridEvents["headerCellMouseDown"] = "headerCellMouseDown";
    GridEvents["footerCellMouseDown"] = "footerCellMouseDown";
    GridEvents["headerCellDblClick"] = "headerCellDblClick";
    GridEvents["footerCellDblClick"] = "footerCellDblClick";
    GridEvents["headerCellRightClick"] = "headerCellRightClick";
    GridEvents["footerCellRightClick"] = "footerCellRightClick";
    GridEvents["beforeEditStart"] = "beforeEditStart";
    GridEvents["afterEditStart"] = "afterEditStart";
    GridEvents["beforeEditEnd"] = "beforeEditEnd";
    GridEvents["afterEditEnd"] = "afterEditEnd";
    GridEvents["beforeKeyDown"] = "beforeKeyDown";
    GridEvents["afterKeyDown"] = "afterKeyDown";
    GridEvents["beforeColumnHide"] = "beforeColumnHide";
    GridEvents["afterColumnHide"] = "afterColumnHide";
    GridEvents["beforeColumnShow"] = "beforeColumnShow";
    GridEvents["afterColumnShow"] = "afterColumnShow";
    GridEvents["beforeRowHide"] = "beforeRowHide";
    GridEvents["afterRowHide"] = "afterRowHide";
    GridEvents["beforeRowShow"] = "beforeRowShow";
    GridEvents["afterRowShow"] = "afterRowShow";
    GridEvents["beforeRowDrag"] = "beforeRowDrag";
    GridEvents["dragRowStart"] = "dragRowStart";
    GridEvents["dragRowOut"] = "dragRowOut";
    GridEvents["dragRowIn"] = "dragRowIn";
    GridEvents["canRowDrop"] = "canRowDrop";
    GridEvents["cancelRowDrop"] = "cancelRowDrop";
    GridEvents["beforeRowDrop"] = "beforeRowDrop";
    GridEvents["afterRowDrop"] = "afterRowDrop";
    GridEvents["afterRowDrag"] = "afterRowDrag";
    GridEvents["beforeColumnDrag"] = "beforeColumnDrag";
    GridEvents["dragColumnStart"] = "dragColumnStart";
    GridEvents["dragColumnOut"] = "dragColumnOut";
    GridEvents["dragColumnIn"] = "dragColumnIn";
    GridEvents["canColumnDrop"] = "canColumnDrop";
    GridEvents["cancelColumnDrop"] = "cancelColumnDrop";
    GridEvents["beforeColumnDrop"] = "beforeColumnDrop";
    GridEvents["afterColumnDrop"] = "afterColumnDrop";
    GridEvents["afterColumnDrag"] = "afterColumnDrag";
    GridEvents["beforeRowResize"] = "beforeRowResize";
    GridEvents["afterRowResize"] = "afterRowResize";
    GridEvents["beforeSort"] = "beforeSort";
    GridEvents["afterSort"] = "afterSort";
})(GridEvents || (exports.GridEvents = GridEvents = {}));
var GridSystemEvents;
(function (GridSystemEvents) {
    GridSystemEvents["cellTouchMove"] = "cellTouchMove";
    GridSystemEvents["cellTouchEnd"] = "cellTouchEnd";
    GridSystemEvents["headerCellTouchMove"] = "headerCellTouchMove";
    GridSystemEvents["headerCellTouchEnd"] = "headerCellTouchEnd";
})(GridSystemEvents || (exports.GridSystemEvents = GridSystemEvents = {}));
var GridSelectionEvents;
(function (GridSelectionEvents) {
    GridSelectionEvents["beforeUnSelect"] = "beforeUnSelect";
    GridSelectionEvents["afterUnSelect"] = "afterUnSelect";
    GridSelectionEvents["beforeSelect"] = "beforeSelect";
    GridSelectionEvents["afterSelect"] = "afterSelect";
})(GridSelectionEvents || (exports.GridSelectionEvents = GridSelectionEvents = {}));
var Split;
(function (Split) {
    Split["left"] = "leftSplit";
    Split["right"] = "rightSplit";
    Split["top"] = "topSplit";
    Split["bottom"] = "bottomSplit";
})(Split || (exports.Split = Split = {}));


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(135), exports);
__exportStar(__webpack_require__(73), exports);


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en = {
    // Toolbar
    undo: "Undo",
    redo: "Redo",
    textColor: "Text color",
    backgroundColor: "Background color",
    bold: "Bold",
    italic: "Italic",
    underline: "Underline",
    strikethrough: "Strikethrough",
    link: "Link",
    halign: "Horizontal align",
    valign: "Vertical align",
    left: "Left",
    right: "Right",
    center: "Center",
    top: "Top",
    bottom: "Bottom",
    multiline: "Text wrapping",
    clip: "Clip",
    wrap: "Wrap",
    merge: "Merge",
    unmerge: "Unmerge",
    lockCell: "Lock cell",
    unlockCell: "Unlock cell",
    clear: "Clear",
    clearValue: "Clear value",
    clearStyles: "Clear styles",
    clearAll: "Clear all",
    columns: "Columns",
    rows: "Rows",
    addColumn: "Add column",
    removeColumn: "Remove column",
    fitToData: "Fit to data",
    addRow: "Add row",
    removeRow: "Remove row",
    row: "row",
    col: "col",
    format: "Format",
    common: "Common",
    number: "Number",
    currency: "Currency",
    percent: "Percent",
    text: "Text",
    date: "Date",
    time: "Time",
    filter: "Filter",
    help: "Help",
    custom: "Custom",
    // Tabbar
    deleteSheet: "Delete",
    renameSheet: "Rename",
    renameSheetAlert: "A sheet with the name $name already exists. Please enter another name. ",
    // Menu
    file: "File",
    import: "Import",
    export: "Export",
    downloadAs: "Download as...",
    importAs: "Import as...",
    data: "Data",
    validation: "Data validation",
    search: "Search",
    sort: "Sort",
    ascSort: "Sort A to Z",
    descSort: "Sort Z to A",
    //Actions
    copy: "Copy",
    edit: "Edit",
    insert: "Insert",
    remove: "Remove",
    linkCopied: "Link copied to clipboard",
    //filter
    e: "Is empty",
    ne: "Is not empty",
    tc: "Text contains",
    tdc: "Text doesn't contain",
    ts: "Text starts with",
    te: "Text ends with",
    tex: "Text is exactly",
    d: "Date is",
    db: "Date is before",
    da: "Date is after",
    gt: "Greater than",
    geq: "Greater or equal to",
    lt: "Less than",
    leq: "Less or equal to",
    eq: "Is equal to",
    neq: "Is not equal to",
    ib: "Is between",
    inb: "Is not between",
    none: "None",
    empty: "Empty",
    value: "Value",
    values: "By values",
    condition: "By condition",
    and: "And",
    // Buttons
    cancel: "Cancel",
    save: "Save",
    removeValidation: "Remove validation",
    selectAll: "Select all",
    unselectAll: "Unselect all",
    apply: "Apply",
    ok: "Ok",
    // Messages
    alertTitle: "There was a problem!",
    mergeAlertMessage: "You can't $action a range containing merges!",
    spanMergeAlert: "You can't merge frozen and non-frozen cells!",
    dontShowAgain: "Don't show again",
    spanPasteError: "You can't paste merges that cross the boundary of a frozen region",
    spanMergeLockedError: "You can't merge locked cells!",
    spanUnmergeLockedError: "You can't unmerge locked cells!",
    removeAlert: "You can't remove last $name!",
};
exports.default = en;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNewFormat = exports.getFormattedFormula = exports.getFormattedValue = exports.getCleanValue = exports.detectFormat = exports.getPureNumber = exports.getDefaultFormatsMap = exports.initFormat = exports.getFormatRule = exports.isNumeric = exports.getFormat = exports.getDefaultFormats = exports.getSeparators = void 0;
var core_1 = __webpack_require__(0);
var date_1 = __webpack_require__(18);
var en_1 = __webpack_require__(11);
var date_2 = __webpack_require__(28);
var muon_1 = __webpack_require__(25);
var config = {};
var defaultFormats = [];
var separators = { decimal: ".", thousands: "," };
var currencyRegex = "(\\[\\$[\\w\\W]*?\\]|[\\$]{0,1})";
var pureCurrency = "\\[\\$(\\D*[^\\]])|(\\$)"; // custom currency - [$EUR]#,##0.00
var sep = "([,. ]{0,1})";
var percent = "([%]{0,1})";
var allDigits = "([#0]*)";
var pureCurrencyRegex = new RegExp(pureCurrency);
var formatRegex = new RegExp("".concat(currencyRegex).concat(allDigits).concat(sep).concat(allDigits).concat(sep).concat(allDigits).concat(percent, "\\s?").concat(currencyRegex));
var formats = {};
function getSeparators() {
    return separators;
}
exports.getSeparators = getSeparators;
function _partsToObj(parts) {
    return {
        currencyBefore: parts[1],
        digits: parts[2],
        thousandsSeparator: parts[3],
        optionalDigits: parts[4],
        decimalSeparator: parts[5],
        decimalDigits: parts[6],
        percent: parts[7],
        currencyAfter: parts[8],
        decimalLength: 0,
    };
}
function getDefaultFormats() {
    return defaultFormats;
}
exports.getDefaultFormats = getDefaultFormats;
function getFormat(id) {
    return defaultFormats[(0, core_1.findIndex)(defaultFormats, function (f) { return f.id === id; })];
}
exports.getFormat = getFormat;
function isNumeric(val) {
    return !isNaN(val - parseFloat(val));
}
exports.isNumeric = isNumeric;
function getFormatRule(format) {
    if (!format || typeof format !== "string") {
        return;
    }
    if (formats[format]) {
        return formats[format];
    }
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var parts = format.match(formatRegex);
    var rule = _partsToObj(parts);
    if (!rule.decimalSeparator && rule.thousandsSeparator) {
        rule.decimalSeparator = rule.thousandsSeparator;
        rule.decimalDigits = rule.optionalDigits;
        rule.thousandsSeparator = "";
        rule.optionalDigits = "";
    }
    if (!rule.decimalSeparator) {
        rule.decimalSeparator = separators.decimal;
    }
    if (rule.currencyBefore) {
        var m = rule.currencyBefore.match(pureCurrencyRegex);
        rule.currencyBefore = m[1] || m[2];
    }
    if (rule.currencyAfter) {
        var m = rule.currencyAfter.match(pureCurrencyRegex);
        rule.currencyAfter = m[1] || m[2];
    }
    if (rule.percent) {
        rule.currencyBefore = "";
        rule.currencyAfter = "";
    }
    if (rule.decimalDigits) {
        rule.decimalLength = rule.decimalDigits.split("0").length - 1;
    }
    if (format === "common") {
        rule.decimalSeparator = ".";
        rule.decimalLength = "";
        rule.thousandsSeparator = ",";
    }
    formats[format] = rule;
    return rule;
}
exports.getFormatRule = getFormatRule;
function setDefaultFormats() {
    defaultFormats.forEach(function (format) {
        getFormatRule(format.mask);
    });
}
function numberWithSeparators(val, thousand, decimal, optionalDigits, decimalDigits, isCommon) {
    if (thousand === void 0) { thousand = ""; }
    if (optionalDigits === void 0) { optionalDigits = 3; }
    if (decimalDigits === void 0) { decimalDigits = ""; }
    if (isCommon === void 0) { isCommon = false; }
    var parts = val.toString().split(".");
    var digits = [];
    var decimals = decimalDigits ? [] : [""];
    var index = 1;
    var numBefore = false;
    for (var i = decimalDigits.length - 1; i > -1; i--) {
        var decimalChar = decimalDigits[i];
        var num = parts[1][i];
        if (decimalChar !== "#" || num !== "0" || numBefore) {
            decimals.push(num);
            numBefore = true;
        }
    }
    for (var i = parts[0].length - 1; i > -1; i--) {
        digits.push(parts[0][i]);
        if (index === optionalDigits && i) {
            digits.push(thousand);
            index = 1;
            continue;
        }
        index++;
    }
    decimals = isCommon ? parts[1] : decimals.reverse().join("");
    parts[0] = digits.reverse().join("");
    return decimals ? "".concat(parts[0]).concat(decimal).concat(decimals) : parts[0];
}
function formatByRule(val, rule, id) {
    var numeric = isNumeric(val);
    if (!rule) {
        return val;
    }
    if (!numeric) {
        return val;
    }
    var formattedVal = "";
    if (rule.currencyBefore) {
        formattedVal += rule.currencyBefore;
    }
    var num = parseFloat(val);
    var isNegative = num < 0;
    if (isNegative) {
        num = Math.abs(num);
    }
    var numAsString = num.toString();
    if (rule.percent) {
        num *= 100;
    }
    var isCommon = id === "common";
    if (rule.digits && !isCommon) {
        var fixed = rule.decimalDigits.length;
        var multiplier = Math.pow(10, fixed);
        num = Math.round(num * multiplier) / multiplier;
        numAsString = num.toFixed(fixed);
    }
    var digits = (rule === null || rule === void 0 ? void 0 : rule.digits) + (rule === null || rule === void 0 ? void 0 : rule.optionalDigits);
    var parts = numAsString.split(".");
    if (digits && digits.length > parts[0].length) {
        var val_1 = parts[0].split("");
        var newStr = parts[0];
        var index = 0;
        for (var i = digits.length - 1; i > -1; i--) {
            var ruleChar = digits[i];
            var char = val_1[index];
            if (ruleChar === "0" && !char) {
                newStr = "0" + newStr;
            }
            index++;
        }
        numAsString = newStr + (parts.length > 1 ? ".".concat(parts[1]) : "");
    }
    formattedVal += rule.digits
        ? numberWithSeparators(numAsString, rule.thousandsSeparator, rule.decimalSeparator, rule.optionalDigits.length, rule.decimalDigits, isCommon)
        : numAsString;
    formattedVal += rule.percent;
    if (rule.currencyAfter) {
        formattedVal += rule.currencyAfter;
    }
    if (isNegative) {
        formattedVal = "-".concat(formattedVal);
    }
    return formattedVal;
}
var numberExample = "15.0031";
var dateExample = "44490.5625";
function initFormat(spreadsheet, localization) {
    var _a;
    config = spreadsheet.config;
    var dateFormat = localization.dateFormat, _b = localization.timeFormat, timeFormat = _b === void 0 ? 12 : _b, currency = localization.currency, decimal = localization.decimal, thousands = localization.thousands;
    defaultFormats = [
        { name: en_1.default.common, id: "common", mask: "#".concat(thousands, "##0").concat(decimal), example: numberExample },
        { name: en_1.default.number, id: "number", mask: "#".concat(thousands, "##0").concat(decimal, "00"), example: numberExample },
        {
            name: en_1.default.percent,
            id: "percent",
            mask: "#".concat(thousands, "##0").concat(decimal, "00%"),
            example: numberExample,
        },
        {
            name: en_1.default.currency,
            id: "currency",
            mask: "[$".concat(currency, "]#").concat(thousands, "##0").concat(decimal, "00"),
            example: numberExample,
        },
        {
            name: en_1.default.date,
            id: "date",
            mask: (0, date_2.getExcelFormatFromDHX)(dateFormat),
            example: dateExample,
        },
        {
            name: en_1.default.time,
            id: "time",
            mask: "h:mm ".concat(timeFormat > 12 ? "" : "am/pm"),
            example: dateExample,
            timeFormat: timeFormat,
        },
        {
            name: en_1.default.text,
            id: "text",
            mask: "@",
            example: "some text",
        },
    ];
    (_a = config.formats) === null || _a === void 0 ? void 0 : _a.forEach(function (f) {
        var ind = (0, core_1.findIndex)(defaultFormats, function (df) { return df.id === f.id; });
        if (ind >= 0) {
            defaultFormats[ind] = f;
        }
        else {
            var format = f;
            if ((0, date_2.isDateFormat)(f.mask)) {
                format = __assign(__assign({}, f), { mask: (0, date_2.getExcelFormatFromDHX)(f.mask) });
            }
            defaultFormats.push(format);
        }
    });
    separators = {
        decimal: decimal,
        thousands: thousands,
    };
    config.formats = defaultFormats;
    setDefaultFormats();
}
exports.initFormat = initFormat;
function getDefaultFormatsMap() {
    return defaultFormats.reduce(function (acc, f) {
        acc[f.mask] = f.id;
        return acc;
    }, {});
}
exports.getDefaultFormatsMap = getDefaultFormatsMap;
function getPureNumber(val) {
    var isPercent = typeof val === "string" && val.includes("%");
    var num = parseFloat("".concat(val).replace(/[^.\d]/g, ""));
    return isPercent ? num / 100 : num;
}
exports.getPureNumber = getPureNumber;
function detectFormat(val) {
    var formats = getDefaultFormats();
    var get = function (id) { return formats.find(function (format) { return format.id === id; }); };
    var numberFormat = get("number");
    var percent = get("percent");
    var date = get("date");
    var time = get("time");
    var isLink = "".concat(val).startsWith("http");
    if (!"".concat(val).includes("%") &&
        !/[a-z]/.exec("".concat(val)) &&
        (isNumeric(val) || isNumeric(getCleanValueByMask(val, numberFormat === null || numberFormat === void 0 ? void 0 : numberFormat.mask)))) {
        return numberFormat;
    }
    if (!isLink && (val instanceof Date || isNumeric(getCleanValue(val, date)))) {
        return date;
    }
    if (!isLink && isNumeric(getCleanValue(val, time))) {
        return time;
    }
    if (isNumeric(getCleanValueByMask(val, percent === null || percent === void 0 ? void 0 : percent.mask)) || "".concat(val).endsWith("%")) {
        return percent;
    }
    return get("common");
}
exports.detectFormat = detectFormat;
function getCleanValue(val, format) {
    if (!(0, core_1.isDefined)(val) || val === "" || typeof val === "boolean" || "".concat(val).startsWith("="))
        return val;
    var defaultFormat = getDefaultFormats().find(function (_a) {
        var id = _a.id;
        return id === "common";
    });
    var _a = format || defaultFormat, id = _a.id, mask = _a.mask;
    if (id === "text" || !id)
        return val;
    var numeric = isNumeric(val);
    if (id.includes("date") || id.includes("time")) {
        if (numeric)
            return +val;
        var dhxFormat = (0, date_2.getDHXDateFormat)(mask);
        var value = val;
        if (typeof value === "object" && value.valueOf()) {
            return (0, date_2.getExcelDateFromJs)(value);
        }
        var clean = value
            .replace(/\n/g, " ")
            .replace(/\s+/g, " ")
            .trim();
        if ((0, date_1.stringToDate)(clean, dhxFormat, true)) {
            value = (0, date_2.getExcelDateFromJs)((0, date_1.stringToDate)(clean, dhxFormat));
        }
        return value;
    }
    if (id === "percent" || mask.endsWith("%")) {
        return getPureNumber(val);
    }
    return getCleanValueByMask(val, mask);
}
exports.getCleanValue = getCleanValue;
function getCleanValueByMask(val, mask) {
    var _a;
    if (!(0, core_1.isDefined)(val) || val === "")
        return val;
    if (typeof val !== "string" || val.startsWith("=")) {
        return val;
    }
    var numberFormat = (_a = getDefaultFormats().find(function (f) { return f.id === "number"; })) === null || _a === void 0 ? void 0 : _a.mask;
    if (!mask && !numberFormat)
        return val;
    var _b = getFormatRule((mask || numberFormat)), currencyBefore = _b.currencyBefore, currencyAfter = _b.currencyAfter, decimalSeparator = _b.decimalSeparator, thousandsSeparator = _b.thousandsSeparator;
    if (currencyBefore) {
        val = val.replace(currencyBefore, "");
    }
    if (currencyAfter) {
        val = val.replace(currencyAfter, "");
    }
    if (mask) {
        var thousands = val.split(thousandsSeparator);
        var lastIndex = thousands.length - 1;
        var _c = thousands[lastIndex].split(decimalSeparator), last = _c[0], decimal = _c[1];
        thousands[lastIndex] = last;
        if (thousands.some(function (thousand, index) { return (index && thousand.length !== 3) || !/^-?\d+$/.test(thousand); })) {
            return val;
        }
        val = "".concat(thousands.join("")).concat(decimal ? ".".concat(decimal) : "");
    }
    var num = parseFloat(val);
    return num || num === 0 ? num : val;
}
function getFormattedValue(val, format) {
    var _a;
    if (!(0, core_1.isDefined)(val))
        return "";
    if (typeof val === "boolean") {
        return "".concat(val).toUpperCase();
    }
    if (!(format === null || format === void 0 ? void 0 : format.id) || format.mask === "@") {
        return val;
    }
    if (format.id === "common") {
        return (_a = (format.$value || val)) !== null && _a !== void 0 ? _a : "";
    }
    var mask = format.mask, id = format.id;
    if (id.includes("date") || id.includes("time")) {
        if (!isNumeric(val)) {
            return val;
        }
        return (0, date_1.getFormattedDate)((0, date_2.getDHXDateFormat)(mask), (0, date_2.excelDateToJSDate)(+val));
    }
    var rule = getFormatRule(mask);
    return formatByRule(val, rule, id);
}
exports.getFormattedValue = getFormattedValue;
function getFormattedFormula(_a) {
    var formula = _a.formula, store = _a.store, format = _a.format;
    if (!formula || !formula.startsWith("="))
        return formula;
    format = format || getDefaultFormats().find(function (f) { return f.id === "common"; });
    var code = store.parse(formula).code;
    var result = "";
    for (var i = 0; i < code.length; i += 3) {
        var type = code[i];
        if (type === muon_1.T_DATA)
            continue;
        var char = formula.substr(code[i + 1], code[i + 2]);
        var nextChar = formula.substr(code[i + 4], code[i + 5]);
        if (type === muon_1.T_NUMBER && code[i + 6] === muon_1.T_NUMBER && nextChar === ".") {
            char = "".concat(char).concat(nextChar).concat(formula.substr(code[i + 7], code[i + 8]));
            char = getFormattedValue(char, format);
            i += 6;
        }
        if (type === muon_1.T_PAGE && (code[i + 3] === muon_1.T_RANGE || code[i + 3] === muon_1.T_ARG))
            continue;
        result += char;
    }
    return result;
}
exports.getFormattedFormula = getFormattedFormula;
function addNewFormat(mask, toolbarData, formats) {
    var exist = formats.find(function (f) { return f.mask === mask; });
    if (exist) {
        return exist;
    }
    var isDate = (0, date_2.isDateFormat)(mask);
    var id = (0, core_1.uid)();
    var formatName = "".concat(en_1.default.custom, " ").concat(id);
    var newFormat = {
        id: isDate ? "".concat(isDate, "_").concat(id) : id,
        mask: mask,
        example: isDate ? dateExample : numberExample,
        name: formatName,
    };
    formats.push(newFormat);
    return newFormat;
}
exports.addNewFormat = addNewFormat;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(26), exports);
__exportStar(__webpack_require__(66), exports);
__exportStar(__webpack_require__(121), exports);
__exportStar(__webpack_require__(122), exports);
__exportStar(__webpack_require__(34), exports);
__exportStar(__webpack_require__(156), exports);
__exportStar(__webpack_require__(27), exports);
__exportStar(__webpack_require__(69), exports);
__exportStar(__webpack_require__(68), exports);
__exportStar(__webpack_require__(157), exports);
__exportStar(__webpack_require__(67), exports);
__exportStar(__webpack_require__(51), exports);


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = void 0;
var dom_1 = __webpack_require__(1);
var html_1 = __webpack_require__(4);
var view_1 = __webpack_require__(8);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(5);
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, config) || this;
        _this._handlers = __assign({ showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target, {
                    mode: _this.config.labelPosition === "left" ? "bottom" : "right",
                    theme: e.target,
                });
            }, hideHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.hide();
            } }, _this._getHandlers());
        var render = function () { return _this.config && _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Label.prototype.setValidationStatus = function (state) {
        if (state === void 0) { state = "pre"; }
        this.config.$validationStatus = types_1.ValidationStatus[state];
    };
    Label.prototype._destructor = function () {
        this._helper && this._helper.destructor();
        this.config = this._handlers = this._helper = null;
        this.unmount();
    };
    Label.prototype._getHandlers = function () {
        return {};
    };
    Label.prototype._init = function () {
        return;
    };
    Label.prototype._draw = function () {
        return this._drawLabel();
    };
    Label.prototype._drawLabel = function () {
        var _a = this.config, id = _a.id, helpMessage = _a.helpMessage, required = _a.required;
        if (this.config.helpMessage) {
            if (this._helper) {
                this._helper.attachHTML(this.config.helpMessage);
            }
            else {
                this._helper = new ts_popup_1.Popup({
                    css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
                });
                this._helper.attachHTML(this.config.helpMessage);
            }
        }
        var labelStyle = (0, html_1.getLabelStyle)(this.config);
        return (labelStyle &&
            (0, dom_1.el)("".concat(this.config.type.includes("group") ? "legend" : "label", ".dhx_label"), {
                for: id || this._uid,
                class: helpMessage ? "dhx_label--with-help" : "",
                style: labelStyle.style,
            }, helpMessage
                ? [
                    (labelStyle.label || required) && (0, dom_1.el)("span.dhx_label__holder", labelStyle.label),
                    (0, dom_1.el)("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                        tabindex: "0",
                        role: "button",
                        onclick: this._handlers.showHelper,
                        onfocus: this._handlers.showHelper,
                        onblur: this._handlers.hideHelper,
                        id: "dhx_label__help_".concat(id || this._uid),
                    }),
                ]
                : labelStyle.label));
    };
    return Label;
}(view_1.View));
exports.Label = Label;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, setImmediate) {(function () {
  global = typeof window !== 'undefined' ? window : this

  var queueId = 1
  var queue = {}
  var isRunningTask = false

  if (!global.setImmediate)
    global.addEventListener('message', function (e) {
      if (e.source == global){
        if (isRunningTask)
          nextTick(queue[e.data])
        else {
          isRunningTask = true
          try {
            queue[e.data]()
          } catch (e) {}

          delete queue[e.data]
          isRunningTask = false
        }
      }
    })

  function nextTick(fn) {
    if (global.setImmediate) setImmediate(fn)
    // if inside of web worker
    else if (global.importScripts) setTimeout(fn)
    else {
      queueId++
      queue[queueId] = fn
      global.postMessage(queueId, '*')
    }
  }

  Deferred.resolve = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    if (value instanceof Deferred)
      return value

    return new Deferred(function (resolve) {
        resolve(value)
    })
  }

  Deferred.reject = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    return new Deferred(function (resolve, reject) {
        reject(value)
    })
  }

  Deferred.all = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            arr[i] = r
            done()
            return r
          }, done)
      })
    }

    done()

    return d
  }

  Deferred.race = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    if (arr.length == 0)
      return new Deferred()

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            done(null, r)
          }, done)
      })
    }

    done()

    return d
  }

  Deferred._d = 1


  /**
   * @constructor
   */
  function Deferred(resolver) {
    'use strict'
    if (typeof resolver != 'function' && resolver != undefined)
      throw TypeError()

    if (typeof this != 'object' || (this && this.then))
      throw TypeError()

    // states
    // 0: pending
    // 1: resolving
    // 2: rejecting
    // 3: resolved
    // 4: rejected
    var self = this,
      state = 0,
      val = 0,
      next = [],
      fn, er;

    self['promise'] = self

    self['resolve'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 1

        nextTick(fire)
      }
      return self
    }

    self['reject'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 2

        nextTick(fire)

      }
      return self
    }

    self['_d'] = 1

    self['then'] = function (_fn, _er) {
      if (!(this._d == 1))
        throw TypeError()

      var d = new Deferred()

      d.fn = _fn
      d.er = _er
      if (state == 3) {
        d.resolve(val)
      }
      else if (state == 4) {
        d.reject(val)
      }
      else {
        next.push(d)
      }

      return d
    }

    self['catch'] = function (_er) {
      return self['then'](null, _er)
    }

    var finish = function (type) {
      state = type || 4
      next.map(function (p) {
        state == 3 && p.resolve(val) || p.reject(val)
      })
    }

    try {
      if (typeof resolver == 'function')
        resolver(self['resolve'], self['reject'])
    } catch (e) {
      self['reject'](e)
    }

    return self

    // ref : reference to 'then' function
    // cb, ec, cn : successCallback, failureCallback, notThennableCallback
    function thennable (ref, cb, ec, cn) {
      // Promises can be rejected with other promises, which should pass through
      if (state == 2) {
        return cn()
      }
      if ((typeof val == 'object' || typeof val == 'function') && typeof ref == 'function') {
        try {

          // cnt protects against abuse calls from spec checker
          var cnt = 0
          ref.call(val, function (v) {
            if (cnt++) return
            val = v
            cb()
          }, function (v) {
            if (cnt++) return
            val = v
            ec()
          })
        } catch (e) {
          val = e
          ec()
        }
      } else {
        cn()
      }
    };

    function fire() {

      // check if it's a thenable
      var ref;
      try {
        ref = val && val.then
      } catch (e) {
        val = e
        state = 2
        return fire()
      }

      thennable(ref, function () {
        state = 1
        fire()
      }, function () {
        state = 2
        fire()
      }, function () {
        try {
          if (state == 1 && typeof fn == 'function') {
            val = fn(val)
          }

          else if (state == 2 && typeof er == 'function') {
            val = er(val)
            state = 1
          }
        } catch (e) {
          val = e
          return finish()
        }

        if (val == self) {
          val = TypeError()
          finish()
        } else thennable(ref, function () {
            finish(3)
          }, finish, function () {
            finish(state == 1 && 3)
          })

      })
    }


  }

  // Export our library object, either for node.js or as a globally scoped variable
  if (true) {
    module['exports'] = Deferred
  } else {}
})()

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(48), __webpack_require__(108).setImmediate))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(54), exports);
__exportStar(__webpack_require__(132), exports);
__exportStar(__webpack_require__(55), exports);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(106), exports);
__exportStar(__webpack_require__(107), exports);
__exportStar(__webpack_require__(111), exports);
__exportStar(__webpack_require__(62), exports);
__exportStar(__webpack_require__(47), exports);


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DateHelper = exports.stringToDate = exports.getFormattedDate = exports.locale = void 0;
var core_1 = __webpack_require__(0);
var core_2 = __webpack_require__(0);
exports.locale = {
    monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ],
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Monday"],
    cancel: "Cancel",
};
/*
    %d	day as a number with leading zero, 01..31
    %j	day as a number, 1..31
    %D	short name of the day, Su Mo Tu...
    %l	full name of the day, Sunday Monday Tuesday...
    %m	month as a number with leading zero, 01..12
    %n	month as a number, 1..12
    %M	short name of the month, Jan Feb Mar...
    %F	full name of the month, January February March...
    %y	year as a number, 2 digits
    %Y	year as a number, 4 digits
    %h	hours 12-format with leading zero, 01..12)
    %g	hours 12-format, 1..12)
    %H	hours 24-format with leading zero, 01..24
    %G	hours 24-format, 1..24
    %i	minutes with leading zero, 01..59
    %s	seconds with leading zero, 01..59
    %a	am or pm
    %A	AM or PM
    %u	milliseconds
*/
var formatters = {
    "%d": function (date) {
        var day = date.getDate();
        return day < 10 ? "0" + day : day;
    },
    "%j": function (date) { return date.getDate(); },
    "%l": function (date) {
        return exports.locale.days[date.getDay()];
    },
    "%D": function (date) {
        return exports.locale.daysShort[date.getDay()];
    },
    "%m": function (date) {
        var month = date.getMonth() + 1;
        return month < 10 ? "0" + month : month;
    },
    "%n": function (date) { return date.getMonth() + 1; },
    "%M": function (date) { return exports.locale.monthsShort[date.getMonth()]; },
    "%F": function (date) { return exports.locale.months[date.getMonth()]; },
    "%y": function (date) {
        return date
            .getFullYear()
            .toString()
            .slice(2);
    },
    "%Y": function (date) { return date.getFullYear(); },
    "%h": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours < 10 ? "0" + hours : hours;
    },
    "%g": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours;
    },
    "%H": function (date) {
        var hours = date.getHours();
        return hours < 10 ? "0" + hours : hours;
    },
    "%G": function (date) { return date.getHours(); },
    "%i": function (date) {
        var minutes = date.getMinutes();
        return minutes < 10 ? "0" + minutes : minutes;
    },
    "%s": function (date) {
        var seconds = date.getSeconds();
        return seconds < 10 ? "0" + seconds : seconds;
    },
    "%a": function (date) {
        return date.getHours() >= 12 ? "pm" : "am";
    },
    "%A": function (date) {
        return date.getHours() >= 12 ? "PM" : "AM";
    },
    "%u": function (date) { return date.getMilliseconds(); },
};
var setFormatters = {
    "%d": function (date, value, _format, validate) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%j": function (date, value, _format, validate) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%m": function (date, value, _format, validate) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
        if (check && date.getMonth() !== Number(value) - 1)
            date.setMonth(Number(value) - 1);
    },
    "%n": function (date, value, _format, validate) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
        if (check && date.getMonth() !== Number(value) - 1)
            date.setMonth(Number(value) - 1);
    },
    "%M": function (date, value, _format, validate) {
        var index = (0, core_2.findIndex)(exports.locale.monthsShort, function (v) { return v === value; });
        if (validate) {
            return index !== -1;
        }
        index === -1 ? date.setMonth(0) : date.setMonth(index);
        if (index !== -1 && date.getMonth() !== index)
            date.setMonth(index);
    },
    "%F": function (date, value, _format, validate) {
        var index = (0, core_2.findIndex)(exports.locale.months, function (v) { return v === value; });
        if (validate) {
            return index !== -1;
        }
        index === -1 ? date.setMonth(0) : date.setMonth(index);
        if (index !== -1 && date.getMonth() !== index)
            date.setMonth(index);
    },
    "%y": function (date, value, _format, validate) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setFullYear(Number("20" + value)) : date.setFullYear(Number("2000"));
    },
    "%Y": function (date, value, _format, validate) {
        var check = /(^([0-9][0-9][0-9][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setFullYear(Number(value)) : date.setFullYear(Number("2000"));
    },
    "%h": function (date, value, dateFormat, validate) {
        var check = /(^0[1-9]|1[0-2]$)/i.test(value);
        if (validate) {
            return check;
        }
        (check && (dateFormat === "am" || dateFormat === "pm")) || dateFormat === "AM" || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%g": function (date, value, dateFormat, validate) {
        var check = /(^[1-9]$)|(^0[1-9]|1[0-2]$)/i.test(value);
        if (validate) {
            return check;
        }
        (check && (dateFormat === "am" || dateFormat === "pm")) || dateFormat === "AM" || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%H": function (date, value, _format, validate) {
        var check = /(^[0-2][0-9]$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%G": function (date, value, _format, validate) {
        var check = /(^[1-9][0-9]?$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%i": function (date, value, _format, validate) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setMinutes(Number(value)) : date.setMinutes(Number(0));
    },
    "%s": function (date, value, _format, validate) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setSeconds(Number(value)) : date.setSeconds(Number(0));
    },
    "%u": function (date, value, _format, validate) {
        var check = /(^([0-9][0-9][0-9])$)/i.test(value);
        if (validate) {
            return check;
        }
        check ? date.setMilliseconds(Number(value)) : date.setMilliseconds(Number(0));
    },
    "%a": function (date, value, _format, validate) {
        if (validate) {
            return value === "pm" || value === "am";
        }
        value === "pm" && date.setHours(date.getHours() + 12);
    },
    "%A": function (date, value, _format, validate) {
        if (validate) {
            return value === "PM" || value === "AM";
        }
        value === "PM" && date.setHours(date.getHours() + 12);
    },
};
var TokenType;
(function (TokenType) {
    TokenType[TokenType["separator"] = 0] = "separator";
    TokenType[TokenType["datePart"] = 1] = "datePart";
})(TokenType || (TokenType = {}));
function tokenizeFormat(format) {
    var tokens = [];
    var currentSeparator = "";
    for (var i = 0; i < format.length; i++) {
        if (format[i] === "%") {
            if (currentSeparator.length > 0) {
                tokens.push({
                    type: TokenType.separator,
                    value: currentSeparator,
                });
                currentSeparator = "";
            }
            tokens.push({
                type: TokenType.datePart,
                value: format[i] + format[i + 1],
            });
            i++;
        }
        else {
            currentSeparator += format[i];
        }
    }
    if (currentSeparator.length > 0) {
        tokens.push({
            type: TokenType.separator,
            value: currentSeparator,
        });
    }
    return tokens;
}
function getFormattedDate(format, date) {
    return tokenizeFormat(format).reduce(function (res, token) {
        if (token.type === TokenType.separator) {
            return res + token.value;
        }
        else {
            if (!formatters[token.value]) {
                return res;
            }
            return res + formatters[token.value](date);
        }
    }, "");
}
exports.getFormattedDate = getFormattedDate;
var datePartQueue = { "%Y": 1, "%y": 1, "%M": 2, "%F": 2, "%m": 2, "%n": 2 };
function stringToDate(str, format, validate) {
    if (typeof str !== "string") {
        return;
    }
    format = format.replace(/([a-z])(%a)/i, function () {
        var match = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            match[_i] = arguments[_i];
        }
        str = str.replace(/(am|pm)/i, " $&");
        return match[1] + " " + match[2];
    });
    var tokens = tokenizeFormat(format);
    var dateParts = new Array(2);
    var index = 0;
    var formatter = null;
    var dateFormat;
    var message = "Incorrect date, see docs: https://docs.dhtmlx.com/suite/calendar__api__calendar_dateformat_config.html";
    var addDatePart = function (part) {
        var queue = datePartQueue[part.formatter];
        if (queue) {
            dateParts[queue - 1] = part;
            return;
        }
        if (part.formatter === "%A" || part.formatter === "%a") {
            dateFormat = part.value;
        }
        dateParts.push(part);
    };
    for (var i = 0; i < tokens.length; i++) {
        if (tokens[i].type === TokenType.separator) {
            var separatorIndex = str.indexOf(tokens[i].value, index);
            if (separatorIndex === -1) {
                if (validate) {
                    return false;
                }
                throw new Error(message);
            }
            if (formatter) {
                addDatePart({
                    formatter: formatter,
                    value: str.slice(index, separatorIndex),
                });
                formatter = null;
            }
            index = separatorIndex + tokens[i].value.length;
        }
        else if (tokens[i].type === TokenType.datePart) {
            if (tokens[i + 1] && tokens[i + 1].type !== TokenType.separator) {
                if (validate) {
                    return false;
                }
                throw new Error(message);
            }
            else {
                formatter = tokens[i].value;
            }
        }
    }
    if (formatter) {
        addDatePart({
            formatter: formatter,
            value: str.slice(index),
        });
    }
    var date = new Date(0);
    for (var _i = 0, dateParts_1 = dateParts; _i < dateParts_1.length; _i++) {
        var datePart = dateParts_1[_i];
        if (!datePart)
            continue;
        if (setFormatters[datePart.formatter]) {
            if (validate && !setFormatters[datePart.formatter](date, datePart.value, dateFormat, validate)) {
                return false;
            }
            setFormatters[datePart.formatter](date, datePart.value, dateFormat);
        }
    }
    return validate ? true : date;
}
exports.stringToDate = stringToDate;
var DateHelper = exports.DateHelper = /** @class */ (function () {
    function DateHelper() {
    }
    DateHelper.copy = function (d) {
        return new Date(d);
    };
    DateHelper.fromYear = function (year) {
        return new Date(year, 0, 1);
    };
    DateHelper.fromYearAndMonth = function (year, month) {
        return new Date(year, month, 1);
    };
    DateHelper.weekStart = function (d, firstWeekday) {
        var diff = (d.getDay() + 7 - firstWeekday) % 7;
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() - diff);
    };
    DateHelper.monthStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), 1);
    };
    DateHelper.yearStart = function (d) {
        return new Date(d.getFullYear(), 0, 1);
    };
    DateHelper.dayStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), d.getDate());
    };
    DateHelper.addDay = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() + count);
    };
    DateHelper.addMonth = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth() + count);
    };
    DateHelper.addYear = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear() + count, d.getMonth());
    };
    DateHelper.withHoursAndMinutes = function (d, hours, minutes, dateFormat) {
        if (dateFormat === undefined || (!dateFormat && hours === 12) || (dateFormat && hours !== 12)) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours, minutes);
        }
        else if (dateFormat && hours === 12) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, minutes);
        }
        else {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours + 12, minutes);
        }
    };
    DateHelper.setMonth = function (d, month) {
        d.setMonth(month);
    };
    DateHelper.setYear = function (d, year) {
        d.setFullYear(year);
    };
    DateHelper.mergeHoursAndMinutes = function (source, target) {
        return new Date(source.getFullYear(), source.getMonth(), source.getDate(), target.getHours(), target.getMinutes());
    };
    DateHelper.isWeekEnd = function (d) {
        return d.getDay() === 0 || d.getDay() === 6;
    };
    DateHelper.getTwelweYears = function (d) {
        var y = d.getFullYear();
        var firstYear = y - (y % 12);
        return (0, core_1.range)(firstYear, firstYear + 11);
    };
    DateHelper.getDayOrdinal = function (d) {
        var dayMS = 24 * 60 * 60 * 1000;
        return (d.valueOf() - DateHelper.yearStart(d).valueOf()) / dayMS;
    };
    DateHelper.getWeekNumber = function (d) {
        var currThursday = d.getDay() === 4 ? d : DateHelper.addDay(d, 4 - d.getDay());
        var ordinal = DateHelper.getDayOrdinal(currThursday);
        return Math.trunc(ordinal / 7) + 1;
    };
    DateHelper.isSameDay = function (d1, d2) {
        return (d1.getFullYear() === d2.getFullYear() &&
            d1.getMonth() === d2.getMonth() &&
            d1.getDate() === d2.getDate());
    };
    DateHelper.toDateObject = function (date, dateFormat) {
        if (typeof date === "string") {
            return stringToDate(date, dateFormat);
        }
        else {
            return new Date(date);
        }
    };
    DateHelper.nullTimestampDate = new Date(0);
    return DateHelper;
}());


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.focusManager = void 0;
var html_1 = __webpack_require__(4);
var FocusManager = /** @class */ (function () {
    function FocusManager() {
        var _this = this;
        this._initHandler = function (e) { return (_this._activeWidgetId = (0, html_1.locate)(e, "data-dhx-widget-id")); };
        this._removeFocusClass = function (e) {
            var classList = document.body.classList;
            if (classList.contains("utilityfocus"))
                classList.remove("utilityfocus");
        };
        this._addFocusClass = function (e) {
            var classList = document.body.classList;
            if (e.code === "Tab") {
                if (!classList.contains("utilityfocus"))
                    classList.add("utilityfocus");
            }
            else {
                if (classList.contains("utilityfocus"))
                    classList.remove("utilityfocus");
            }
        };
        document.addEventListener("focusin", this._initHandler);
        document.addEventListener("pointerdown", this._initHandler);
        document.addEventListener("mousedown", this._removeFocusClass);
        document.addEventListener("keydown", this._addFocusClass);
    }
    FocusManager.prototype.getFocusId = function () {
        return this._activeWidgetId;
    };
    FocusManager.prototype.setFocusId = function (id) {
        this._activeWidgetId = id;
    };
    return FocusManager;
}());
exports.focusManager = new FocusManager();


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollFixedColsAndRows = exports.getTotalHeight = exports.getTotalWidth = exports.isHtmlEnable = exports.isTooltip = exports.getTooltipConfig = exports.isContentTooltip = exports.showTooltip = exports.isAutoWidth = exports.isSortable = exports.isRowEmpty = exports.isCssSupport = exports.removeHTMLTags = exports.getStyleByClass = exports.transpose = void 0;
var core_1 = __webpack_require__(0);
var html_1 = __webpack_require__(4);
var ts_message_1 = __webpack_require__(17);
function transpose(arr, transform) {
    var columns = [];
    for (var i = 0; i < arr.length; i++) {
        var row = arr[i];
        for (var cellInd = 0; cellInd < row.length; cellInd++) {
            columns[cellInd] = columns[cellInd] || [];
            var cell = transform ? transform(row[cellInd]) : row[cellInd];
            columns[cellInd].push(cell);
        }
    }
    return columns;
}
exports.transpose = transpose;
function insert(node, newone) {
    if (typeof newone === "string") {
        node.insertAdjacentHTML("beforeend", newone);
        return node.lastChild;
    }
    else {
        node.appendChild(newone);
        return newone;
    }
}
function getStyleByClass(cssClass, targetClass, def, container) {
    if (container === void 0) { container = document.body; }
    var cont = container.querySelector("." + targetClass.trim().replace(/\s/g, "."));
    var testDiv = insert(cont, "<div class=\"".concat(cssClass, "\"></div>"));
    var styles = window.getComputedStyle(testDiv);
    var TRANSPARENT = "rgba(0, 0, 0, 0)";
    var background;
    if (styles.backgroundColor === TRANSPARENT) {
        var contStyles = window.getComputedStyle(cont);
        background =
            contStyles.backgroundColor === TRANSPARENT
                ? def.background
                : (0, core_1.rgbToHex)(contStyles.backgroundColor);
    }
    else {
        background = (0, core_1.rgbToHex)(styles.backgroundColor);
    }
    var result = {
        color: styles.color === "rgb(0, 0, 0)" ? def.color : (0, core_1.rgbToHex)(styles.color),
        background: background,
        fontSize: Math.round(parseFloat(styles.fontSize)),
        bold: ["bold", "700", "600", "500"].includes(styles.fontWeight),
    };
    cont.removeChild(testDiv);
    if ((0, core_1.compare)(result, def))
        return null;
    return result;
}
exports.getStyleByClass = getStyleByClass;
function removeHTMLTags(str) {
    if (typeof str !== "string" && typeof str !== "number" && typeof str !== "boolean") {
        return "";
    }
    return "".concat(str === undefined || str === null ? "" : str)
        .replace(/<[^>]*>/g, "")
        .replace(/["]/g, "&quot;")
        .trim();
}
exports.removeHTMLTags = removeHTMLTags;
function isCssSupport(property, value) {
    try {
        return CSS.supports(property, value);
    }
    catch (err) {
        var el = document.createElement("div");
        el.style[property] = value;
        return el.style[property] === value;
    }
}
exports.isCssSupport = isCssSupport;
function isRowEmpty(row) {
    if (!row) {
        return;
    }
    return Object.keys(row).reduce(function (acc, col) {
        if (col === "id" || col.startsWith("$")) {
            return acc;
        }
        if (acc && row[col] !== undefined && row[col] !== "") {
            return;
        }
        return acc;
    }, true);
}
exports.isRowEmpty = isRowEmpty;
function isSortable(config, col) {
    return (col.sortable !== false && config.sortable) || col.sortable;
}
exports.isSortable = isSortable;
function isAutoWidth(config, col) {
    if (col) {
        return (col.autoWidth !== false && config.autoWidth) || col.autoWidth;
    }
    var check = false;
    config.columns.map(function (col) {
        if ((col.autoWidth !== false && config.autoWidth) || col.autoWidth) {
            check = true;
            return;
        }
    });
    return check;
}
exports.isAutoWidth = isAutoWidth;
function showTooltip(value, config) {
    if (!config.node)
        return;
    (0, ts_message_1.tooltip)(value.toString(), __assign(__assign({}, config), { css: "dhx_grid_tooltip " + (config.css || "") }));
}
exports.showTooltip = showTooltip;
function isContentTooltip(config, col, cell, type) {
    var isEnable = false;
    var cellProp = type === "header" ? config.headerTooltip : config.footerTooltip;
    var prop = [config.tooltip, cellProp, col.tooltip, cell === null || cell === void 0 ? void 0 : cell.tooltip];
    for (var index = 0; index < prop.length; index++) {
        if (prop[index] || typeof prop[index] === "boolean") {
            isEnable = !!prop[index];
        }
    }
    return isEnable;
}
exports.isContentTooltip = isContentTooltip;
function getTooltipConfig(config, col, cell, type) {
    return ([
        cell === null || cell === void 0 ? void 0 : cell.tooltip,
        col === null || col === void 0 ? void 0 : col.tooltip,
        type && (type === "header" ? config.headerTooltip : config.footerTooltip),
        config.tooltip,
    ].find(function (tooltip) { return tooltip instanceof Object; }) || {});
}
exports.getTooltipConfig = getTooltipConfig;
function isTooltip(config, element) {
    return (element.tooltip !== false && config.tooltip) || element.tooltip;
}
exports.isTooltip = isTooltip;
function isHtmlEnable(config, col, content) {
    var _a, _b;
    return !!((_b = (_a = content === null || content === void 0 ? void 0 : content.htmlEnable) !== null && _a !== void 0 ? _a : col.htmlEnable) !== null && _b !== void 0 ? _b : config.htmlEnable);
}
exports.isHtmlEnable = isHtmlEnable;
function getTotalWidth(columns) {
    return columns.reduce(function (total, col) { return total + (col.$width || 0); }, 0);
}
exports.getTotalWidth = getTotalWidth;
function getTotalHeight(rows) {
    return rows.reduce(function (total, row) { return total + (row.$height || 0); }, 0);
}
exports.getTotalHeight = getTotalHeight;
function scrollFixedColsAndRows(e) {
    var grid = (0, html_1.locateNode)(e, "data-dhx-widget-id");
    var gridBody = grid.querySelector(".dhx_grid-body");
    var delta = e.deltaY;
    var position = e.shiftKey ? [delta, 0] : [0, delta];
    gridBody === null || gridBody === void 0 ? void 0 : gridBody.scrollBy.apply(gridBody, position);
}
exports.scrollFixedColsAndRows = scrollFixedColsAndRows;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyManager = void 0;
var FocusManager_1 = __webpack_require__(19);
var html_1 = __webpack_require__(4);
function getHotKeyCode(code) {
    var matches = code.toLowerCase().match(/\w+/g);
    var comp = 0;
    var key = "";
    for (var i = 0; i < matches.length; i++) {
        var check = matches[i];
        if (check === "ctrl") {
            comp += 4;
        }
        else if (check === "shift") {
            comp += 2;
        }
        else if (check === "alt") {
            comp += 1;
        }
        else {
            key = check;
        }
    }
    return comp + key;
}
var ie_key_map = {
    Up: "arrowUp",
    Down: "arrowDown",
    Right: "arrowRight",
    Left: "arrowLeft",
    Esc: "escape",
    Spacebar: "space",
};
var KeyManager = /** @class */ (function () {
    function KeyManager(beforeCall) {
        var _this = this;
        this._keysStorage = {};
        this._initHandler = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = (0, html_1.isIE)() ? ie_key_map[keyName] || keyName : keyName;
            }
            var actions = _this._keysStorage[(e.ctrlKey || e.metaKey ? 4 : 0) +
                (e.shiftKey ? 2 : 0) +
                (e.altKey ? 1 : 0) +
                (key && key.toLowerCase())];
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    if (_this._beforeCall && _this._beforeCall(e, FocusManager_1.focusManager.getFocusId()) === false) {
                        return;
                    }
                    actions[i].handler(e);
                }
            }
        };
        if (beforeCall) {
            this._beforeCall = beforeCall;
        }
        document.addEventListener("keydown", this._initHandler);
    }
    KeyManager.prototype.destructor = function () {
        document.removeEventListener("keydown", this._initHandler);
        this.removeHotKey();
    };
    KeyManager.prototype.addHotKey = function (key, handler) {
        var code = getHotKeyCode(key);
        if (!this._keysStorage[code]) {
            this._keysStorage[code] = [];
        }
        this._keysStorage[code].push({ handler: handler });
    };
    KeyManager.prototype.removeHotKey = function (key, handler) {
        var _this = this;
        if (key) {
            if (key && handler) {
                var code_1 = getHotKeyCode(key);
                var functionToString_1 = function (fun) {
                    return fun
                        .toString()
                        .replace(/\n/g, "")
                        .replace(/\s/g, "");
                };
                this._keysStorage[code_1].forEach(function (existHotKey, i) {
                    if (functionToString_1(existHotKey.handler) === functionToString_1(handler)) {
                        delete _this._keysStorage[code_1][i];
                        _this._keysStorage[code_1] = _this._keysStorage[code_1].filter(function (el) { return el; });
                    }
                });
            }
            else {
                var code = getHotKeyCode(key);
                delete this._keysStorage[code];
            }
        }
        else {
            this._keysStorage = {};
        }
    };
    KeyManager.prototype.exist = function (key) {
        var code = getHotKeyCode(key);
        return !!this._keysStorage[code];
    };
    KeyManager.prototype.getKeyStorageLength = function () {
        return Object.keys(this._keysStorage).length;
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEditorValue = exports.getValueForNumberColumn = exports.getEditorOptions = exports.toFormat = exports.getMaxColsWidth = exports.getTreeCellWidthOffset = exports.getCalculatedRowHeight = exports.getMaxRowHeight = exports.getUnique = exports.calculatePositions = exports.countColumns = exports.measureTextHeight = exports.normalizeArray = void 0;
var core_1 = __webpack_require__(0);
var main_1 = __webpack_require__(20);
var date_1 = __webpack_require__(18);
function normalizeArray(obj, name) {
    if (!obj[name]) {
        return;
    }
    if (typeof obj[name] === "string") {
        obj[name] = [
            {
                text: "".concat(obj[name]),
            },
        ];
    }
    else {
        obj[name] = obj[name].map(function (el) {
            if (typeof el === "string") {
                el = { text: el };
            }
            return el;
        });
    }
}
exports.normalizeArray = normalizeArray;
function measureTextHeight(_a) {
    var _b = _a.text, text = _b === void 0 ? "" : _b, _c = _a.width, width = _c === void 0 ? 0 : _c, _d = _a.lineHeight, lineHeight = _d === void 0 ? 20 : _d, _e = _a.font, font = _e === void 0 ? "14px Arial" : _e, _f = _a.htmlEnable, htmlEnable = _f === void 0 ? false : _f;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = font;
    var defaultLineBreak = [];
    var mathLineBreak = [];
    if (htmlEnable)
        text = (0, main_1.removeHTMLTags)(text);
    var lineBreak = Math.ceil(ctx.measureText(text).width / width);
    if (lineBreak > 1)
        lineBreak = (0, core_1.getTextLines)(ctx, text, width).length;
    mathLineBreak.push(lineBreak);
    defaultLineBreak.push(text.split("\n").length);
    var maxRows = Math.max((0, core_1.getMaxArrayNumber)(defaultLineBreak), (0, core_1.getMaxArrayNumber)(mathLineBreak));
    canvas.remove();
    return maxRows * lineHeight;
}
exports.measureTextHeight = measureTextHeight;
function countColumns(config, columns) {
    var headerRowsCount = 0;
    var footerRowsCount = 0;
    var totalWidth = 0;
    var colspans = false;
    var rowsHeadersCount = 0;
    var footer = false;
    columns.forEach(function (col) {
        headerRowsCount = Math.max(headerRowsCount, col.header.length);
        totalWidth += col.$width;
        if (col.footer) {
            footerRowsCount = Math.max(footerRowsCount, col.footer.length);
            if (!footer) {
                footer = true;
            }
        }
        if (!colspans) {
            for (var _i = 0, _a = col.header; _i < _a.length; _i++) {
                var head = _a[_i];
                if (head.colspan) {
                    colspans = true;
                    return;
                }
            }
        }
    });
    // fill missing cells
    columns.forEach(function (col) {
        if (footer) {
            col.footer = col.footer || [];
        }
        if (col.header.length < headerRowsCount) {
            for (var i = 0; i < headerRowsCount; i++) {
                col.header[i] = col.header[i] || { text: "" };
            }
        }
        if (col.footer) {
            if (col.footer.length < footerRowsCount) {
                for (var i = 0; i < footerRowsCount; i++) {
                    col.footer[i] = col.footer[i] || { text: "" };
                }
            }
            for (var i = 0; i < col.footer.length; i++) {
                if (!col.footer[i].id)
                    col.footer[i].id = (0, core_1.uid)();
            }
        }
        col.header = col.header.map(function (head) {
            if (typeof head !== "object") {
                head = { text: head };
            }
            head.css = head.css || "";
            if (!head.text && !head.css.includes("dhx_cell-empty")) {
                head.css += " dhx_cell-empty";
            }
            if (!head.id)
                head.id = (0, core_1.uid)();
            return head;
        });
        // find header columns indexes
        if (col.header[0].text === "") {
            rowsHeadersCount++;
        }
    });
    config.$totalWidth = totalWidth;
    config.$colspans = colspans;
    config.$footer = footer;
    return rowsHeadersCount;
}
exports.countColumns = countColumns;
function calculatePositions(width, height, scroll, conf, data) {
    var _a, _b, _c;
    var columns = conf.columns || [];
    var columnsLength = columns.length;
    var rows = data || [];
    var rowsLength = rows.length;
    var leftSplit = conf.leftSplit
        ? conf.columns.slice(0, conf.leftSplit).filter(function (col) { return !col.hidden; }).length
        : 0;
    var topSplit = (_a = conf.topSplit) !== null && _a !== void 0 ? _a : 0;
    var rightSplit = (_b = conf.rightSplit) !== null && _b !== void 0 ? _b : 0;
    var bottomSplit = (_c = conf.bottomSplit) !== null && _c !== void 0 ? _c : 0;
    var x = 0;
    var hiddenColCount = 0;
    var scrollLeft = scroll.left;
    var avrColWidth = conf.$totalWidth / columnsLength;
    for (var i = 0; i < columnsLength; i++) {
        var col = columns[i];
        if (col.hidden) {
            hiddenColCount++;
            continue;
        }
        scrollLeft = scrollLeft - col.$width;
        if (scrollLeft + avrColWidth / 2 > 0) {
            x++;
        }
        else {
            break;
        }
    }
    var y = 0;
    var hiddenRowCount = 0;
    var scrollTop = scroll.top;
    var avrRowHeight = conf.$totalHeight / rowsLength;
    for (var i = 0; i < rowsLength; i++) {
        var row = rows[i];
        if (row.hidden) {
            hiddenRowCount++;
            continue;
        }
        scrollTop = scrollTop - row.$height;
        if (scrollTop + avrRowHeight / 2 > 0) {
            y++;
        }
        else {
            break;
        }
    }
    var sizeByWidth = 0;
    var itemsTotalByWidth = 0;
    var maxWidth = -Infinity;
    var minWidth = +Infinity;
    var xStartIdx = x + hiddenColCount;
    for (var index = 0; index < columnsLength; index++) {
        var column = columns[index];
        if (index >= xStartIdx && sizeByWidth < width && !column.hidden) {
            sizeByWidth += column.$width;
            itemsTotalByWidth++;
        }
        if (column.$width > maxWidth)
            maxWidth = column.$width;
        if (column.$width < minWidth)
            minWidth = column.$width;
    }
    var sizeByHeight = 0;
    var itemsTotalByHeight = 0;
    var maxHeight = -Infinity;
    var minHeight = +Infinity;
    var yStartIdx = y + hiddenRowCount;
    for (var index = 0; index < rowsLength; index++) {
        var row = rows[index];
        if (index >= yStartIdx && sizeByHeight < height && !row.hidden) {
            sizeByHeight += row.$height;
            itemsTotalByHeight++;
        }
        if (row.$height > maxHeight)
            maxHeight = row.$height;
        if (row.$height < minHeight)
            minHeight = row.$height;
    }
    minHeight = minHeight < conf.rowHeight ? minHeight : conf.rowHeight;
    var xReserve = Math.round(maxWidth / minWidth);
    var yReserve = Math.round(maxHeight / minHeight);
    var xStart = x - xReserve >= leftSplit ? x - xReserve : leftSplit;
    var xTotal = x + itemsTotalByWidth + xReserve;
    var leftSplitHidden = (conf.leftSplit || 0) - leftSplit;
    var colIndexStartSplit = columns.length - rightSplit - leftSplitHidden;
    var xEnd = xTotal < colIndexStartSplit ? xTotal : colIndexStartSplit;
    var yStart = y - yReserve >= topSplit ? y - yReserve : topSplit;
    var yTotal = y + itemsTotalByHeight + yReserve;
    var rowIndexStartSplit = rows.length - bottomSplit;
    var yEnd = yTotal < rowIndexStartSplit ? yTotal : rowIndexStartSplit;
    return {
        xStart: xStart,
        xEnd: xEnd,
        yStart: yStart,
        yEnd: yEnd,
    };
}
exports.calculatePositions = calculatePositions;
function getUnique(arr, name, multiselection) {
    var allItems = arr.map(function (item) { return item[name]; });
    if (multiselection) {
        allItems.forEach(function (item, index) {
            if (typeof item === "string" && item.includes(", ")) {
                item.split(", ").forEach(function (i) { return allItems.push(i); });
                delete allItems[index];
            }
        });
    }
    return allItems.filter(function (item, i, array) { return array.indexOf(item) === i && (0, core_1.isDefined)(item); }).sort();
}
exports.getUnique = getUnique;
var getMaxRowHeight = function (row, cols, config) {
    var _a, _b;
    if (config === void 0) { config = { font: "14px Arial", lineHeight: 20 }; }
    var HORIZONTAL_OFFSET = 24;
    var VERTICAL_OFFSET = 8;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = config.font;
    var definedColumns = {};
    var colLength = cols.length;
    for (var index = 0; index < colLength; index++) {
        if (cols[index].template) {
            definedColumns[cols[index].id] = {
                width: cols[index].$width - HORIZONTAL_OFFSET || 0,
                htmlEnable: cols[index].htmlEnable,
                template: cols[index].template,
                cols: cols[index],
            };
        }
        else {
            definedColumns[cols[index].id] = {
                width: cols[index].$width - HORIZONTAL_OFFSET || 0,
                htmlEnable: cols[index].htmlEnable,
                cols: cols[index],
            };
        }
    }
    var defaultLineBreak = [];
    var mathLineBreak = [];
    // eslint-disable-next-line prefer-const
    for (var _i = 0, _c = Object.entries(row); _i < _c.length; _i++) {
        var _d = _c[_i], key = _d[0], value = _d[1];
        if (definedColumns[key] &&
            key !== "height" &&
            !key.startsWith("$") &&
            (typeof value === "string" ||
                typeof value === "number" ||
                value instanceof Date ||
                Array.isArray(value))) {
            var column = definedColumns[key].cols;
            value =
                column.editorType === "combobox" || column.editorType === "multiselect"
                    ? getComboEditorValue(value, column, row)
                    : value;
            var currentValue = "";
            if ((_a = definedColumns[key]) === null || _a === void 0 ? void 0 : _a.template) {
                var templateValue = definedColumns[key].template(value, row, definedColumns[key].cols);
                currentValue = definedColumns[key].htmlEnable ? (0, main_1.removeHTMLTags)(templateValue) : templateValue;
            }
            else if (typeof value === "string") {
                if (definedColumns[key].htmlEnable) {
                    currentValue = (0, main_1.removeHTMLTags)(value);
                }
                else {
                    currentValue = value;
                }
            }
            else {
                currentValue = value.toString();
            }
            var lineBreak = Math.ceil(ctx.measureText(currentValue).width / definedColumns[key].width);
            if (lineBreak > 1) {
                lineBreak = (0, core_1.getTextLines)(ctx, currentValue, (_b = definedColumns[key]) === null || _b === void 0 ? void 0 : _b.width).length;
            }
            mathLineBreak.push(lineBreak);
            defaultLineBreak.push(currentValue.split("\n").length);
        }
    }
    var maxRows = Math.max((0, core_1.getMaxArrayNumber)(defaultLineBreak), (0, core_1.getMaxArrayNumber)(mathLineBreak));
    canvas.remove();
    return maxRows * config.lineHeight + VERTICAL_OFFSET;
};
exports.getMaxRowHeight = getMaxRowHeight;
var getCalculatedRowHeight = function (height, config) {
    config = __assign({ rowHeight: 40, padding: 12 }, config);
    var calculateHeight = config.rowHeight < 40 ? height : height + config.padding * 2;
    return height < config.rowHeight ? config.rowHeight : calculateHeight;
};
exports.getCalculatedRowHeight = getCalculatedRowHeight;
var getTreeCellWidthOffset = function (row) {
    return 20 + row.$level * 20 - (row.$items ? 20 : 0);
};
exports.getTreeCellWidthOffset = getTreeCellWidthOffset;
var getMaxColsWidth = function (rows, cols, config, target) {
    if (config === void 0) { config = {
        font: "normal 14.4px Arial",
    }; }
    if (!rows.length || !cols.length)
        return;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = config.font;
    var definedColumns = {};
    var colLength = cols.length;
    for (var index = 0; index < colLength; index++) {
        var col = cols[index];
        var template = col.template, htmlEnable = col.htmlEnable, format = col.format, id = col.id, type = col.type;
        if (template && target === "data") {
            definedColumns[id] = {
                width: 20,
                htmlEnable: !!htmlEnable,
                template: template,
                cols: col,
                type: type,
            };
        }
        else {
            definedColumns[id] = {
                width: 20,
                htmlEnable: !!htmlEnable,
                format: type === "date" ? format || "%M %d %Y" : format,
                cols: col,
                type: type,
            };
        }
    }
    var rowsLength = rows.length;
    for (var index = 0; index < rowsLength; index++) {
        // eslint-disable-next-line prefer-const
        for (var _i = 0, _a = Object.entries(rows[index]); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            var definedCol = definedColumns[key];
            if (definedCol &&
                key !== "height" &&
                !key.startsWith("$") &&
                (typeof value === "string" ||
                    typeof value === "number" ||
                    value instanceof Date ||
                    Array.isArray(value))) {
                var template = definedCol.template, cols_1 = definedCol.cols, format = definedCol.format, type = definedCol.type, htmlEnable = definedCol.htmlEnable, colWidth = definedCol.width;
                value =
                    cols_1.editorType === "combobox" || cols_1.editorType === "multiselect"
                        ? getComboEditorValue(value, cols_1, rows[index])
                        : value;
                var currentValue = void 0;
                if (typeof template === "function") {
                    var templateValue = template(value, rows[index], cols_1);
                    currentValue = htmlEnable ? (0, main_1.removeHTMLTags)(templateValue) : templateValue;
                }
                else {
                    currentValue = htmlEnable ? (0, main_1.removeHTMLTags)(value) : value.toString();
                }
                var date = format && type === "date" && new Date(currentValue);
                if (date === null || date === void 0 ? void 0 : date.valueOf()) {
                    currentValue = (0, date_1.getFormattedDate)(format, date);
                }
                var width = ctx.measureText(currentValue).width;
                if (width > colWidth)
                    definedColumns[key].width = width;
            }
        }
    }
    canvas.remove();
    var totalColumns = {};
    for (var _c = 0, _d = Object.entries(definedColumns); _c < _d.length; _c++) {
        var _e = _d[_c], key = _e[0], value = _e[1];
        totalColumns[key] = Math.ceil(value.width);
    }
    return totalColumns;
};
exports.getMaxColsWidth = getMaxColsWidth;
function toFormat(value, type, format) {
    if (typeof value === "boolean") {
        return value;
    }
    if (!value && typeof value !== "number") {
        return value;
    }
    var formatTemplate = function (type) {
        var result;
        var fractional;
        var delimiter;
        var template = format
            .replace(/#+/g, "#")
            .split("#")
            .filter(function (i) { return i; });
        var formatFractionLength = format.match(/0/g) && format.match(/0/g).length;
        value = (type === "percent" ? Number(value) * 100 : value).toString();
        var truncNumber = Math.trunc(Number(value));
        if (formatFractionLength) {
            var truncFractional = value.split(".")[1] || "0";
            delimiter = template.find(function (i) { return i.includes("0"); }).replace(/0+/g, "");
            fractional = Number("0." + truncFractional).toFixed(formatFractionLength);
            if (Number(fractional) >= 1) {
                truncNumber++;
            }
            fractional = fractional
                .toString()
                .split(".")[1]
                .padEnd(formatFractionLength, "0");
        }
        var trunc = "".concat(value < 0 && Math.abs(truncNumber) === 0 ? "-" : "").concat(truncNumber);
        var truncTemplate = template.find(function (i) { return !i.includes("0"); });
        result = truncTemplate ? trunc.replace(/(\d)(?=(\d{3})+(\D|$))/g, "$1".concat(truncTemplate)) : trunc;
        result += (delimiter || "") + (fractional || "");
        return type === "percent" ? "".concat(result, "%") : result;
    };
    switch (type) {
        case "number":
            return format && !isNaN(Number(value)) ? formatTemplate(type) : value;
        case "percent":
            if (!format)
                format = "#";
            return !isNaN(Number(value)) ? formatTemplate(type) : value;
        case "date":
            if (!format)
                format = "%M %d %Y";
            if (typeof value === "string") {
                value = (0, date_1.getFormattedDate)(format, (0, date_1.stringToDate)(value, format));
            }
            else if (typeof value === "object") {
                value = (0, date_1.getFormattedDate)(format, value);
            }
            return value;
        default:
            return value;
    }
}
exports.toFormat = toFormat;
function getEditorOptions(col, row) {
    return __spreadArray(__spreadArray([], ((typeof col.options === "function" ? col.options(col, row) : col.options) || []), true), (col.$customOptions || []), true);
}
exports.getEditorOptions = getEditorOptions;
function getValueForNumberColumn(col, value) {
    if (!(0, core_1.isDefined)(value) ||
        value === "" ||
        typeof value === "number" ||
        ["select", "combobox", "multiselect"].includes(col.editorType)) {
        return value;
    }
    else if (typeof value === "string") {
        return parseFloat(value);
    }
    else {
        return NaN;
    }
}
exports.getValueForNumberColumn = getValueForNumberColumn;
function getComboEditorValue(value, col, row) {
    var options = getEditorOptions(col, row);
    return col.editorType === "multiselect" && typeof value === "string"
        ? value
            .split(",")
            .map(function (val) { return getEditorValue(val.trim(), options); })
            .join(", ")
        : getEditorValue(value, options);
}
function getEditorValue(value, options) {
    var option = options.find(function (option) { return option instanceof Object && option.id == value; });
    return option ? option.value : value;
}
exports.getEditorValue = getEditorValue;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(158), exports);
__exportStar(__webpack_require__(159), exports);
__exportStar(__webpack_require__(40), exports);


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proRender = exports.render = exports.applyAutoWidth = exports.getElementSizes = exports.getRenderConfig = exports.getCurrFixedCols = exports.calcScrollBarWidth = exports.BORDERS = void 0;
var dom_1 = __webpack_require__(1);
var html_1 = __webpack_require__(4);
var data_1 = __webpack_require__(22);
var main_1 = __webpack_require__(20);
var types_1 = __webpack_require__(9);
var Cells_1 = __webpack_require__(31);
var FixedCols_1 = __webpack_require__(83);
var FixedRows_1 = __webpack_require__(84);
var core_1 = __webpack_require__(0);
exports.BORDERS = 2;
function calcScrollBarWidth(config, customScroll, sizes) {
    var _a, _b;
    if (customScroll === void 0) { customScroll = false; }
    var yState = config.$totalHeight + config.$headerHeight + config.$footerHeight + exports.BORDERS >
        ((_a = sizes === null || sizes === void 0 ? void 0 : sizes.height) !== null && _a !== void 0 ? _a : config.$height);
    var scrollbarY = !yState || customScroll ? 0 : (0, html_1.getScrollbarWidth)();
    var xState = config.$totalWidth + exports.BORDERS + scrollbarY > ((_b = sizes === null || sizes === void 0 ? void 0 : sizes.width) !== null && _b !== void 0 ? _b : config.$width);
    var scrollbarX = !xState || customScroll ? 0 : (0, html_1.getScrollbarWidth)();
    return { x: scrollbarX, y: scrollbarY, xState: xState, yState: yState };
}
exports.calcScrollBarWidth = calcScrollBarWidth;
function getCurrFixedCols(config, split) {
    if (!config[split])
        return [];
    return (split === types_1.Split.left
        ? config.columns.slice(0, config.leftSplit)
        : config.columns.slice(-config.rightSplit)).filter(function (col) { return !col.hidden; });
}
exports.getCurrFixedCols = getCurrFixedCols;
function getWrapperAutoHeight(grid, config, wrapperSizes) {
    var _a, _b;
    var container = grid._container;
    var height = config.$headerHeight +
        (config.$footerHeight && config.$footerHeight + 1) +
        config.$totalHeight +
        exports.BORDERS;
    if (container) {
        var _c = window.getComputedStyle(container), minHeight = _c.minHeight, maxHeight = _c.maxHeight;
        if (height <= parseFloat(minHeight)) {
            return parseFloat(minHeight);
        }
        else if (height >= parseFloat(maxHeight)) {
            return parseFloat(maxHeight);
        }
        else {
            return height + calcScrollBarWidth(config, !!((_a = grid.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable), wrapperSizes).x;
        }
    }
    else {
        return (height +
            (wrapperSizes ? calcScrollBarWidth(config, !!((_b = grid.scrollView) === null || _b === void 0 ? void 0 : _b.config.enable), wrapperSizes).x : 0));
    }
}
function isSpanVisible(span, visibility, _a, dataLength) {
    var _b = _a === void 0 ? [0, 0] : _a, fixedStart = _b[0], fixedEnd = _b[1];
    var spanStart = span[0], spanEnd = span[1];
    var visStart = visibility[0], visEnd = visibility[1];
    var isRangeVisible = (visStart <= spanStart && spanStart <= visEnd) ||
        (visStart <= spanEnd && spanEnd <= visEnd) ||
        (spanStart <= visStart && visEnd <= spanEnd);
    return isRangeVisible || spanStart < fixedStart || (fixedEnd && spanEnd >= dataLength - fixedEnd);
}
function getRenderConfig(obj, data, wrapperSizes) {
    var config = obj.config;
    var _a = config.spans, spans = _a === void 0 ? [] : _a, columns = config.columns, _b = config.leftSplit, leftSplit = _b === void 0 ? 0 : _b, _c = config.topSplit, topSplit = _c === void 0 ? 0 : _c, _d = config.rightSplit, rightSplit = _d === void 0 ? 0 : _d, _e = config.bottomSplit, bottomSplit = _e === void 0 ? 0 : _e;
    var filteredColumns = columns.filter(function (col) { return !col.hidden; });
    var positions = (0, data_1.calculatePositions)(wrapperSizes.width, wrapperSizes.height, obj._scroll, config, data);
    var currentColumns = filteredColumns.slice(positions.xStart, positions.xEnd);
    var currentRows = data.slice(positions.yStart, positions.yEnd);
    var currentSpans = spans.filter(function (span) {
        var _a;
        if (!((_a = span.$renderFrom) === null || _a === void 0 ? void 0 : _a.length))
            return false;
        var rowInRange = isSpanVisible(span.$rowsVisibility, [positions.yStart, positions.yEnd], [topSplit, bottomSplit], data.length);
        var colInRange = isSpanVisible(span.$colsVisibility, [positions.xStart, positions.xEnd], [leftSplit, rightSplit], columns.length);
        return rowInRange && colInRange;
    });
    // const currentSpans = spans;
    var fixedColumns = {
        left: getCurrFixedCols(config, types_1.Split.left),
        right: getCurrFixedCols(config, types_1.Split.right),
    };
    var fixedRows = {
        top: data.slice(0, config.topSplit || 0),
        bottom: config.bottomSplit ? data.slice(-config.bottomSplit) : [],
    };
    return __assign(__assign({}, config), { data: data, columns: config.columns, scroll: obj._scroll, $positions: positions, headerHeight: config.$headerHeight, footerHeight: config.$footerHeight, firstColId: filteredColumns[0] && filteredColumns[0].id, events: obj.events, _events: obj._events, filteredColumns: filteredColumns, currentColumns: currentColumns, currentRows: currentRows, currentSpans: currentSpans, fixedColumns: fixedColumns, fixedRows: fixedRows, sortBy: obj._sortBy, sortDir: obj._sortDir, content: obj.content, gridId: obj._uid, $renderFrom: "render" });
}
exports.getRenderConfig = getRenderConfig;
function getElementSizes(element) {
    if (!element)
        return;
    if (!element.tagName)
        element = element._parent._container;
    if (!element)
        return;
    var styles = element.currentStyle || window.getComputedStyle(element);
    var paddingsByWidth = parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight) || 0;
    var paddingsByHeight = parseFloat(styles.paddingTop) + parseFloat(styles.paddingBottom) || 0;
    return {
        width: element.clientWidth - paddingsByWidth,
        height: element.clientHeight - paddingsByHeight,
    };
}
exports.getElementSizes = getElementSizes;
function getGridData(renderConfig, shifts) {
    var content = (0, Cells_1.getCells)(renderConfig);
    var filteredColumns = renderConfig.filteredColumns, $resizing = renderConfig.$resizing, $totalHeight = renderConfig.$totalHeight, $totalWidth = renderConfig.$totalWidth, leftSplit = renderConfig.leftSplit, data = renderConfig.data, $positions = renderConfig.$positions;
    var contentSpans = (0, Cells_1.getSpans)(renderConfig);
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var resizedLine;
    if ($resizing) {
        var colIndex = (0, core_1.findIndex)(filteredColumns, function (col) { return col.id === $resizing; });
        var firstCellLeft = (0, main_1.getTotalWidth)(filteredColumns.slice(0, colIndex)) + filteredColumns[colIndex].$width;
        resizedLine = (0, dom_1.el)(".dhx_grid-resize-line", {
            style: {
                top: 0,
                left: firstCellLeft,
                height: $totalHeight,
            },
        });
    }
    var selection = renderConfig.selection ? renderConfig.selection.toHTML() : null;
    selection =
        typeof selection === "string" ? (0, dom_1.el)("div.dhx_selection", { ".innerHTML": selection }) : selection;
    var pos = $positions;
    return (0, dom_1.el)(".dhx_data-wrap", {
        style: {
            height: $totalHeight,
            width: $totalWidth,
            "padding-left": shifts.x,
            "padding-top": shifts.y,
        },
        role: "presentation",
    }, [
        (0, dom_1.el)(".dhx_grid_data".concat(leftSplit ? ".dhx_grid_fixed_left" : ""), __assign(__assign({ _flags: dom_1.KEYED_LIST }, (0, Cells_1.getHandlers)(pos.yStart, pos.xStart, renderConfig)), getRowAriaAttrs(data.length)), content),
        (0, dom_1.el)(".dhx_span-spans", __assign({ role: "presentation" }, (0, Cells_1.getHandlers)(pos.yStart, pos.xStart, renderConfig)), contentSpans),
        (0, dom_1.el)(".dhx_grid_selection", { _ref: "selection", "aria-hidden": "true" }, [selection, resizedLine]),
    ]);
}
function getContentHeight(renderConfig, isSticky, wrapperSizes) {
    var contentHeight = wrapperSizes.height - exports.BORDERS;
    contentHeight = isSticky ? contentHeight : contentHeight - renderConfig.headerHeight;
    var isFooter = renderConfig.$footer;
    return (contentHeight = isFooter
        ? isSticky
            ? contentHeight
            : contentHeight - renderConfig.footerHeight
        : contentHeight);
}
function applyAutoWidth(config, wrapperSizes, scrollViewConfig) {
    if (scrollViewConfig === void 0) { scrollViewConfig = false; }
    var scrollbarY = !scrollViewConfig &&
        config.$totalHeight >= wrapperSizes.height - (config.$headerHeight || 0)
        ? (0, html_1.getScrollbarWidth)()
        : 0;
    var totalWidth = wrapperSizes.width - exports.BORDERS - scrollbarY;
    if (totalWidth < 0) {
        return;
    }
    var columns = (config.columns || []).filter(function (col) { return !col.hidden; });
    var fixedColumns = [];
    var flexibleColumns = [];
    columns.forEach(function (col) {
        if (!col.width && !col.$fixedWidth && (0, main_1.isAutoWidth)(config, col)) {
            flexibleColumns.push(col);
        }
        else {
            fixedColumns.push(col);
        }
    });
    var fullGravity = flexibleColumns.reduce(function (gravity, col) { return gravity + (col.gravity || 1); }, 0);
    var fixedWidth = (0, main_1.getTotalWidth)(fixedColumns);
    flexibleColumns.forEach(function (col) {
        var width = totalWidth > fixedWidth ? (totalWidth - fixedWidth) * ((col.gravity || 1) / fullGravity) : 0;
        var minLimit = col.minWidth && width < (col.minWidth || 0);
        var maxLimit = col.maxWidth && width > (col.maxWidth || 0);
        if (minLimit) {
            col.$width = col.minWidth;
            fixedWidth += (col.$width || 0) - width;
            flexibleColumns = flexibleColumns.filter(function (c) { return c.id != col.id; });
            fixedColumns.push(col);
        }
        else if (maxLimit) {
            col.$width = col.maxWidth;
            fixedWidth += (col.$width || 0) - width;
            flexibleColumns = flexibleColumns.filter(function (c) { return c.id != col.id; });
            fixedColumns.push(col);
        }
    });
    fullGravity = flexibleColumns.reduce(function (gravity, col) { return gravity + (col.gravity || 1); }, 0);
    fixedWidth = (0, main_1.getTotalWidth)(fixedColumns);
    flexibleColumns.forEach(function (col) {
        var width = totalWidth > fixedWidth ? (totalWidth - fixedWidth) * ((col.gravity || 1) / fullGravity) : 0;
        col.$width = width;
    });
}
exports.applyAutoWidth = applyAutoWidth;
function render(vm, obj, htmlEvents, selection, uid) {
    var parentSizes = getElementSizes(obj._container);
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        parentSizes = getElementSizes(parentNode);
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return (0, dom_1.el)("div");
    }
    if (!config.columns.length) {
        return (0, dom_1.el)(".dhx_grid", {
            "data-dhx-widget-id": uid,
            "data-dhx-root-id": config.rootParent,
            role: "empty-grid",
        });
    }
    var data = obj.data.getRawData(0, -1, null, 2);
    if (config.columns.reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.reduce(function (total, _a) {
            var $height = _a.$height;
            return (total += $height || 0);
        }, 0);
    }
    var width = config.width && typeof config.width === "number" ? config.width : parentSizes === null || parentSizes === void 0 ? void 0 : parentSizes.width;
    var height = config.height && typeof config.height === "number" ? config.height : parentSizes === null || parentSizes === void 0 ? void 0 : parentSizes.height;
    var wrapperSizes = { width: width || 0, height: height || 0 };
    // TODO: Remove scroll
    if ((0, main_1.isAutoWidth)(config)) {
        applyAutoWidth(config, wrapperSizes);
        config.$totalWidth = (0, main_1.getTotalWidth)(config.columns.filter(function (col) { return !col.hidden; }));
    }
    config.$width = wrapperSizes.width;
    config.$height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = (0, Cells_1.getShifts)(renderConfig);
    renderConfig.$scrollBarWidth = calcScrollBarWidth(renderConfig);
    var isSticky = (0, main_1.isCssSupport)("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = (0, FixedRows_1.getFixedRows)(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? (0, FixedRows_1.getFixedRows)(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + exports.BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + exports.BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    var fixedRight = renderConfig.fixedColumns.right.length ? "dhx_grid__contains_cols_right--fixed" : "";
    var fixedBottom = config.bottomSplit ? "dhx_grid__contains_rows_bottom--fixed" : "";
    var getGridAriaAttrs = function (rows, cols, isEditable, isMultiselectable) { return ({
        role: "grid",
        "aria-rowcount": rows.length,
        "aria-colcount": cols.filter(function (col) { return !col.hidden; }).length,
        "aria-readonly": isEditable ? "false" : "true",
        "aria-multiselectable": isMultiselectable ? "true" : "false",
    }); };
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _a = obj.getScrollState(), x_1 = _a.x, y_1 = _a.y;
        (0, dom_1.awaitRedraw)().then(function () {
            obj.scroll(x_1, y_1);
        });
    }
    return (0, dom_1.el)(".dhx_grid.dhx_widget", __assign({ class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""), "data-dhx-widget-id": uid, "data-dhx-root-id": config.rootParent }, getGridAriaAttrs(renderConfig.data, config.columns, renderConfig.editable, renderConfig.multiselection)), [
        (0, dom_1.resizer)(function () { return obj.paint(); }),
        (0, dom_1.el)(".dhx_grid-content", __assign(__assign({ style: __assign({}, wrapperSizes) }, htmlEvents), { class: "".concat(lessByWidth, " ").concat(lessByHeight, " ").concat(fixedRight, " ").concat(fixedBottom).trim(), role: "presentation" }), [
            isSticky ? null : header,
            (0, dom_1.el)(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - exports.BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
                role: "presentation",
            }, [
                (0, dom_1.el)("div", {}, [
                    isSticky ? header : null,
                    getGridData(renderConfig, shifts),
                    isSticky ? footer : null,
                ]),
            ]),
            (0, FixedCols_1.getFixedColsHeader)(renderConfig, layoutState, types_1.Split.left),
            (0, FixedCols_1.getFixedColsHeader)(renderConfig, layoutState, types_1.Split.right),
            (0, FixedCols_1.getFixedCols)(renderConfig, layoutState, types_1.Split.left),
            (0, FixedCols_1.getFixedCols)(renderConfig, layoutState, types_1.Split.right),
            (0, FixedRows_1.getFixedDataRows)(renderConfig, layoutState, types_1.Split.top),
            (0, FixedRows_1.getFixedDataRows)(renderConfig, layoutState, types_1.Split.bottom),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.render = render;
function proRender(vm, obj, htmlEvents, selection, uid) {
    var _a;
    var parentSizes = getElementSizes(obj._container);
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        parentSizes = getElementSizes(parentNode);
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return (0, dom_1.el)("div");
    }
    if (!config.columns.length) {
        return (0, dom_1.el)(".dhx_grid", {
            "data-dhx-widget-id": uid,
            "data-dhx-root-id": config.rootParent,
            role: "empty-grid",
        });
    }
    var data = obj.data.getRawData(0, -1, null, 2);
    if (config.columns.reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.reduce(function (total, _a) {
            var $height = _a.$height;
            return (total += $height || 0);
        }, 0);
    }
    var wrapperAutoHeight;
    if (obj.config.height === "auto") {
        wrapperAutoHeight = getWrapperAutoHeight(obj, config, parentSizes);
    }
    var width = config.width && typeof config.width === "number" ? config.width : parentSizes === null || parentSizes === void 0 ? void 0 : parentSizes.width;
    var height = config.height && typeof config.height === "number" ? config.height : parentSizes === null || parentSizes === void 0 ? void 0 : parentSizes.height;
    var wrapperSizes = {
        width: width || 0,
        height: (obj.config.height === "auto" ? wrapperAutoHeight : height) || 0,
    };
    // TODO: Remove scroll
    if ((0, main_1.isAutoWidth)(config)) {
        applyAutoWidth(config, wrapperSizes, obj.scrollView && obj.scrollView.config.enable);
        config.$totalWidth = (0, main_1.getTotalWidth)(config.columns.filter(function (col) { return !col.hidden; }));
    }
    config.$width = wrapperSizes.width;
    config.$height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = (0, Cells_1.getShifts)(renderConfig);
    renderConfig.$scrollBarWidth = calcScrollBarWidth(renderConfig, !!((_a = obj.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable));
    var isSticky = (0, main_1.isCssSupport)("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = (0, FixedRows_1.getFixedRows)(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? (0, FixedRows_1.getFixedRows)(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + exports.BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + exports.BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    var fixedRight = renderConfig.fixedColumns.right.length ? "dhx_grid__contains_cols_right--fixed" : "";
    var fixedBottom = config.bottomSplit ? "dhx_grid__contains_rows_bottom--fixed" : "";
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _b = obj.getScrollState(), x_2 = _b.x, y_2 = _b.y;
        (0, dom_1.awaitRedraw)().then(function () {
            obj.scroll(x_2, y_2);
        });
    }
    var gridContent = (0, dom_1.el)("div", {}, [
        isSticky ? header : null,
        getGridData(renderConfig, shifts),
        isSticky ? footer : null,
    ]);
    return (0, dom_1.el)(".dhx_grid.dhx_widget", {
        class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""),
        style: {
            height: wrapperAutoHeight !== null && wrapperAutoHeight !== void 0 ? wrapperAutoHeight : null,
        },
        "data-dhx-widget-id": uid,
        "data-dhx-root-id": config.rootParent,
        role: "grid",
        "aria-rowcount": renderConfig.data.length,
        "aria-colcount": config.columns.filter(function (col) { return !col.hidden; }).length,
    }, [
        (0, dom_1.resizer)(function () { return obj.paint(); }),
        (0, dom_1.el)(".dhx_grid-content", __assign(__assign({ style: __assign({}, wrapperSizes) }, htmlEvents), { class: "".concat(lessByWidth, " ").concat(lessByHeight, " ").concat(fixedRight, " ").concat(fixedBottom).trim(), role: "presentation" }), [
            isSticky ? null : header,
            (0, dom_1.el)(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - exports.BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
                role: "presentation",
            }, [
                obj.scrollView && obj.scrollView.config.enable
                    ? obj.scrollView.render([gridContent])
                    : gridContent,
            ]),
            (0, FixedCols_1.getFixedColsHeader)(renderConfig, layoutState, types_1.Split.left),
            (0, FixedCols_1.getFixedColsHeader)(renderConfig, layoutState, types_1.Split.right),
            (0, FixedCols_1.getFixedCols)(renderConfig, layoutState, types_1.Split.left),
            (0, FixedCols_1.getFixedCols)(renderConfig, layoutState, types_1.Split.right),
            (0, FixedRows_1.getFixedDataRows)(renderConfig, layoutState, types_1.Split.top),
            (0, FixedRows_1.getFixedDataRows)(renderConfig, layoutState, types_1.Split.bottom),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.proRender = proRender;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/** @class */ ((function (_super) {
    __extends(cellValueArray, _super);
    function cellValueArray() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return cellValueArray;
})(Array));
var T_TEXT = 1;
var T_PLACEHOLDER = 2;
var T_ERROR = 3;
var T_METHOD = 4;
var T_PAGE = 5;
var T_NAME = 6;
var T_ARG = 7;
var T_RANGE = 8;
var T_DATA = 9;
var T_OPERATOR = 10;
var T_NUMBER = 11;
var T_SPACE = 12;
var T_ARRAY = 13;
var ERR_PARSE = 1;
var ERR_EXEC = 2;
var ERR_REF = 3;
var ERR_SPILL = 4;
var errorText = {
    1: "#ERROR",
    2: "#ERROR",
    3: "#REF!",
    4: "#SPILL!",
};
var D_COMMON = 0;
var D_STRING = 1;
var D_RESULT = 2;
var D_SPILL = 3;
var RANGE_PAGE_ID = 63;
var PASTE_MODE_OVERLAP = 0;
var PASTE_MODE_RANGE = 1;
var PASTE_MODE_REPEAT = 2;
var CLEAN_MODE_DATA = 1;
var CLEAN_MODE_ALL = 255;

function toId(r, c, p) {
    return p + c * 64 + r * 64 * 4096;
}
function fromId(id) {
    /* eslint-disable no-bitwise */
    var z = id & 63;
    var c = (id >> 6) & 4095;
    var r = id < 2147483648 ? id >> 18 : (id / (64 * 4096)) & 0xffffff;
    return [r, c, z];
}
function row(id) {
    /* eslint-disable no-bitwise */
    return id < 2147483648 ? id >> 18 : (id / (64 * 4096)) & 0xffffff;
}
function column(id) {
    /* eslint-disable no-bitwise */
    return (id >> 6) & 4095;
}
function page(id) {
    /* eslint-disable no-bitwise */
    return id & 63;
}
function eachRange(cId, tId, cb) {
    var _a = fromId(cId), r1 = _a[0], c1 = _a[1];
    var _b = fromId(tId), r2 = _b[0], c2 = _b[1];
    var dr = r2 - r1;
    var dc = c2 - c1;
    for (var r = 0; r <= dr; r++) {
        for (var c = 0; c <= dc; c++) {
            cb(cId + c * 64 + r * 4096 * 64);
        }
    }
}
function eachRangeAlt(cId, width, height, cb) {
    var index = 0;
    for (var r = 0; r < height; r++) {
        for (var c = 0; c < width; c++) {
            cb(cId + c * 64 + r * 4096 * 64, index);
            index++;
        }
    }
}

function print$2(f, ctx) {
    var _a, _b, _c;
    var code = f.code;
    var source = f.source;
    var out = "";
    var rx1, rx2, cx1, cx2, zx;
    var max = code.length;
    for (var i = 0; i < max; i += 3) {
        var type = code[i];
        switch (type) {
            case T_PAGE: {
                var pageName = void 0;
                if (code[i + 6] === T_DATA) {
                    pageName = ctx.pageName(page(code[i + 7]));
                }
                out +=
                    escape(pageName || f.source.substr(code[i + 1], code[i + 2])) + "!";
                break;
            }
            case T_ARG:
                _a = fromId(code[i + 4]), rx1 = _a[0], cx1 = _a[1], zx = _a[2];
                if (ctx.z !== zx && code[i - 3] !== T_PAGE) {
                    out += escape(ctx.pageName(zx)) + "!";
                }
                out += position$1(rx1, cx1, code[i + 5]);
                break;
            case T_METHOD:
                out += source.substr(code[i + 1], code[i + 2]).toUpperCase();
                break;
            case T_RANGE:
                _b = fromId(code[i + 4]), rx1 = _b[0], cx1 = _b[1], zx = _b[2];
                _c = fromId(code[i + 7]), rx2 = _c[0], cx2 = _c[1];
                if (ctx.z !== zx && code[i - 3] !== T_PAGE) {
                    out += escape(ctx.pageName(zx)) + "!";
                }
                out += position$1(rx1, cx1, code[i + 5]);
                out += ":";
                out += position$1(rx2, cx2, code[i + 8]);
                break;
            case T_DATA:
                break;
            case T_PLACEHOLDER:
                out += "{{" + source.substr(code[i + 1], code[i + 2]) + "}}";
                break;
            case T_ERROR:
                out += "#REF!";
                break;
            case T_TEXT:
                out += '"' + source.substr(code[i + 1], code[i + 2]) + '"';
                break;
            case T_ARRAY: {
                out += "{";
                var cols = code[i + 1];
                var rows = code[i + 2];
                i += 3;
                for (var r = 0; r < rows; r++) {
                    for (var c = 0; c < cols; c++) {
                        if (c > 0)
                            out += ",";
                        var type_1 = code[i];
                        if (type_1 === T_TEXT)
                            out += '"' + source.substr(code[i + 1], code[i + 2]) + '"';
                        else if (type_1 === T_NUMBER)
                            out += source.substr(code[i + 1], code[i + 2]);
                        i += 3;
                    }
                    if (r < rows - 1)
                        out += ";";
                }
                i -= 3;
                out += "}";
                break;
            }
            default:
                out += source.substr(code[i + 1], code[i + 2]);
        }
    }
    return out;
}
function position$1(row, col, flags) {
    /* eslint-disable no-bitwise */
    var line = "";
    if (flags & 2)
        line += "$";
    var rstr = "";
    col += 1;
    while (col > 0) {
        var n = col % 26;
        if (n === 0)
            n = 26;
        rstr = String.fromCharCode(64 + n) + rstr;
        col = (col - n) / 26;
    }
    line += rstr;
    if (flags & 1)
        line += "$";
    line += row + 1;
    return line;
}
function escape(val) {
    return val.indexOf(" ") !== -1 ? "'" + val + "'" : val;
}

// global flag, set in parse and getWord methods
var fixFormula;
function isEn(code) {
    return code <= 122;
}
function isChar(code) {
    return code <= 122 ? code >= 65 || code === 35 || code === 36 : code > 191;
}
function isPartOfName(code) {
    return code <= 122
        ? code >= 65 || code === 35 || code === 36 || code === 46
        : code > 191;
}
function isEnLower(code) {
    return code >= 97;
}
function notUpperCase(code, start, end) {
    var check = code.substr(start, end);
    return check.toUpperCase() !== check;
}
function isNumber(char) {
    var code = char.charCodeAt(0);
    return code >= 48 && code <= 57;
}
function getNumber(formula, i) {
    var code;
    do {
        i++;
        code = formula.charCodeAt(i);
    } while (code >= 48 && code <= 57);
    return i;
}
function getQuotedString(formula, i) {
    var key;
    do {
        i++;
        key = formula[i];
    } while (key !== '"');
    return i;
}
function isExtra(char) {
    return char === " " || char === "\t" || char === "\n" || char === "\r";
}
function getExtra(formula, i) {
    var key;
    do {
        i++;
        key = formula[i];
    } while (isExtra(key));
    return i;
}
function getOperation(formula, i) {
    if (formula[i] === "<") {
        var next = formula[i + 1];
        if (next === ">" || next === "=")
            i++;
    }
    else if (formula[i] === ">") {
        if (formula[i + 1] === "=")
            i++;
    }
    return i + 1;
}
// detects position of next alfa-numeric substring
function getWord(formula, i, type) {
    var max = formula.length;
    var en = true;
    var j = i;
    var quotes = false;
    var lowercase = false;
    var text = false;
    var count = 0;
    // take char by char
    for (; j < max; j++) {
        var key = formula[j];
        // detect quoted parts
        if (key === "'") {
            if (text)
                break;
            if (quotes) {
                j++;
                break;
            }
            quotes = true;
            continue;
        }
        if (!quotes) {
            text = true;
            var code = key.charCodeAt(0);
            var cTest = isPartOfName(code);
            if (cTest) {
                if (isEn(code)) {
                    if (isEnLower(code))
                        lowercase = true;
                }
                else
                    en = false;
                if (count == 1)
                    count++;
                continue;
            }
            if (isNumber(key)) {
                if (count == 0)
                    count++;
                continue;
            }
            break;
        }
    }
    var last = formula[j];
    var start = i;
    var end = j - i;
    if (quotes) {
        // quote can be not closed
        end -= 1 + (formula[j - 1] === "'" ? 1 : 0);
        // sinle quote
        if (end < 0)
            end = 0;
        start++;
        type = T_PAGE;
    }
    if (type === 0) {
        if (last === ":" && en) {
            if (count !== 1) {
                type = T_ERROR;
            }
            else {
                type = T_RANGE;
                if (lowercase)
                    fixFormula = true;
            }
        }
        else if (last === "!") {
            if (formula[start] === "#")
                type = T_ERROR;
            else
                type = T_PAGE;
        }
        else if (last === "(") {
            if (notUpperCase(formula, start, end))
                fixFormula = true;
            type = T_METHOD;
        }
        else if (last === "}" && formula[j - 1] === "}") {
            type = T_PLACEHOLDER;
        }
        else {
            if (count === 1 && en) {
                type = T_ARG;
                if (lowercase)
                    fixFormula = true;
            }
            else {
                type = T_NAME;
            }
        }
    }
    return [start, end, j, type];
}
function position(raw, word, page) {
    var row = 0, sum = 0, x = 1, mode = 1, flags = 0;
    var chars = false;
    for (var j = word.length - 1; j >= 0; j--) {
        var key = word[j].charCodeAt(0);
        if (key === 36) {
            flags = flags + mode;
            continue;
        }
        if (key < 58) {
            //numeric
            sum += (key - 48) * x;
            x *= 10;
        }
        else {
            if (!chars) {
                x = 1;
                row = sum;
                sum = 0;
                chars = true;
                mode += 1;
            }
            //alpha
            sum += (key - (key > 96 ? 96 : 64)) * x;
            x *= 26;
        }
    }
    /*
        $X$Y => flags = 3
        $XY  => flags = 2
        X$Y  => flags = 1
        XY   => flags = 0
    */
    if (sum > 4095) {
        raw.push(T_ERROR, 0, 0);
    }
    else {
        raw.push(T_DATA, toId(row - 1, sum - 1, page), flags);
    }
}
function parse(text, ctx) {
    var _a, _b;
    var raw = [];
    fixFormula = false;
    var quotes = -1;
    var array = -1;
    var count = 0;
    for (var i = 0; i < text.length; i++) {
        var key = text[i];
        // array end
        if (array > -1) {
            if (key == "}") {
                var rows = (raw[array + 2] += 1);
                var cols = (raw[array + 1] = count / rows);
                // incorrect line of rows in array
                if (cols - Math.round(cols) !== 0)
                    raw.push(T_ERROR, 0, 0);
                array = -1;
            }
            else {
                if (key === '"') {
                    var n_1 = getQuotedString(text, i);
                    i++;
                    raw.push(T_TEXT, i, n_1 - i);
                    count++;
                    i = n_1;
                }
                else if (key === "-") {
                    var n_2 = getNumber(text, i + 1);
                    raw.push(T_NUMBER, i, n_2 - i);
                    count++;
                    i = n_2 - 1;
                }
                else if (isNumber(key)) {
                    var n_3 = getNumber(text, i);
                    raw.push(T_NUMBER, i, n_3 - i);
                    count++;
                    i = n_3 - 1;
                }
                else if (key === " " || key === "\t" || key === ",") ;
                else if (key === ";") {
                    raw[array + 2] += 1;
                }
                else
                    raw.push(T_ERROR, 0, 0);
            }
            continue;
        }
        // quotes
        if (key == '"') {
            if (quotes > -1) {
                raw.push(T_TEXT, quotes + 1, i - quotes - 1);
                quotes = -1;
            }
            else {
                quotes = i;
            }
            continue;
        }
        if (quotes > -1)
            continue;
        // placeholders or array
        if (key == "{") {
            if (text[i + 1] == "{") {
                // placeholder
                // [FIXME] code will fail on inccorect placeholders
                // something like {{SOME + 1}} will fail
                var _c = getWord(text, i + 2, T_PLACEHOLDER), s = _c[0], e = _c[1], n_4 = _c[2];
                raw.push(T_PLACEHOLDER, s, e);
                i = n_4 + 2 - 1;
                continue;
            }
            else {
                // array start
                array = raw.length;
                count = 0;
                raw.push(T_ARRAY, 0, 0);
                continue;
            }
        }
        // common math
        if (key == "'" || isChar(key.charCodeAt(0))) {
            var z = void 0;
            // read next word
            var _d = getWord(text, i, 0), s = _d[0], e = _d[1], n_5 = _d[2], type = _d[3];
            var rawLength = raw.length;
            if ((type === T_ARG || type === T_RANGE) &&
                raw[raw.length - 3] === T_PAGE) {
                var qq = text[s - 2] === "'" ? 1 : 0;
                var ps = raw[rawLength - 2];
                var pe = raw[rawLength - 1];
                z = ctx.page(text.substr(ps, pe));
                if (typeof z === "undefined") {
                    raw.push(T_ERROR, 0, 0);
                    z = 0;
                }
                raw.push(type, s - pe - qq * 2 - 1, e + pe + qq * 2 + 1);
            }
            else {
                z = ctx.z;
                raw.push(type, s, e);
            }
            //move scaner position
            i = n_5 - 1;
            //separate names and positions
            if (type === T_NAME) {
                ctx.name(raw, text, ctx);
            }
            else if (type === T_RANGE) {
                var start = raw.length;
                position(raw, text.substr(s, e), z);
                _a = getWord(text, i + 2, 0), s = _a[0], e = _a[1], n_5 = _a[2], type = _a[3];
                if (type === T_PAGE) {
                    // ignore sheet in the second cell of a range (in ranges like Sheet1!A1:Sheet1!A3)
                    _b = getWord(text, n_5 + 1, 0), s = _b[0], e = _b[1], n_5 = _b[2], type = _b[3];
                }
                if (type !== T_ARG) {
                    // it was not range :(
                    raw[start - 3] = T_ARG;
                    continue;
                }
                position(raw, text.substr(s, e), z);
                var from = raw[start + 1];
                var to = raw[start + 4];
                //ensure that start point is before end point
                if (from > to || row(from) > row(to)) {
                    raw[start + 1] = to;
                    raw[start + 4] = from;
                }
                raw[start - 1] += e + 1;
                i = n_5 - 1;
            }
            else if (type === T_ARG) {
                position(raw, text.substr(s, e), z);
            }
            else if (type === T_ERROR || type === T_PAGE) {
                i++;
            }
            continue;
        }
        // other chars
        if (isExtra(key)) {
            var n_6 = getExtra(text, i);
            raw.push(T_SPACE, i, n_6 - i);
            i = n_6 - 1;
            continue;
        }
        if (isNumber(key)) {
            var n_7 = getNumber(text, i);
            raw.push(T_NUMBER, i, n_7 - i);
            i = n_7 - 1;
            continue;
        }
        var n = getOperation(text, i);
        raw.push(T_OPERATOR, i, n - i);
        i = n - 1;
    }
    var result = {
        code: raw,
        source: text,
        exec: null,
        broken: 0,
        triggers: null,
    };
    if (fixFormula)
        result.source = print$2(result, ctx);
    return result;
}

var empty = "            ";
function spaces(text) {
    return empty.substr(0, 10 - text.length);
}
function print$1(f) {
    var code = f.code;
    var source = f.source;
    var out = "";
    var max = code.length;
    for (var i = 0; i < max; i += 3) {
        var type = code[i];
        var text = void 0;
        switch (type) {
            case T_METHOD:
                text = "method";
                break;
            case T_TEXT:
                text = "text";
                break;
            case T_PAGE:
                text = "page";
                break;
            case T_PLACEHOLDER:
                text = "holder";
                break;
            case T_NAME:
                text = "name";
                break;
            case T_ARG:
                text = "arg";
                break;
            case T_RANGE:
                text = "range";
                break;
            case T_DATA:
                text = "data";
                break;
            case T_OPERATOR:
                text = "op";
                break;
            case T_NUMBER:
                text = "number";
                break;
            case T_ERROR:
                text = "error";
                break;
            case T_SPACE:
                text = "extra";
                break;
            case T_ARRAY:
                text = "arr";
                break;
        }
        if (type === T_DATA) {
            out += empty + (code[i + 1] + "." + code[i + 2] + "\n");
        }
        else if (type === T_ARRAY) {
            out += "[" + text + "]" + spaces(text) + code[i + 1] + " x " + code[i + 2] + "\n";
        }
        else {
            out += "[" + text + "]" + spaces(text) + source.substr(code[i + 1], code[i + 2]) + "\n";
        }
    }
    return out;
}

var numberOperations = [">", "<", "=", "+"];
function generate(f, strict) {
    var str = print(f, strict);
    if (!str) {
        f.broken = ERR_REF;
        f.exec = null;
        return;
    }
    try {
        f.exec = new Function("ctx", "return " + str);
    }
    catch (e) {
        f.broken = ERR_PARSE;
        f.exec = null;
    }
}
function print(f, strict) {
    var code = f.code;
    var source = f.source;
    var out = "";
    var lvl = 0;
    var lastSign = [];
    var max = code.length;
    for (var i = 0; i < max; i += 3) {
        var type = code[i];
        switch (type) {
            case T_METHOD:
                out += "ctx.m[\"" + source
                    .substr(code[i + 1], code[i + 2])
                    .toUpperCase() + "\"]";
                break;
            case T_TEXT:
                out += '"' + source.substr(code[i + 1], code[i + 2]) + '"';
                break;
            case T_PLACEHOLDER:
                out += "ctx.p(\"" + source.substr(code[i + 1], code[i + 2]) + "\")";
                break;
            case T_NAME:
            case T_ARG: {
                var prevOp = void 0;
                var nextOp = void 0;
                if (code[i - 3] === T_OPERATOR)
                    prevOp = i - 3;
                else if (code[i - 3] === T_SPACE && code[i - 6] === T_OPERATOR)
                    prevOp = i - 6;
                if (code[i + 6] === T_OPERATOR)
                    nextOp = i + 6;
                else if (code[i + 6] === T_SPACE && code[i + 9] === T_OPERATOR)
                    nextOp = i + 9;
                if (prevOp || nextOp) {
                    // [FIXME] operations with empty cell
                    var prev = prevOp ? source[code[prevOp + 1]] : null;
                    var next = nextOp ? source[code[nextOp + 1]] : null;
                    if (prev == "&" || next == "&") {
                        out += "(ctx.v(" + code[i + 4] + ") === null ? \"\" : ctx.v(" + code[i + 4] + "))";
                        break;
                    }
                    else {
                        if (numberOperations.indexOf(prev) != -1 ||
                            numberOperations.indexOf(next) != -1) {
                            out += "(ctx.v(" + code[i + 4] + ") === null ? 0 : ctx.v(" + code[i + 4] + "))";
                            break;
                        }
                    }
                }
                out += "ctx.v(" + code[i + 4] + ")";
                break;
            }
            case T_RANGE:
                out += "ctx.r(" + code[i + 4] + ", " + code[i + 7] + ")";
                break;
            case T_OPERATOR:
                if (code[i + 2] === 1) {
                    var op = source[code[i + 1]];
                    if (op === "&")
                        out += '+""+';
                    else if (strict && op == "+") {
                        out += "*1+1*";
                    }
                    else if (op === "=") {
                        out += "==";
                    }
                    else if (op === ";") {
                        out += ",";
                    }
                    else if (op === "{") {
                        out += "[";
                    }
                    else if (op === "}") {
                        out += "]";
                    }
                    else if (op === "%") {
                        if (code[i + 3] && code[i + 3] !== T_OPERATOR) {
                            if (strict)
                                out += "/0+";
                            //throw error
                            else
                                out += op;
                        }
                        else
                            out += (lastSign[lvl] == "/" ? "*" : "/") + "100";
                    }
                    else {
                        if (op == "(") {
                            lvl++;
                            lastSign.push("+");
                        }
                        else if (op == ")") {
                            lvl--;
                            lastSign.pop();
                        }
                        out += op;
                    }
                    if (op == "+" || op == "-" || op == "*" || op == "/" || op == "&")
                        lastSign[lvl] = op;
                }
                else if (code[i + 2] === 2) {
                    var op = source.substr(code[i + 1], code[i + 2]);
                    if (op === "<>") {
                        out += "!=";
                    }
                    else {
                        out += op;
                    }
                }
                else
                    out += source.substr(code[i + 1], code[i + 2]);
                break;
            case T_NUMBER:
                out += source.substr(code[i + 1], code[i + 2]);
                break;
            case T_ERROR:
                return "";
            case T_DATA:
            case T_PAGE:
            case T_SPACE:
                // never processed directly
                break;
            case T_ARRAY: {
                out += "ctx.a([";
                var cols = code[i + 1];
                var rows = code[i + 2];
                i += 3;
                var max_1 = i + cols * rows * 3;
                var comma = false;
                for (; i < max_1; i += 3) {
                    if (comma)
                        out += ",";
                    var type_1 = code[i];
                    if (type_1 === T_NUMBER)
                        out += source.substr(code[i + 1], code[i + 2]);
                    else if (type_1 === T_TEXT)
                        out += '"' + source.substr(code[i + 1], code[i + 2]) + '"';
                    else if (type_1 === T_ERROR) {
                        f.broken = ERR_REF;
                        return "";
                    }
                    comma = true;
                }
                i -= 3;
                out += "]," + cols + ", " + rows + ")";
                break;
            }
        }
    }
    return out;
}

var ERRORS = {
    null: "#NULL!",
    div0: "#DIV/0!",
    value: "#VALUE!",
    ref: "#REF!",
    name: "#NAME?",
    num: "#NUM!",
    na: "#N/A",
    data: "#GETTING_DATA",
};
function dayOfTheYear(date) {
    var start = new Date(date.getFullYear(), 0, 0);
    var diff = date.valueOf() -
        start.valueOf() +
        (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;
    return Math.floor(diff / (1000 * 60 * 60 * 24));
}
function getJsDateFromExcel(excelDate) {
    var date = new Date(Math.round((excelDate - 25569) * 86400 * 1000));
    return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
}
function getExcelDateFromJs(jsDate) {
    var returnDateTime = 25569 +
        (jsDate.getTime() - jsDate.getTimezoneOffset() * 60000) / (86400 * 1000);
    return returnDateTime;
}
// TODO maybe we should throw err if its not a number?
function _to_number(v) {
    if (v || v === 0) {
        v = v * 1;
        if (!isNaN(v))
            return v;
    }
    return false;
}
function _combine(data) {
    if (data.length === 1) {
        var temp = data[0];
        if (typeof temp === "object") {
            return temp;
        }
        return [temp];
    }
    var arr = [];
    for (var i = 0; i < data.length; i++) {
        arr = arr.concat(data[i]);
    }
    return arr;
}
function _isEmpty(text) {
    return !text && text !== 0;
}
function val2boolean(val) {
    if (typeof val === "string") {
        return val === "TRUE";
    }
    return !!val;
}
function _to_date(d) {
    var date = typeof d === "string" ? new Date(d) : getJsDateFromExcel(d);
    if (date.getTime()) {
        return date;
    }
    throw d + " is invalid date";
}
function numberOrError(v) {
    var number = _to_number(v);
    if (typeof number !== "number") {
        throw v + " is not a number";
    }
    return number;
}
// checks if values 'num' and 'number' are correct to convert to other notation and returns the string value if the result is true.
// Varibles 'left' and 'rigth' defines the range of permissible values.
function convertToNotation(num, places, left, right, notation) {
    var n = _to_number(num);
    if (n < 0 && notation == 8)
        places = null;
    var p = places ? _to_number(places) : null;
    if (typeof n !== "number" || typeof p === "boolean") {
        throw ERRORS.value;
    }
    if (n < left)
        n = left;
    if (n > right)
        n = right;
    if (p < -1)
        throw ERRORS.num;
    if (p) {
        p = Math.floor(+p);
    }
    var res;
    var prefix = num < 0 && notation === 16 ? "FF" : "";
    if (right < 2147483648) {
        // eslint-disable-next-line no-bitwise
        res = ((n >>> 0) & (right - left)).toString(notation);
    }
    else {
        // eslint-disable-next-line no-bitwise
        res = (n >>> 0).toString(notation);
    }
    if (p && res.length > p) {
        throw ERRORS.num;
    }
    return (prefix + res).padStart(p, "0").toUpperCase();
}

// partially based on https://github.com/sutoiku/formula.js
function immul(inum1, inum2) {
    var a = +IMREAL(inum1);
    var b = +IMAGINARY(inum1);
    var c = +IMREAL(inum2);
    var d = +IMAGINARY(inum2);
    return COMPLEX(a * c - b * d, a * d + b * c);
}
function imsum(inum1, inum2) {
    var a = +IMREAL(inum1);
    var b = +IMAGINARY(inum1);
    var c = +IMREAL(inum2);
    var d = +IMAGINARY(inum2);
    return COMPLEX(a + c, b + d);
}
// round to zero
function truncate(v) {
    return v > 0 ? Math.floor(v) : Math.ceil(v);
}
// round to Infinity
function expand(v) {
    return v < 0 ? Math.floor(v) : Math.ceil(v);
}
/*Empty cells, logical values like TRUE, or text are ignored.*/
function SUM() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var sum = 0;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number")
            sum += v;
    }
    return sum;
}
/*If a range or cell reference argument contains text, logical values, or empty cells, those values are ignored;
however, cells with the value zero are included.*/
function AVERAGE() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var sum = 0;
    var count = 0;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number") {
            sum += v;
            count++;
        }
    }
    return count ? sum / count : 0;
}
function AVERAGEA() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var set = _combine(rest);
    var sum = 0;
    var count = 0;
    for (var i = 0; i < set.length; i++) {
        var o = set[i];
        var v = _to_number(set[i]);
        if (typeof v === "number") {
            sum += v;
            count++;
        }
        else {
            if (o === true)
                sum++;
            if (o || o === false)
                count++;
        }
    }
    return count ? sum / count : 0;
}
/*Empty cells, logical values, text, or error values in the array or reference are not counted. */
function COUNT() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var count = 0;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number")
            count++;
    }
    return count;
}
/*counts the number of cells that are not empty in a range, zero is excluded.*/
function COUNTA() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var count = 0;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++)
        if (set[i] && set[i] * 1 !== 0)
            count++;
    return count;
}
/*Counts empty cells in a specified range of cells. Cells with zero values are not counted.*/
function COUNTBLANK() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var count = 0;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++)
        if (set[i] !== 0 && !set[i])
            count++;
    return count;
}
/*Empty cells, logical values, or text in the array or reference are ignored.
If the arguments contain no numbers, MAX returns 0 (zero).*/
function MAX() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var max = -Infinity;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number" && v > max)
            max = v;
    }
    return max === -Infinity ? 0 : max;
}
/*Empty cells, logical values, or text in the array or reference are ignored.
If the arguments contain no numbers, MIN returns 0.*/
function MIN() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var min = Infinity;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number" && v < min)
            min = v;
    }
    return min === Infinity ? 0 : min;
}
/* Only numbers in the array or reference are multiplied.
Empty cells, logical values, and text in the array or reference are ignored.*/
function PRODUCT() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var any = false, product = 1;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number") {
            any = true;
            product = product * v;
        }
    }
    return any ? product : null;
}
/* For valid products only numbers are multiplied. Empty cells, logical values, and text are ignored.
Treats array entries that are not numeric as if they were zeros.*/
function SUMPRODUCT() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sets[_i] = arguments[_i];
    }
    var length = sets[0].length;
    for (var i in sets)
        if (sets[i].length !== length)
            return;
    var sp = 0;
    for (var i = 0; i < sets[0].length; i++) {
        var any = false, product = 1;
        for (var s in sets) {
            var v = _to_number(sets[s][i]);
            if (typeof v === "number") {
                product = product * v;
                any = true;
            }
        }
        if (any)
            sp += product;
    }
    return sp;
}
/*Empty cells, logical values, text, or error values in the array or reference are ignored. */
function SUMSQ() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var sq = 0;
    var set = _combine(rest);
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number")
            sq += Math.pow(v, 2);
    }
    return sq;
}
function variance(data, p, a) {
    var set = _combine(data);
    var count = p ? 0 : -1;
    var avg = a ? AVERAGEA.apply(void 0, data) : AVERAGE.apply(void 0, data);
    var sum = 0;
    for (var i = 0; i < set.length; i++) {
        var o = set[i];
        var v = _to_number(set[i]);
        if (typeof v !== "number") {
            if (!a || (typeof o !== "boolean" && !o))
                continue;
            v = o === true ? 1 : 0;
        }
        count++;
        sum += Math.pow(v - avg, 2);
    }
    return count ? sum / count : 0;
}
/*variance methods */
function VAR() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return variance(rest, false, false);
}
/*Empty cells, logical values, text, or error values in the array or reference are ignored. */
function VARA() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return variance(rest, false, true);
}
/*Empty cells, logical values, text, or error values in the array or reference are ignored. */
function VARP() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return variance(rest, true, false);
}
/*Empty cells, logical values, text, or error values in the array or reference are ignored. */
function VARPA() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return variance(rest, true, true);
}
/* deviation methods */
function STDEV() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return Math.sqrt(VAR.apply(void 0, rest));
}
function STDEVP() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return Math.sqrt(VARP.apply(void 0, rest));
}
function STDEVA() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return Math.sqrt(VARA.apply(void 0, rest));
}
function STDEVPA() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return Math.sqrt(VARPA.apply(void 0, rest));
}
/*real numbers*/
function POWER(num, pow) {
    var n = _to_number(num), p = _to_number(pow);
    if (typeof n == "number" && typeof p == "number")
        return Math.pow(n, p);
}
/*real numbers*/
function QUOTIENT(num, div) {
    var n = _to_number(num), d = _to_number(div);
    if (typeof n == "number" && typeof d == "number")
        return truncate(n / d);
}
/*Returns a positive square root.*/
function SQRT(num) {
    var v = _to_number(num);
    if (typeof v === "number" && v >= 0)
        return Math.sqrt(v);
}
function ABS(num) {
    var v = _to_number(num);
    if (typeof v === "number")
        return Math.abs(v);
}
function RAND() {
    return Math.random();
}
function PI() {
    return Math.PI;
}
/*Rounds a number down to the nearest integer*/
function INT(num) {
    var v = _to_number(num);
    if (typeof v === "number")
        return Math.floor(v);
}
/*rounds a number to a specified number of digits*/
function ROUND(num, digits) {
    var v = _to_number(num);
    var d = _to_number(digits) || 0;
    if (typeof v === "number" && typeof d === "number") {
        return parseFloat(v.toFixed(d));
    }
}
/*rounds a number down to a specified number of digits*/
function ROUNDDOWN(num, digits) {
    var v = _to_number(num);
    var d = _to_number(digits) || 0;
    if (typeof v === "number" && typeof d === "number") {
        return Math.floor(v * Math.pow(10, d)) / Math.pow(10, d);
    }
}
/*rounds a number up to a specified number of digits*/
function ROUNDUP(num, digits) {
    var v = _to_number(num);
    var d = _to_number(digits) || 0;
    if (typeof v === "number" && typeof d === "number") {
        return Math.ceil(v * Math.pow(10, d)) / Math.pow(10, d);
    }
}
/*Truncates a number to an integer by removing the fractional part of the number.*/
function TRUNC(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return truncate(v);
    }
}
/*Returns number rounded up to the nearest even integer*/
function EVEN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        var r = expand(v);
        return r % 2 ? r + Math.sign(v) : r;
    }
}
/*Returns number rounded up to the nearest odd integer*/
function ODD(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        var r = expand(v);
        return r % 2 ? r : r + Math.sign(v);
    }
}
/*Returns number arccosine (in radians) of a number*/
function ACOS(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.acos(v);
    }
}
/*Returns the hyperbolic arc-cosine of a number*/
function ACOSH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.acosh(v);
    }
}
/*Returns the arc cotangent of a number in radians from 0 to pi*/
function ACOT(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.atan(1 / v);
    }
}
/*Returns the inverse hyperbolic cotangent of the elements of number*/
function ACOTH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return 0.5 * Math.log((v + 1) / (v - 1));
    }
}
/*Returns value after converting a roman numeral to arabic numeral.*/
var arabicMap = {
    M: 1000,
    CM: 900,
    D: 500,
    CD: 400,
    C: 100,
    XC: 90,
    L: 50,
    XL: 40,
    X: 10,
    IX: 9,
    V: 5,
    IV: 4,
    I: 1,
};
function ARABIC(num) {
    var v = _to_number(num);
    if (!v &&
        /^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test("" + num)) {
        var r_1 = 0;
        ("" + num).replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function (i) {
            r_1 += arabicMap[i];
            return i;
        });
        return +r_1;
    }
}
/*Returns the arcsine (in radians) of a number*/
function ASIN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.asin(v);
    }
}
/*Returns the hyperbolic arcsine of a number*/
function ASINH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.asinh(v);
    }
}
/*Returns the arctangent (in radians) of a number*/
function ATAN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.atan(v);
    }
}
/*Returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y)*/
function ATAN2(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return Math.atan2(v2, v);
    }
}
/*Returns the inverse hyperbolic tangent of a number.*/
function ATANH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.log((1 + v) / (1 - v)) / 2;
    }
}
/*Returns the text representation of the converted number.*/
function BASE(num, radix, minLength) {
    if (minLength === void 0) { minLength = 0; }
    var v = _to_number(num);
    var r = _to_number(radix);
    var ml = _to_number(minLength);
    if (typeof v === "number" &&
        typeof r === "number" &&
        typeof ml === "number") {
        var result = v.toString(r);
        return (new Array(Math.max(ml + 1 - result.length, 0)).join("0") +
            result.toUpperCase());
    }
}
/*Returns a rounded number.*/
function CEILING(num, significance, mode) {
    if (significance === void 0) { significance = 1; }
    if (mode === void 0) { mode = 0; }
    var v = _to_number(num);
    var s = _to_number(significance);
    var m = _to_number(mode);
    if (typeof v === "number" && typeof s === "number" && typeof m === "number") {
        if (s === 0) {
            return 0;
        }
        s = Math.abs(s);
        if (v >= 0) {
            return Math.ceil(v / s) * s;
        }
        else {
            if (mode === 0) {
                return -1 * Math.floor(Math.abs(v) / s) * s;
            }
            else {
                return -1 * Math.ceil(Math.abs(v) / s) * s;
            }
        }
    }
}
/*Returns the cosine of the specified angle provided in radians*/
function COS(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.cos(v);
    }
}
/*Returns the hyperbolic cosine of a number*/
function COSH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.cosh(v);
    }
}
/*Returns the hyperbolic cotangent of the elements of number*/
function COT(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return 1 / Math.tan(v);
    }
}
/*Returns the hyperbolic cotangent of any real number.*/
function COTH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        var e2 = Math.exp(2 * v);
        return (e2 + 1) / (e2 - 1);
    }
}
/*Returns the cosecant of an angle provided in radians.*/
function CSC(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return 1 / Math.sin(v);
    }
}
/*Returns the hyperbolic cosecant of any real number.*/
function CSCH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return 2 / (Math.exp(v) - Math.exp(-v));
    }
}
/*Converts an angle value in radians to degrees.*/
function DEGREES(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return (v * 180) / Math.PI;
    }
}
/*Converts the text representation of a number in another base, to base 10 (decimal)*/
function DECIMAL(num, radix) {
    var v = _to_number(num);
    var r = _to_number(radix);
    if (!("" + v).match("/[2-9]/") &&
        typeof v === "number" &&
        typeof r === "number" &&
        r > 1 &&
        r < 37) {
        return parseInt("" + v, r);
    }
}
/*Returns the factorial of a number*/
var MEMOIZED_FACT = [];
function FACT(num) {
    var v = _to_number(num);
    if (typeof v === "number" && v > -1) {
        var floor = Math.floor(v);
        if (floor === 0 || floor === 1) {
            return 1;
        }
        else if (MEMOIZED_FACT[floor] > 0) {
            return MEMOIZED_FACT[floor];
        }
        else {
            MEMOIZED_FACT[floor] = FACT(floor - 1) * floor;
            return MEMOIZED_FACT[floor];
        }
    }
}
/*Returns calculated doublefactorial of a number*/
function FACTDOUBLE(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        var floor = Math.floor(v);
        if (floor <= 0) {
            return 1;
        }
        else {
            return floor * FACTDOUBLE(floor - 2);
        }
    }
}
/*Returns number of combinations as an integer*/
function COMBIN(num, number_chosen) {
    var v = _to_number(num);
    var c = _to_number(number_chosen);
    if (typeof v === "number" && typeof c === "number") {
        return FACT(v) / (FACT(c) * FACT(v - c));
    }
}
/*Returns number of combinations as an integer*/
function COMBINA(num, number_chosen) {
    var v = _to_number(num);
    var c = _to_number(number_chosen);
    if (typeof v === "number" && typeof c === "number") {
        return v === 0 && c === 0 ? 1 : COMBIN(v + c - 1, v - 1);
    }
}
/*Returns a rounded number*/
function FLOOR(num, significance) {
    var v = _to_number(num);
    var s = _to_number(significance);
    if (typeof v === "number" && typeof s === "number") {
        var factor = Math.abs(s);
        if (v >= 0) {
            return Math.floor(v / factor) * factor;
        }
        else {
            return -1 * Math.ceil(Math.abs(v) / factor) * factor;
        }
    }
}
/*Returns a number representing the largest positive integer that divides the numbers without a remainder*/
function GCD() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var set = _combine(rest);
    var len = set.length;
    if (!len)
        return 1;
    var r0 = set[0];
    var i = 1;
    while (typeof r0 !== "number") {
        r0 = set[i];
        if (i > set.length) {
            throw "The arguments should contain at least one numeric value";
        }
        i++;
    }
    var x = r0 < 0 ? -r0 : r0;
    for (i; i < len; i++) {
        var ri = _to_number(set[i]);
        if (typeof ri === "number") {
            var y = ri < 0 ? -ri : ri;
            while (x && y) {
                if (x > y) {
                    x %= y;
                }
                else {
                    y %= x;
                }
            }
            x += y;
        }
    }
    return x;
}
/*Returns the natural logarithm of a number*/
function LN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.log(v);
    }
}
/*Returns the logarithm of a number*/
function LOG(num, base) {
    if (base === void 0) { base = 10; }
    var v = _to_number(num);
    var b = _to_number(base);
    if (typeof v === "number" && typeof b === "number") {
        return Math.log(v) / Math.log(b);
    }
}
/*Returns the logarithm of a number*/
function LOG10(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.log(v) / Math.log(10);
    }
}
/*Returns the remainder*/
function MOD(num, divisor) {
    var v = _to_number(num);
    var d = _to_number(divisor);
    if (typeof v === "number" && typeof d === "number" && d !== 0) {
        var modulus = Math.abs(v % d);
        return divisor > 0 ? modulus : -modulus;
    }
}
/*Returns one number to the nearest integer multiple of another.*/
function MROUND(num, factor) {
    var v = _to_number(num);
    var f = _to_number(factor);
    if (typeof v === "number" && typeof f === "number" && v * f > -1) {
        return Math.round(v / f) * f;
    }
}
/*Returns the factorial of the sum of values divided by the product of the values' factorials.*/
function MULTINOMIAL() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var set = _combine(rest);
    var sum = 0;
    var fact = 1;
    for (var i = 0; i < set.length; i++) {
        var v = _to_number(set[i]);
        if (typeof v === "number") {
            sum += v;
            fact *= FACT(set[i]);
        }
    }
    return FACT(sum) / fact;
}
/*Convert an angle value in degrees to radians.*/
function RADIANS(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return (v * Math.PI) / 180;
    }
}
/*Convert an angle value in degrees to radians.*/
function RANDBETWEEN(bottom, top) {
    var b = _to_number(bottom);
    var t = _to_number(top);
    if (typeof b === "number" && typeof t === "number") {
        return b + Math.ceil((t - b + 1) * Math.random()) - 1;
    }
}
/*Converts numbers to Roman numerals.*/
var romanKey = [
    "",
    "C",
    "CC",
    "CCC",
    "CD",
    "D",
    "DC",
    "DCC",
    "DCCC",
    "CM",
    "",
    "X",
    "XX",
    "XXX",
    "XL",
    "L",
    "LX",
    "LXX",
    "LXXX",
    "XC",
    "",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "VI",
    "VII",
    "VIII",
    "IX",
];
function ROMAN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        var digits = String(v).split("");
        var roman = "";
        var i = 3;
        while (i--) {
            roman = (romanKey[+digits.pop() + i * 10] || "") + roman;
        }
        return new Array(+digits.join("") + 1).join("M") + roman;
    }
}
/*Returns the secant of an angle measured in radians.*/
function SEC(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return 1 / Math.cos(v);
    }
}
/*Returns the hyperbolic secant of an angle.*/
function SECH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return 2 / (Math.exp(v) + Math.exp(-v));
    }
}
/*Returns the sine of an angle provided in radians.*/
function SIN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.sin(v);
    }
}
/*Returns the hyperbolic sine of any real number.*/
function SINH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.sinh(v);
    }
}
/*Returns the positive square root of the product of Pi and the given positive number.*/
function SQRTPI(num) {
    var v = _to_number(num);
    if (typeof v === "number" && v > -1) {
        return Math.sqrt(v * Math.PI);
    }
}
/*Returns a subtotal for a vertical range of cells using a specified aggregation function.*/
function SUBTOTAL(function_code) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    var v = _to_number(function_code);
    var set = _combine(rest);
    if (typeof v === "number") {
        switch (v) {
            case 1:
            case 101: // hidden values. We dont provide hidden values
                return AVERAGE.apply(void 0, set);
            case 102:
            case 2:
                return COUNT.apply(void 0, set);
            case 103:
            case 3:
                return COUNTA.apply(void 0, set);
            case 104:
            case 4:
                return MAX.apply(void 0, set);
            case 105:
            case 5:
                return MIN.apply(void 0, set);
            case 106:
            case 6:
                return PRODUCT.apply(void 0, set);
            case 107:
            case 7:
                // return STDEVS(set);
                return;
            case 108:
            case 8:
                return STDEVP.apply(void 0, set);
            case 109:
            case 9:
                return SUM.apply(void 0, set);
            case 110:
            case 10:
                return;
            // return VARS(set);
            case 111:
            case 11:
                return VARP.apply(void 0, set);
            // no hidden values for us
        }
    }
}
/*Returns the sum of two numbers.*/
function ADD(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v + v2;
    }
}
/*Returns the difference  of two numbers.*/
function MINUS(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v - v2;
    }
}
/*Returns one number divided by another.*/
function DIVIDE(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number" && v2 !== 0) {
        return v / v2;
    }
}
/*Returns the product of two numbers.*/
function MULTIPLY(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v * v2;
    }
}
/*Returns TRUE if the first argument is greater than the second.*/
function GT(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v > v2;
    }
}
/*Returns TRUE if the first argument is greater than or equal to the second.*/
function GTE(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v >= v2;
    }
}
/*Returns TRUE if the first argument is less than the second.*/
function LT(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v < v2;
    }
}
/*Returns TRUE if the first argument is less than or equal to the second.*/
function LTE(num1, num2) {
    var v = _to_number(num1);
    var v2 = _to_number(num2);
    if (typeof v === "number" && typeof v2 === "number") {
        return v <= v2;
    }
}
/*Returns TRUE if the first argument is  equal to the second.*/
function EQ(v, v2) {
    return typeof v == typeof v2 && v == v2;
}
/*Returns TRUE if the first argument isn't equal to the second.*/
function NE(v, v2) {
    return typeof v != typeof v2 || v != v2;
}
/*real numbers.*/
function POW(base, exponent) {
    var v = _to_number(base);
    var v2 = _to_number(exponent);
    if (typeof v === "number" && typeof v2 === "number") {
        return POWER(base, exponent);
    }
}
/*Returns the sum of the differences of the squares of values in two arrays.*/
function SUMX2MY2(array_x, array_y) {
    if (!array_x.find(function (i) { return typeof _to_number(i) !== "number"; }) &&
        !array_y.find(function (i) { return typeof _to_number(i) !== "number"; })) {
        var result = 0;
        for (var i = 0; i < array_x.length; i++) {
            result +=
                array_x[i] * array_x[i] -
                    array_y[i] * array_y[i];
        }
        return result;
    }
}
/*Returns the sum of the sums of the squares of values in two arrays.*/
function SUMX2PY2(array_x, array_y) {
    if (!array_x.find(function (i) { return typeof _to_number(i) !== "number"; }) &&
        !array_y.find(function (i) { return typeof _to_number(i) !== "number"; })) {
        var result = 0;
        for (var i = 0; i < array_x.length; i++) {
            result +=
                array_x[i] * array_x[i] +
                    array_y[i] * array_y[i];
        }
        return result;
    }
}
/*Returns the sum of the squares of differences of values in two arrays.*/
function SUMXMY2(array_x, array_y) {
    if (!array_x.find(function (i) { return typeof _to_number(i) !== "number"; }) &&
        !array_y.find(function (i) { return typeof _to_number(i) !== "number"; })) {
        var result = 0;
        for (var i = 0; i < array_x.length; i++) {
            result += Math.pow(array_x[i] - array_y[i], 2);
        }
        return result;
    }
}
/*Returns the tangent of an angle provided in radians*/
function TAN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.tan(v);
    }
}
/*Returns the hyperbolic tangent of any real number*/
function TANH(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return Math.tanh(v);
    }
}
/*Returns the string representation of a complex number*/
function COMPLEX(real, i, suffix) {
    if (suffix === void 0) { suffix = "i"; }
    var v = _to_number(real);
    var v1 = _to_number(i);
    if (typeof v !== "number" && typeof v1 !== "number") {
        throw ERRORS.num;
    }
    var sReal = "";
    var sI = "";
    if (real)
        sReal = real.toString();
    if (i && i !== 1)
        sI = i + suffix;
    else if (i === 1)
        sI = suffix;
    if (i > 0) {
        return "" + (sReal ? sReal + "+" : "") + sI;
    }
    return sReal + sI;
}
/*Returns the number showing similiraty of the two arrays*/
function CORREL(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        throw ERRORS.na;
    }
    var arrX = arr1.filter(function (v) { return typeof v === "number"; });
    var arrY = arr2.filter(function (v) { return typeof v === "number"; });
    var n = arrX.length;
    var meanX = arrX.reduce(function (p, c) { return p + c; }, 0) / n;
    var meanY = arrY.reduce(function (p, c) { return p + c; }, 0) / n;
    var sigmaXY = 0;
    var sigmaX = 0;
    var sigmaY = 0;
    for (var i = 0; i < n; i++) {
        sigmaXY += (arrX[i] - meanX) * (arrY[i] - meanY);
        sigmaX += Math.pow(arrX[i] - meanX, 2);
        sigmaY += Math.pow(arrY[i] - meanY, 2);
    }
    var div = Math.sqrt(sigmaX * sigmaY);
    if (!div) {
        throw ERRORS.div0;
    }
    return sigmaXY / div;
}
/*Converts a number to binary*/
function DEC2BIN(num, places) {
    if (places === void 0) { places = null; }
    return convertToNotation(num, places, -512, 511, 2);
}
/*Converts a number to hexadecimal*/
function DEC2HEX(num, places) {
    if (places === void 0) { places = null; }
    return convertToNotation(num, places, -274877906944, 274877906943, 16);
}
/*Converts a number to octal*/
function DEC2OCT(num, places) {
    if (places === void 0) { places = null; }
    return convertToNotation(num, places, -536870912, 536870911, 8);
}
function DELTA(num1, num2) {
    var n1 = _to_number(num1);
    var n2 = _to_number(num2);
    if (typeof n1 === "number" || typeof n1 === "number") {
        return +(n1 === n2);
    }
    throw ERRORS.value;
}
/*Returns the sum of squares of deviations*/
function DEVSQ() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var set = _combine(rest);
    var arr = [];
    set.forEach(function (v) {
        if (typeof v === "number") {
            arr.push(v);
        }
    });
    var mean = arr.reduce(function (p, c) { return p + c; }, 0) / arr.length;
    return arr.reduce(function (p, c) { return p + Math.pow(c - mean, 2); }, 0);
}
var erfParams = [
    -1.3026537197817094,
    6.4196979235649026e-1,
    1.9476473204185836e-2,
    -9.561514786808631e-3,
    -9.46595344482036e-4,
    3.66839497852761e-4,
    4.2523324806907e-5,
    -2.0278578112534e-5,
    -1.624290004647e-6,
    1.30365583558e-6,
];
function erf(x) {
    var sign = x < 0;
    x = Math.abs(x);
    var now = 0, prev = 0, next;
    var t = 2 / (2 + x);
    var ty = 4 * t - 2;
    for (var j = erfParams.length - 1; j > 0; j--) {
        next = ty * now - prev + erfParams[j];
        prev = now;
        now = next;
    }
    var res = t * Math.exp(-x * x + 0.5 * (erfParams[0] + ty * now) - prev);
    return sign ? res - 1 : 1 - res;
}
/*Returns the error function*/
function ERF(num, upper) {
    var x = _to_number(num);
    var u = _to_number(upper);
    if (typeof x === "number") {
        if (typeof u === "number") {
            return erf(u) - erf(x);
        }
        else {
            return erf(x);
        }
    }
    throw ERRORS.value;
}
/*Returns the complementary ERF function integrated between x and infinity*/
function ERFC(num, upper) {
    var x = _to_number(num);
    if (typeof x === "number") {
        return 1 - ERF(x, upper);
    }
    throw ERRORS.value;
}
/*Returns 'e' raised to the power of number*/
function EXP(num) {
    var x = _to_number(num);
    if (typeof x === "number") {
        return Math.exp(x);
    }
    throw ERRORS.value;
}
/*Returns the Fisher transformation*/
function FISHER(num) {
    var x = _to_number(num);
    if (typeof x === "number" && x > -1 && x < 1) {
        return 0.5 * Math.log((1 + x) / (1 - x));
    }
    throw ERRORS.value;
}
/*Returns the inverse of the Fisher transformation*/
function FISHERINV(num) {
    var y = _to_number(num);
    if (typeof y === "number") {
        var v = Math.exp(2 * y);
        return (v - 1) / (v + 1);
    }
    throw ERRORS.value;
}
/* Constants required for the gamma function*/
var g = 7;
var C = [
    0.99999999999980993,
    676.5203681218851,
    -1259.1392167224028,
    771.32342877765313,
    -176.61502916214059,
    12.507343278686905,
    -0.13857109526572012,
    9.9843695780195716e-6,
    1.5056327351493116e-7,
];
/*Returns the Gamma function value*/
function GAMMA(num) {
    var z = _to_number(num);
    if (typeof z !== "number") {
        throw ERRORS.value;
    }
    if (!(Number.isInteger(z) && z <= 0)) {
        if (z < 0.5)
            return Math.PI / (Math.sin(Math.PI * z) * GAMMA(1 - z));
        else {
            z -= 1;
            var x = C[0];
            for (var i = 1; i < g + 2; i++) {
                x += C[i] / (z + i);
            }
            var t = z + g + 0.5;
            return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;
        }
    }
    throw ERRORS.num;
}
/*Returns the geometric mean*/
function GEOMEAN() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var set = _combine(rest);
    if (set.some(function (v) { return !Number.isFinite(v) || v <= 0; })) {
        throw ERRORS.num;
    }
    return Math.pow(set.reduce(function (p, c) { return c * p; }, 1), 1 / set.length);
}
/*Returns 1 if number ≥ step; returns 0 (zero) otherwise*/
function GESTEP(num, step) {
    if (step === void 0) { step = 0; }
    var n = _to_number(num);
    var s = _to_number(step);
    if (typeof n === "number" && typeof s === "number") {
        return +(num >= step);
    }
    throw ERRORS.value;
}
/*Returns the harmonic mean of a data set. The harmonic mean is the reciprocal of the arithmetic mean of reciprocals.*/
function HARMEAN() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var set = _combine(rest);
    if (set.some(function (v) { return !Number.isFinite(v) || v <= 0; })) {
        throw ERRORS.num;
    }
    var sum = set.reduce(function (p, c) { return p + 1 / c; }, 0);
    return 1 / ((1 / set.length) * sum);
}
/*Converts a hexadecimal number to binary.*/
function HEX2BIN(num, places) {
    var dec = parseInt(num.toString(), 16);
    return DEC2BIN(dec, places);
}
/*Converts a hexadecimal number to decimal.*/
var signBit = Math.pow(2, 39);
function HEX2DEC(num, places) {
    var hex = parseInt(num.toString(), 16);
    if (!Number.isFinite(hex)) {
        throw ERRORS.value;
    }
    var sign = hex > signBit;
    if (sign)
        hex = -(hex - signBit * 2);
    var p = places ? _to_number(places) : null;
    var res = hex.toString();
    return (sign ? "-" : "") + (p ? res.padStart(p, "0") : res);
}
/*Converts a hexadecimal number to octal.*/
function HEX2OCT(num, places) {
    if (places === void 0) { places = null; }
    var dec = parseInt(num.toString(), 16);
    if (dec > signBit)
        // eslint-disable-next-line no-bitwise
        dec = dec ^ signBit;
    return DEC2OCT(dec, places);
}
/*Returns the real coefficient of a complex number in x + yi or x + yj text format.*/
function IMREAL(inumber) {
    if (typeof inumber !== "string") {
        throw ERRORS.value;
    }
    // Handle special cases
    if ([
        "i",
        "+i",
        "1i",
        "+1i",
        "-i",
        "-1i",
        "j",
        "+j",
        "1j",
        "+1j",
        "-j",
        "-1j",
    ].indexOf(inumber) >= 0) {
        return 0;
    }
    // Lookup sign
    var plus = inumber.indexOf("+");
    var minus = inumber.indexOf("-");
    if (plus === 0) {
        plus = inumber.indexOf("+", 1);
    }
    if (minus === 0) {
        minus = inumber.indexOf("-", 1);
    }
    // Lookup imaginary unit
    var last = inumber.substring(inumber.length - 1, inumber.length);
    var unit = last === "i" || last === "j";
    if (plus >= 0 || minus >= 0) {
        if (!unit) {
            throw ERRORS.num;
        }
        // Return real coefficient of complex number
        if (plus >= 0) {
            if (isNaN(+inumber.substring(0, plus)) ||
                isNaN(+inumber.substring(plus + 1, inumber.length - 1))) {
                throw ERRORS.num;
            }
            return Number(inumber.substring(0, plus));
        }
        else {
            if (isNaN(+inumber.substring(0, minus)) ||
                isNaN(+inumber.substring(minus + 1, inumber.length - 1))) {
                throw ERRORS.num;
            }
            return Number(inumber.substring(0, minus));
        }
    }
    else {
        if (unit) {
            if (isNaN(+inumber.substring(0, inumber.length - 1))) {
                throw ERRORS.num;
            }
            return 0;
        }
        else {
            if (isNaN(+inumber)) {
                throw ERRORS.num;
            }
            return +inumber;
        }
    }
}
/*Returns the imaginary coefficient of a complex number in x + yi or x + yj text format.*/
function IMAGINARY(inumber) {
    if (typeof inumber !== "string") {
        throw ERRORS.value;
    }
    // Handle special cases
    if (["i", "j"].indexOf(inumber) >= 0) {
        return 1;
    }
    // Normalize imaginary coefficient
    inumber = inumber
        .replace("+i", "+1i")
        .replace("-i", "-1i")
        .replace("+j", "+1j")
        .replace("-j", "-1j");
    // Lookup sign
    var plus = inumber.indexOf("+");
    var minus = inumber.indexOf("-");
    if (plus === 0) {
        plus = inumber.indexOf("+", 1);
    }
    if (minus === 0) {
        minus = inumber.indexOf("-", 1);
    }
    // Lookup imaginary unit
    var last = inumber.substring(inumber.length - 1, inumber.length);
    var unit = last === "i" || last === "j";
    if (plus >= 0 || minus >= 0) {
        if (!unit) {
            throw ERRORS.num;
        }
        // Return imaginary coefficient of complex number
        if (plus >= 0) {
            if (isNaN(+inumber.substring(0, plus)) ||
                isNaN(+inumber.substring(plus + 1, inumber.length - 1))) {
                throw ERRORS.num;
            }
            return Number(inumber.substring(plus + 1, inumber.length - 1));
        }
        else {
            if (isNaN(+inumber.substring(0, minus)) ||
                isNaN(+inumber.substring(minus + 1, inumber.length - 1))) {
                throw ERRORS.num;
            }
            return -Number(inumber.substring(minus + 1, inumber.length - 1));
        }
    }
    else {
        if (unit) {
            var val = +inumber.substring(0, inumber.length - 1);
            if (isNaN(val)) {
                throw ERRORS.num;
            }
            return val;
        }
        else {
            if (isNaN(+inumber)) {
                throw ERRORS.num;
            }
            return 0;
        }
    }
}
/*Returns the absolute value (modulus) of a complex number in x + yi or x + yj text format.*/
function IMABS(inumber) {
    var imreal = IMREAL(inumber);
    var imagin = IMAGINARY(inumber);
    if (!Number.isFinite(+imreal) || !Number.isFinite(+imagin)) {
        throw ERRORS.value;
    }
    return Math.sqrt(Math.pow(+imreal, 2) + Math.pow(+imagin, 2));
}
/*Returns the complex conjugate of a complex number in x + yi or x + yj text format.*/
function IMCONJUGATE(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    return COMPLEX(x, -y);
}
/*Returns the cosine of a complex number in x + yi or x + yj text format.*/
function IMCOS(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    return COMPLEX(Math.cos(x) * Math.cosh(y), -Math.sin(x) * Math.sinh(y));
}
/*Returns the hyperbolic cosine of a complex number in x + yi or x + yj text format.*/
function IMCOSH(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    return COMPLEX((Math.cos(y) * (Math.exp(x) + Math.exp(-x))) / 2, (Math.sin(y) * (Math.exp(x) - Math.exp(-x))) / 2);
}
/*Returns the cotangent of a complex number in x+yi or x+yj text format.*/
function IMCOT(inumber) {
    return IMDIV(IMCOS(inumber), IMSIN(inumber));
}
/*Returns the cosecant of a complex number in x+yi or x+yj text format.*/
function IMCSC(inumber) {
    return IMDIV("1", IMSIN(inumber));
}
/*Returns the hyperbolic cosecant of a complex number in x+yi or x+yj text format.*/
function IMCSCH(inumber) {
    return IMDIV("1", IMSINH(inumber));
}
/*Returns the hyperbolic cosecant of a complex number in x + yi or x + yj text format.*/
function IMDIV(inumber1, inumber2) {
    var a = +IMREAL(inumber1);
    var b = +IMAGINARY(inumber1);
    var c = +IMREAL(inumber2);
    var d = +IMAGINARY(inumber2);
    var div = Math.pow(c, 2) + Math.pow(d, 2);
    return COMPLEX((a * c + b * d) / div, (b * c - a * d) / div);
}
/*Returns the sine of a complex number in x + yi or x + yj text format.*/
function IMSIN(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    return COMPLEX(Math.sin(x) * Math.cosh(y), Math.cos(x) * Math.sinh(y));
}
/*Returns the hyperbolic sine of a complex number in x+yi or x+yj text format.*/
function IMSINH(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    return COMPLEX((Math.cos(y) * (Math.exp(x) - Math.exp(-x))) / 2, (Math.sin(y) * (Math.exp(x) + Math.exp(-x))) / 2);
}
/*Returns the exponential of a complex number in x + yi or x + yj text format.*/
function IMEXP(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    var e = Math.exp(x);
    return COMPLEX(e * Math.cos(y), e * Math.sin(x));
}
/*Returns the natural logarithm of a complex number in x + yi or x + yj text format.*/
function IMLN(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    return COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x));
}
/*Returns a complex number raised to an integer power in x + yi or x + yj text format.*/
function IMPOWER(inumber, pow) {
    var n = _to_number(pow);
    if (typeof n !== "number") {
        throw ERRORS.value;
    }
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    var r = Math.sqrt(x * x + y * y);
    var rn = Math.pow(r, n);
    var t = Math.atan(y / x);
    return COMPLEX(rn * Math.cos(n * t), rn * Math.sin(n * t));
}
/*Returns the product of complex numbers in x + yi or x + yj text format.*/
function IMPRODUCT() {
    var inumbers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inumbers[_i] = arguments[_i];
    }
    if (inumbers.length === 0) {
        throw ERRORS.value;
    }
    var res = inumbers[0];
    for (var _c = 0, _d = inumbers.slice(1); _c < _d.length; _c++) {
        var i = _d[_c];
        res = immul(res.toString(), i.toString());
    }
    return res.toString();
}
/*Returns the secant of a complex number in x + yi or x + yj text format.*/
function IMSEC(inumber) {
    return IMDIV("1", IMCOS(inumber));
}
/*Returns the hyperbolic secant of a complex number in x+yi or x+yj text format.*/
function IMSECH(inumber) {
    return IMDIV("1", IMCOSH(inumber));
}
/*Returns the square root of a complex number in x + yi or x + yj text format.*/
function IMSQRT(inumber) {
    var x = +IMREAL(inumber);
    var y = +IMAGINARY(inumber);
    var r = Math.sqrt(Math.sqrt(x * x + y * y));
    var t = Math.atan(y / x) / 2;
    return COMPLEX(r * Math.cos(t), r * Math.sin(t));
}
/*Returns the difference of two complex numbers in x + yi or x + yj text format.*/
function IMSUB(inumber1, inumber2) {
    var a = +IMREAL(inumber1);
    var b = +IMAGINARY(inumber1);
    var c = +IMREAL(inumber2);
    var d = +IMAGINARY(inumber2);
    return COMPLEX(a - c, b - d);
}
/*Returns the sum of two or more complex numbers in x + yi or x + yj text format.*/
function IMSUM() {
    var inumbers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inumbers[_i] = arguments[_i];
    }
    if (inumbers.length === 0) {
        throw ERRORS.value;
    }
    var res = inumbers[0];
    for (var _c = 0, _d = inumbers.slice(1); _c < _d.length; _c++) {
        var i = _d[_c];
        res = imsum(res.toString(), i.toString());
    }
    return res.toString();
}
/*Returns the tangent of a complex number in x+yi or x+yj text format.*/
function IMTAN(inumber) {
    return IMDIV(IMSIN(inumber), IMCOS(inumber));
}
/*Returns the k-th largest value in a data set*/
function LARGE(arr, value) {
    var k = _to_number(value);
    var set = arr.sort(function (a, b) { return a - b; });
    if (typeof k === "number" &&
        !arr.some(function (v) { return typeof _to_number(v) !== "number"; })) {
        return set[set.length - k];
    }
    throw ERRORS.value;
}
/*Returns the median of the given numbers. The median is the number in the middle of a set of numbers*/
function MEDIAN() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var arr = _combine(rest);
    arr.sort(function (a, b) {
        return a - b;
    });
    var half = Math.floor(arr.length / 2);
    if (arr.length % 2) {
        return arr[half];
    }
    return (arr[half - 1] + arr[half]) / 2.0;
}
/*Converts a octal number to binary.*/
var octBit = Math.pow(2, 29);
function OCT2BIN(num, places) {
    if (places === void 0) { places = null; }
    var dec = parseInt(num.toString(), 8);
    // eslint-disable-next-line no-bitwise
    if (dec & octBit)
        // eslint-disable-next-line no-bitwise
        dec = -(octBit * 2 - dec);
    return DEC2BIN(dec, places);
}
/*Converts a octal number to decimal.*/
function OCT2DEC(num, places) {
    if (places === void 0) { places = null; }
    var p = places ? _to_number(places) : null;
    var hex = parseInt(num.toString(), 8);
    // eslint-disable-next-line no-bitwise
    if (hex & octBit)
        hex = -(octBit * 2 - hex);
    if (!Number.isFinite(hex) || typeof p === "boolean") {
        throw ERRORS.value;
    }
    return hex.toString().padStart(p || 0, "0");
}
/*Converts a octal number to hexaheximal.*/
function OCT2HEX(num, places) {
    if (places === void 0) { places = null; }
    var dec = parseInt(num.toString(), 8);
    // eslint-disable-next-line no-bitwise
    if (dec & octBit)
        dec = -(octBit * 2 - dec);
    return DEC2HEX(dec, places);
}
/*Returns the number of permutations for a given number of objects that can be selected from number objects*/
function PERMUT(num, number_chosen) {
    var n = _to_number(num);
    var k = _to_number(number_chosen);
    if (typeof n === "number" && typeof k === "number") {
        return FACT(n) / FACT(n - k);
    }
    throw ERRORS.value;
}
/*Returns the k-th percentile of values in a range*/
function PERCENTILE(arr, k_value, mode) {
    var k = _to_number(k_value);
    if (typeof k !== "number" ||
        k_value < 0 ||
        k_value > 1 ||
        (mode && (k_value === 0 || k_value === 1))) {
        throw ERRORS.value;
    }
    var sorted = _combine(arr).sort(function (a, b) { return a - b; });
    if (mode)
        sorted = __spreadArrays([0], sorted);
    var pos = (sorted.length + (mode ? 0 : -1)) * k;
    var base = Math.floor(pos);
    if (sorted[base + 1] === undefined)
        return sorted[base];
    var diff = sorted[base + 1] - sorted[base];
    return sorted[base] + diff * (pos - base);
}
function PERCENTILEEXC(arr, k_value) {
    return PERCENTILE(arr, k_value, true);
}
/*Returns the quartile of a data set*/
function QUARTILE(arr, q, mode) {
    var v = _to_number(q);
    if (typeof v !== "number") {
        throw ERRORS.value;
    }
    switch (v) {
        case 0:
            if (mode)
                throw ERRORS.value;
            return MIN.apply(void 0, arr);
        case 1:
            return PERCENTILE(arr, 0.25, mode);
        case 2:
            return PERCENTILE(arr, 0.5, mode);
        case 3:
            return PERCENTILE(arr, 0.75, mode);
        case 4:
            if (mode)
                throw ERRORS.value;
            return MAX.apply(void 0, arr);
        default:
            throw ERRORS.num;
    }
}
function QUARTILEEXC(arr, q) {
    return QUARTILE(arr, q, true);
}
/*Determines the sign of a number.
Returns 1 if the number is positive, zero (0) if the number is 0, and -1 if the number is negative.*/
function SIGN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        if (v === 0)
            return 0;
        return v / Math.abs(v);
    }
    throw ERRORS.value;
}
/*Returns the k-th smallest value in a data set*/
function SMALL(arr, value) {
    var k = _to_number(value);
    var set = arr.sort(function (a, b) { return a - b; });
    if (typeof k === "number" &&
        !arr.some(function (v) { return typeof _to_number(v) !== "number"; })) {
        return set[k - 1];
    }
    throw ERRORS.value;
}
/*Returns the standard error of the predicted y-value for each x in the regression*/
function STEYX(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        throw ERRORS.na;
    }
    var arrY = arr1.filter(function (v) { return typeof v === "number"; });
    var arrX = arr2.filter(function (v) { return typeof v === "number"; });
    var n = arrY.length;
    if (n === 2) {
        throw ERRORS.div0;
    }
    var meanY = arrY.reduce(function (p, c) { return p + c; }, 0) / n;
    var meanX = arrX.reduce(function (p, c) { return p + c; }, 0) / n;
    var sigmaXY = 0;
    var sigmaY = 0;
    var sigmaX = 0;
    for (var i = 0; i < n; i++) {
        sigmaXY += (arrY[i] - meanY) * (arrX[i] - meanX);
        sigmaY += Math.pow(arrY[i] - meanY, 2);
        sigmaX += Math.pow(arrX[i] - meanX, 2);
    }
    if (sigmaX === 2) {
        throw ERRORS.div0;
    }
    return Math.sqrt((sigmaY - Math.pow(sigmaXY, 2) / sigmaX) / (n - 2));
}
/*Returns the Weibull distribution*/
function WEIBULL(x, alpha, beta, cumulative) {
    var _x = numberOrError(x);
    var _a = numberOrError(alpha);
    var _b = numberOrError(beta);
    if (alpha == 1) {
        return 1 / _b;
    }
    var e = Math.exp(-Math.pow(_x / _b, _a));
    return cumulative
        ? 1 - e
        : (_a / Math.pow(_b, _a)) * Math.pow(_x, _a - 1) * e;
}
/*Returns the average of the absolute deviations of data points from their mean*/
function AVEDEV() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var arr = _combine(rest).filter(function (v) { return typeof v === "number"; });
    var n = arr.length;
    if (n === 0) {
        throw ERRORS.div0;
    }
    var mean = arr.reduce(function (p, c) { return p + c; }, 0) / n;
    var sigma = arr.reduce(function (p, c) { return p + Math.abs(c - mean); }, 0);
    return sigma / n;
}
/*Returns the individual term binomial distribution probability*/
function BINOMDIST(number_s, trials, probability_s, cumulative) {
    if (cumulative === void 0) { cumulative = false; }
    var x = numberOrError(number_s);
    var n = numberOrError(trials);
    var p = numberOrError(probability_s);
    var b = function (x, n, p) {
        var c = COMBIN(n, x);
        return c * Math.pow(p, x) * Math.pow((1 - p), (n - x));
    };
    if (!cumulative) {
        return b(x, n, p);
    }
    var s = 0;
    for (var y = 0; y < x + 1; y++) {
        s += b(y, n, p);
    }
    return s;
}
/*Returns the probability of a trial result using a binomial distribution*/
function BINOMDISTRANGE(trials, probability_s, number_s1, number_s2) {
    var n = numberOrError(trials);
    var p = numberOrError(probability_s);
    var s1 = numberOrError(number_s1);
    var s2 = _to_number(number_s2);
    if (typeof s2 !== "number") {
        s2 = s1;
    }
    var s = 0;
    for (var k = s1; k <= s2; k++) {
        var c = COMBIN(n, k);
        s += c * Math.pow(p, k) * Math.pow((1 - p), (n - k));
    }
    return s;
}
/*Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.*/
function BINOMDISTINV(trials, probability_s, alpha) {
    var n = numberOrError(trials);
    var p = numberOrError(probability_s);
    var a = numberOrError(alpha);
    for (var x = 0; x <= n; x++) {
        var b = BINOMDIST(x, n, p, true);
        if (b >= a) {
            return x;
        }
    }
}
/*Returns a bitwise 'AND' of two numbers.*/
function BITAND(num1, num2) {
    var n1 = _to_number(num1);
    var n2 = _to_number(num2);
    if (typeof n1 === "number" && typeof n2 === "number") {
        // eslint-disable-next-line no-bitwise
        return n1 & n2;
    }
    throw ERRORS.value;
}
/*Returns a bitwise 'OR' of two numbers.*/
function BITOR(num1, num2) {
    var n1 = _to_number(num1);
    var n2 = _to_number(num2);
    if (typeof n1 === "number" && typeof n2 === "number") {
        // eslint-disable-next-line no-bitwise
        return n1 | n2;
    }
    throw ERRORS.value;
}
/*Returns a bitwise 'XOR' of two numbers.*/
function BITXOR(num1, num2) {
    var n1 = _to_number(num1);
    var n2 = _to_number(num2);
    if (typeof n1 === "number" && typeof n2 === "number") {
        // eslint-disable-next-line no-bitwise
        return n1 ^ n2;
    }
    throw ERRORS.value;
}
/*Returns a number shifted left by the specified number of bits.*/
function BITLSHIFT(num, amount) {
    var n = _to_number(num);
    var a = _to_number(amount);
    if (typeof n === "number" && typeof a === "number") {
        if (a > 0)
            // eslint-disable-next-line no-bitwise
            return n << a;
        // eslint-disable-next-line no-bitwise
        else
            return n >> -a;
    }
    throw ERRORS.value;
}
/*Returns a number shifted right by the specified number of bits.*/
function BITRSHIFT(num, amount) {
    var n = _to_number(num);
    var a = _to_number(amount);
    if (typeof n === "number" && typeof a === "number") {
        if (a > 0)
            // eslint-disable-next-line no-bitwise
            return n >> a;
        // eslint-disable-next-line no-bitwise
        else
            return n << -a;
    }
    throw ERRORS.value;
}
/*Returns covariance, the average of the products of deviations for each data point pair in two data sets.*/
function COVAR(arr1, arr2, sample) {
    var arrX = arr1.filter(function (v) { return typeof v === "number"; });
    var arrY = arr2.filter(function (v) { return typeof v === "number"; });
    if (arrX.length !== arrY.length) {
        throw ERRORS.na;
    }
    var n = arrX.length;
    if (n === 0) {
        throw ERRORS.div0;
    }
    var meanX = arrX.reduce(function (p, c) { return p + c; }, 0) / n;
    var meanY = arrY.reduce(function (p, c) { return p + c; }, 0) / n;
    var sigma = 0;
    for (var i = 0; i < n; i++) {
        sigma += (arrX[i] - meanX) * (arrY[i] - meanY);
    }
    return sigma / (sample ? n - 1 : n);
}
function COVARP(arr1, arr2) {
    return COVAR(arr1, arr2, false);
}
function COVARS(arr1, arr2) {
    return COVAR(arr1, arr2, true);
}
var methods$3 = {
    ABS: ABS,
    ACOS: ACOS,
    ACOSH: ACOSH,
    ACOT: ACOT,
    ACOTH: ACOTH,
    ADD: ADD,
    ARABIC: ARABIC,
    ASIN: ASIN,
    ASINH: ASINH,
    ATAN: ATAN,
    ATAN2: ATAN2,
    ATANH: ATANH,
    AVEDEV: AVEDEV,
    AVERAGE: AVERAGE,
    AVERAGEA: AVERAGEA,
    BASE: BASE,
    BINOMDIST: BINOMDIST,
    "BINOM.INV": BINOMDISTINV,
    "BINOM.DIST.RANGE": BINOMDISTRANGE,
    "BINOM.DIST": BINOMDIST,
    BITAND: BITAND,
    BITLSHIFT: BITLSHIFT,
    BITOR: BITOR,
    BITRSHIFT: BITRSHIFT,
    BITXOR: BITXOR,
    CEILING: CEILING,
    COMBIN: COMBIN,
    COMBINA: COMBINA,
    COMPLEX: COMPLEX,
    CORREL: CORREL,
    COS: COS,
    COSH: COSH,
    COT: COT,
    COTH: COTH,
    COUNT: COUNT,
    COUNTA: COUNTA,
    COUNTBLANK: COUNTBLANK,
    COVAR: COVARP,
    "COVARIANCE.P": COVARP,
    "COVARIANCE.S": COVARS,
    CSC: CSC,
    CSCH: CSCH,
    DEC2BIN: DEC2BIN,
    DEC2HEX: DEC2HEX,
    DEC2OCT: DEC2OCT,
    DECIMAL: DECIMAL,
    DEGREES: DEGREES,
    DELTA: DELTA,
    DEVSQ: DEVSQ,
    DIVIDE: DIVIDE,
    EQ: EQ,
    ERF: ERF,
    ERFC: ERFC,
    EVEN: EVEN,
    EXP: EXP,
    FACT: FACT,
    FACTDOUBLE: FACTDOUBLE,
    FISHER: FISHER,
    FISHERINV: FISHERINV,
    FLOOR: FLOOR,
    GAMMA: GAMMA,
    GCD: GCD,
    GEOMEAN: GEOMEAN,
    GESTEP: GESTEP,
    GT: GT,
    GTE: GTE,
    HARMEAN: HARMEAN,
    HEX2BIN: HEX2BIN,
    HEX2DEC: HEX2DEC,
    HEX2OCT: HEX2OCT,
    IMABS: IMABS,
    IMAGINARY: IMAGINARY,
    IMCONJUGATE: IMCONJUGATE,
    IMCOS: IMCOS,
    IMCOSH: IMCOSH,
    IMCOT: IMCOT,
    IMCSC: IMCSC,
    IMCSCH: IMCSCH,
    IMDIV: IMDIV,
    IMEXP: IMEXP,
    IMLN: IMLN,
    IMPOWER: IMPOWER,
    IMPRODUCT: IMPRODUCT,
    IMREAL: IMREAL,
    IMSEC: IMSEC,
    IMSECH: IMSECH,
    IMSIN: IMSIN,
    IMSINH: IMSINH,
    IMSQRT: IMSQRT,
    IMSUB: IMSUB,
    IMSUM: IMSUM,
    IMTAN: IMTAN,
    INT: INT,
    LARGE: LARGE,
    LN: LN,
    LOG: LOG,
    LOG10: LOG10,
    LT: LT,
    LTE: LTE,
    MAX: MAX,
    MEDIAN: MEDIAN,
    MIN: MIN,
    MINUS: MINUS,
    MOD: MOD,
    MROUND: MROUND,
    MULTINOMIAL: MULTINOMIAL,
    MULTIPLY: MULTIPLY,
    NE: NE,
    OCT2BIN: OCT2BIN,
    OCT2DEC: OCT2DEC,
    OCT2HEX: OCT2HEX,
    ODD: ODD,
    PERCENTILE: PERCENTILE,
    "PERCENTILE.INC": PERCENTILE,
    "PERCENTILE.EXC": PERCENTILEEXC,
    PERMUT: PERMUT,
    PI: PI,
    POW: POW,
    POWER: POWER,
    PRODUCT: PRODUCT,
    QUARTILE: QUARTILE,
    "QUARTILE.INC": QUARTILE,
    "QUARTILE.EXC": QUARTILEEXC,
    QUOTIENT: QUOTIENT,
    RADIANS: RADIANS,
    RAND: RAND,
    RANDBETWEEN: RANDBETWEEN,
    ROMAN: ROMAN,
    ROUND: ROUND,
    ROUNDDOWN: ROUNDDOWN,
    ROUNDUP: ROUNDUP,
    SEC: SEC,
    SECH: SECH,
    SIGN: SIGN,
    SIN: SIN,
    SINH: SINH,
    SMALL: SMALL,
    SQRT: SQRT,
    SQRTPI: SQRTPI,
    STDEV: STDEV,
    "STDEV.S": STDEV,
    "STDEV.P": STDEVP,
    STDEVA: STDEVA,
    STDEVP: STDEVP,
    STDEVPA: STDEVPA,
    STEYX: STEYX,
    SUBTOTAL: SUBTOTAL,
    SUM: SUM,
    SUMPRODUCT: SUMPRODUCT,
    SUMSQ: SUMSQ,
    SUMX2MY2: SUMX2MY2,
    SUMX2PY2: SUMX2PY2,
    SUMXMY2: SUMXMY2,
    TAN: TAN,
    TANH: TANH,
    TRUNC: TRUNC,
    VAR: VAR,
    "VAR.S": VAR,
    "VAR.P": VARP,
    VARA: VARA,
    VARP: VARP,
    VARPA: VARPA,
    WEIBULL: WEIBULL,
    "WEIBULL.DIST": WEIBULL,
};

// partially based on https://github.com/sutoiku/formula.js
function CONCATENATE() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return _combine(rest).join("");
}
function LEFT(text, count) {
    if (_isEmpty(text)) {
        return "";
    }
    return text.toString().substring(0, count);
}
function MID(text, start, count) {
    if (_isEmpty(text)) {
        return "";
    }
    return text.toString().substring(start, start + count);
}
function RIGHT(text, count) {
    if (_isEmpty(text)) {
        return "";
    }
    return text.toString().substring(text.length - count);
}
function LOWER(text) {
    if (_isEmpty(text)) {
        return "";
    }
    return text.toString().toLowerCase();
}
function UPPER(text) {
    if (_isEmpty(text)) {
        return "";
    }
    return text.toString().toUpperCase();
}
function PROPER(text) {
    if (_isEmpty(text)) {
        return "";
    }
    var temp = text
        .toString()
        .toLowerCase()
        .split(" ");
    text = "";
    for (var idx in temp) {
        text +=
            (text ? " " : "") +
                temp[idx].substring(0, 1).toUpperCase() +
                temp[idx].substring(1);
    }
    return text;
}
function TRIM(text) {
    if (_isEmpty(text)) {
        return "";
    }
    return text.toString().trim();
}
function LEN(text) {
    if (_isEmpty(text)) {
        return 0;
    }
    return text.toString().length;
}
/*Convert a number into a character according to the current Unicode table*/
function CHAR(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return String.fromCharCode(v);
    }
}
// eslint-disable-next-line no-control-regex
var re = /[\0-\x1F]/g;
/*Returns the text with the non-printable ASCII characters removed*/
function CLEAN(text) {
    if (text === void 0) { text = ""; }
    return ("" + text).replace(re, "");
}
/*Returns the numeric Unicode map value of the first character in the string provided.*/
function CODE(text) {
    if (text === void 0) { text = ""; }
    return ("" + text).charCodeAt(0);
}
/*Returns TRUE when two strings are identical.*/
function EXACT(text1, text2) {
    return text1 === text2;
}
/*Returns the position at which a string is first found within text*/
function FIND(text, text2, pos) {
    if (pos === void 0) { pos = 0; }
    var p = _to_number(pos);
    if (typeof p === "number" && text2) {
        return ("" + text2).indexOf("" + text, p - 1) + 1;
    }
    throw "index cannot be string";
}
/*Formats a number with a fixed number of decimal places*/
function FIXED(number, decimals, comas) {
    if (decimals === void 0) { decimals = 2; }
    if (comas === void 0) { comas = false; }
    var num = _to_number(number);
    var d = _to_number(decimals);
    if (typeof num === "number" && typeof d === "number") {
        var n = num.toFixed(d);
        if (val2boolean(comas)) {
            return "" + n;
        }
        var _a = ("" + n).split("."), left = _a[0], right = _a[1];
        return left.replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "." + right;
    }
}
/*Convert text to number with custom separators*/
function NUMBERVALUE(text, decimals, group_separator) {
    if (decimals === void 0) { decimals = "."; }
    if (group_separator === void 0) { group_separator = ","; }
    if (typeof text === "string" &&
        typeof decimals === "string" &&
        typeof group_separator === "string") {
        return Number(text.replace(decimals, ".").replace(group_separator, ""));
    }
}
/*Extracts the first matching substrings according to a regular expression.*/
function REGEXEXTRACT(text, regexp) {
    if (typeof text === "string" && typeof regexp === "string") {
        var match = text.match(new RegExp(regexp));
        return match ? match[match.length > 1 ? match.length - 1 : 0] : null;
    }
}
/*Whether a piece of text matches a regular expression.*/
function REGEXMATCH(text, regexp) {
    if (typeof text === "string" && typeof regexp === "string") {
        var match = text.match(new RegExp(regexp));
        return !!match;
    }
}
/*Replaces part of a text string with a different text string using regular expressions.*/
function REGEXREPLACE(text, regexp, replacement) {
    if (typeof text === "string" && typeof regexp === "string") {
        return text.replace(new RegExp(regexp), "" + replacement);
    }
}
/*Returns specified text repeated a number of times.*/
function REPT(text, number) {
    var count = _to_number(number);
    if (typeof count === "number") {
        return new Array(count + 1).join("" + text);
    }
}
/*Returns the position at which a string is first found within text, ignoring case*/
function SEARCH(text, within, position) {
    if (position === void 0) { position = 0; }
    var p = _to_number(position);
    if (typeof p === "number") {
        var foundAt = ("" + within).toLowerCase().indexOf(("" + text).toLowerCase(), p - 1) + 1;
        if (foundAt !== 0) {
            return foundAt;
        }
        throw "not found";
    }
}
/*Replaces existing text with new text in a string*/
function SUBSTITUTE(text, old, new_text, occurrence) {
    if (!text || !old || (!new_text && new_text !== "")) {
        return "" + text;
    }
    else if (typeof occurrence === "undefined") {
        return ("" + text).replace(new RegExp("" + old, "g"), "" + new_text);
    }
    else {
        var index = 0;
        var i = 0;
        while (("" + text).indexOf("" + old, index) > 0) {
            index = ("" + text).indexOf("" + old, index + 1);
            i++;
            if (i === occurrence) {
                return (("" + text).substring(0, index) +
                    new_text +
                    ("" + text).substring(index + ("" + old).length));
            }
        }
    }
}
/*Converts value to a text*/
function T(val) {
    if (typeof val === "string" && val !== "TRUE" && val !== "FALSE")
        return "" + val;
    return "";
}
/*Concatenates the elements of one or more one-dimensional arrays using a specified delimiter.*/
function JOIN(separator) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    var res = [];
    rest.forEach(function (v) {
        if (typeof v === "object") {
            res.push(v.join("" + separator));
        }
        else {
            res.push(v);
        }
    });
    return res.join("" + separator);
}
/*REPLACE replaces part of a text string, based on the number of characters you specify, with a different text string.*/
function REPLACE(old_text, start_num, num_chars, new_text) {
    var s = _to_number(start_num);
    var n = _to_number(num_chars);
    if (typeof s === "number" && typeof n === "number") {
        var old = old_text.toString();
        var t = new_text.toString();
        return old.replace(old.substr(s - 1, n), t);
    }
}
/*The ARRAYTOTEXT function returns an array of text values from any specified range*/
function ARRAYTOTEXT(arr, format) {
    if (format) {
        return "{" + arr
            .map(function (v) {
            if (typeof v === "string") {
                return "\"" + v + "\"";
            }
            return v;
        })
            .join("; ") + "}";
    }
    return arr.join("; ");
}

var string = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CONCATENATE: CONCATENATE,
    LEFT: LEFT,
    MID: MID,
    RIGHT: RIGHT,
    LOWER: LOWER,
    UPPER: UPPER,
    PROPER: PROPER,
    TRIM: TRIM,
    LEN: LEN,
    CHAR: CHAR,
    CLEAN: CLEAN,
    CODE: CODE,
    EXACT: EXACT,
    FIND: FIND,
    FIXED: FIXED,
    NUMBERVALUE: NUMBERVALUE,
    REGEXEXTRACT: REGEXEXTRACT,
    REGEXMATCH: REGEXMATCH,
    REGEXREPLACE: REGEXREPLACE,
    REPT: REPT,
    SEARCH: SEARCH,
    SUBSTITUTE: SUBSTITUTE,
    T: T,
    JOIN: JOIN,
    REPLACE: REPLACE,
    ARRAYTOTEXT: ARRAYTOTEXT
});

// partially based on https://github.com/sutoiku/formula.js
function INDEX(a, row, column) {
    var rind = row;
    var cind = column;
    var dx = a.$width ? a.$width : 1;
    return orNull(a[dx * (rind - 1) + (cind || 1) - 1]);
}
function orNull(v) {
    if (typeof v === "undefined")
        return null;
    return v;
}
function _xmatch(v, a, mode, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_search) {
    // [FIXME] wildcard match not implemented
    // [FIXME] search modes not implemented
    // [FIXME] match for strings must be case-insensitive
    if (typeof mode === "undefined")
        mode = 0;
    var index = -1;
    if (mode === 0) {
        index = a.indexOf(v);
    }
    else {
        var base = typeof v === "string" ? "" : -Infinity * mode;
        var test_1 = base;
        if (mode === 1) {
            a.forEach(function (x, i) {
                if (x <= v && x > test_1) {
                    test_1 = x;
                    index = i;
                }
            });
        }
        else if (mode === -1) {
            a.forEach(function (x, i) {
                if (x >= v && x < test_1) {
                    test_1 = x;
                    index = i;
                }
            });
        }
    }
    return index + 1;
}
function XMATCH(v, a, mode, search) {
    var ind = _xmatch(v, a, mode);
    if (ind === 0)
        throw "#N/A";
    return ind;
}
function XLOOKUP(v, a, b, def, mode, search) {
    var ind = _xmatch(v, a, mode);
    if (ind === 0) {
        if (typeof def !== "undefined") {
            return def;
        }
        throw "#N/A";
    }
    return (b || a)[ind - 1];
}
function LOOKUP(v, a, b) {
    var ind = _xmatch(v, a, 1);
    if (ind === 0)
        throw "#N/A";
    return (b || a)[ind - 1];
}
function HLOOKUP(v, a, row, mode) {
    var xMode = true;
    if (typeof mode !== "undefined")
        xMode = val2boolean(mode);
    var dx = a.$width ? a.$width : a.length;
    var column = _xmatch(v, a.slice(0, dx), xMode ? 1 : 0);
    if (column === 0)
        throw "#N/A";
    var rind = row;
    return orNull(a[dx * ((rind || 1) - 1) + column - 1]);
}
function VLOOKUP(v, a, column, mode) {
    var xMode = true;
    if (typeof mode !== "undefined")
        xMode = val2boolean(mode);
    var dx = a.$width ? a.$width : 1;
    var dy = a.length / dx;
    var set;
    if (dy === 1) {
        set = a;
    }
    else {
        set = [];
        for (var i = 0; i < dy; i++)
            set.push(a[dx * i]);
    }
    var cind = column;
    var row = _xmatch(v, set, xMode ? 1 : 0);
    if (row === 0)
        throw "#N/A";
    return orNull(a[dx * (row - 1) + (cind || 1) - 1]);
}
function MATCH(v, a, mode) {
    var match = mode;
    if (typeof mode === "undefined")
        match = 1;
    var ind = _xmatch(v, a, match);
    if (ind === 0) {
        throw "#N/A";
    }
    return ind;
}
var methods$2 = {
    LOOKUP: LOOKUP,
    HLOOKUP: HLOOKUP,
    VLOOKUP: VLOOKUP,
    XLOOKUP: XLOOKUP,
    INDEX: INDEX,
    MATCH: MATCH,
    XMATCH: XMATCH,
};

// partially based on https://github.com/sutoiku/formula.js
var WEEK_TYPES = [
    [],
    [1, 2, 3, 4, 5, 6, 7],
    [7, 1, 2, 3, 4, 5, 6],
    [6, 0, 1, 2, 3, 4, 5],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [7, 1, 2, 3, 4, 5, 6],
    [6, 7, 1, 2, 3, 4, 5],
    [5, 6, 7, 1, 2, 3, 4],
    [4, 5, 6, 7, 1, 2, 3],
    [3, 4, 5, 6, 7, 1, 2],
    [2, 3, 4, 5, 6, 7, 1],
    [1, 2, 3, 4, 5, 6, 7],
];
var WEEK_STARTS = [
    undefined,
    0,
    1,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    1,
    2,
    3,
    4,
    5,
    6,
    0,
];
var WEEKEND_TYPES = [
    [],
    [6, 0],
    [0, 1],
    [1, 2],
    [2, 3],
    [3, 4],
    [4, 5],
    [5, 6],
    undefined,
    undefined,
    undefined,
    [0, 0],
    [1, 1],
    [2, 2],
    [3, 3],
    [4, 4],
    [5, 5],
    [6, 6],
];
function DATE(year, month, day) {
    var date = new Date(year, month - 1, day);
    return getExcelDateFromJs(date);
}
function TIME(hour, minute, second) {
    var date = new Date(1900, 0, 1, hour, minute, second, 0);
    var num = getExcelDateFromJs(date);
    return num - Math.trunc(num);
}
function DAY(date) {
    return getJsDateFromExcel(date).getDate();
}
function MONTH(date) {
    return getJsDateFromExcel(date).getMonth() + 1;
}
function YEAR(date) {
    return getJsDateFromExcel(date).getFullYear();
}
function HOUR(date) {
    return getJsDateFromExcel(date).getHours();
}
function MINUTE(date) {
    return getJsDateFromExcel(date).getMinutes();
}
function SECOND(date) {
    return getJsDateFromExcel(date).getSeconds();
}
function NOW() {
    var date = new Date();
    return getExcelDateFromJs(date);
}
function DATEDIF(startN, endN, unit) {
    var u = unit.toLowerCase();
    if (u === "d") {
        return endN - startN;
    }
    var start = getJsDateFromExcel(startN);
    var end = getJsDateFromExcel(endN);
    switch (u) {
        case "y":
            return end.getFullYear() - start.getFullYear();
        case "m": {
            var months = (end.getFullYear() - start.getFullYear()) * 12;
            return months + end.getMonth() - start.getMonth();
        }
        case "d": {
            return Math.floor(endN - startN);
        }
        case "md": {
            var diff = end.getDate() - start.getDate();
            if (diff < 0) {
                var startDateDays = new Date(start.getFullYear(), start.getMonth() + 1, 0).getDate();
                return end.getDate() + startDateDays - start.getDate();
            }
            return diff;
        }
        case "ym": {
            var months = end.getMonth() - start.getMonth();
            return months < 0 ? 12 + months : months;
        }
        case "yd": {
            var diff = dayOfTheYear(end) - dayOfTheYear(start);
            return diff < 0 ? 365 + diff : diff;
        }
    }
}
/*Converts a provided date string in a known format to a date value.*/
function DATEVALUE(string) {
    if (typeof string === "string") {
        var date = new Date(new Date(string).toDateString());
        return getExcelDateFromJs(date);
    }
}
/*The DAYS function returns the number of days between two dates.*/
function DAYS(date, date2) {
    var start = _to_date(date);
    var end = _to_date(date2);
    if (start && end) {
        return Math.round((start.getTime() - end.getTime()) / (1000 * 60 * 60 * 24));
    }
}
/*Returns the difference between two days based on the 360-day year used in some financial interest calculations.*/
function DAYS360(date, date2, method) {
    if (method === void 0) { method = 0; }
    var start = _to_date(date);
    var end = _to_date(date2);
    if (start && end) {
        var sm = start.getMonth();
        var em = end.getMonth();
        var sd = void 0, ed = void 0;
        if (val2boolean(method)) {
            sd = start.getDate() === 31 ? 30 : start.getDate();
            ed = end.getDate() === 31 ? 30 : end.getDate();
        }
        else {
            var smd = new Date(start.getFullYear(), sm + 1, 0).getDate();
            var emd = new Date(end.getFullYear(), em + 1, 0).getDate();
            sd = start.getDate() === smd ? 30 : start.getDate();
            if (end.getDate() === emd) {
                if (sd < 30) {
                    em++;
                    ed = 1;
                }
                else {
                    ed = 30;
                }
            }
            else {
                ed = end.getDate();
            }
        }
        return (360 * (end.getFullYear() - start.getFullYear()) +
            30 * (em - sm) +
            (ed - sd));
    }
}
/*Returns a date a specified number of months before or after another date.*/
function EDATE(date, month) {
    var start = _to_date(date);
    var m = _to_number(month);
    if (start && typeof m === "number") {
        start.setMonth(start.getMonth() + m);
        return getExcelDateFromJs(start);
    }
}
/*Returns a date representing the last day of a month which falls a specified number of months before or after another date.*/
function EOMONTH(date, month) {
    var start = _to_date(date);
    var m = _to_number(month);
    if (start && typeof m === "number") {
        return getExcelDateFromJs(new Date(start.getFullYear(), start.getMonth() + m + 1, 0));
    }
}
/*Returns the number of the ISO (International Organization for Standardization) week of the year where the provided date falls.*/
function ISOWEEKNUM(date) {
    var start = _to_date(date);
    if (start) {
        start.setHours(0, 0, 0);
        start.setDate(start.getDate() + 4 - (start.getDay() || 7));
        var yearStart = new Date(start.getFullYear(), 0, 1);
        return Math.ceil(((start.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);
    }
}
/*Returns the number of the ISO (International Organization for Standardization) week of the year where the provided date falls.*/
function NETWORKDAYS(date1, date2, holidays) {
    return NETWORKDAYSINTL(date1, date2, 1, holidays);
}
/*Returns the number of net working days between two provided days excluding specified weekend days and holidays.*/
function NETWORKDAYSINTL(date1, date2, weekend, holidays) {
    var start = _to_date(date1);
    var end = _to_date(date2);
    if (start && end) {
        var w = weekend === undefined ? WEEKEND_TYPES[1] : WEEKEND_TYPES[weekend];
        var h = (holidays || []);
        for (var i = 0; i < h.length; i++) {
            var holiday = getJsDateFromExcel(h[i]);
            if (holiday instanceof Error) {
                throw "The " + h[i] + " is not a  number";
            }
            h[i] = holiday;
        }
        var days = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24) + 1;
        var total = Math.round(days);
        var day = start;
        for (var i = 0; i < days; i++) {
            var d = new Date().getTimezoneOffset() > 0 ? day.getUTCDay() : day.getDay();
            var dec = false;
            if (d === w[0] || d === w[1]) {
                dec = true;
            }
            for (var j = 0; j < h.length; j++) {
                var holiday = h[j];
                if (holiday.getDate() === day.getDate() &&
                    holiday.getMonth() === day.getMonth() &&
                    holiday.getFullYear() === day.getFullYear()) {
                    dec = true;
                    break;
                }
            }
            if (dec) {
                total--;
            }
            day.setDate(day.getDate() + 1);
        }
        return total;
    }
}
/*Returns the fraction of a 24-hour day the time represents.*/
function TIMEVALUE(text) {
    if (typeof text === "string") {
        var parts = text.split(" ");
        var part_of_day = parts[1];
        var time = parts[0].split(":");
        var date = new Date();
        date.setHours(+time[0]);
        if (part_of_day && part_of_day.toUpperCase() === "PM") {
            date.setHours(date.getHours() + 12);
        }
        date.setMinutes(+time[1]);
        if (time[2]) {
            date.setSeconds(+time[2]);
        }
        return ((3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) /
            86400);
    }
}
/*Returns the number of the ISO (International Organization for Standardization) week of the year where the provided date falls.*/
function WEEKNUM(date, type) {
    if (type === void 0) { type = 1; }
    var start = _to_date(date);
    if (type === 21) {
        return ISOWEEKNUM(type);
    }
    var week_start = WEEK_STARTS[type];
    var jan = new Date(start.getFullYear(), 0, 1);
    var inc = jan.getDay() < week_start ? 1 : 0;
    var jan2 = jan.getTime() - Math.abs(jan.getDay() - week_start) * 24 * 60 * 60 * 1000;
    return (Math.floor((start.getTime() - jan2) / (1000 * 60 * 60 * 24) / 7 + 1) + inc);
}
/*Returns a number representing the day of the week of the date provided.*/
function WEEKDAY(date, type) {
    if (type === void 0) { type = 1; }
    var start = _to_date(date);
    var day = start.getDay();
    return WEEK_TYPES[type][day];
}
/*Calculates the end date after a specified number of working days.*/
function WORKDAY(date1, days, holidays) {
    return WORKDAYINTL(date1, days, 1, holidays);
}
/*Calculates the date after a specified number of workdays excluding specified weekend days and holidays.*/
function WORKDAYINTL(date1, days, weekend, holidays) {
    var start = _to_date(date1);
    var d = _to_number(days);
    if (start && typeof d === "number") {
        var w = weekend === undefined ? WEEKEND_TYPES[1] : WEEKEND_TYPES[weekend];
        var h = (holidays || []);
        for (var i = 0; i < h.length; i++) {
            var holiday = getJsDateFromExcel(h[i]);
            if (holiday instanceof Error) {
                throw "The " + h[i] + " is not a  number";
            }
            h[i] = holiday;
        }
        var daysLoop = 0;
        while (daysLoop < d) {
            start.setDate(start.getDate() + 1);
            var day = start.getDay();
            if (day === w[0] || day === w[1]) {
                continue;
            }
            for (var j = 0; j < h.length; j++) {
                var holiday = h[j];
                if (holiday.getDate() === start.getDate() &&
                    holiday.getMonth() === start.getMonth() &&
                    holiday.getFullYear() === start.getFullYear()) {
                    daysLoop--;
                    break;
                }
            }
            daysLoop++;
        }
        return getExcelDateFromJs(start);
    }
}
function isLeapYear(year) {
    return new Date(year, 1, 29).getMonth() === 1;
}
var feb29Between = function (d1, d2) {
    var year1 = d1.getFullYear();
    var mar1year1 = new Date(year1, 2, 1);
    if (isLeapYear(year1) && d1 < mar1year1 && d2 >= mar1year1) {
        return true;
    }
    var year2 = d2.getFullYear();
    var mar1year2 = new Date(year2, 2, 1);
    return isLeapYear(year2) && d2 >= mar1year2 && d1 < mar1year2;
};
/*Calculates the end date after a specified number of working days.*/
function YEARFRAC(date1, date2, basis) {
    if (basis === void 0) { basis = 0; }
    var start = _to_date(date1);
    var end = _to_date(date2);
    if (start && end) {
        var sd = start.getDate();
        var sm = start.getMonth() + 1;
        var sy = start.getFullYear();
        var ed = end.getDate();
        var em = end.getMonth() + 1;
        var ey = end.getFullYear();
        var ylength = 365;
        var years = ey - sy + 1;
        var days = (new Date(ey + 1, 0, 1).getTime() - new Date(sy, 0, 1).getTime()) /
            1000 /
            60 /
            60 /
            24;
        var average = days / years;
        switch (basis) {
            case 0:
                // US (NASD) 30/360
                if (sd === 31 && ed === 31) {
                    sd = 30;
                    ed = 30;
                }
                else if (sd === 31) {
                    sd = 30;
                }
                else if (sd === 30 && ed === 31) {
                    ed = 30;
                }
                return (ed + em * 30 + ey * 360 - (sd + sm * 30 + sy * 360)) / 360;
            case 1:
                // Actual/actual
                if (sy === ey ||
                    (sy + 1 === ey && (sm > em || (sm === em && sd >= ed)))) {
                    if ((sy === ey && isLeapYear(sy)) ||
                        feb29Between(start, end) ||
                        (em === 1 && ed === 29)) {
                        ylength = 366;
                    }
                    return DAYS(end.toDateString(), start.toDateString()) / ylength;
                }
                return DAYS(end.toDateString(), start.toDateString()) / average;
            case 2:
                // Actual/360
                return DAYS(end.toDateString(), start.toDateString()) / 360;
            case 3:
                // Actual/365
                return DAYS(end.toDateString(), start.toDateString()) / 365;
            case 4:
                // European 30/360
                return (ed + em * 30 + ey * 360 - (sd + sm * 30 + sy * 360)) / 360;
        }
    }
}
var methods$1 = {
    DATE: DATE,
    TIME: TIME,
    DAY: DAY,
    MONTH: MONTH,
    YEAR: YEAR,
    HOUR: HOUR,
    MINUTE: MINUTE,
    SECOND: SECOND,
    NOW: NOW,
    DATEDIF: DATEDIF,
    DATEVALUE: DATEVALUE,
    DAYS: DAYS,
    DAYS360: DAYS360,
    EDATE: EDATE,
    EOMONTH: EOMONTH,
    ISOWEEKNUM: ISOWEEKNUM,
    NETWORKDAYS: NETWORKDAYS,
    "NETWORKDAYS.INTL": NETWORKDAYSINTL,
    TIMEVALUE: TIMEVALUE,
    WEEKNUM: WEEKNUM,
    WEEKDAY: WEEKDAY,
    WORKDAY: WORKDAY,
    "WORKDAY.INTL": WORKDAYINTL,
    YEARFRAC: YEARFRAC,
};

// partially based on https://github.com/sutoiku/formula.js
function IF(check, pos, neg) {
    return check ? pos : neg;
}
/*Returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false..*/
function AND() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    for (var i = 0; i < rest.length; i++) {
        if (!val2boolean(rest[i])) {
            return false;
        }
    }
    return true;
}
/*Returns the opposite of a logical value - `NOT(TRUE)` returns `FALSE`; `NOT(FALSE)` returns `TRUE`.*/
function NOT(value) {
    return !val2boolean(value);
}
/*Returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false.*/
function OR() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    for (var i = 0; i < rest.length; i++) {
        if (rest[i]) {
            return true;
        }
    }
    return false;
}
/*Returns an element from a list of choices based on index.*/
function CHOOSE(num) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    var index = _to_number(num);
    if (rest.length > 1 && typeof index === "number") {
        if (rest.length < index)
            throw "the index number is greater than the length of the array of values";
        if (index <= 0)
            throw "index cannot be less than or equal to 0";
        index--;
        return rest[index];
    }
}
/*Returns "FALSE".*/
function FALSE() {
    return false;
}
/*Returns "TRUE".*/
function TRUE() {
    return true;
}

var other = /*#__PURE__*/Object.freeze({
    __proto__: null,
    IF: IF,
    AND: AND,
    NOT: NOT,
    OR: OR,
    CHOOSE: CHOOSE,
    FALSE: FALSE,
    TRUE: TRUE
});

// partially based on https://github.com/sutoiku/formula.js
/*Checks whether the referenced cell is empty.*/
function ISBLANK(val) {
    return _isEmpty(val);
}
/*Checks whether the provided value is binary.*/
function ISBINARY(val) {
    return /^[01]{1,10}$/.test("" + val);
}
/*Checks whether the provided value is even.*/
function ISEVEN(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return v % 2 === 0;
    }
    return false;
}
/*Checks whether the provided value is even.*/
function ISODD(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return v % 2 !== 0;
    }
    return false;
}
/*Checks whether the provided value is not text.*/
function ISNONTEXT(v) {
    return typeof v !== "string";
}
/*Checks whether the provided value is number.*/
function ISNUMBER(num) {
    var v = _to_number(num);
    return typeof v === "number";
}
/*Checks whether the provided value is  text.*/
function ISTEXT(v) {
    return typeof v === "string";
}
/*Returns the argument provided as a number.*/
function N(num) {
    var v = _to_number(num);
    if (typeof v === "number") {
        return v;
    }
    var date = new Date(num);
    if (date.getTime()) {
        return getExcelDateFromJs(date);
    }
    if (num === "TRUE" || num === true) {
        return 1;
    }
    if (num === "FALSE" || num === false) {
        return 0;
    }
    return 0;
}

var information = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ISBLANK: ISBLANK,
    ISBINARY: ISBINARY,
    ISEVEN: ISEVEN,
    ISODD: ISODD,
    ISNONTEXT: ISNONTEXT,
    ISNUMBER: ISNUMBER,
    ISTEXT: ISTEXT,
    N: N
});

// partially based on https://github.com/sutoiku/formula.js
/*Calculates the accrued interest of a security that has periodic payments.*/
function ACCRINT(issue, _first, settlement, rate, par, frequency, basis) {
    if (par === void 0) { par = 0; }
    if (basis === void 0) { basis = 0; }
    var _issue = _to_date(issue);
    var _settlement = _to_date(settlement);
    var _rate = numberOrError(rate);
    var _par = numberOrError(par);
    var _frequency = numberOrError(frequency);
    var _basis = numberOrError(basis);
    // Return error if frequency is neither 1, 2, or 4
    if (_frequency !== 1)
        throw "This function is only supported with frequency 1";
    // if ([1, 2, 4].indexOf(_frequency) === -1) {
    // 	throw `Frequency is ${frequency}. It's should be 1, 2 or 4`;
    // }
    // Return error if basis is neither 0, 1, 2, 3, or 4
    if ([0, 1, 2, 3, 4].indexOf(_basis) === -1) {
        throw "Basis is " + basis + ". It's should be 0, 1, 2, 3 or 4";
    }
    // Return error if settlement is before or equal to issue
    if (_settlement <= _issue) {
        throw "Settlement canot be before or equal to issue";
    }
    // Compute accrued interest
    return _par * _rate * YEARFRAC(issue, settlement, _basis);
}
/*Calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate.*/
function PMT(rate, periods, present, future, type) {
    if (future === void 0) { future = 0; }
    if (type === void 0) { type = 0; }
    var _rate = numberOrError(rate);
    var _periods = numberOrError(periods);
    var _present = numberOrError(present);
    var _future = numberOrError(future);
    // Return payment
    var result;
    if (_rate === 0) {
        result = (_present + _future) / _periods;
    }
    else {
        var term = Math.pow(1 + _rate, _periods);
        result = (_rate * (_present * term + _future)) / (term - 1);
        if (type === 1) {
            result /= 1 + _rate;
        }
    }
    return -result;
}
/*Calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate*/
function FV(rate, periods, payment, value, type) {
    if (value === void 0) { value = 0; }
    if (type === void 0) { type = 0; }
    var _rate = numberOrError(rate);
    var _periods = numberOrError(periods);
    var _payment = numberOrError(payment);
    var _value = numberOrError(value);
    // Return future value
    var result;
    if (_rate === 0) {
        result = _value + _payment * _periods;
    }
    else {
        var term = Math.pow(1 + _rate, _periods);
        result = _value * term + (_payment * (term - 1)) / _rate;
        if (type === 1) {
            result = _value * term + (_payment * (1 + _rate) * (term - 1)) / _rate;
        }
        return -result;
    }
}
/* Calculates the depreciation of an asset for a specified period using the arithmetic declining balance method*/
function DB(cost, salvage, life, period, month) {
    if (month === void 0) { month = 12; }
    var _cost = numberOrError(cost);
    var _salvage = numberOrError(salvage);
    var _life = numberOrError(life);
    var _period = numberOrError(period);
    var _month = numberOrError(month);
    // Return error if any of the parameters is negative
    if (_cost < 0 || _salvage < 0 || _life < 0 || _period < 0) {
        throw "Parameters cannot be negative";
    }
    // Return error if month is not an integer between 1 and 12
    if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].indexOf(_month) === -1) {
        throw "Month is " + month + ". It's should be beetwen 1 and 12";
    }
    // Return error if period is greater than life
    if (_period > _life) {
        throw "Period cannot be greater than life";
    }
    // Return 0 (zero) if salvage is greater than or equal to cost
    if (_salvage >= _cost) {
        return 0;
    }
    // Rate is rounded to three decimals places
    var rate = +(1 - Math.pow(_salvage / _cost, 1 / _life)).toFixed(3);
    // Compute initial depreciation
    var initial = (_cost * rate * _month) / 12;
    // Compute total depreciation
    var total = initial;
    var current = 0;
    var ceiling = period === _life ? _life - 1 : period;
    for (var i = 2; i <= ceiling; i++) {
        current = (_cost - total) * rate;
        total += current;
    }
    // Depreciation for the first and last periods are special cases
    if (period === 1) {
        // First period
        return initial;
    }
    else if (period === _life) {
        // Last period
        return (_cost - total) * rate;
    }
    else {
        return current;
    }
}
/* Calculates the depreciation of an asset for a specified period using the double-declining balance method*/
function DDB(cost, salvage, life, period, factor) {
    if (factor === void 0) { factor = 2; }
    var _cost = numberOrError(cost);
    var _salvage = numberOrError(salvage);
    var _life = numberOrError(life);
    var _period = numberOrError(period);
    var _factor = numberOrError(factor);
    // Return error if any of the parameters is negative
    if (_cost < 0 || _salvage < 0 || _life < 0 || _period < 0 || _factor < 0) {
        throw "Parameters cannot be negative";
    }
    // Return error if period is greater than life
    if (_period > _life) {
        throw "Period cannot be greater than life";
    }
    // Return 0 (zero) if salvage is greater than or equal to cost
    if (_salvage >= _cost) {
        return 0;
    }
    // Compute depreciation
    var total = 0;
    var current = 0;
    for (var i = 1; i <= period; i++) {
        current = Math.min((_cost - total) * (_factor / _life), _cost - _salvage - total);
        total += current;
    }
    // Return depreciation
    return current;
}
/*Returns A number as text in currency format..*/
function DOLLAR(num, decimals) {
    if (decimals === void 0) { decimals = 2; }
    var v = _to_number(num);
    var d = _to_number(decimals);
    if (typeof v === "number" && typeof d === "number") {
        if (d >= 0) {
            return "$" + v.toFixed(d);
        }
        var base = Math.pow(10, -d);
        return "$" + Math.trunc(v / base) * base;
    }
}
/* Converts a price quotation given as a decimal fraction into a decimal value.*/
function DOLLARDE(dollar, fraction) {
    var _dollar = numberOrError(dollar);
    var _fraction = numberOrError(fraction);
    // Return error if fraction is negative
    if (_fraction < 0) {
        throw "Fraction cannot be negative";
    }
    // Return error if fraction is greater than or equal to 0 and less than 1
    if (_fraction >= 0 && _fraction < 1) {
        throw "Fraction cannot be zero";
    }
    // Truncate fraction if it is not an integer
    _fraction = parseInt("" + _fraction, 10);
    // Compute integer part
    var result = parseInt("" + dollar, 10);
    // Add decimal part
    result +=
        ((_dollar % 1) * Math.pow(10, Math.ceil(Math.log(_fraction) / Math.LN10))) /
            _fraction;
    // Round result
    var power = Math.pow(10, Math.ceil(Math.log(_fraction) / Math.LN2) + 1);
    result = Math.round(result * power) / power;
    // Return converted dollar price
    return result;
}
/* Converts a price quotation given as a decimal fraction into a decimal value.*/
function DOLLARFR(dollar, fraction) {
    var _dollar = numberOrError(dollar);
    var _fraction = numberOrError(fraction);
    // Return error if fraction is negative
    if (_fraction < 0) {
        throw "Fraction cannot be negative";
    }
    // Return error if fraction is greater than or equal to 0 and less than 1
    if (_fraction >= 0 && _fraction < 1) {
        throw "Fraction cannot be zero";
    }
    // Truncate fraction if it is not an integer
    _fraction = parseInt("" + _fraction, 10);
    // Compute integer part
    var result = parseInt("" + dollar, 10);
    // Add decimal part
    result +=
        (_dollar % 1) *
            Math.pow(10, -Math.ceil(Math.log(_fraction) / Math.LN10)) *
            _fraction;
    // Return converted dollar price
    return result;
}
/*Calculates the annual effective interest rate given the nominal rate and number of compounding periods per year.*/
function EFFECT(rate, periods) {
    var _rate = numberOrError(rate);
    var _periods = numberOrError(periods);
    // Return error if rate <=0 or periods < 1
    if (_rate <= 0) {
        throw "Rate cannot be less than or equal to zero";
    }
    if (_periods < 1) {
        throw "Periods cannot be less than 1";
    }
    // Truncate periods if it is not an integer
    _periods = parseInt("" + _periods, 10);
    // Return effective annual interest rate
    return Math.pow(1 + _rate / _periods, _periods) - 1;
}
/*Calculates the future value of some principal based on a specified series of potentially varying interest rates.*/
function FVSCHEDULE(principal, schedule) {
    var _principal = numberOrError(principal);
    var _schedule = schedule.map(function (i) { return numberOrError(i); });
    var n = _schedule.length;
    var future = _principal;
    // Apply all interests in schedule
    for (var i = 0; i < n; i++) {
        // Apply scheduled interest
        future *= 1 + _schedule[i];
    }
    // Return future value
    return future;
}
/*Calculates the internal rate of return on an investment based on a series of periodic cash flows.*/
function IRR(values, guess) {
    if (guess === void 0) { guess = 0; }
    var _values = _combine(values).map(function (i) { return numberOrError(i); });
    var _guess = numberOrError(guess);
    // Calculates the resulting amount
    var irrResult = function (values, dates, rate) {
        var r = rate + 1;
        var result = values[0];
        for (var i = 1; i < values.length; i++) {
            result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);
        }
        return result;
    };
    // Calculates the first derivation
    var irrResultDeriv = function (values, dates, rate) {
        var r = rate + 1;
        var result = 0;
        for (var i = 1; i < values.length; i++) {
            var frac = (dates[i] - dates[0]) / 365;
            result -= (frac * values[i]) / Math.pow(r, frac + 1);
        }
        return result;
    };
    // Initialize dates and check that values contains at least one positive value and one negative value
    var dates = [];
    var positive = false;
    var negative = false;
    for (var i = 0; i < _values.length; i++) {
        dates[i] = i === 0 ? 0 : dates[i - 1] + 365;
        if (_values[i] > 0) {
            positive = true;
        }
        if (_values[i] < 0) {
            negative = true;
        }
    }
    // Return error if values does not contain at least one positive value and one negative value
    if (!positive || !negative) {
        throw "Values should contain at least one positive value and one negative value";
    }
    // Initialize guess and resultRate
    _guess = guess === undefined ? 0.1 : _guess;
    var resultRate = _guess;
    // Set maximum epsilon for end of iteration
    var epsMax = 1e-10;
    // Implement Newton's method
    var newRate, epsRate, resultValue;
    var contLoop = true;
    do {
        resultValue = irrResult(_values, dates, resultRate);
        newRate =
            resultRate - resultValue / irrResultDeriv(_values, dates, resultRate);
        epsRate = Math.abs(newRate - resultRate);
        resultRate = newRate;
        contLoop = epsRate > epsMax && Math.abs(resultValue) > epsMax;
    } while (contLoop);
    // Return internal rate of return
    return resultRate;
}
/*Calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate.*/
function IPMT(rate, period, periods, present, future, type) {
    if (future === void 0) { future = 0; }
    if (type === void 0) { type = 0; }
    var _rate = numberOrError(rate);
    var _periods = numberOrError(periods);
    var _period = numberOrError(period);
    var _present = numberOrError(present);
    var _future = numberOrError(future);
    // Compute payment
    var payment = PMT(_rate, _periods, _present, _future, type);
    // Compute interest
    var interest;
    if (_period === 1) {
        if (type === 1) {
            interest = 0;
        }
        else {
            interest = -_present;
        }
    }
    else {
        if (type === 1) {
            interest = FV(_rate, _period - 2, payment, _present, 1) - payment;
        }
        else {
            interest = FV(_rate, _period - 1, payment, _present, 0);
        }
    }
    // Return interest
    return interest * _rate;
}
/*Calculates the interest paid during a particular period of an investment.*/
function ISPMT(rate, period, periods, value) {
    var _rate = numberOrError(rate);
    var _period = numberOrError(period);
    var _periods = numberOrError(periods);
    var _value = numberOrError(value);
    // Return interest
    return _value * _rate * (_period / _periods - 1);
}
/*Calculates the net present value of an investment based on a series of periodic cash flows and a discount rate.*/
function NPV() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var args = _combine(values).map(function (i) { return numberOrError(i); });
    var rate = numberOrError(args[0]);
    // Initialize net present value
    var value = 0;
    // Loop on all values
    for (var j = 1; j < args.length; j++) {
        value += args[j] / Math.pow(1 + rate, j);
    }
    // Return net present value
    return value;
}
/*Calculates the annual nominal interest rate given the effective rate and number of compounding periods per year.*/
function NOMINAL(rate, periods) {
    var _rate = numberOrError(rate);
    var _periods = numberOrError(periods);
    // Return error if rate <=0 or periods < 1
    if (_rate <= 0) {
        throw "Rate cannot be less then or equal to zero";
    }
    if (_periods < 1) {
        throw "Periods cannot be less then 1";
    }
    // Truncate periods if it is not an integer
    _periods = parseInt("" + _periods, 10);
    // Return nominal annual interest rate
    return (Math.pow(_rate + 1, 1 / _periods) - 1) * _periods;
}
/*Calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.*/
function NPER(rate, payment, present, future, type) {
    if (future === void 0) { future = 0; }
    if (type === void 0) { type = 0; }
    var _rate = numberOrError(rate);
    var _payment = numberOrError(payment);
    var _present = numberOrError(present);
    var _future = numberOrError(future);
    var _type = numberOrError(type);
    // Return number of periods
    var num = _payment * (1 + _rate * _type) - _future * _rate;
    var den = _present * _rate + _payment * (1 + _rate * _type);
    return Math.log(num / den) / Math.log(1 + _rate);
}
/*Returns the number of periods for an investment to reach a specific value at a given rate.*/
function PDURATION(rate, present, future) {
    var _rate = numberOrError(rate);
    var _present = numberOrError(present);
    var _future = numberOrError(future);
    // Return error if rate <=0
    if (_rate <= 0) {
        throw "Rate cannot be less then or equal to zero";
    }
    // Return number of periods
    return (Math.log(_future) - Math.log(_present)) / Math.log(1 + _rate);
}
/* Calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate.*/
function PPMT(rate, period, periods, present, future, type) {
    if (future === void 0) { future = 0; }
    if (type === void 0) { type = 0; }
    var _rate = numberOrError(rate);
    var _period = numberOrError(period);
    var _periods = numberOrError(periods);
    var _present = numberOrError(present);
    var _future = numberOrError(future);
    var _type = numberOrError(type);
    return (PMT(_rate, _periods, _present, _future, _type) -
        IPMT(_rate, _period, _periods, _present, _future, _type));
}
/* Calculates the present value of an annuity investment based on constant-amount periodic payments and a constant interest rate.*/
function PV(rate, periods, payment, future, type) {
    if (future === void 0) { future = 0; }
    if (type === void 0) { type = 0; }
    var _rate = numberOrError(rate);
    var _periods = numberOrError(periods);
    var _payment = numberOrError(payment);
    var _future = numberOrError(future);
    var _type = numberOrError(type);
    // Return present value
    if (_rate === 0) {
        return -_payment * _periods - _future;
    }
    else {
        return ((((1 - Math.pow(1 + _rate, _periods)) / _rate) *
            _payment *
            (1 + _rate * _type) -
            _future) /
            Math.pow(1 + _rate, _periods));
    }
}
/*Returns the sum-of-years' digits depreciation of an asset for a specified period*/
function SYD(cost, salvage, life, per) {
    var _cost = numberOrError(cost);
    var _salvage = numberOrError(salvage);
    var _life = numberOrError(life);
    var _per = numberOrError(per);
    return ((_cost - _salvage) * (_life - _per + 1) * 2) / (_life * (_life + 1));
}
/*Returns the price per $100 face value for a Treasury bill*/
function TBILLPRICE(settlement, maturity, discount) {
    var _settlement = _to_date(settlement);
    var _maturity = _to_date(maturity);
    var _discount = numberOrError(discount);
    if (typeof _discount === "number" && _maturity > _settlement) {
        var dsm = Math.round((_maturity.getTime() - _settlement.getTime()) / (1000 * 60 * 60 * 24));
        return 100 * (1 - (_discount * dsm) / 360);
    }
}
/*Returns the yield for a Treasury bill*/
function TBILLYIELD(settlement, maturity, pr) {
    var _settlement = _to_date(settlement);
    var _maturity = _to_date(maturity);
    var _pr = numberOrError(pr);
    if (typeof _pr === "number" && _maturity > _settlement) {
        var dsm = Math.round((_maturity.getTime() - _settlement.getTime()) / (1000 * 60 * 60 * 24));
        return (((100 - _pr) / _pr) * 360) / dsm;
    }
}

var financial = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCRINT: ACCRINT,
    PMT: PMT,
    FV: FV,
    DB: DB,
    DDB: DDB,
    DOLLAR: DOLLAR,
    DOLLARDE: DOLLARDE,
    DOLLARFR: DOLLARFR,
    EFFECT: EFFECT,
    FVSCHEDULE: FVSCHEDULE,
    IRR: IRR,
    IPMT: IPMT,
    ISPMT: ISPMT,
    NPV: NPV,
    NOMINAL: NOMINAL,
    NPER: NPER,
    PDURATION: PDURATION,
    PPMT: PPMT,
    PV: PV,
    SYD: SYD,
    TBILLPRICE: TBILLPRICE,
    TBILLYIELD: TBILLYIELD
});

var groups = {
    number: methods$3,
    string: string,
    date: methods$1,
    other: other,
    information: information,
    financial: financial,
    lookup: methods$2,
};
var methods = __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, methods$3), string), methods$1), other), information), financial), methods$2);
function addMethod(name, handler) {
    methods[name] = handler;
}

function str2id(str) {
    var temp = [];
    position(temp, str, 0);
    return temp[1];
}
function str2pos(str) {
    var temp = [];
    position(temp, str, 0);
    return fromId(temp[1]).slice(0, 2);
}
function str2range(str) {
    var temp = [];
    str.split(":").map(function (a) { return position(temp, a, 0); });
    var _a = fromId(temp[1]), r1 = _a[0], c1 = _a[1];
    var _b = fromId(temp[4]), r2 = _b[0], c2 = _b[1];
    return [r1, c1, r2, c2];
}
function checkIntersection(id1, h1, w1, id2, h2, w2) {
    var _a = fromId(id1), r1 = _a[0], c1 = _a[1], p1 = _a[2];
    var _b = fromId(id2), r2 = _b[0], c2 = _b[1], p2 = _b[2];
    // if the boxes are on different pages
    if (p1 !== p2)
        return false;
    // if the firsth box is bottom to the second box
    if (r1 >= r2 + h2)
        return false;
    // if the first box is top to the second box
    if (r1 + h1 <= r2)
        return false;
    // if the first box is right to the second box
    if (c1 >= c2 + w2)
        return false;
    // if the first box is left to the second box
    if (c1 + w1 <= c2)
        return false;
    return true;
}

var TRIGGER_PREPROCESS_LIMIT = 10;
var roundFactor = Math.pow(10, 8); // use this exponent because of the seconds of the date
function addToSet(route, v, it) {
    if (it.add) {
        if (!route.has(v))
            it.add(v);
    }
    else {
        route.add(v);
    }
}
function toKeysArray(c) {
    if (c.keys)
        return Array.from(c.keys());
    var keys = [];
    c.forEach(function (_v, k) { return keys.push(k); });
    return keys;
}
function getValuesIterator(c) {
    if (c.values)
        return c.values();
    var values = [];
    c.forEach(function (_k, v) { return values.push(v); });
    var index = 0;
    return {
        add: function (v) {
            values.push(v);
        },
        next: function () {
            var value = values[index];
            index++;
            return {
                done: index > values.length,
                value: value,
            };
        },
    };
}
var Store = /** @class */ (function () {
    function Store(cfg) {
        var _this = this;
        cfg = cfg || {
            get: null,
            set: null,
            strict: false,
        };
        if (cfg) {
            this._getter = cfg.get;
            this._setter = cfg.set;
            this._strict = cfg.strict;
        }
        this._parser = parse;
        this._printer = generate;
        this._parseContext = {
            name: function () {
                // do nothing
            },
            pageName: function () {
                return "";
            },
            pageObj: function () {
                return null;
            },
            page: function () {
                return 0;
            },
            z: 0,
        };
        this.$count = 0;
        this._data = new Map();
        this._triggers = new Map();
        this._holders = {};
        this._context = {
            a: function (v, cols, rows) {
                v.$width = cols;
                v.$height = rows;
                return v;
            },
            v: function (id) {
                if (id === -1)
                    throw new Error();
                var v = _this._getter(id);
                if (typeof v === "undefined")
                    return null;
                return v;
            },
            r: function (from, to) {
                var _a = fromId(from), r1 = _a[0], c1 = _a[1];
                var _b = fromId(to), r2 = _b[0], c2 = _b[1];
                var dr = r2 - r1;
                var dc = c2 - c1 + 1;
                var out = [];
                out.$width = dc;
                out.$height = dr + 1;
                for (var r = 0; r <= dr; r++) {
                    for (var c = 0; c < dc; c++) {
                        out[r * dc + c] = _this._getter(from + c * 64 + r * 4096 * 64);
                    }
                }
                return out;
            },
            m: methods,
            e: function (e) {
                throw e;
            },
            p: function (v) { return _this.getPlaceholder(v); },
        };
    }
    Store.prototype.getTriggerList = function (trId) {
        return this._triggers.get(trId);
    };
    Store.prototype.setValue = function (id, value, type, silent) {
        if (value === "")
            value = null;
        this._removeTriggers(id, null);
        if (this._setter(id, value, type)) {
            if (!silent)
                this.trigger(id);
        }
    };
    Store.prototype.clean = function (id) {
        this._removeTriggers(id, null);
    };
    Store.prototype.getValue = function (id) {
        return this._getter(id);
    };
    Store.prototype.getMeta = function () {
        return this._meta;
    };
    Store.prototype.setMeta = function (obj) {
        this._meta = __assign(__assign({}, this._meta), obj);
    };
    Store.prototype.setPlaceholder = function (name, value) {
        var _this = this;
        if (name === "*") {
            Object.entries(value).forEach(function (item) {
                return _this.setPlaceholder(item[0], item[1]);
            });
        }
        else {
            if (value === null)
                delete this._holders[name];
            else
                this._holders[name] = value;
            this.each(function (id, obj) {
                // recalculate all values where placeholder is used
                if (hasPlaceholder(obj.code, obj.source, name)) {
                    _this.setMath(id, obj.source, _this._parseContext);
                }
            });
        }
    };
    Store.prototype.getPlaceholder = function (name) {
        if (name === "*")
            return this._holders;
        var t = this._holders[name];
        return typeof t === "undefined" ? null : t;
    };
    Store.prototype.setMath = function (id, text, ctx, silent) {
        var raw = this._generate(text, ctx);
        var cId = this._setMathAt(id, raw);
        if (!silent) {
            this._execAndTrigger(cId);
        }
    };
    Store.prototype.refresh = function (id) {
        this._execAndTrigger(id);
    };
    Store.prototype.getMath = function (id) {
        return this._data.get(id);
    };
    Store.prototype.trigger = function (cId, ctx) {
        var list = this._triggers.get(cId);
        if (list) {
            var isDirect = !ctx;
            if (!ctx)
                ctx = new Set();
            for (var i = 0; i < list.length; i++)
                ctx.add(list[i]);
            if (isDirect)
                this.triggerSet(ctx);
        }
        return null;
    };
    Store.prototype.triggerSet = function (ctx) {
        var _this = this;
        var visited = new Map();
        while (ctx.size) {
            var it = getValuesIterator(ctx);
            var any = false;
            outer: for (var x = it.next(); !x.done; x = it.next()) {
                var fx = this._data.get(x.value);
                var vState = visited.get(x.value);
                if (vState) {
                    if (vState == 1)
                        // if visited
                        vState = this._check_for_loops(x.value, fx.triggers, visited);
                    if (vState == 2)
                        // broken
                        continue;
                }
                var tgs = fx.triggers;
                if (tgs) {
                    for (var j = 0; j < tgs.length; j++) {
                        if (ctx.has(tgs[j]))
                            continue outer;
                    }
                }
                this._execAndTrigger(x.value, ctx);
                if (!vState)
                    visited.set(x.value, 1);
                ctx.delete(x.value);
                any = true;
            }
            // loop detected
            if (!any) {
                ctx.forEach(function (x) { return _this._errorAndTrigger(x, ctx); });
                return;
            }
        }
    };
    Store.prototype.getStats = function () {
        return {
            math: this._data.size,
            trigger: this._triggers.size,
        };
    };
    Store.prototype._check_for_loops = function (id, triggers, visited) {
        var route = new Set();
        triggers.forEach(function (a) { return route.add(a); });
        var it = getValuesIterator(route);
        for (var x = it.next(); !x.done; x = it.next()) {
            if (x.value == id) {
                visited.set(id, 2);
                return 2;
            }
            var visMark = visited.get(x.value);
            if (visMark && visMark > 1) {
                visited.set(id, visMark);
                return visMark;
            }
            var tgs = this._data.get(x.value);
            if (tgs && tgs.triggers)
                tgs.triggers.forEach(function (a) { return addToSet(route, a, it); });
        }
        visited.set(id, 3);
        return 3;
    };
    Store.prototype._setMathAt = function (id, raw) {
        // raw.triggers = getTriggers(raw);
        // triggers - list of cell, changes in which must repaint this one
        // for each trigger source, store reference to the current cell
        if (!this._removeTriggers(id, raw)) {
            return;
        }
        if (raw.triggers) {
            if (raw.triggers.indexOf(id) === -1 && raw.broken !== 3) {
                for (var i = 0; i < raw.triggers.length; i++) {
                    var tId = raw.triggers[i];
                    var list = this._triggers.get(tId);
                    if (typeof list === "undefined") {
                        list = [];
                        this._triggers.set(tId, list);
                    }
                    list.push(id);
                }
            }
            else {
                raw = __assign(__assign({}, raw), { broken: ERR_REF });
            }
        }
        this._data.set(id, raw);
        return id;
    };
    Store.prototype._removeTriggers = function (cId, next) {
        var prev = this._data.get(cId);
        if (!prev)
            return true;
        if (prev === next)
            return false;
        if (prev.$width)
            this._clearArea(cId, false);
        var triggers = prev.triggers;
        if (triggers && prev.broken !== ERR_REF) {
            for (var i = 0; i < triggers.length; i++) {
                var tId = triggers[i];
                var list = this._triggers.get(tId);
                if (list) {
                    var res = list.filter(function (a) { return a !== cId; });
                    if (!res.length)
                        this._triggers.delete(tId);
                    else
                        this._triggers.set(tId, res);
                }
            }
        }
        this._data.delete(cId);
        return true;
    };
    Store.prototype.parse = function (text, ctx) {
        return this._parser(text, ctx || this._parseContext);
    };
    Store.prototype.exec = function (text, ctx) {
        var t = this._generate(text, ctx);
        return this._exec(t);
    };
    Store.prototype.each = function (cb) {
        var _this = this;
        toKeysArray(this._data).forEach(function (key) {
            return cb(key, _this._data.get(key));
        });
    };
    Store.prototype.setLogger = function (handler) {
        this._err_handler = handler;
    };
    Store.prototype._setErr = function (t, err) {
        t.broken = ERR_EXEC;
        if (err && this._err_handler) {
            this._err_handler(err);
        }
        return errorText[t.broken];
    };
    Store.prototype._exec = function (t) {
        if (t.broken > 0 && t.broken !== ERR_EXEC)
            return errorText[t.broken];
        try {
            var res = t.exec(this._context);
            t.broken = 0;
            if (typeof res === "number") {
                if (!isFinite(res))
                    return this._setErr(t);
                return Math.round(res * roundFactor) / roundFactor; //round values to fix math precision issue in JS
            }
            return res;
        }
        catch (e) {
            return this._setErr(t, e);
        }
    };
    Store.prototype.toString = function (f, ctx) {
        return print$2(f, ctx || this._parseContext);
    };
    Store.prototype.regenerate = function (id, remove, ctx) {
        var _this = this;
        ctx = __assign({}, (ctx || this._parseContext));
        toKeysArray(this._data).forEach(function (key) {
            var needUpdate = false;
            var prev = _this._data.get(key);
            var z = page(key);
            if (remove && z === id) {
                _this._removeTriggers(key, null);
                return;
            }
            for (var i = 0; i < prev.code.length; i += 3) {
                if (prev.code[i] === T_DATA && page(prev.code[i + 1]) === id) {
                    needUpdate = true;
                    break;
                }
            }
            if (needUpdate) {
                ctx.z = z;
                if (remove) {
                    _this.setMath(key, prev.source, ctx);
                }
                else {
                    prev.source = print$2(prev, ctx);
                    prev.code = _this._parser(prev.source, ctx).code;
                }
            }
        });
    };
    Store.prototype.recalculate = function (broken, ctx) {
        var _this = this;
        ctx = __assign({}, (ctx || this._parseContext));
        var tx = new Set();
        this.each(function (key) {
            if (broken) {
                var prev = _this._data.get(key);
                if (prev.broken && prev.broken !== ERR_EXEC) {
                    ctx.z = page(key);
                    _this.setMath(key, prev.source, ctx);
                    return;
                }
            }
            tx.add(key);
        });
        this.triggerSet(tx);
    };
    Store.prototype._generate = function (text, ctx, prev) {
        // const already = this._cache.get(text);
        // if (already) {
        // 	return already;
        // }
        var result = prev || this._parser(text, ctx || this._parseContext);
        this._printer(result, this._strict);
        result.triggers = getTriggers(result);
        //this._cache.set(text, result);
        return result;
    };
    Store.prototype._execAndTrigger = function (cId, ctx) {
        this.$count += 1;
        var raw = this._data.get(cId);
        if (raw) {
            var val = this._exec(raw);
            if (Array.isArray(val)) {
                var pageId = page(cId);
                if (pageId !== RANGE_PAGE_ID) {
                    this._complexSetter(cId, val, ctx);
                    return;
                }
            }
            if (this._setter(cId, val, D_RESULT))
                this.trigger(cId, ctx);
        }
    };
    Store.prototype._complexSetter = function (cId, val, ctx) {
        var _this = this;
        var $width = val.$width, $height = val.$height;
        // store area size
        var fx = this._data.get(cId);
        fx.$width = $width;
        fx.$height = $height;
        try {
            eachRangeAlt(cId, $width, $height, function (id, i) {
                if (_this._setter(id, val[i], D_RESULT, i === 0 ? null : cId))
                    _this.trigger(id, ctx);
            });
        }
        catch (e) {
            this._clearArea(cId, true);
        }
    };
    Store.prototype._clearArea = function (cId, err) {
        var _this = this;
        var _a = this._data.get(cId), $width = _a.$width, $height = _a.$height;
        eachRangeAlt(cId, $width, $height, function (id, i) {
            if (i === 0 && err) {
                if (_this._setter(id, errorText[ERR_SPILL], D_STRING))
                    _this.trigger(id);
            }
            else {
                var result = err
                    ? _this._setter(id, null, D_SPILL, cId)
                    : _this._setter(id, null, D_SPILL, -1);
                if (result)
                    _this.trigger(id);
            }
        });
    };
    Store.prototype._errorAndTrigger = function (cId, ctx) {
        var raw = this._data.get(cId);
        var val = this._setErr(raw);
        if (this._setter(cId, val, D_RESULT))
            this.trigger(cId, ctx);
    };
    Store.prototype.debug = function (text, asString) {
        if (asString === void 0) { asString = false; }
        var out = print$1(this.parse(text));
        if (asString)
            return out;
        console.log(out);
    };
    Store.prototype.transpose = function (id, dr, dc, ctx) {
        var _this = this;
        ctx = ctx || this._parseContext;
        var _a = fromId(id), r = _a[0], c = _a[1], z = _a[2];
        var updates = new Map();
        var clears = new Map();
        var tx = new Set();
        toKeysArray(this._data).forEach(function (key) {
            // formula from different page
            var _a = fromId(key), rx = _a[0], cx = _a[1], zx = _a[2];
            var raw = _this._data.get(key);
            var tctx = zx === ctx.z ? ctx : __assign(__assign({}, ctx), { z: zx });
            var res = _this._transpose(raw, r, c, dr, dc, ctx, tctx);
            var key2 = key;
            if (zx === z)
                if (cx >= c || rx >= r)
                    key2 = toId(rx >= r ? rx + dr : rx, cx >= c ? cx + dc : cx, zx);
            if (raw !== res || key !== key2) {
                clears.set(key, res);
                // formula is in the cut area
                if (zx === z &&
                    ((dc < 0 && cx >= c && cx < c - dc) ||
                        (dr < 0 && rx >= r && rx < r - dr))) {
                    return;
                }
                updates.set(key2, res);
                // collect error range triggers
                if (raw.broken !== res.broken) {
                    tx.add(key2);
                }
            }
        });
        // set new formulas
        toKeysArray(updates).forEach(function (key) {
            return _this._setMathAt(key, updates.get(key));
        });
        // remove old formulas
        Array.from(clears.keys()).forEach(function (key) {
            if (!updates.has(key)) {
                _this._removeTriggers(key, null);
            }
        });
        // collect after-move triggers
        if (dr > 0)
            this._triggerRow(r, dr, tx);
        if (dc > 0)
            this._triggerColumn(c, dc, tx);
        if (dr < 0)
            this._triggerColumn(r - 1, 2, tx);
        if (dc < 0)
            this._triggerColumn(c - 1, 2, tx);
        // trigger changes
        this.triggerSet(tx);
    };
    Store.prototype._triggerColumn = function (c, dc, tx) {
        var _this = this;
        var mdc = dc ? c + dc : c;
        toKeysArray(this._triggers).forEach(function (key) {
            var cCheck = column(key);
            if (cCheck >= c && cCheck < mdc) {
                _this.trigger(key, tx);
            }
        });
    };
    Store.prototype._triggerRow = function (r, dr, tx) {
        var _this = this;
        var mdr = dr ? r + dr : r;
        toKeysArray(this._triggers).forEach(function (key) {
            var rCheck = row(key);
            if (rCheck >= r && rCheck < mdr) {
                _this.trigger(key, tx);
            }
        });
    };
    Store.prototype.moveMath = function (raw, dr, dc, toPage, checkRange, ctx, tctx) {
        if (typeof raw === "string")
            raw = this.parse(raw, ctx);
        var res = this._moveMath(raw, dr, dc, toPage, checkRange, tctx || ctx);
        return res.source;
    };
    Store.prototype._moveMath = function (raw, dr, dc, toPage, checkRange, tctx) {
        var code = raw.code;
        for (var i = 0; i < code.length; i += 3) {
            if (code[i] === T_ARG) {
                var _a = fromId(code[i + 4]), rx = _a[0], cx = _a[1];
                if (checkIntersection(checkRange.id, checkRange.h, checkRange.w, code[i + 4], 1, 1)) {
                    rx += dr;
                    cx += dc;
                    code[i + 4] = toId(rx, cx, toPage);
                }
                //skip args
                i += 3;
            }
            else if (code[i] === T_RANGE) {
                var _b = fromId(code[i + 4]), rx1 = _b[0], cx1 = _b[1];
                var _c = fromId(code[i + 7]), rx2 = _c[0], cx2 = _c[1];
                if (checkIntersection(checkRange.id, checkRange.h, checkRange.w, code[i + 4], rx2 - rx1 + 1, cx2 - cx1 + 1)) {
                    rx1 += dr;
                    cx1 += dc;
                    rx2 += dr;
                    cx2 += dc;
                    code[i + 4] = toId(rx1, cx1, toPage);
                    code[i + 7] = toId(rx2, cx2, toPage);
                }
                //skip args
                i += 6;
            }
        }
        var copy = {
            code: code,
            broken: raw.broken,
            source: raw.source,
            triggers: null,
            exec: null,
        };
        copy = this._parser(print$2(copy, tctx), tctx);
        return this._generate(copy.source, tctx, copy);
    };
    Store.prototype.transposeMath = function (raw, dx, dy, ctx) {
        if (typeof raw === "string")
            raw = this.parse(raw, ctx);
        ctx = ctx || this._parseContext;
        var res = this._transpose(raw, -1, -1, dx, dy, ctx, ctx);
        return res.source;
    };
    Store.prototype._transpose = function (raw, r, c, dr, dc, ctx, tctx) {
        /* eslint-disable no-bitwise */
        var same = true;
        var code = raw.code;
        var moveMode = !(r < 0 || c < 0);
        for (var i = 0; i < code.length; i += 3) {
            if (code[i] === T_ARG) {
                // eslint-disable-next-line
                var _a = fromId(code[i + 4]), rx = _a[0], cx = _a[1], zx = _a[2];
                //argument from different page, ignoring
                if (ctx.z !== zx)
                    continue;
                var flags = code[i + 5];
                //both coordinates are fixed, ignoring
                if (!moveMode && flags == 3)
                    continue;
                if ((moveMode || (flags & 1) === 0) && dr !== 0 && rx >= r) {
                    if (same) {
                        code = [].concat(code);
                        same = false;
                    }
                    rx += dr;
                    if (rx < r || rx < 0) {
                        // reference deleted
                        code[i] = T_ERROR;
                    }
                }
                if ((moveMode || (flags & 2) === 0) && dc !== 0 && cx >= c) {
                    if (same) {
                        code = [].concat(code);
                        same = false;
                    }
                    cx += dc;
                    if (cx < c || cx < 0) {
                        // reference deleted
                        code[i] = T_ERROR;
                    }
                }
                if (!same)
                    code[i + 4] = toId(rx, cx, zx);
                //skip args
                i += 3;
            }
            else if (code[i] === T_RANGE) {
                var flags1 = code[i + 5];
                var flags2 = code[i + 8];
                if (!moveMode && flags1 === 3 && flags2 === 3)
                    continue;
                // eslint-disable-next-line
                var _b = fromId(code[i + 4]), rx1 = _b[0], cx1 = _b[1], zx = _b[2];
                var _c = fromId(code[i + 7]), rx2 = _c[0], cx2 = _c[1];
                //argument from different page, ignoring
                if (ctx.z !== zx)
                    continue;
                if (dr !== 0) {
                    if ((moveMode || (flags1 & 1) === 0) &&
                        (dr > 0 ? rx1 >= r : rx1 > r)) {
                        if (same) {
                            code = [].concat(code);
                            same = false;
                        }
                        rx1 += dr;
                        if (rx1 < 0) {
                            code[i] = T_ERROR;
                        }
                    }
                    if ((moveMode || (flags2 & 1) === 0) && rx2 >= r) {
                        if (same) {
                            code = [].concat(code);
                            same = false;
                        }
                        rx2 += dr;
                        if (rx2 < rx1) {
                            code[i] = T_ERROR;
                        }
                    }
                }
                if (dc !== 0) {
                    if ((moveMode || (flags1 & 2) === 0) &&
                        (dc > 0 ? cx1 >= c : cx1 > c)) {
                        if (same) {
                            code = [].concat(code);
                            same = false;
                        }
                        cx1 += dc;
                        if (cx1 < 0) {
                            code[i] = T_ERROR;
                        }
                    }
                    if ((moveMode || (flags2 & 2) === 0) && cx2 >= c) {
                        if (same) {
                            code = [].concat(code);
                            same = false;
                        }
                        cx2 += dc;
                        if (cx2 < cx1) {
                            code[i] = T_ERROR;
                        }
                    }
                }
                if (!same) {
                    code[i + 4] = toId(rx1, cx1, zx);
                    code[i + 7] = toId(rx2, cx2, zx);
                }
                //skip args
                i += 6;
            }
        }
        if (same)
            return raw;
        var copy = {
            code: code,
            broken: raw.broken,
            source: raw.source,
            triggers: null,
            exec: null,
        };
        // [TODO]
        // because string representation of formula can be changed
        // we need to call parse, to set new start/end markers for parts of string
        // probably, it can be replaced with direct source patching during argument update
        // with start/end markers shifting in the same time
        copy = this._parser(print$2(copy, tctx), tctx);
        return this._generate(copy.source, tctx, copy);
    };
    return Store;
}());
function hasPlaceholder(code, text, id) {
    for (var i = 0; i < code.length; i += 3)
        if (code[i] === T_PLACEHOLDER &&
            text.substr(code[i + 1], code[i + 2]) == id)
            return true;
    return false;
}
function getTriggers(raw) {
    var triggers = [];
    var code = raw.code;
    var max = code.length;
    for (var i = 0; i < max; i += 3) {
        var type = code[i];
        switch (type) {
            case T_ARG:
            case T_NAME: {
                var v = code[i + 4];
                triggers.push(v);
                break;
            }
            case T_RANGE:
                eachRange(code[i + 4], code[i + 7], function (t) { return triggers.push(t); });
                break;
        }
    }
    if (triggers.length > TRIGGER_PREPROCESS_LIMIT) {
        var uniq_1 = new Set();
        triggers = triggers.filter(function (a) {
            if (uniq_1.has(a))
                return false;
            uniq_1.add(a);
            return true;
        });
    }
    return triggers.length ? triggers : null;
}

var DataPage = /** @class */ (function () {
    function DataPage(id, store, ctx) {
        this._id = id;
        this._store = store;
        this._meta = {};
        this._parseContext = __assign(__assign({}, ctx), { z: id });
        this.reset();
        this._parseMode = false;
    }
    DataPage.prototype.reset = function () {
        this._data = [];
        this._rows = [];
        this._cols = [];
        this._spans = [];
    };
    // eslint-disable-next-line
    DataPage.prototype.getMeta = function () {
        return this._meta;
    };
    DataPage.prototype.setMeta = function (obj) {
        this._meta = __assign(__assign({}, this._meta), obj);
    };
    DataPage.prototype.getID = function () {
        return this._id;
    };
    DataPage.prototype.cellID = function (row, col) {
        return toId(row, col, this._id);
    };
    DataPage.prototype.getSize = function () {
        var rC = this._data.length;
        var cC = 0;
        this._data.forEach(function (a) {
            if (a && a.length > cC)
                cC = a.length;
        });
        return [rC, cC];
    };
    DataPage.prototype.getContext = function () {
        return this._parseContext;
    };
    DataPage.prototype.addRow = function (pos, count) {
        /* eslint-disable prefer-spread */
        this._data.splice.apply(this._data, getStub(pos, count));
        this._store.transpose(toId(pos, 0, this._id), count, 0, this._parseContext);
        this._rows.splice.apply(this._rows, getStub(pos, count));
        this._recalculateSpans(pos, count, 0);
    };
    DataPage.prototype.removeRow = function (pos, count) {
        this._data.splice(pos, count);
        this._store.transpose(toId(pos, 0, this._id), -count, 0, this._parseContext);
        this._rows.splice(pos, count);
        return this._recalculateSpans(pos, -count, 0);
    };
    DataPage.prototype.addColumn = function (pos, count) {
        var stub = getStub(pos, count);
        this._data.forEach(function (a) {
            if (a)
                a.splice.apply(a, stub);
        });
        this._store.transpose(toId(0, pos, this._id), 0, count, this._parseContext);
        this._cols.splice.apply(this._cols, getStub(pos, count));
        this._recalculateSpans(pos, 0, count);
    };
    DataPage.prototype.removeColumn = function (pos, count) {
        this._data.forEach(function (a) {
            if (a)
                a.splice(pos, count);
        });
        this._store.transpose(toId(0, pos, this._id), 0, -count, this._parseContext);
        this._cols.splice(pos, count);
        this._recalculateSpans(pos, 0, -count);
    };
    DataPage.prototype.setCell = function (r, c, value) {
        var row = this._data[r];
        if (!row)
            row = this._data[r] = [];
        var old = row[c];
        // preserve old value, to correctly detect changes later on
        if (old)
            row[c] = __assign(__assign(__assign({}, old), value), { value: old.value });
        else
            row[c] = value;
        if (typeof value.value !== "undefined")
            this.setValue(r, c, value.value);
    };
    DataPage.prototype.clearCell = function (r, c) {
        var row = this._data[r];
        if (!row)
            return;
        if (!row[c])
            return;
        row[c] = null;
        this._store.setValue(toId(r, c, this._id), "");
    };
    DataPage.prototype.setValue = function (r, c, value, type) {
        var cellId = toId(r, c, this._id);
        if (typeof value === "string" && value.length > 1 && value[0] === "=")
            this._store.setMath(cellId, value.substr(1), this._parseContext);
        else
            this._store.setValue(cellId, value, type);
    };
    DataPage.prototype.getCell = function (r, c, force) {
        var row = this._data[r];
        var cell = row ? row[c] : null;
        if (cell || !force)
            return cell;
        if (!row)
            row = this._data[r] = [];
        cell = row[c];
        if (!cell)
            cell = row[c] = { value: null };
        return cell;
    };
    DataPage.prototype.getValue = function (r, c, formula) {
        if (formula) {
            var f = this._store.getMath(toId(r, c, this._id));
            if (f)
                return "=" + f.source;
        }
        var t = this.getCell(r, c, false);
        if (!t)
            return null;
        return t.value;
    };
    DataPage.prototype.getRange = function (r1, c1, r2, c2) {
        var out = [];
        for (var i = r1; i <= r2; i++)
            for (var j = c1; j <= c2; j++)
                out.push(this.getValue(i, j, false));
        return out;
    };
    DataPage.prototype.getCellRange = function (r1, c1, r2, c2) {
        var out = [];
        for (var i = r1; i <= r2; i++)
            for (var j = c1; j <= c2; j++)
                out.push(this.getCell(i, j));
        return out;
    };
    DataPage.prototype.eachCell = function (cb) {
        this._data.forEach(function (row, i) {
            if (row)
                row.forEach(function (cell, j) {
                    if (cell)
                        cb(i, j, cell);
                });
        });
    };
    // serialize data of the page
    DataPage.prototype.serialize = function (formula) {
        var _this = this;
        var out = [];
        this.eachCell(function (row, col, value) {
            value = __assign({}, value);
            if (formula) {
                var math = _this._store.getMath(toId(row, col, _this.getID()));
                if (math)
                    value.value = "=" + math.source;
            }
            out.push([row, col, value]);
        });
        return out;
    };
    // reset data on the page to the new state
    DataPage.prototype.parse = function (data, process) {
        var _this = this;
        // clean old data
        this.reset();
        // clean old math
        this._store.each(function (id) {
            if (page(id) === _this._id) {
                _this._store.clean(id);
            }
        });
        // fill new data
        this.parseBlock(data, process, true);
    };
    // parse block of data
    DataPage.prototype.parseBlock = function (data, process, parse) {
        // FIXME - can work faster by reusing old math
        var _this = this;
        // fill new data
        var tx = new Set();
        this._parseMode = true;
        data.forEach(function (_a) {
            var r = _a[0], c = _a[1], cell = _a[2];
            var id = toId(r, c, _this._id);
            // clean old cell math
            if (!parse)
                _this._store.clean(id);
            var row = _this._data[r];
            if (!row)
                row = _this._data[r] = [];
            cell = row[c] = __assign({}, cell);
            var value = cell.value;
            if (value) {
                if (typeof value === "string" && value.length > 1 && value[0] === "=") {
                    var math = value.substr(1);
                    _this._store.setMath(id, math, _this.getContext(), true);
                    tx.add(id);
                }
                else if (process) {
                    cell.value = null;
                    _this._store.setValue(id, value, null, true);
                    _this._store.trigger(id, tx);
                }
            }
        });
        this._store.triggerSet(tx);
        this._parseMode = false;
    };
    DataPage.prototype.throwError = function (text) {
        if (!this._parseMode)
            throw text;
    };
    DataPage.prototype.setRowMeta = function (rowIndex, dataObject) {
        var prev = this._rows[rowIndex] || {};
        this._rows[rowIndex] = prev ? __assign(__assign({}, prev), dataObject) : dataObject;
    };
    DataPage.prototype.getRowMeta = function (rowIndex, force) {
        var row = this._rows[rowIndex];
        if (force && !row) {
            var data = {};
            this._rows[rowIndex] = data;
            return data;
        }
        return row || null;
    };
    DataPage.prototype.setColumnMeta = function (colIndex, dataObject) {
        var prev = this._cols[colIndex] || {};
        this._cols[colIndex] = prev ? __assign(__assign({}, prev), dataObject) : dataObject;
    };
    DataPage.prototype.getColumnMeta = function (colIndex, force) {
        var col = this._cols[colIndex];
        if (force && !col) {
            var data = {};
            this._cols[colIndex] = data;
            return data;
        }
        return col || null;
    };
    DataPage.prototype.sort = function (from, to, index, dir) {
        if (index === void 0) { index = 0; }
        if (dir === void 0) { dir = "asc"; }
        var _a = fromId(from), r1 = _a[0], c1 = _a[1];
        var _b = fromId(to), r2 = _b[0], c2 = _b[1];
        var asc = dir === "asc";
        var values = [];
        var sortedData = [];
        for (var r = r1; r <= r2; r++) {
            var row = [];
            for (var c = c1; c <= c2; c++) {
                var math = this._store.getMath(this.cellID(r, c));
                row.push({
                    value: this.getValue(r, c),
                    row: r,
                    math: math || null,
                });
            }
            values.push(row);
        }
        values.sort(function (a, b) {
            var v1 = a[index].value;
            var v2 = b[index].value;
            if ((typeof v1 === "string" && typeof v2 === "string") ||
                (typeof v1 === "number" && typeof v2 === "number")) {
                if (v1 < v2) {
                    return asc ? -1 : 1;
                }
                if (v1 > v2) {
                    return asc ? 1 : -1;
                }
                else {
                    return 0;
                }
            }
            if (typeof v1 === "number") {
                return -1;
            }
            return 1;
        });
        for (var r = r1; r <= r2; r++) {
            for (var c = c1; c <= c2; c++) {
                var value = values[r - r1][c - c1];
                if (value.math) {
                    var dr = value.row - r;
                    var m = this._store.transposeMath(value.math, -dr, 0, this._parseContext);
                    value.value = "=" + m;
                }
                sortedData.push([r, c, { value: value.value }]);
            }
        }
        this.parseBlock(sortedData);
    };
    DataPage.prototype.addSpan = function (id, width, height) {
        var dimension = width > 1 || height > 1;
        var index;
        if (!dimension) {
            index = this._spans.findIndex(function (s) { return s.id === id; });
            if (index !== -1)
                this._spans.splice(index, 1);
            return;
        }
        // need to check if span exist in created zone and destroy it
        for (var i = 0; i <= this._spans.length - 1; i++) {
            var span = this._spans[i];
            if (checkIntersection(id, width, height, span.id, span.info.width, span.info.height)) {
                this._spans.splice(i, 1);
            }
        }
        this._spans.push({
            id: id,
            info: { width: width, height: height },
        });
    };
    DataPage.prototype.getSpan = function (id) {
        var span = this._spans.find(function (s) { return s.id === id; });
        return span || null;
    };
    DataPage.prototype.getSpans = function () {
        return this._spans;
    };
    DataPage.prototype._recalculateSpans = function (pos, rCount, cCount) {
        var _a, _b;
        if (!this._spans.length)
            return;
        for (var i = this._spans.length - 1; i >= 0; i--) {
            var span = this._spans[i];
            var _c = span.info, height = _c.height, width = _c.width;
            var _d = fromId(span.id), r = _d[0], c = _d[1];
            if (rCount) {
                _a = this._adjustSpan(r, height, pos, rCount), r = _a[0], height = _a[1];
            }
            if (cCount) {
                _b = this._adjustSpan(c, width, pos, cCount), c = _b[0], width = _b[1];
            }
            if (width < 1 || height < 1 || width + height <= 2) {
                this._spans.splice(i, 1);
            }
            else {
                span.id = toId(r, c, this._id);
                span.info.height = height;
                span.info.width = width;
            }
        }
    };
    DataPage.prototype._adjustSpan = function (start, size, pos, count) {
        var spanEnd = start + size;
        if (count < 0) {
            // decreasing size
            count = -count;
            var deleteEnd = pos + count;
            if (pos > start) {
                // right side or none
                if (pos <= spanEnd) {
                    // split span at end
                    size -= Math.min(count, start + size - pos);
                }
            }
            else {
                // left side or none
                if (deleteEnd > start) {
                    // split span at start
                    size -= deleteEnd - start;
                    start = count - (deleteEnd - start);
                }
                else {
                    // shift span start
                    start -= count;
                }
            }
        }
        else {
            // increasing size
            if (pos <= start) {
                start += count;
            }
            else if (pos <= spanEnd) {
                size += count;
            }
        }
        return [start, size];
    };
    return DataPage;
}());
function getStub(pos, n) {
    var out = [pos, 0];
    for (var i = 0; i < n; i++)
        out.push(null);
    return out;
}

var RangeStore = /** @class */ (function () {
    function RangeStore(store, page, pageGetter) {
        this._ranges = new Map();
        this._counter = 1;
        this._rangeOrder = [];
        this._store = store;
        this._page = page;
        this._pageGetter = pageGetter;
    }
    RangeStore.prototype.get = function (name) {
        return this._store.getMath(this._ranges.get(name));
    };
    RangeStore.prototype.toId = function (name) {
        return this._ranges.get(name);
    };
    RangeStore.prototype.add = function (name, text) {
        var id = this._ranges.get(name) || this._next_id();
        this._store.setMath(id, text, this._page.getContext());
        this._ranges.set(name, id);
        this._refresh(name);
    };
    RangeStore.prototype.remove = function (name) {
        this._ranges.delete(name);
        this._counter = 1; // reset counter to fill the gaps
        this._refresh(name);
    };
    RangeStore.prototype.serialize = function () {
        var _this = this;
        return Array.from(this._ranges.keys()).map(function (a) { return [a, _this.get(a).source]; });
    };
    RangeStore.prototype.parse = function (data) {
        var _this = this;
        data.forEach(function (a) { return _this.add(a[0], a[1]); });
    };
    RangeStore.prototype._refresh = function (name) {
        var _this = this;
        var prefix = name.indexOf("!");
        var pageName = "";
        if (prefix !== -1) {
            pageName = name.substr(0, prefix);
            name = name.substr(prefix + 1);
        }
        this._store.each(function (id, obj) {
            // recalculate all values where range is used
            if (hasRange(obj.code, obj.source, pageName, name)) {
                var pid = page(id);
                _this._store.setMath(id, obj.source, _this._pageGetter(pid).getContext());
            }
        });
    };
    RangeStore.prototype._next_id = function () {
        while (this._rangeOrder[this._counter]) {
            this._counter++;
        }
        this._rangeOrder[this._counter] = true;
        return toId(this._counter, 0, this._page.getID());
    };
    RangeStore.prototype.renamePage = function (o, n) {
        var _this = this;
        o = o + "!";
        if (n)
            n = n + "!";
        this._ranges.forEach(function (v, k, m) {
            if (k.indexOf(o) === 0) {
                if (n) {
                    m.set(k.replace(o, n), v);
                }
                else {
                    _this._store.clean(v);
                }
                m.delete(k);
            }
        });
    };
    return RangeStore;
}());
function hasRange(code, text, page, name) {
    for (var i = 0; i < code.length; i += 3)
        if (code[i] === T_NAME) {
            if (page !== "") {
                if (code[i - 3] === T_PAGE &&
                    text.substr(code[i - 2], code[i - 1]) !== page)
                    continue;
                // we still need to check the case is the context of the current formula is the same as :page
                // as it requires extra steps, just recalck suspected formular instead
                return true;
            }
            if (text.substr(code[i + 1], code[i + 2]) === name)
                return true;
        }
    return false;
}

var CopyManager = /** @class */ (function () {
    function CopyManager(store, pageGetter) {
        this._store = store;
        this._pageGetter = pageGetter;
    }
    CopyManager.prototype.copy = function (from, to) {
        if (!to)
            to = from;
        var chunk = this._serialize(from, to);
        this._store.setMeta({ $clipboard: chunk });
        return chunk;
    };
    /**
     * Pastes a chunk of data into a specified range of cells.
     */
    CopyManager.prototype.paste = function (targetLeftTop, targetRightBottom, chunk, mode, handler) {
        if (handler === void 0) { handler = this._updateCurrentCell; }
        var _a;
        // If the chunk is null or empty, return without doing anything.
        chunk = chunk || this._store.getMeta().$clipboard;
        mode = mode || PASTE_MODE_OVERLAP;
        if (!((_a = chunk) === null || _a === void 0 ? void 0 : _a.data.length))
            return;
        // Extract the row and column indices of the top-left and bottom-right cells of the target range.
        var _b = fromId(targetLeftTop), r1 = _b[0], c1 = _b[1], p = _b[2];
        var _c = fromId(targetRightBottom), r2 = _c[0], c2 = _c[1];
        var page = this._pageGetter(p);
        // Extract the row and column indices of the top-left cell of the chunk, as well as the chunk data.
        var _d = fromId(chunk.from || 0), rChunk = _d[0], cChunk = _d[1];
        var chunkData = chunk.data;
        var data = [];
        // Calculate the difference between the row and column indices of the top-left cell of the chunk and the top-left cell of the target range.
        var dx = r1 - rChunk;
        var dy = c1 - cChunk;
        // loop through the cells in the source range and paste to the corresponding cells in the target range.
        // if data is bigger than the target range, allow to paste outside of the target range
        if (mode === PASTE_MODE_OVERLAP) {
            var cols = chunkData[0].length - 1;
            for (var i = 0; i <= chunkData.length - 1; i++) {
                for (var j = 0; j <= cols; j++) {
                    var chunkCell = chunkData[i][j];
                    var r = r1 + i;
                    var c = c1 + j;
                    var dataCell = this._updateCell(r, c, p, chunkCell, dx, dy, handler);
                    if (dataCell)
                        data.push(dataCell);
                }
            }
        }
        // loop through the cells in the target range and paste the corresponding cells from the chunk.
        // do not exceed the target range
        if (mode === PASTE_MODE_RANGE) {
            for (var i = r1; i <= r2; i++) {
                for (var j = c1; j <= c2; j++) {
                    var r = i - r1;
                    var c = j - c1;
                    var chunkCell = chunkData[r][c];
                    var dataCell = this._updateCell(i, j, p, chunkCell, dx, dy, handler);
                    if (dataCell)
                        data.push(dataCell);
                }
            }
        }
        // loop through the cells in the target range and paste the corresponding cells from the chunk
        // repeat data from the chunk as necessary.
        if (mode === PASTE_MODE_REPEAT) {
            var r = 0;
            for (var i = r1; i <= r2; i++) {
                var c = 0;
                if (r === chunkData.length)
                    r = 0;
                for (var j = c1; j <= c2; j++) {
                    if (c === chunkData[0].length)
                        c = 0;
                    var chunkCell = chunkData[r][c];
                    var dr = i - (rChunk + r);
                    var dc = j - (cChunk + c);
                    var dataCell = this._updateCell(i, j, p, chunkCell, dr, dc, handler);
                    if (dataCell)
                        data.push(dataCell);
                    c++;
                }
                r++;
            }
        }
        // import the updated data back to the page
        page.parseBlock(data);
    };
    CopyManager.prototype.clean = function (from, to, mode) {
        mode = mode || CLEAN_MODE_ALL;
        // Extract the row and column indices of the top-left and bottom-right cells of the range.
        var _a = fromId(from), r1 = _a[0], c1 = _a[1], p = _a[2];
        var _b = fromId(to), r2 = _b[0], c2 = _b[1];
        var page = this._pageGetter(p);
        var cleanData = [];
        var trigers = [];
        // Loop through the cells in the range and clear all or sub-set of data based on the specified clean mode.
        for (var i = r1; i <= r2; i++) {
            for (var j = c1; j <= c2; j++) {
                // get cell's data
                var cell = page.getCell(i, j);
                var cellId = toId(i, j, p);
                var newCell = mode === CLEAN_MODE_ALL ? {} : __assign({}, cell);
                /* eslint-disable no-bitwise */
                if (mode & CLEAN_MODE_DATA) {
                    // Build list of cells to trigger after update
                    var triggerList = this._store.getTriggerList(cellId);
                    if (triggerList)
                        trigers.push.apply(trigers, triggerList);
                    // Delete the cell value and add the updated cell to the clean data.
                    delete newCell.value;
                }
                cleanData.push([i, j, newCell]);
            }
        }
        // Parse the updated data block and refresh related formulas.
        page.parseBlock(cleanData);
        this._refreshRelatedFormulas(trigers);
    };
    CopyManager.prototype._refreshRelatedFormulas = function (ids) {
        var _this = this;
        var uniqIds = getUniqIds(ids);
        uniqIds.forEach(function (id) { return _this._store.refresh(id); });
    };
    CopyManager.prototype._serialize = function (from, to) {
        // Extract the row and column indices of the top-left and bottom-right cells of the range.
        var _a = fromId(from), r1 = _a[0], c1 = _a[1], p = _a[2];
        var _b = fromId(to), r2 = _b[0], c2 = _b[1];
        var page = this._pageGetter(p);
        // Initialize the chunk object.
        var chunk = {
            from: from,
            data: [],
        };
        // Loop through the cells in the range and add their data to the chunk object.
        for (var i = r1; i <= r2; i++) {
            var row = [];
            for (var j = c1; j <= c2; j++) {
                var value = page.getCell(i, j);
                var math = this._store.getMath(toId(i, j, p));
                var mathSource = void 0;
                // If the cell contains math, extract the original formula
                if (math)
                    mathSource = math.source;
                // Add the cell data to the row.
                var cell = [value ? __assign({}, value) : null];
                if (mathSource)
                    cell.push(mathSource);
                row.push(cell);
            }
            chunk.data.push(row);
        }
        return chunk;
    };
    CopyManager.prototype.reset = function () {
        this._store.setMeta({ $clipboard: null });
    };
    CopyManager.prototype.move = function (to, chunk) {
        var _a = chunk || this._store.getMeta().$clipboard, data = _a.data, from = _a.from;
        var _b = fromId(from), rC = _b[0], cC = _b[1], pC = _b[2];
        var rows = data.length;
        var cols = data[0].length;
        var _c = fromId(to), r = _c[0], c = _c[1], p = _c[2];
        var out = [];
        var dataMove = [];
        var pageMove = this._pageGetter(p);
        var cutRange = {
            id: from,
            h: rows,
            w: cols,
        };
        for (var i = 0; i < rows; i++) {
            for (var j = 0; j < cols; j++) {
                var chunkCell = data[i][j];
                var cell = chunkCell[0], math = chunkCell[1];
                var r1 = rC + i;
                var c1 = cC + j;
                var id = toId(r1, c1, pC);
                var triggerList = this._store.getTriggerList(id);
                if (triggerList) {
                    var outCells = this._getTriggersOutsideCutRange(triggerList, from, rows, cols);
                    if (outCells.length)
                        out.push.apply(out, outCells);
                }
                var rMove = r + i;
                var cMove = c + j;
                if (cell) {
                    if (math) {
                        var ctxC = this._pageGetter(pC).getContext();
                        var newMath = this._store.moveMath(math, r - rC, c - cC, p, cutRange, ctxC, pageMove.getContext());
                        cell.value = "=" + newMath;
                    }
                    dataMove.push([rMove, cMove, cell]);
                }
                else {
                    dataMove.push([rMove, cMove, {}]);
                }
            }
        }
        pageMove.parseBlock(dataMove);
        this._updateRelatedFormulas(out, r - rC, c - cC, p, cutRange);
    };
    CopyManager.prototype._updateRelatedFormulas = function (ids, dr, dc, dp, chunkInfo) {
        var _this = this;
        var uniqIds = getUniqIds(ids);
        uniqIds.forEach(function (id) {
            var _a = fromId(id), p = _a[2];
            var math = _this._store.getMath(id);
            var ctx = _this._pageGetter(p).getContext();
            var mathValue = _this._store.moveMath(math, dr, dc, dp, chunkInfo, ctx);
            // FIXME - setMath in the loop, it means we have multiple recalculations
            // can be improved
            _this._store.setMath(id, mathValue, ctx);
        });
    };
    CopyManager.prototype._getTriggersOutsideCutRange = function (triggerList, chunkFromId, chunkR, chunkC) {
        var out = [];
        triggerList.forEach(function (trId) {
            if (!checkIntersection(chunkFromId, chunkR, chunkC, trId, 1, 1))
                out.push(trId);
        });
        return out;
    };
    CopyManager.prototype._updateCell = function (r, c, p, chunkCell, dx, dy, handler) {
        var cell = chunkCell[0], math = chunkCell[1];
        var page = this._pageGetter(p);
        // prepare data which will be copied
        var sourceCell = cell ? __assign({}, cell) : { value: null };
        sourceCell.formula = math
            ? "=" + this._store.transposeMath(math, dx, dy)
            : null;
        // cell where data need to be copied
        var currentCell = page.getCell(r, c) || {};
        // apply
        var result = handler(currentCell, sourceCell);
        return result ? [r, c, result] : null;
    };
    CopyManager.prototype._updateCurrentCell = function (_current, update) {
        if (update.formula)
            update.value = update.formula;
        return update;
    };
    CopyManager.prototype.fromCSV = function (text, rowSeparator, columnSeparator) {
        if (rowSeparator === void 0) { rowSeparator = "\n"; }
        if (columnSeparator === void 0) { columnSeparator = "\t"; }
        var chunk = text.split(rowSeparator).map(function (r) {
            var col = r.split(columnSeparator).map(function (c) {
                return [{ value: c }];
            });
            return col;
        });
        return { data: chunk };
    };
    return CopyManager;
}());
function getUniqIds(ids) {
    var newSet = new Set(ids);
    var uniqIds = Array.from(newSet);
    return uniqIds;
}

var DataStore = /** @class */ (function () {
    function DataStore(cfg) {
        var _this = this;
        this._cfg = cfg || { strict: false };
        this._pages = [];
        this._pageNames = [];
        this._pageName2ID = new Map();
        this._pCounter = 0;
        this._parseContext = {
            page: function (text) {
                return _this._pageName2ID.get(text);
            },
            pageName: function (page) {
                return _this._pageNames[page];
            },
            pageObj: function (page) {
                return _this._pages[page];
            },
            name: function (code, text, ctx) {
                var n = code.length;
                var name = text.substr(code[n - 2], code[n - 1]);
                var id;
                if (code[n - 6] === T_PAGE) {
                    var page = text.substr(code[n - 5], code[n - 4]);
                    id = _this._ranges.toId(page + "!" + name) || _this._ranges.toId(name);
                }
                else {
                    id =
                        _this._ranges.toId(ctx.pageName(ctx.z) + "!" + name) ||
                            _this._ranges.toId(name);
                }
                code.push(T_DATA, id || -1, 0);
            },
            z: 0,
        };
        var s = (this._store = new Store(__assign(__assign({}, this._cfg), { get: function (id) {
                var _a = fromId(id), r = _a[0], c = _a[1], z = _a[2];
                return _this._pages[z].getValue(r, c);
            }, set: function (id, value, type, source) {
                var _a = fromId(id), r = _a[0], c = _a[1], z = _a[2];
                var page = _this._pages[z];
                var cell = page.getCell(r, c, true);
                var afterClean = !source
                    ? typeof cell.spill === "number"
                        ? cell.spill
                        : value || value === 0
                            ? cell.source
                            : null
                    : null;
                if (type === D_SPILL) {
                    if (source >= 0) {
                        cell.spill = source;
                        if (cell.source !== source) {
                            return false;
                        }
                    }
                    cell.source = source = null;
                }
                else if (value === null && !source && cell.source) {
                    return false;
                }
                if (source) {
                    if (id !== source && cell.source !== source)
                        if (cell.value ||
                            cell.value === 0 ||
                            (typeof cell.source === "number" && cell.source !== source)) {
                            // if fixed value is inserted into the dyn cell we throw an error
                            var page_1 = _this._pages[z];
                            page_1.throwError("spill error");
                        }
                }
                if (cell.source !== source)
                    cell.source = source;
                var isResult = type === D_RESULT || type === D_SPILL;
                if (typeof type === "undefined" || type === null || isResult)
                    type = cell.$format || D_COMMON;
                cell.$format = type;
                if (typeof value === "string" && type != D_STRING && value) {
                    var check = parseFloat(value);
                    if (isResult)
                        check = check.toString();
                    if (check == value)
                        value = parseFloat(value);
                }
                var result = cell.value !== value;
                if (result)
                    cell.value = value;
                // clearing dynamic value
                if (typeof afterClean === "number") {
                    s.triggerSet(new Set([afterClean]));
                }
                return result;
            } })));
        // used to store internal math - ranges, conditional styles, etc.
        var tpage = (this._pages[RANGE_PAGE_ID] = new DataPage(RANGE_PAGE_ID, this._store, this._parseContext));
        this._ranges = new RangeStore(this._store, tpage, this.getPage.bind(this));
        this._cm = new CopyManager(this._store, this.getPage.bind(this));
    }
    DataStore.prototype.addPage = function (name) {
        while (this._pages[this._pCounter])
            this._pCounter++;
        var id = this._pCounter;
        var page = new DataPage(id, this._store, this._parseContext);
        this._pageName2ID.set(name, id);
        this._pages[id] = page;
        this._pageNames[id] = name;
        return page;
    };
    DataStore.prototype.renamePage = function (name, newName) {
        if (name === newName)
            return;
        var id = this._pageName2ID.get(name);
        this._pageName2ID.delete(name);
        this._pageName2ID.set(newName, id);
        this._pageNames[id] = newName;
        this._ranges.renamePage(name, newName);
        var ctx = this._pages[id].getContext();
        this._store.regenerate(id, false, ctx);
    };
    DataStore.prototype.removePage = function (name) {
        var id = this._pageName2ID.get(name);
        var ctx = this._pages[id].getContext();
        this._pageName2ID.delete(name);
        this._pages[id] = this._pageNames[id] = null;
        this._pCounter = 0;
        this._ranges.renamePage(name, null);
        this._store.regenerate(id, true, ctx);
    };
    DataStore.prototype.getPage = function (name) {
        if (typeof name === "string")
            name = this._pageName2ID.get(name);
        return this._pages[name];
    };
    DataStore.prototype.getRanges = function () {
        return this._ranges;
    };
    DataStore.prototype.getStore = function () {
        return this._store;
    };
    DataStore.prototype.find = function (cb, _a) {
        var firstOnly = _a.firstOnly, _b = _a.resultsLimit, resultsLimit = _b === void 0 ? 100 : _b;
        var values = [];
        this._pages.forEach(function (page, i) {
            page.eachCell(function (r, c, cell) {
                var val = cell.value;
                if (cb(val) &&
                    ((firstOnly && values.length === 0) ||
                        (!firstOnly && values.length < resultsLimit))) {
                    values.push({
                        id: toId(r, c, i),
                        value: val,
                    });
                }
            });
        });
        return values;
    };
    DataStore.prototype.getCopyManager = function () {
        return this._cm;
    };
    return DataStore;
}());

exports.CLEAN_MODE_ALL = CLEAN_MODE_ALL;
exports.CLEAN_MODE_DATA = CLEAN_MODE_DATA;
exports.D_COMMON = D_COMMON;
exports.D_STRING = D_STRING;
exports.DataPage = DataPage;
exports.DataStore = DataStore;
exports.PASTE_MODE_OVERLAP = PASTE_MODE_OVERLAP;
exports.PASTE_MODE_RANGE = PASTE_MODE_RANGE;
exports.PASTE_MODE_REPEAT = PASTE_MODE_REPEAT;
exports.Store = Store;
exports.T_ARG = T_ARG;
exports.T_DATA = T_DATA;
exports.T_ERROR = T_ERROR;
exports.T_METHOD = T_METHOD;
exports.T_NAME = T_NAME;
exports.T_NUMBER = T_NUMBER;
exports.T_OPERATOR = T_OPERATOR;
exports.T_PAGE = T_PAGE;
exports.T_PLACEHOLDER = T_PLACEHOLDER;
exports.T_RANGE = T_RANGE;
exports.T_SPACE = T_SPACE;
exports.T_TEXT = T_TEXT;
exports.addMethod = addMethod;
exports.column = column;
exports.fromId = fromId;
exports.methodGroups = groups;
exports.methods = methods;
exports.page = page;
exports.row = row;
exports.str2id = str2id;
exports.str2pos = str2pos;
exports.str2range = str2range;
exports.toId = toId;
//# sourceMappingURL=muon.js.map


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DataDriver = exports.DragEvents = exports.DataEvents = exports.TreeFilterType = void 0;
var TreeFilterType;
(function (TreeFilterType) {
    TreeFilterType["all"] = "all";
    TreeFilterType["level"] = "level";
    TreeFilterType["leafs"] = "leafs";
})(TreeFilterType || (exports.TreeFilterType = TreeFilterType = {}));
var DataEvents;
(function (DataEvents) {
    DataEvents["afterAdd"] = "afteradd";
    DataEvents["beforeAdd"] = "beforeadd";
    DataEvents["removeAll"] = "removeall";
    DataEvents["beforeRemove"] = "beforeremove";
    DataEvents["afterRemove"] = "afterremove";
    DataEvents["change"] = "change";
    DataEvents["filter"] = "filter";
    DataEvents["dataRequest"] = "dataRequest";
    DataEvents["load"] = "load";
    DataEvents["loadError"] = "loaderror";
    DataEvents["beforeLazyLoad"] = "beforelazyload";
    DataEvents["afterLazyLoad"] = "afterlazyload";
    DataEvents["beforeItemLoad"] = "beforeItemLoad";
    DataEvents["afterItemLoad"] = "afterItemLoad";
})(DataEvents || (exports.DataEvents = DataEvents = {}));
var DragEvents;
(function (DragEvents) {
    DragEvents["beforeDrag"] = "beforeDrag";
    DragEvents["dragStart"] = "dragStart";
    DragEvents["dragOut"] = "dragOut";
    DragEvents["dragIn"] = "dragIn";
    DragEvents["canDrop"] = "canDrop";
    DragEvents["cancelDrop"] = "cancelDrop";
    DragEvents["beforeDrop"] = "beforeDrop";
    DragEvents["afterDrop"] = "afterDrop";
    DragEvents["afterDrag"] = "afterDrag";
})(DragEvents || (exports.DragEvents = DragEvents = {}));
var DataDriver;
(function (DataDriver) {
    DataDriver["json"] = "json";
    DataDriver["csv"] = "csv";
    DataDriver["xml"] = "xml";
})(DataDriver || (exports.DataDriver = DataDriver = {}));


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isOnlyPermanentFilters = exports.hasJsonOrArrayStructure = exports.isTreeCollection = exports.copyWithoutInner = exports.toDataDriver = exports.toProxy = exports.dhxError = exports.dhxWarning = exports.isDebug = exports.findByConf = exports.naturalCompare = exports.isEqualObj = void 0;
var core_1 = __webpack_require__(0);
var dataproxy_1 = __webpack_require__(34);
var drivers_1 = __webpack_require__(67);
function isEqualObj(a, b) {
    for (var key in a) {
        if (a[key] !== b[key] || Array.isArray(a[key])) {
            return false;
        }
    }
    return true;
}
exports.isEqualObj = isEqualObj;
function naturalCompare(a, b) {
    if (isNaN(a) || isNaN(b)) {
        var ax_1 = [];
        var bx_1 = [];
        a.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            ax_1.push([$1 || Infinity, $2 || ""]);
        });
        b.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            bx_1.push([$1 || Infinity, $2 || ""]);
        });
        while (ax_1.length && bx_1.length) {
            var an = ax_1.shift();
            var bn = bx_1.shift();
            var nn = an[0] - bn[0] || an[1].localeCompare(bn[1]);
            if (nn) {
                return nn;
            }
        }
        return ax_1.length - bx_1.length;
    }
    return a - b;
}
exports.naturalCompare = naturalCompare;
function findByConf(item, conf) {
    if (typeof conf === "function") {
        if (conf.call(this, item)) {
            return item;
        }
    }
    else if (conf.by && conf.match) {
        if (item[conf.by] === conf.match) {
            return item;
        }
    }
}
exports.findByConf = findByConf;
function isDebug() {
    var dhx = window.dhx;
    if (typeof dhx !== "undefined") {
        return typeof dhx.debug !== "undefined" && dhx.debug;
    }
    // return typeof DHX_DEBUG_MODE !== "undefined" && DHX_DEBUG_MODE;
}
exports.isDebug = isDebug;
function dhxWarning(msg) {
    // tslint:disable-next-line:no-console
    console.warn(msg);
}
exports.dhxWarning = dhxWarning;
function dhxError(msg) {
    throw new Error(msg);
}
exports.dhxError = dhxError;
function toProxy(proxy) {
    var type = typeof proxy;
    if (type === "string") {
        return new dataproxy_1.DataProxy(proxy);
    }
    else if (type === "object") {
        return proxy;
    }
}
exports.toProxy = toProxy;
function toDataDriver(driver) {
    if (typeof driver === "string") {
        var dhx = window.dhx;
        var drivers = (dhx && dhx.dataDrivers) || drivers_1.dataDrivers;
        if (drivers[driver]) {
            return new drivers[driver]();
        }
        else {
            // tslint:disable-next-line:no-console
            console.warn("Incorrect data driver type:", driver);
            // tslint:disable-next-line:no-console
            console.warn("Available types:", JSON.stringify(Object.keys(drivers)));
        }
    }
    else if (typeof driver === "object") {
        return driver;
    }
}
exports.toDataDriver = toDataDriver;
function copyWithoutInner(obj, forbidden) {
    var result = {};
    for (var key in obj) {
        if (!key.startsWith("$") && (!forbidden || !forbidden[key])) {
            result[key] = obj[key];
        }
    }
    return result;
}
exports.copyWithoutInner = copyWithoutInner;
function isTreeCollection(obj) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return Boolean(obj.getRoot);
}
exports.isTreeCollection = isTreeCollection;
function hasJsonOrArrayStructure(str) {
    if (typeof str === "object") {
        return true;
    }
    if (typeof str !== "string") {
        return false;
    }
    try {
        var result = JSON.parse(str);
        return Object.prototype.toString.call(result) === "[object Object]" || Array.isArray(result);
    }
    catch (err) {
        return false;
    }
}
exports.hasJsonOrArrayStructure = hasJsonOrArrayStructure;
function isOnlyPermanentFilters(filters) {
    if (!filters || (0, core_1.isEmptyObj)(filters))
        return false;
    return Object.keys(filters).every(function (key) {
        var _a;
        return (_a = filters[key].config) === null || _a === void 0 ? void 0 : _a.permanent;
    });
}
exports.isOnlyPermanentFilters = isOnlyPermanentFilters;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isDateFormat = exports.isDHXFormat = exports.getExcelFormatFromDHX = exports.getDHXDateFormat = exports.getExcelDateFromString = exports.isTimeCheck = exports.timeStringToJS = exports.timeDiff = exports.dateDiff = exports.addTime = exports.addDay = exports.excelDateToJSDate = exports.getExcelDateFromJs = void 0;
var date_1 = __webpack_require__(18);
function getExcelDateFromJs(jsDate) {
    if (!jsDate)
        return null;
    var returnDateTime = 25569 + (jsDate.getTime() - jsDate.getTimezoneOffset() * 60000) / (86400 * 1000);
    return returnDateTime;
}
exports.getExcelDateFromJs = getExcelDateFromJs;
function excelDateToJSDate(number) {
    var date = new Date(Math.round((number - 25569) * 86400 * 1000));
    return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
}
exports.excelDateToJSDate = excelDateToJSDate;
function addDay(d, count) {
    if (count === void 0) { count = 1; }
    return new Date(d.getFullYear(), d.getMonth(), d.getDate() + count);
}
exports.addDay = addDay;
function addTime(d, count) {
    if (count === void 0) { count = 3600 * 1000; }
    return new Date(d.getTime() + count);
}
exports.addTime = addTime;
function dateDiff(d1, d2) {
    var t2 = d2.getTime();
    var t1 = d1.getTime();
    return parseInt("".concat((t2 - t1) / (24 * 3600 * 1000)));
}
exports.dateDiff = dateDiff;
function timeDiff(d1, d2) {
    var date1 = new Date();
    var date2 = new Date();
    date1.setHours(d1.getHours(), d1.getMinutes(), d1.getSeconds());
    date2.setHours(d2.getHours(), d2.getMinutes(), d2.getSeconds());
    var t2 = date2.getTime();
    var t1 = date1.getTime();
    return parseInt("".concat(t2 - t1));
}
exports.timeDiff = timeDiff;
function validate(value, max) {
    if (isNaN(value)) {
        return 0;
    }
    return Math.min(max, Math.max(0, value));
}
function timeStringToJS(value) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var m = 0;
    var h = 0;
    var s = 0;
    var isPM;
    var isAM;
    if (typeof value === "string") {
        var matches = value.match(/\d+/g);
        if (!matches)
            return value;
        if (value.toLowerCase().includes("pm")) {
            isPM = true;
        }
        if (value.toLowerCase().includes("am")) {
            isAM = true;
        }
        h = validate(+matches[0], 23);
        if (isPM || isAM) {
            if (isPM && h < 12) {
                h = h + 12;
            }
            if (isAM && h === 12) {
                h = 0;
            }
        }
        else {
        }
        m = validate(+matches[1], 59);
        s = validate(+matches[2], 59);
    }
    var date = new Date(1991, 0, 1, h, m, s);
    return date;
}
exports.timeStringToJS = timeStringToJS;
function isTimeCheck(value) {
    return /([0-2][0-9]:[0-5][0-9]:[0-5][0-9])/i.test(value);
}
exports.isTimeCheck = isTimeCheck;
function getExcelDateFromString(value, format) {
    if (typeof value !== "string")
        return value;
    var id = format.id, mask = format.mask;
    var val = value;
    if (id.includes("date")) {
        var date = (0, date_1.stringToDate)(value, getDHXDateFormat(mask), true);
        val = date ? getExcelDateFromJs((0, date_1.stringToDate)(value, getDHXDateFormat(mask))) : value;
    }
    if (id === "time") {
        var time = timeStringToJS(value);
        val = typeof time === "string" ? time : getExcelDateFromJs(time);
    }
    return val;
}
exports.getExcelDateFromString = getExcelDateFromString;
var dhxDateFormatMap = {
    mmmm: "%F",
    mmm: "%M",
    mm: "%m",
    m: "%n",
    dddd: "%I",
    ddd: "%D",
    dd: "%d",
    d: "%j",
    y: "%y",
    yy: "%y",
    yyyy: "%Y",
    w: "",
    ww: "",
    q: "",
    h: "%G",
    hh: "%H",
    "AM/PM": "%A",
    "am/pm": "%a",
    "A/P": "%A",
    "a/p": "%a",
    n: "%i",
    nn: "%i",
    s: "%s",
    ss: "%s",
};
var dhx12TimeFormatMap = {
    h: "%g",
    hh: "%h",
};
function getDHXDateFormat(format) {
    if (isDHXFormat(format))
        return format;
    var formatLowerCase = format.toLowerCase();
    var dhxFormat = "";
    var prevPart = "";
    var prevSymbol = "";
    var prevValidSymbol = "";
    var is12Format = formatLowerCase.includes("am/pm") || formatLowerCase.includes("a/p");
    if (is12Format) {
        format = format.replace("AM/PM", "%A");
        format = format.replace("am/pm", "%a");
        format = format.replace("A/P", "%A");
        format = format.replace("a/p", "%a");
    }
    for (var i = 0; i <= format.length; i++) {
        var part = format[i];
        var nextSymbol = "";
        var x = i;
        while (!nextSymbol && x < format.length) {
            var part_1 = format[x];
            nextSymbol = dhxDateFormatMap[part_1];
            x++;
        }
        if (part === "m" && (prevValidSymbol.includes("h") || nextSymbol.includes("s"))) {
            part = "n";
        }
        if (prevPart && part !== prevSymbol) {
            dhxFormat +=
                prevPart.includes("h") && is12Format // if it hour and 12 format
                    ? dhx12TimeFormatMap[prevPart]
                    : dhxDateFormatMap[prevPart] || prevSymbol;
            prevValidSymbol = dhxDateFormatMap[prevPart] ? prevPart : prevValidSymbol;
            prevPart = "";
        }
        prevPart += part;
        prevSymbol = part;
    }
    return dhxFormat;
}
exports.getDHXDateFormat = getDHXDateFormat;
function getExcelFormatFromDHX(format) {
    if (!isDHXFormat(format))
        return format;
    var excelFormat = format;
    Object.keys(dhxDateFormatMap).forEach(function (key) {
        var dhxSymbol = dhxDateFormatMap[key];
        while (dhxSymbol && excelFormat.includes(dhxSymbol)) {
            excelFormat = excelFormat.replace(dhxSymbol, key);
        }
    });
    Object.keys(dhx12TimeFormatMap).forEach(function (key) {
        var dhxSymbol = dhx12TimeFormatMap[key];
        while (dhxSymbol && excelFormat.includes(dhxSymbol)) {
            excelFormat = excelFormat.replace(dhxSymbol, key);
        }
    });
    return excelFormat;
}
exports.getExcelFormatFromDHX = getExcelFormatFromDHX;
function isDHXFormat(format) {
    return format.includes("%");
}
exports.isDHXFormat = isDHXFormat;
function isDateFormat(mask) {
    if (mask.toLowerCase().includes("date"))
        return "date";
    if (mask.toLowerCase().includes("time"))
        return "time";
    if (mask.includes("#") || mask.includes("0")) {
        return false;
    }
    var dhxFormat = isDHXFormat(mask) ? mask : getDHXDateFormat(mask);
    var dateSymbols = ["%F", "%M", "%m", "%n", "%I", "%D", "%d", "%j", "%y", "%Y"];
    var timeSymbols = ["%G", "%H", "%i", "%s", "%g", "%h"];
    var isDate = dateSymbols.find(function (symbol) { return dhxFormat.includes(symbol); });
    var isTime = timeSymbols.find(function (symbol) { return dhxFormat.includes(symbol); });
    if (!isDate && !isTime)
        return false;
    return isDate ? "date" : "time";
}
exports.isDateFormat = isDateFormat;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateSpans = exports.setAutoHeightToRow = exports.removeRowsCss = exports.updateRowsIndex = exports.updateColumns = exports.getIndexRowCell = exports.getHeaderCell = void 0;
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
function getHeaderCell(letter, index, showMenuIcon) {
    if (showMenuIcon === void 0) { showMenuIcon = true; }
    return "<div class=\"dhx_custom_header_cell\">\n\t\t\t".concat(letter, "\n\t\t<div class=\"dhx_resizer_grip_wrap\">\n\t\t\t<div class=\"dhx_resizer_grip\" data-dhx-id=").concat(index, ">\n\t\t\t\t<div class=\"dhx_resizer_grip_line\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t").concat(showMenuIcon ? "<i class=\"dxi dxi-dots-vertical dhx_header_icon\" data-dhx-id=".concat(index, "></i>") : "", "\n\t</div>");
}
exports.getHeaderCell = getHeaderCell;
function getIndexRowCell(index) {
    return "<div class=\"dhx_custom_index_cell\">".concat(index, "\n\t<div class=\"dhx_resizer_grip_wrap\">\n\t\t\t<div class=\"dhx_resizer_grip\" data-dhx-id=").concat(index - 1, ">\n\t\t\t\t<div class=\"dhx_resizer_grip_line\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>");
}
exports.getIndexRowCell = getIndexRowCell;
function updateColumns(config) {
    var columns = config.columns;
    var totalWidth = 0;
    columns === null || columns === void 0 ? void 0 : columns.map(function (col, i) {
        col.width = col.width || 120;
        totalWidth += col.hidden ? 0 : col.width;
        if (col.id !== "$index") {
            var letter = (0, main_1.getLetterFromNumber)(i);
            col.header = [
                {
                    text: getHeaderCell(letter, i),
                    css: "",
                },
            ];
            col.$letter = letter;
        }
    });
    config.$totalWidth = totalWidth;
}
exports.updateColumns = updateColumns;
function updateRowsIndex(data) {
    data.map(function (row, i) {
        row.$index = i + 1;
    });
}
exports.updateRowsIndex = updateRowsIndex;
function removeRowsCss(grid) {
    grid.data.map(function (row) {
        grid.removeRowCss(row.id, "dhx_selected_row");
    });
}
exports.removeRowsCss = removeRowsCss;
function setAutoHeightToRow(cell, grid, page, multiline) {
    var _a = page.getMeta(), cols = _a.cols, rows = _a.rows;
    var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
    var wrap = multiline === "wrap";
    var cellMeta = (0, main_1.getCellInfo)(cell, page, grid);
    var rowMeta = __assign({}, rows[row]);
    var value = cellMeta.value, format = cellMeta.format;
    if (!value)
        return;
    var formated_value = (0, format_1.getFormattedValue)(value, format);
    var colMeta = __assign({}, cols[col]);
    var colWidth = colMeta.width, wrappedRows = colMeta.wrappedRows;
    var text_height = (0, main_1.getTextHeight)(formated_value, colWidth);
    // store information about rows cells with wrap and their height
    var wrapMap = rowMeta.wrap, height = rowMeta.height, changedByUser = rowMeta.changedByUser;
    if (!wrapMap) {
        wrapMap = new Map();
        rowMeta.wrap = wrapMap;
    }
    if (wrap) {
        wrapMap.set(col, text_height);
    }
    else {
        wrapMap.delete(col);
    }
    // store information about rows in column that has cells with wrap (it helps to recalculate height of row when user change width of column)
    if (!wrappedRows) {
        colMeta.wrappedRows = new Set();
    }
    if (wrap) {
        colMeta.wrappedRows.add(row);
    }
    else if (!wrapMap.size) {
        colMeta.wrappedRows.delete(row);
    }
    // return if height of row was changed by user
    if (changedByUser)
        return;
    var cellHeights = [];
    wrapMap.forEach(function (height, wrap_col) {
        if (col !== wrap_col) {
            cellHeights.push(height);
        }
    });
    var maxHeight = Math.max.apply(Math, __spreadArray(__spreadArray([], cellHeights, false), [0], false));
    rowMeta.height = Math.max(maxHeight, wrap ? text_height : grid.config.rowHeight);
    rows[row] = __assign({}, rowMeta);
    cols[col] = __assign({}, colMeta);
    page.setMeta({ rows: rows });
    return true;
}
exports.setAutoHeightToRow = setAutoHeightToRow;
function updateSpans(dc, dr, index, page) {
    var merged = page.getMeta().merged;
    if (!(merged === null || merged === void 0 ? void 0 : merged.length))
        return;
    var changed = false;
    var spans = merged.map(function (_a) {
        var from = _a.from, to = _a.to;
        // update by col
        if (dc) {
            if (from.column >= index || to.column >= index) {
                var newFrom = __assign({}, from);
                var newSpan = {
                    from: newFrom,
                    to: __assign(__assign({}, to), { column: to.column + dc }),
                };
                // check that from column is not the deleted column
                if ((from.column >= index && dc > 0) || (from.column > index && dc < 0)) {
                    var col = newFrom.column;
                    newFrom.column = col + dc < 0 ? 0 : col + dc;
                }
                changed = true;
                return newSpan;
            }
        }
        //update by row
        if (dr) {
            if (from.row >= index || to.row >= index) {
                var newFrom = __assign({}, from);
                var newSpan = {
                    from: newFrom,
                    to: __assign(__assign({}, to), { row: to.row + dr }),
                };
                if ((from.row >= index && dr > 0) || (from.column > index && dr < 0)) {
                    var row = newFrom.row;
                    newFrom.row = row + dr < 0 ? 0 : row + dr;
                }
                changed = true;
                return newSpan;
            }
        }
        return { from: from, to: to };
    });
    if (!changed)
        return;
    page.setMeta({ merged: spans });
    return spans;
}
exports.updateSpans = updateSpans;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeCell = exports.getReducedRowspan = exports.getReducedColspan = exports.getHeight = exports.getWidth = void 0;
function getWidth(columns, colspan, index) {
    return columns
        .slice(index, index + (colspan || 1))
        .filter(function (col) { return !col.hidden; })
        .reduce(function (width, col) { return width + col.$width; }, 0);
}
exports.getWidth = getWidth;
function getHeight(rows, span) {
    var range = span.$rowsVisibility;
    return rows.slice(range[0], range[1] + 1).reduce(function (height, row) { return height + row.$height; }, 0);
}
exports.getHeight = getHeight;
function getReducedColspan(columns, colId, colspan) {
    var index = columns.findIndex(function (item) { return item.id === colId; });
    return columns.slice(index, index + (colspan || 1)).filter(function (col) { return !col.hidden; }).length;
}
exports.getReducedColspan = getReducedColspan;
function getReducedRowspan(initialRows, currRows, rowIndex, span) {
    var _a;
    var spanHeight = span.rowspan || 1;
    if (initialRows.length === currRows.length)
        return spanHeight;
    var initialRowIndex = (_a = initialRows === null || initialRows === void 0 ? void 0 : initialRows.findIndex(function (i) { return i.id === span.row; })) !== null && _a !== void 0 ? _a : -1;
    var rowCount = 0;
    if (initialRowIndex !== -1) {
        for (var i = 1; i < spanHeight; i++) {
            var curRow = currRows[rowIndex - rowCount + i];
            var initialRow = initialRows[initialRowIndex + i];
            if ((curRow === null || curRow === void 0 ? void 0 : curRow.id) !== (initialRow === null || initialRow === void 0 ? void 0 : initialRow.id)) {
                rowCount++;
            }
        }
    }
    return spanHeight - rowCount;
}
exports.getReducedRowspan = getReducedRowspan;
function normalizeCell(cell, grid) {
    if (!cell)
        return;
    var row = cell.row, column = cell.column;
    var span = grid.getSpan(row.id, column.id);
    if (!span)
        return cell;
    return {
        row: row.id === span.row ? row : grid.data.getItem(span.row),
        column: column.id === span.column ? column : grid.config.columns.find(function (col) { return col.id === span.column; }),
    };
}
exports.normalizeCell = normalizeCell;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSpan = exports.getShifts = exports.getSpans = exports.getCells = exports.getTreeCell = exports.getHandlers = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var cells_1 = __webpack_require__(30);
var main_1 = __webpack_require__(20);
var types_1 = __webpack_require__(9);
var editors_1 = __webpack_require__(125);
var html_1 = __webpack_require__(4);
var data_1 = __webpack_require__(22);
var render_1 = __webpack_require__(24);
function handleMouse(rowStart, colStart, conf, type, e) {
    colStart = (0, html_1.locateNodeByClassName)(e.target, "dhx_grid-fixed-cols-wrap") ? 0 : colStart;
    var target = (0, html_1.locateNodeByClassName)(e.target, "dhx_grid-cell");
    var targetSpan = (0, html_1.locateNodeByClassName)(e.target, "dhx_span-cell");
    if ((!target && !targetSpan) || !type) {
        return;
    }
    var rowNode = target ? target.parentNode : targetSpan;
    var colId = (target || targetSpan).getAttribute("data-dhx-col-id");
    var col = conf.filteredColumns.find(function (column) { return column.id === colId; });
    var rowId = rowNode.getAttribute("data-dhx-id");
    var row = (conf.$data || conf.data).find(function (r) { return r.id.toString() === rowId; });
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        conf._events.fire(type, [row, col, e]);
    }
    else {
        conf.events.fire(type, [row, col, e]);
    }
}
function getHandlers(row, column, conf) {
    return {
        onclick: [handleMouse, row, column, conf, types_1.GridEvents.cellClick],
        onmouseover: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseOver],
        onmousedown: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ondblclick: [handleMouse, row, column, conf, types_1.GridEvents.cellDblClick],
        oncontextmenu: [handleMouse, row, column, conf, types_1.GridEvents.cellRightClick],
        ontouchstart: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ontouchmove: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchMove],
        ontouchend: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchEnd],
    };
}
exports.getHandlers = getHandlers;
function getTreeCell(content, row, col, conf) {
    var getCellAriaAttrs = function (col, ind) { return ({
        role: "gridcell",
        "aria-colindex": ind,
    }); };
    var getToggleAriaAttrs = function (row) { return ({
        role: "button",
        "aria-label": row.$opened ? "Collapse group" : "Expand group",
    }); };
    var isEditable = conf.$editable && conf.$editable.row === row.id && conf.$editable.col === col.id;
    var isFilledCell = !conf.fixedColumns.left.length || conf.$renderFrom === "leftFixedCols";
    var cellAlign = col.align ? "dhx_align-".concat(col.align) : "dhx_align-left";
    var css = "";
    if (isFilledCell) {
        css = "dhx_tree-cell ".concat(col.$cellCss[row.id] || "", " ").concat(cellAlign);
        if (row.$items)
            css += " dhx_grid-expand-cell";
        if (isEditable)
            css += " dhx_tree-editing-cell";
        if (conf.dragMode && !isEditable) {
            css +=
                (row.$drophere ? " dhx_grid-cell--drophere" : "") +
                    (row.$dragtarget ? " dhx_grid-cell--dragtarget" : "");
        }
    }
    var parentPadding = (0, data_1.getTreeCellWidthOffset)(row);
    return (0, dom_1.el)(".dhx_grid-cell", __assign({ class: css, style: {
            width: col.$width,
            height: row.$height,
            padding: !row.$items ? "0 0 0 ".concat(parentPadding, "px") : 0,
        }, "data-dhx-col-id": col.id }, getCellAriaAttrs(col, 1)), isFilledCell
        ? [
            row.$items
                ? (0, dom_1.el)(".dhx_grid-expand-cell-icon", __assign(__assign({ class: row.$opened ? "dxi dxi-chevron-up" : "dxi dxi-chevron-down", "data-dhx-id": row.id }, getToggleAriaAttrs(row)), { style: {
                        padding: row.$level ? "0 0 0 ".concat(4 + parentPadding, "px") : "0 0 0 4px",
                    } }))
                : null,
            (0, dom_1.el)(".dhx_tree-cell", {
                class: cellAlign + "".concat((conf.autoHeight && " dhx_tree-cell_auto-height") || ""),
            }, [content]),
        ]
        : null);
}
exports.getTreeCell = getTreeCell;
function getEditorCell(row, col, conf) {
    return (0, editors_1.getEditor)(row, col, conf);
}
function getCells(conf) {
    if (!conf.data || !conf.filteredColumns) {
        return [];
    }
    var getRowAriaAttrs = function (ind) { return ({
        role: "row",
        "aria-rowindex": ind,
    }); };
    var pos = conf.$positions;
    var data = conf.data ? conf.data.slice(pos.yStart, pos.yEnd) : [];
    var columns = conf.filteredColumns.slice(pos.xStart, pos.xEnd);
    var selectedCell = conf.selection.getCell();
    var isFirstTabindex = true;
    var filteredDragRows;
    var dragGhost = document.querySelector(".dhx_drag-ghost");
    if (dragGhost) {
        var dragRowIndexes = Array.from(dragGhost.querySelectorAll(".dhx_grid-row")).map(function (elem) {
            return Number(elem.getAttribute("aria-rowindex")) - 1;
        });
        if (dragRowIndexes.length) {
            filteredDragRows = dragRowIndexes
                .map(function (i) { return conf.data[i]; })
                .filter(function (item) { return item && !data.find(function (i) { return i.id === item.id; }); });
            data.push.apply(data, filteredDragRows);
        }
    }
    return data.map(function (row, index) {
        var isFilteredDragRow = filteredDragRows === null || filteredDragRows === void 0 ? void 0 : filteredDragRows.some(function (item) { return item.id === row.id; });
        var isLastRow = data.length - 1 === index;
        var rowCss = "";
        if (conf.rowCss) {
            rowCss = conf.rowCss(row);
        }
        if (row.$css) {
            rowCss += row.$css;
        }
        return (0, dom_1.el)(".dhx_grid-row", __assign({ style: {
                height: isLastRow ? row.$height + 1 : row.$height,
                display: isFilteredDragRow ? "none" : null,
            }, "data-dhx-id": row.id, class: rowCss, _key: row.id, _flags: dom_1.KEYED_LIST }, (isFilteredDragRow ? {} : getRowAriaAttrs(pos.yStart + index + 1))), row.$customRender
            ? [row.$customRender(row, conf)]
            : columns.map(function (col, colIndex) {
                var _a;
                if (!col.hidden) {
                    var initValue = row[col.id];
                    var options_1 = (0, data_1.getEditorOptions)(col, row);
                    if ((col.editable || (conf.editable && col.editable !== false)) &&
                        (col.editorType === "select" ||
                            col.editorType === "combobox" ||
                            col.editorType === "multiselect") &&
                        options_1) {
                        initValue =
                            typeof initValue === "string" && col.editorType === "multiselect"
                                ? initValue.split(",").map(function (item) { return item.trim(); })
                                : [initValue === null || initValue === void 0 ? void 0 : initValue.toString()];
                        initValue = initValue
                            .map(function (item) {
                            var _a, _b;
                            return ((_b = (_a = options_1.find(function (option) {
                                return option.id &&
                                    option.id.toString() === item;
                            })) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : item);
                        })
                            .join(", ");
                    }
                    var value = (0, data_1.toFormat)(initValue, col.type, col.format);
                    var getTabIndex_1 = function (col, row) {
                        var attrs = {
                            tabindex: -1,
                        };
                        if (selectedCell) {
                            // is current cell selected?
                            if (selectedCell.row.id === row.id && selectedCell.column.id === col.id) {
                                attrs["tabindex"] = 0;
                            }
                        }
                        else if (isFirstTabindex) {
                            attrs["tabindex"] = 0;
                            // one-time event - only on first focus
                            // FIXME: crutch-solution
                            attrs["onkeydown"] = function (e) {
                                // FIXME: issue with samples that already setCell from index.html, rendered twice
                                // TODO: not here BUT if first cell is not in viewport -> scroll to it to set focus
                                if (conf.selection && !selectedCell && e.key === "Tab") {
                                    var rowId = e.target.parentNode.getAttribute("data-dhx-id");
                                    var colId = e.target.getAttribute("data-dhx-col-id");
                                    if (colId && rowId) {
                                        conf.selection.setCell(rowId, colId);
                                        selectedCell = conf.selection.getCell();
                                    }
                                    isFirstTabindex = false;
                                }
                            };
                        }
                        return attrs;
                    };
                    var getEditBtnAriaAttrs = function () { return ({
                        role: "button",
                        "aria-label": "Edit content",
                    }); };
                    var getCellAriaAttrs = function (col, colIndex, rowIndex, isEditable) { return (__assign({ role: "gridcell", "aria-colindex": colIndex, "aria-readonly": isEditable ? "false" : "true" }, getTabIndex_1(col, row))); };
                    var defaultTemplate = function (text) {
                        if (typeof text === "boolean" || col.type === "boolean") {
                            if (typeof text !== "string") {
                                return "".concat(Boolean(text));
                            }
                        }
                        return text || text === 0 ? text : "";
                    };
                    var content = col.template
                        ? col.template(value, row, col)
                        : defaultTemplate(value);
                    // content can be a domvm node or a string
                    if (typeof content === "string") {
                        content = (0, main_1.isHtmlEnable)(conf, col)
                            ? (0, dom_1.el)("div.dhx_grid-cell__content", __assign({ ".innerHTML": content }, getEditBtnAriaAttrs()))
                            : content;
                    }
                    var css = "".concat((col.$cellCss && col.$cellCss[row.id]) || "", " dhx_").concat(col.type, "-cell").replace(/\s+/g, " ");
                    var colWidth = col.$width;
                    var isEditable = conf.$editable &&
                        conf.$editable.row === row.id &&
                        conf.$editable.col === col.id &&
                        !conf.$editable.isSpan;
                    var leftSplit = conf.leftSplit, filteredColumns = conf.filteredColumns;
                    if (isEditable ||
                        (col.type === "boolean" &&
                            ((conf.editable && ((_a = col.editable) !== null && _a !== void 0 ? _a : true)) ||
                                (!conf.editable && col.editable)))) {
                        content = getEditorCell(row, col, conf).toHTML();
                        css += " dhx_grid-cell__editable";
                        if (leftSplit === filteredColumns.indexOf(col) + 1) {
                            colWidth -= 1;
                        }
                    }
                    if (conf.type === "tree" && conf.firstColId === col.id) {
                        return getTreeCell(content, row, col, conf);
                    }
                    if (conf.dragMode && !isEditable) {
                        css +=
                            (row.$drophere ? " dhx_grid-cell--drophere" : "") +
                                (row.$dragtarget ? " dhx_grid-cell--dragtarget" : "");
                    }
                    if (col.align) {
                        css += " dhx_align-".concat(col.align);
                    }
                    if ((0, main_1.isHtmlEnable)(conf, col)) {
                        css += " dhx_grid-cell__content_html-enable";
                    }
                    if (conf.autoHeight) {
                        css += " dhx_grid-cell__content_auto-height";
                    }
                    return (0, dom_1.el)(".dhx_grid-cell", __assign({ class: css, style: {
                            width: colWidth,
                            height: row.$height + "px",
                        }, _key: col.id, "data-dhx-col-id": col.id }, getCellAriaAttrs(col, pos.xStart + colIndex + 1, index, conf.editable)), [content]);
                }
            }));
    });
}
exports.getCells = getCells;
function getReverseScrollState(config) {
    var $scrollBarWidth = config.$scrollBarWidth;
    var totalScrollX = config.$totalWidth - config.$width + render_1.BORDERS + $scrollBarWidth.y;
    var totalScrollY = config.$totalHeight -
        config.$height +
        config.$headerHeight +
        config.$footerHeight +
        render_1.BORDERS +
        $scrollBarWidth.x;
    return {
        x: totalScrollX > 0 ? totalScrollX - config.scroll.left : 0,
        y: totalScrollY > 0 ? totalScrollY - config.scroll.top : 0,
    };
}
function getSpans(config, mode) {
    var _a, _b;
    var spanCells = [];
    var columns = config.columns, filteredColumns = config.filteredColumns, data = config.data, rSpans = config.currentSpans, _c = config.bottomSplit, bottomSplit = _c === void 0 ? 0 : _c;
    if (!filteredColumns.length || !rSpans)
        return null;
    var rightSplit = config.fixedColumns.right.length;
    var filteredSpans = rSpans.filter(function (span) { var _a; return (_a = span.$renderFrom) === null || _a === void 0 ? void 0 : _a.includes(config.$renderFrom); });
    var spans = filteredSpans.sort(function (a, b) {
        return typeof a.row === "string" && typeof b.row === "string"
            ? a.row.localeCompare(b.row)
            : a.row - b.row;
    });
    var _loop_1 = function (i) {
        var row = spans[i].row;
        var col = spans[i].column;
        var spanHeight = spans[i].$rowsVisibility[1] - spans[i].$rowsVisibility[0] + 1;
        var spanWidth = spans[i].$colsVisibility[1] - spans[i].$colsVisibility[0] + 1;
        var spanText = spans[i].text;
        var spanCss = spans[i].css;
        var isFixedColsByBottomSplit = mode === types_1.Split.bottom && config.$renderFrom.endsWith("FixedCols");
        var rows = isFixedColsByBottomSplit ? config.$data : data;
        var colIndex = filteredColumns === null || filteredColumns === void 0 ? void 0 : filteredColumns.findIndex(function (i) { return "".concat(i.id) === "".concat(col); });
        var rowIndex = rows === null || rows === void 0 ? void 0 : rows.findIndex(function (i) { return "".concat(i.id) === "".concat(row); });
        if (colIndex < 0 || rowIndex < 0) {
            return "continue";
        }
        if (isFixedColsByBottomSplit) {
            var item_1 = config.$data[rowIndex + spanHeight - 1];
            if (!data.find(function (i) { return i.id === (item_1 === null || item_1 === void 0 ? void 0 : item_1.id); }))
                return "continue";
        }
        var currCol = filteredColumns[colIndex];
        var currRow = rows[rowIndex];
        var cellCss = currCol.$cellCss[row];
        var spanType = (0, core_1.isDefined)(spans[i].text) ? "string" : currCol.type;
        if (currCol.hidden) {
            return "continue";
        }
        var content = void 0;
        if ((0, core_1.isDefined)(spanText)) {
            content = spanText.toString();
        }
        else {
            content = currRow[col] === undefined ? "" : (0, data_1.toFormat)(currRow[col], currCol.type, currCol.format);
        }
        var t = function (text, _row, _col) { return (text || text === 0 ? text : ""); };
        var template = currCol.template || t;
        content = template(content, currRow, currCol);
        var htmlEnable = (0, main_1.isHtmlEnable)(config, currCol);
        content =
            typeof content === "string"
                ? (0, dom_1.el)("div.dhx_span-cell-content", {
                    ".innerHTML": htmlEnable ? content : null,
                }, htmlEnable ? null : content)
                : content;
        var top_1 = void 0;
        if (config.$renderFrom === "bottomFixedRows" || isFixedColsByBottomSplit) {
            var rowIndexStartSplit = rows.length - bottomSplit;
            top_1 =
                rowIndex < rowIndexStartSplit
                    ? -(0, main_1.getTotalHeight)(rows.slice(rowIndex, rowIndexStartSplit))
                    : (0, main_1.getTotalHeight)(rows.slice(rowIndexStartSplit, rowIndex));
        }
        else {
            top_1 = (0, main_1.getTotalHeight)(rows.slice(0, rowIndex)) - (mode ? 0 : 1);
        }
        var left = 0;
        if (config.$renderFrom === "rightFixedCols") {
            var colIndexStartSplit = filteredColumns.length - config.fixedColumns.right.length;
            left =
                colIndex < colIndexStartSplit
                    ? -(0, main_1.getTotalWidth)(filteredColumns.slice(colIndex, colIndexStartSplit))
                    : (0, main_1.getTotalWidth)(filteredColumns.slice(colIndexStartSplit, colIndex));
        }
        else {
            for (var s = colIndex - 1; s >= 0; s--) {
                left += filteredColumns[s].$width;
            }
        }
        var isExpandingSpan = currRow.$items && colIndex === 0;
        var rowspanWithLastCol = colIndex === filteredColumns.length - 1;
        var colspanWithLastCol = colIndex + spanWidth === filteredColumns.length;
        var firstRightFixedCol = rightSplit && colIndex === filteredColumns.length - rightSplit;
        var allFixedSpanByBottomFixedRows = mode === types_1.Split.bottom && config.fixedRows.bottom.find(function (item) { return item.id === row; });
        var bottomFixedRowWithPartSpan = !!bottomSplit && rowIndex + spanHeight > rows.length - bottomSplit;
        var spanBeforeFixedCol = !!rightSplit && colIndex + spanWidth === filteredColumns.length - rightSplit;
        var css = currCol.header[0].text ? " dhx_span-cell" : " dhx_span-cell dhx_span-cell--title";
        css += isExpandingSpan ? " dhx_span-expand-cell" : "";
        css += cellCss ? " ".concat(cellCss) : "";
        css += spanCss ? " ".concat(spanCss) : "";
        css += rowIndex === 0 ? " dhx_span-first-row" : "";
        css += rowIndex + spanHeight === rows.length ? " dhx_grid__span_bottom--last-row" : "";
        css += colIndex === 0 || firstRightFixedCol ? " dhx_span-first-col" : "";
        css += rowspanWithLastCol || colspanWithLastCol ? " dhx_span-last-col" : "";
        css += spanWidth === 1 ? " dhx_span-".concat(currCol.type || "string", "-cell") : " dhx_span-string-cell";
        css += currCol.align ? " dhx_align-".concat(currCol.align) : " dhx_".concat(spanType, "-cell");
        css += allFixedSpanByBottomFixedRows ? " dhx_grid__span_bottom--all-fixed" : "";
        css += bottomFixedRowWithPartSpan ? " dhx_grid__span_bottom--part-fixed" : "";
        css += spanBeforeFixedCol ? " dhx_grid__span_right--before-fixed" : "";
        var width = void 0;
        if (spanWidth > 1) {
            var rColIndex = columns.findIndex(function (item) { return item.id === col; });
            width = (0, cells_1.getWidth)(columns, spans[i].colspan, rColIndex);
        }
        else {
            width = currCol.$width;
        }
        var height = void 0;
        if (spanHeight > 1) {
            height = (0, cells_1.getHeight)(rows, spans[i]);
            if (mode === types_1.Split.top && config.$renderFrom.endsWith("FixedCols")) {
                var delta = rowIndex + spanHeight - rows.length;
                if (delta > 0) {
                    var i_1 = config.fixedRows.top.length;
                    height += (0, main_1.getTotalHeight)(config.$data.slice(i_1, i_1 + delta));
                }
            }
        }
        else {
            height = currRow.$height;
        }
        var zIndex = null;
        var isEditable = (((_a = config.$editable) === null || _a === void 0 ? void 0 : _a.isSpan) && config.$editable.row === row && config.$editable.col === col) ||
            (currCol.type === "boolean" &&
                ((config.editable && ((_b = currCol.editable) !== null && _b !== void 0 ? _b : true)) || (!config.editable && currCol.editable)));
        if (isEditable) {
            var _d = config.topSplit, topSplit = _d === void 0 ? 0 : _d;
            var leftSplit = config.fixedColumns.left.length;
            var allFixedByCol = (leftSplit && colIndex + spanWidth <= leftSplit) ||
                (rightSplit && colIndex >= filteredColumns.length - rightSplit);
            var fixedByRow = rowIndex < topSplit || rowIndex + spanHeight > rows.length - bottomSplit;
            var allFixedByRow = (topSplit && rowIndex + spanHeight <= topSplit) ||
                (bottomSplit && rowIndex >= rows.length - bottomSplit);
            var fixedByCol = colIndex < leftSplit || colIndex + spanWidth > filteredColumns.length - rightSplit;
            if (config.$renderFrom === "render" ||
                (allFixedByCol && !fixedByRow) ||
                (allFixedByRow && !fixedByCol)) {
                var $height = config.$height, $scrollBarWidth = config.$scrollBarWidth, scroll_1 = config.scroll, fixedRows = config.fixedRows, fixedColumns = config.fixedColumns;
                var text = spans[i].text;
                var gap = 0;
                content = getEditorCell(currRow, currCol, config).toHTML(text);
                css += " dhx_span__editable";
                if (!allFixedByRow) {
                    var topFixedHeight = (0, main_1.getTotalHeight)(fixedRows.top);
                    var bottomFixedHeight = (0, main_1.getTotalHeight)(fixedRows.bottom);
                    var bodyHeight = $scrollBarWidth.yState
                        ? $height - config.$headerHeight - config.$footerHeight - $scrollBarWidth.x - render_1.BORDERS
                        : config.$totalHeight;
                    var bottomByScroll = top_1 + height - scroll_1.top;
                    var isOutsideByTop = top_1 - topFixedHeight < scroll_1.top;
                    var isOutsideByBottom = bottomByScroll > bodyHeight - bottomFixedHeight;
                    if (isOutsideByTop && isOutsideByBottom && $scrollBarWidth.xState)
                        gap = 1;
                    top_1 = isOutsideByTop
                        ? scroll_1.top + topFixedHeight - (topFixedHeight && !allFixedByCol ? 1 : 0)
                        : top_1;
                    if (isOutsideByBottom) {
                        height = bodyHeight - top_1 - bottomFixedHeight + scroll_1.top - gap;
                    }
                    else {
                        height = isOutsideByTop ? bottomByScroll - topFixedHeight : height;
                    }
                }
                if (config.$renderFrom === "render") {
                    zIndex = 12;
                    if (fixedColumns.left.find(function (i) { return i.id === col; })) {
                        left = scroll_1.left + (0, main_1.getTotalWidth)(fixedColumns.left.slice(0, colIndex));
                        if (!allFixedByCol) {
                            var minWidth = (0, main_1.getTotalWidth)(fixedColumns.left.slice(colIndex, leftSplit));
                            width = width - scroll_1.left > minWidth ? width - scroll_1.left : minWidth;
                        }
                    }
                    if (fixedRows.top.find(function (i) { return i.id === row; })) {
                        top_1 = scroll_1.top + (0, main_1.getTotalHeight)(fixedRows.top.slice(0, rowIndex));
                        if (!allFixedByRow) {
                            var minHeight = (0, main_1.getTotalHeight)(config.fixedRows.top.slice(rowIndex, config.topSplit));
                            height = height > 0 ? minHeight + height - gap : minHeight;
                        }
                    }
                    if (fixedColumns.right.find(function (col) {
                        return col === filteredColumns[filteredColumns.indexOf(currCol) + spanWidth - 1];
                    })) {
                        var totalLength = filteredColumns.length;
                        var reverseScrollState = getReverseScrollState(config);
                        var i_2 = totalLength - filteredColumns.indexOf(currCol) - spanWidth;
                        var minWidth = i_2
                            ? (0, main_1.getTotalWidth)(fixedColumns.right.slice(0, -i_2))
                            : (0, main_1.getTotalWidth)(fixedColumns.right);
                        var widthBeforeFixed = (0, main_1.getTotalWidth)(filteredColumns.slice(colIndex, totalLength - rightSplit));
                        left =
                            reverseScrollState.x > widthBeforeFixed
                                ? left - reverseScrollState.x + widthBeforeFixed
                                : left;
                        if (!allFixedByCol) {
                            width =
                                reverseScrollState.x < widthBeforeFixed
                                    ? width - reverseScrollState.x - 1
                                    : minWidth - 1;
                        }
                    }
                    if (fixedRows.bottom.find(function (row) {
                        return row === rows[rows.indexOf(currRow) + spanHeight - 1];
                    })) {
                        var totalLength = rows.length;
                        var reverseScrollState = getReverseScrollState(config);
                        var i_3 = totalLength - rows.indexOf(currRow) - spanHeight;
                        var minHeight = i_3
                            ? (0, main_1.getTotalHeight)(fixedRows.bottom.slice(0, -i_3))
                            : (0, main_1.getTotalHeight)(config.fixedRows.bottom);
                        var heightBeforeFixed = (0, main_1.getTotalHeight)(rows.slice(rowIndex, totalLength - bottomSplit));
                        top_1 =
                            reverseScrollState.y > heightBeforeFixed
                                ? top_1 - reverseScrollState.y + heightBeforeFixed
                                : top_1;
                        if (!allFixedByRow) {
                            height =
                                reverseScrollState.y < heightBeforeFixed
                                    ? minHeight + height - gap - (i_3 ? -1 : gap ? 0 : 1)
                                    : minHeight - (i_3 ? -1 : 1);
                        }
                    }
                }
                if (leftSplit === colIndex + 1) {
                    width -= 1;
                }
                if (colIndex === filteredColumns.length - rightSplit) {
                    left += 1;
                    width -= 1;
                }
            }
        }
        spanCells.push((0, dom_1.el)("div", {
            class: css,
            style: {
                width: width,
                height: height,
                top: top_1,
                left: left,
                zIndex: zIndex,
            },
            "data-dhx-col-id": col,
            "data-dhx-id": row,
            "aria-hidden": "true",
        }, [
            isExpandingSpan
                ? (0, dom_1.el)(".dhx_span-expand-cell-icon", {
                    class: currRow.$opened ? "dxi dxi-chevron-up" : "dxi dxi-chevron-down",
                    "data-dhx-id": currRow.id,
                    role: "button",
                    "aria-label": currRow.$opened ? "Collapse group" : "Expand group",
                    style: {
                        padding: "0 0 0 ".concat(4 + (0, data_1.getTreeCellWidthOffset)(currRow), "px"),
                    },
                })
                : null,
            content,
        ]));
    };
    for (var i = 0; i < spans.length; i++) {
        _loop_1(i);
    }
    return spanCells;
}
exports.getSpans = getSpans;
function getShifts(conf) {
    var columnsLeft = conf.filteredColumns.slice(0, conf.$positions.xStart);
    var rowsTop = conf.data.slice(0, conf.$positions.yStart);
    return {
        x: (0, main_1.getTotalWidth)(columnsLeft),
        y: (0, main_1.getTotalHeight)(rowsTop),
    };
}
exports.getShifts = getShifts;
function normalizeSpan(span, config, data) {
    var _a = config.topSplit, topSplit = _a === void 0 ? 0 : _a, _b = config.bottomSplit, bottomSplit = _b === void 0 ? 0 : _b, columns = config.columns;
    var column = span.column, row = span.row, colspan = span.colspan, rowspan = span.rowspan;
    var rows = data.getRawData(0, -1, null, 2);
    var filteredColumns = columns.filter(function (col) { return !col.hidden; });
    var colIndexStart = filteredColumns.findIndex(function (c) { return c.id == column; });
    var rowIndexStart = rows.findIndex(function (i) { return i.id == row; });
    var colIndexEnd = colIndexStart + (colspan ? (0, cells_1.getReducedColspan)(columns, column, colspan) - 1 : 0);
    var rowIndexEnd = rowIndexStart +
        (rowspan ? (0, cells_1.getReducedRowspan)(data.getInitialData(), rows, rowIndexStart, span) - 1 : 0);
    var colIndexVisibility = colIndexStart === -1 ? [] : [colIndexStart, colIndexEnd];
    var rowsIndexVisibility = rowIndexStart === -1 ? [] : [rowIndexStart, rowIndexEnd];
    var $renderFrom = [];
    if (colIndexStart !== -1 && rowIndexStart !== -1) {
        var leftSplit = (0, render_1.getCurrFixedCols)(config, types_1.Split.left).length;
        var rightSplit = (0, render_1.getCurrFixedCols)(config, types_1.Split.right).length;
        var fixedLeftByStart = colIndexStart < leftSplit;
        var fixedTopByStart = rowIndexStart < topSplit;
        var fixedRightByEnd = colIndexEnd >= filteredColumns.length - rightSplit;
        var fixedBottomByEnd = rowIndexEnd >= rows.length - bottomSplit;
        // if the span is not fully fixed
        if (colIndexEnd >= leftSplit &&
            rowIndexEnd >= topSplit &&
            colIndexStart < filteredColumns.length - rightSplit &&
            rowIndexStart < rows.length - bottomSplit) {
            $renderFrom.push("render");
        }
        // if the span is fixed left
        if (fixedLeftByStart) {
            $renderFrom.push("leftFixedCols");
        }
        // if the span is fixed right
        if (fixedRightByEnd) {
            $renderFrom.push("rightFixedCols");
        }
        // if the span isn't fixed left or right and fixed top
        if (fixedTopByStart && !fixedLeftByStart && !fixedRightByEnd) {
            $renderFrom.push("topFixedRows");
        }
        else if (fixedTopByStart && !$renderFrom.includes("render")) {
            $renderFrom.push("render");
        }
        // if the span isn't fixed left or right and fixed bottom
        if (fixedBottomByEnd && !fixedLeftByStart && !fixedRightByEnd) {
            $renderFrom.push("bottomFixedRows");
        }
        else if (fixedBottomByEnd && !$renderFrom.includes("render")) {
            $renderFrom.push("render");
        }
    }
    return __assign(__assign({}, span), { $renderFrom: $renderFrom, $rowsVisibility: rowsIndexVisibility, $colsVisibility: colIndexVisibility });
}
exports.normalizeSpan = normalizeSpan;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(78), exports);
__exportStar(__webpack_require__(144), exports);
__exportStar(__webpack_require__(79), exports);
__exportStar(__webpack_require__(57), exports);


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(85), exports);
__exportStar(__webpack_require__(170), exports);


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DataProxy = void 0;
var ajax_1 = __webpack_require__(51);
var DataProxy = /** @class */ (function () {
    function DataProxy(url, config) {
        if (config === void 0) { config = {}; }
        this.url = this._url = url;
        this.config = config;
    }
    DataProxy.prototype.updateUrl = function (url, params) {
        if (params === void 0) { params = {}; }
        this._url = this.url = url || this._url;
        this.url += this.url.includes("?") ? "&" : "?";
        for (var param in params) {
            this.config[param] = params[param];
            this.url += "".concat(param, "=").concat(encodeURIComponent(params[param]), "&");
        }
        this.url = this.url.slice(0, -1);
    };
    DataProxy.prototype.load = function () {
        return ajax_1.ajax.get(this.url, undefined, this.config);
    };
    DataProxy.prototype.save = function (data, mode) {
        switch (mode) {
            case "delete":
                return ajax_1.ajax.delete(this.url, data, this.config);
            case "update":
                return ajax_1.ajax.put(this.url, data, this.config);
            case "insert":
            default:
                return ajax_1.ajax.post(this.url, data, this.config);
        }
    };
    return DataProxy;
}());
exports.DataProxy = DataProxy;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ScrollView = exports.scrollViewConfig = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var html_1 = __webpack_require__(4);
exports.scrollViewConfig = {
    enable: false,
    autoHide: true,
    timeout: 1000,
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    scrollHandler: function () { },
};
var ScrollView = /** @class */ (function () {
    function ScrollView(getRootView, config) {
        var _a;
        if (config === void 0) { config = {}; }
        var _this = this;
        this.config = (0, core_1.extend)({
            enable: exports.scrollViewConfig.enable,
            autoHide: exports.scrollViewConfig.autoHide,
            timeout: exports.scrollViewConfig.timeout,
            scrollHandler: exports.scrollViewConfig.scrollHandler,
        }, config);
        this._wheelName = (0, html_1.isIE)() ? "onmousewheel" : "onwheel";
        this._getRootView = getRootView;
        this._scrollYTop = this._scrollXLeft = this._runnerYTop = this._runnerXLeft = this._runnerHeight = this._runnerWidth = 0;
        this._visibleYArea = this._visibleXArea = 1;
        this._scrollWidth = (0, html_1.getScrollbarWidth)();
        this._scrollHeight = (0, html_1.getScrollbarHeight)();
        this._handlers = (_a = {
                onscroll: function (e) {
                    _this.config.scrollHandler(e);
                    _this.update();
                }
            },
            _a[this._wheelName] = function (e) {
                var isY = !!(0, html_1.locateNodeByClassName)(e.target, "y-scroll");
                e.preventDefault();
                var sign = (e.deltaY || -e.wheelDelta) > 0 ? 1 : -1;
                var delta = sign * 40;
                var area = _this._getRefs().area;
                if (isY) {
                    var maxBottom = area.scrollHeight - _this._runnerHeight;
                    var newScrollTop = _this._scrollYTop + delta;
                    if (newScrollTop < 0) {
                        area.scrollTop = 0;
                    }
                    else if (newScrollTop > maxBottom) {
                        area.scrollTop = maxBottom;
                    }
                    else {
                        area.scrollTop = newScrollTop;
                    }
                }
                else {
                    var maxRight = area.scrollWidth - _this._runnerWidth;
                    var newScrollLeft = _this._scrollXLeft + delta;
                    if (newScrollLeft < 0) {
                        area.scrollLeft = 0;
                    }
                    else if (newScrollLeft > maxRight) {
                        area.scrollLeft = maxRight;
                    }
                    else {
                        area.scrollLeft = newScrollLeft;
                    }
                }
                _this.update();
            },
            _a.onmousedownRunner = function (mouseDownEv) {
                mouseDownEv.preventDefault();
                var isY = !!(0, html_1.locateNodeByClassName)(mouseDownEv.target, "y-scroll");
                var _a = _this._getRefs(), area = _a.area, runnerY = _a.runnerY, runnerX = _a.runnerX;
                var rect = area.getBoundingClientRect();
                var top = rect.top + window.pageYOffset;
                var bottom = rect.bottom + window.pageYOffset;
                var maxBottom = area.scrollHeight - _this._runnerHeight;
                var deltaY = mouseDownEv.pageY - runnerY.getBoundingClientRect().top - window.pageYOffset;
                var left = rect.left + window.pageXOffset;
                var right = rect.right + window.pageXOffset;
                var maxRight = area.scrollWidth - _this._runnerWidth;
                var deltaX = mouseDownEv.pageX - runnerX.getBoundingClientRect().left - window.pageXOffset;
                var mouseMove = function (e) {
                    if (isY) {
                        var y = e.pageY - deltaY;
                        if (y <= top) {
                            area.scrollTop = 0;
                        }
                        else if (y > bottom) {
                            area.scrollTop = maxBottom;
                        }
                        else {
                            area.scrollTop = (y - top) / _this._visibleYArea;
                        }
                    }
                    else {
                        var x = e.pageX - deltaX;
                        if (x <= left) {
                            area.scrollLeft = 0;
                        }
                        else if (x > right) {
                            area.scrollLeft = maxRight;
                        }
                        else {
                            area.scrollLeft = (x - left) / _this._visibleXArea;
                        }
                    }
                    _this.update();
                };
                var mouseUp = function () {
                    document.removeEventListener("mousemove", mouseMove);
                    document.removeEventListener("mouseup", mouseUp);
                    document.body.classList.remove("dhx-no-select");
                };
                document.body.classList.add("dhx-no-select");
                document.addEventListener("mousemove", mouseMove);
                document.addEventListener("mouseup", mouseUp);
            },
            _a.onmousedownArea = function (e) {
                if ((0, html_1.locateNodeByClassName)(e, "scroll-runner"))
                    return;
                e.preventDefault();
                var isY = !!(0, html_1.locateNodeByClassName)(e.target, "y-scroll");
                var _a = _this._getRefs(), area = _a.area, runnerY = _a.runnerY, runnerX = _a.runnerX;
                if (isY) {
                    area.scrollTop += (e.pageY - runnerY.getBoundingClientRect().top) / _this._visibleYArea;
                }
                else {
                    area.scrollLeft += (e.pageX - runnerX.getBoundingClientRect().left) / _this._visibleXArea;
                }
                _this.update();
            },
            _a.onmouseenter = function (e) {
                if ((0, html_1.locateNodeByClassName)(e, "scroll-runner"))
                    return;
                var refs = _this._getRefs();
                if (!refs) {
                    return;
                }
                var isY = !!(0, html_1.locateNodeByClassName)(e.target, "y-scroll");
                var areaX = refs.areaX, areaY = refs.areaY;
                if (isY && _this._runnerHeight > 0) {
                    areaY.style.background = "#eee";
                }
                else if (!isY && _this._runnerWidth > 0) {
                    areaX.style.background = "#eee";
                }
            },
            _a.onmouseleave = function (e) {
                if ((0, html_1.locateNodeByClassName)(e, "scroll-runner"))
                    return;
                var refs = _this._getRefs();
                if (!refs) {
                    return;
                }
                var isY = !!(0, html_1.locateNodeByClassName)(e.target, "y-scroll");
                var areaX = refs.areaX, areaY = refs.areaY;
                if (isY && _this._runnerHeight > 0) {
                    areaY.style.background = "transparent";
                }
                else if (!isY && _this._runnerWidth > 0) {
                    areaX.style.background = "transparent";
                }
            },
            _a);
    }
    ScrollView.prototype.enable = function () {
        this.config.enable = true;
        this._getRootView().redraw();
    };
    ScrollView.prototype.disable = function () {
        this.config.enable = false;
        this._getRootView().redraw();
    };
    ScrollView.prototype.render = function (element, uid) {
        var _a, _b;
        var _this = this;
        if (uid === void 0) { uid = ""; }
        if (!this.config.enable || !element.length) {
            return element;
        }
        if (uid)
            this._uid = uid;
        var scrollView = this.config.enable
            ? [
                (0, dom_1.el)(".y-scroll", (_a = {},
                    _a[this._wheelName] = this._handlers[this._wheelName],
                    _a._ref = uid ? "scroll-y-area-".concat(uid) : "scroll-y-area",
                    _a.onmousedown = this._handlers.onmousedownArea,
                    _a.onmouseenter = this._handlers.onmouseenter,
                    _a.onmouseleave = this._handlers.onmouseleave,
                    _a.style = {
                        width: "6px",
                        height: "100%",
                        right: 0,
                        top: 0,
                        position: "absolute",
                    },
                    _a), [
                    (0, dom_1.el)(".scroll-runner", {
                        _ref: uid ? "scroll-y-runner-".concat(uid) : "scroll-y-runner",
                        onmousedown: this._handlers.onmousedownRunner,
                        style: {
                            height: this._runnerHeight + "px",
                            top: this._runnerYTop,
                        },
                    }),
                ]),
                (0, dom_1.el)(".x-scroll", (_b = {},
                    _b[this._wheelName] = this._handlers[this._wheelName],
                    _b._ref = uid ? "scroll-x-area-".concat(uid) : "scroll-x-area",
                    _b.onmousedown = this._handlers.onmousedownArea,
                    _b.onmouseenter = this._handlers.onmouseenter,
                    _b.onmouseleave = this._handlers.onmouseleave,
                    _b.style = {
                        width: "100%",
                        height: "6px",
                        left: 0,
                        bottom: 0,
                        position: "absolute",
                    },
                    _b), [
                    (0, dom_1.el)(".scroll-runner", {
                        _ref: uid ? "scroll-x-runner-".concat(uid) : "scroll-x-runner",
                        onmousedown: this._handlers.onmousedownRunner,
                        style: {
                            width: this._runnerWidth + "px",
                            left: this._runnerXLeft,
                        },
                    }),
                ]),
            ]
            : null;
        return (0, dom_1.el)(".scroll-view-wrapper", [
            (0, dom_1.el)(".scroll-view", {
                onscroll: this._handlers.onscroll,
                _ref: uid ? "scroll-view-".concat(uid) : "scroll-view",
                _hooks: {
                    didInsert: function () {
                        _this.update();
                    },
                    didRecycle: function () {
                        _this.update();
                    },
                },
                style: {
                    width: "calc(100% + ".concat(this._scrollWidth, "px)"),
                    height: "calc(100% + ".concat(this._scrollHeight, "px)"),
                },
            }, element),
        ].concat(scrollView));
    };
    ScrollView.prototype.update = function () {
        var refs = this._getRefs();
        if (!refs) {
            return;
        }
        var area = refs.area, areaX = refs.areaX, areaY = refs.areaY, runnerY = refs.runnerY, runnerX = refs.runnerX;
        this._visibleYArea = area.clientHeight / area.scrollHeight;
        this._visibleXArea = area.clientWidth / area.scrollWidth;
        this._scrollYTop = area.scrollTop;
        this._scrollXLeft = area.scrollLeft;
        this._runnerYTop = this._scrollYTop * this._visibleYArea;
        this._runnerXLeft = this._scrollXLeft * this._visibleXArea;
        this._runnerHeight = this._visibleYArea < 1 ? area.clientHeight * this._visibleYArea : 0;
        this._runnerWidth = this._visibleXArea < 1 ? area.clientWidth * this._visibleXArea : 0;
        var initialTop = runnerY.style.top;
        var initialLeft = runnerX.style.left;
        // update dom
        runnerY.style.opacity = 1;
        runnerY.style.top = this._runnerYTop + "px";
        runnerY.style.height = this._runnerHeight + "px";
        runnerX.style.opacity = 1;
        runnerX.style.left = this._runnerXLeft + "px";
        runnerX.style.width = this._runnerWidth + "px";
        if (initialTop !== runnerY.style.top) {
            areaY.style.opacity = 0.9;
            areaY.style.width = "10px";
        }
        if (initialLeft !== runnerX.style.left) {
            areaX.style.opacity = 0.9;
            areaX.style.height = "10px";
        }
        if (this.config.autoHide) {
            !this._autoHideFunc &&
                (this._autoHideFunc = (0, core_1.debounce)(function () {
                    runnerY.style.opacity = 0;
                    areaY.style.width = "6px";
                    runnerX.style.opacity = 0;
                    areaX.style.height = "6px";
                }, this.config.timeout));
        }
        else {
            this._autoHideFunc = (0, core_1.debounce)(function () {
                areaY.style.width = "6px";
                areaX.style.height = "6px";
            }, this.config.timeout);
        }
        this._autoHideFunc();
    };
    ScrollView.prototype._getRefs = function () {
        var rootView = this._getRootView();
        var refsCheck = !!(rootView.refs["scroll-view"] &&
            (rootView.refs["scroll-x-runner"] || rootView.refs["scroll-y-runner"]));
        var refsIdCheck = !!(this._uid &&
            rootView.refs["scroll-view-".concat(this._uid)] &&
            (rootView.refs["scroll-x-runner-".concat(this._uid)] || rootView.refs["scroll-y-runner-".concat(this._uid)]));
        if (rootView.refs) {
            if (refsCheck) {
                return {
                    area: rootView.refs["scroll-view"].el,
                    areaY: rootView.refs["scroll-y-area"].el,
                    areaX: rootView.refs["scroll-x-area"].el,
                    runnerY: rootView.refs["scroll-y-runner"].el,
                    runnerX: rootView.refs["scroll-x-runner"].el,
                };
            }
            else if (refsIdCheck) {
                return {
                    area: rootView.refs["scroll-view-".concat(this._uid)].el,
                    areaY: rootView.refs["scroll-y-area-".concat(this._uid)].el,
                    areaX: rootView.refs["scroll-x-area-".concat(this._uid)].el,
                    runnerY: rootView.refs["scroll-y-runner-".concat(this._uid)].el,
                    runnerX: rootView.refs["scroll-x-runner-".concat(this._uid)].el,
                };
            }
        }
    };
    return ScrollView;
}());
exports.ScrollView = ScrollView;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNavbarButtonCSS = exports.navbarComponentMixin = exports.getIcon = exports.getCount = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
function getCount(item, widgetClass, isLimited) {
    var countColor = {
        danger: " dhx_navbar-count--color_danger",
        secondary: " dhx_navbar-count--color_secondary",
        primary: " dhx_navbar-count--color_primary",
        success: " dhx_navbar-count--color_success",
    }[item.countColor] || " dhx_navbar-count--color_danger";
    return (0, dom_1.el)(".dhx_navbar-count", {
        class: widgetClass +
            countColor +
            (!isLimited && parseInt(item.count, 10) > 99 ? " dhx_navbar-count--overlimit" : ""),
    }, isLimited && parseInt(item.count, 10) > 99 ? "99+" : item.count);
}
exports.getCount = getCount;
function getIcon(iconName, type) {
    if (iconName === void 0) { iconName = ""; }
    if (iconName.startsWith("dxi")) {
        iconName = "dxi " + iconName;
    }
    return (0, dom_1.el)("span", {
        class: "dhx_".concat(type, "__icon ").concat(iconName),
        "aria-hidden": "true",
    });
}
exports.getIcon = getIcon;
var getNavbarItemClass = function (widgetName, item, asMenuItem) {
    var baseClassName = "";
    var resultClassName = "";
    if (asMenuItem) {
        baseClassName = "dhx_menu-item";
    }
    else {
        baseClassName = "dhx_" + widgetName + "__item";
    }
    resultClassName = baseClassName + (item.css ? " " + item.css : "");
    if (item.type === "spacer" || item.type === "separator") {
        resultClassName += " ".concat(baseClassName, "--").concat(item.type);
    }
    if (item.type === "button" && widgetName === "sidebar" && !item.icon) {
        resultClassName += " dhx_navbar-item--colapse_hidden";
    }
    return resultClassName;
};
function navbarComponentMixin(widgetName, item, asMenuItem, body) {
    var getAriaAttrs = function (type) {
        var attrs = {
            role: "none",
        };
        if (type === "separator") {
            attrs.role = "separator";
            attrs["aria-orientation"] = "vertical";
        }
        return attrs;
    };
    var itemClass = getNavbarItemClass(widgetName, item, asMenuItem);
    var hasRibbonSize = widgetName === "ribbon" && (item.type === "navItem" || item.type === "imageButton");
    return (0, dom_1.el)("li", __assign({ _key: item.id, class: itemClass +
            (item.icon && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.src && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.size && hasRibbonSize ? " dhx_ribbon__item--" + item.size : ""), ".innerHTML": item.type === "customHTML" ? item.html : undefined, "data-dhx-id": item.type === "customHTML" ? item.id : undefined }, getAriaAttrs(item.type)), item.type !== "customHTML" ? [body] : undefined);
}
exports.navbarComponentMixin = navbarComponentMixin;
function getNavbarButtonCSS(_a, widgetName) {
    var color = _a.color, size = _a.size, view = _a.view, full = _a.full, icon = _a.icon, circle = _a.circle, loading = _a.loading, value = _a.value, active = _a.active, count = _a.count;
    var colorsCss = {
        danger: " dhx_button--color_danger",
        secondary: " dhx_button--color_secondary",
        primary: " dhx_button--color_primary",
        success: " dhx_button--color_success",
    }[color] || " dhx_button--color_primary";
    var sizeCss = {
        small: " dhx_button--size_small",
        medium: " dhx_button--size_medium",
    }[size] || " dhx_button--size_medium";
    var viewCss = {
        flat: " dhx_button--view_flat",
        link: " dhx_button--view_link",
    }[view] || " dhx_button--view_flat";
    var fullCss = full ? " dhx_button--width_full" : "";
    var circleCss = circle ? " dhx_button--circle" : "";
    var loadingCss = loading ? " dhx_button--loading" : "";
    var iconViewCss = icon && !value ? " dhx_button--icon" : "";
    var activeCss = active ? " dhx_button--active" : "";
    var countCss = (0, core_1.isDefined)(count) ? " dhx_button--count" : "";
    return (colorsCss + sizeCss + viewCss + fullCss + circleCss + loadingCss + activeCss + iconViewCss + countCss);
}
exports.getNavbarButtonCSS = getNavbarButtonCSS;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultMode = exports.FileStatus = exports.ProgressBarEvents = exports.UploaderEvents = void 0;
var UploaderEvents;
(function (UploaderEvents) {
    UploaderEvents["uploadBegin"] = "uploadbegin";
    UploaderEvents["beforeUploadFile"] = "beforeuploadfile";
    UploaderEvents["uploadFile"] = "uploadfile";
    UploaderEvents["uploadFail"] = "uploadfail";
    UploaderEvents["uploadComplete"] = "uploadcomplete";
    UploaderEvents["uploadProgress"] = "uploadprogress";
})(UploaderEvents || (exports.UploaderEvents = UploaderEvents = {}));
var ProgressBarEvents;
(function (ProgressBarEvents) {
    ProgressBarEvents["cancel"] = "cancel";
})(ProgressBarEvents || (exports.ProgressBarEvents = ProgressBarEvents = {}));
var FileStatus;
(function (FileStatus) {
    FileStatus["queue"] = "queue";
    FileStatus["uploaded"] = "uploaded";
    FileStatus["failed"] = "failed";
    FileStatus["inprogress"] = "inprogress";
})(FileStatus || (exports.FileStatus = FileStatus = {}));
var VaultMode;
(function (VaultMode) {
    VaultMode["grid"] = "grid";
    VaultMode["list"] = "list";
})(VaultMode || (exports.VaultMode = VaultMode = {}));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(129), exports);
__exportStar(__webpack_require__(76), exports);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionEvents = void 0;
var SelectionEvents;
(function (SelectionEvents) {
    SelectionEvents["beforeUnSelect"] = "beforeunselect";
    SelectionEvents["afterUnSelect"] = "afterunselect";
    SelectionEvents["beforeSelect"] = "beforeselect";
    SelectionEvents["afterSelect"] = "afterselect";
})(SelectionEvents || (exports.SelectionEvents = SelectionEvents = {}));


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationBarEvents = exports.DataEvents = void 0;
var ts_data_1 = __webpack_require__(13);
Object.defineProperty(exports, "DataEvents", { enumerable: true, get: function () { return ts_data_1.DataEvents; } });
var NavigationBarEvents;
(function (NavigationBarEvents) {
    NavigationBarEvents["inputCreated"] = "inputCreated";
    NavigationBarEvents["click"] = "click";
    NavigationBarEvents["openMenu"] = "openMenu";
    NavigationBarEvents["beforeHide"] = "beforeHide";
    NavigationBarEvents["afterHide"] = "afterHide";
    NavigationBarEvents["inputFocus"] = "inputFocus";
    NavigationBarEvents["inputBlur"] = "inputBlur";
    NavigationBarEvents["inputChange"] = "inputChange";
    NavigationBarEvents["input"] = "input";
    NavigationBarEvents["keydown"] = "keydown";
})(NavigationBarEvents || (exports.NavigationBarEvents = NavigationBarEvents = {}));


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionsManager = exports.actions = void 0;
var core_1 = __webpack_require__(0);
var types_1 = __webpack_require__(6);
var AddColumn_1 = __webpack_require__(174);
var AddRow_1 = __webpack_require__(175);
var AddSheet_1 = __webpack_require__(176);
var DeleteColumn_1 = __webpack_require__(177);
var DeleteRow_1 = __webpack_require__(178);
var DeleteSheet_1 = __webpack_require__(179);
var GroupAction_1 = __webpack_require__(180);
var GroupColAction_1 = __webpack_require__(181);
var GroupRowAction_1 = __webpack_require__(182);
var LockCell_1 = __webpack_require__(183);
var RemoveCellStyles_1 = __webpack_require__(184);
var RenameSheet_1 = __webpack_require__(185);
var SetCellFormat_1 = __webpack_require__(186);
var SetCellStyle_1 = __webpack_require__(187);
var SetCellValue_1 = __webpack_require__(188);
var Clear_1 = __webpack_require__(189);
var ClearSheet_1 = __webpack_require__(190);
var ResizeCol_1 = __webpack_require__(191);
var ResizeRow_1 = __webpack_require__(192);
var main_1 = __webpack_require__(2);
var SetValidation_1 = __webpack_require__(193);
var SortCells_1 = __webpack_require__(194);
var InsertLink_1 = __webpack_require__(195);
var FitCol_1 = __webpack_require__(196);
var Filter_1 = __webpack_require__(197);
var Merge_1 = __webpack_require__(198);
var Unmerge_1 = __webpack_require__(199);
exports.actions = {
    setCellStyle: SetCellStyle_1.SetCellStyle,
    setCellValue: SetCellValue_1.SetCellValue,
    setCellFormat: SetCellFormat_1.SetCellFormat,
    removeCellStyles: RemoveCellStyles_1.RemoveCellStyles,
    lockCell: LockCell_1.LockCell,
    deleteRow: DeleteRow_1.DeleteRow,
    addRow: AddRow_1.AddRow,
    deleteColumn: DeleteColumn_1.DeleteColumn,
    addColumn: AddColumn_1.AddColumn,
    groupAction: GroupAction_1.GroupAction,
    groupRowAction: GroupRowAction_1.GroupRowAction,
    groupColAction: GroupColAction_1.GroupColAction,
    addSheet: AddSheet_1.AddSheet,
    deleteSheet: DeleteSheet_1.DeleteSheet,
    renameSheet: RenameSheet_1.RenameSheet,
    clear: Clear_1.Clear,
    clearSheet: ClearSheet_1.ClearSheet,
    resizeCol: ResizeCol_1.ResizeCol,
    resizeRow: ResizeRow_1.ResizeRow,
    setValidation: SetValidation_1.SetValidation,
    sortCells: SortCells_1.SortCells,
    insertLink: InsertLink_1.InsertLink,
    fitColumn: FitCol_1.FitColumn,
    filter: Filter_1.Filter,
    merge: Merge_1.Merge,
    unmerge: Unmerge_1.Unmerge,
};
function getActionsPack(commandsPack, baseConfig, events) {
    var _prevCellMeta = {};
    var page;
    var _prevPageMeta = {};
    var actionsPack = commandsPack.map(function (config) {
        var action = config.groupAction || config.action;
        if (!page)
            page = config.page;
        if (action) {
            var cells = (0, main_1.getCellsArray)(config.cell, baseConfig.grid);
            cells.forEach(function (cell) {
                if (!_prevCellMeta[cell]) {
                    var cellMeta = __assign({}, (0, main_1.getCellInfo)(cell, config.page, baseConfig.grid));
                    _prevCellMeta[cell] = cellMeta;
                }
            });
            _prevPageMeta = __assign({}, config.page.getMeta());
            return new exports.actions[action](__assign(__assign({}, config), baseConfig));
        }
    });
    return {
        do: function () {
            var actionConfig = actionsPack.map(function (action) { return (0, main_1.cleanActionConfig)(action.config); });
            if (!events.fire(types_1.SpreadsheetEvents.beforeAction, [types_1.Actions.groupAction, actionConfig]))
                return;
            actionsPack.map(function (action) { return action.do(); });
            events.fire(types_1.SpreadsheetEvents.afterAction, [types_1.Actions.groupAction, actionConfig]);
        },
        undo: function () {
            var actionConfig = actionsPack.map(function (action) { return (0, main_1.cleanActionConfig)(action.config); });
            page.setMeta(_prevPageMeta);
            if (!events.fire(types_1.SpreadsheetEvents.beforeAction, [types_1.Actions.groupAction, actionConfig]))
                return;
            Object.keys(_prevCellMeta).forEach(function (cell) {
                var _a = (0, main_1.getCellIds)(cell, baseConfig.grid), row = _a.row, col = _a.col;
                var prevmeta = _prevCellMeta[cell];
                var meta = page.getCell(row, col) || {};
                var newMeta = {};
                Object.keys(meta).forEach(function (key) {
                    newMeta[key] = prevmeta[key] || null;
                });
                page.setCell(row, col, newMeta);
            });
            events.fire(types_1.SpreadsheetEvents.afterAction, [types_1.Actions.groupAction, actionConfig]);
        },
        config: baseConfig,
    };
}
var ActionsManager = /** @class */ (function () {
    function ActionsManager(config) {
        this._config = config;
        this._actions = [];
        this._redoActions = [];
        this._sheets = [];
        this._redoSheets = [];
        this._dataStore = config.dataStore;
        this._events = config.events;
    }
    ActionsManager.prototype.execute = function (command, config) {
        if (Array.isArray(command)) {
            var actionsPack = getActionsPack(command, this._config, this._events);
            actionsPack.do();
            this._actions.push({ command: types_1.Actions.groupAction, action: actionsPack });
            this._sheets.push(this._config.spreadsheet.activeSheetName);
            return;
        }
        (0, core_1.extend)(config, this._config);
        if (exports.actions[command]) {
            var action = new exports.actions[command](config);
            if (!this._events.fire(types_1.SpreadsheetEvents.beforeAction, [command, (0, main_1.cleanActionConfig)(config)]))
                return;
            action.do();
            if (config.action === types_1.Actions.addSheet ||
                config.action === types_1.Actions.deleteSheet ||
                config.action === types_1.Actions.renameSheet) {
                this._sheets.push(null);
            }
            else {
                this._sheets.push(this._config.spreadsheet.activeSheetName);
            }
            this._actions.push({ command: command, action: action });
            if (command !== types_1.Actions.resizeCol && command !== types_1.Actions.resizeRow) {
                this._events.fire(types_1.SpreadsheetEvents.afterAction, [command, (0, main_1.cleanActionConfig)(config)]);
            }
        }
    };
    ActionsManager.prototype.undo = function () {
        var item = this._actions[this._actions.length - 1];
        if (item) {
            var command = item.command, action = item.action;
            if (command !== types_1.Actions.groupAction &&
                !this._events.fire(types_1.SpreadsheetEvents.beforeAction, [
                    command,
                    (0, main_1.cleanActionConfig)(action.config),
                    true,
                ]))
                return;
            this._actions.pop();
            action.undo();
            var sheet = this._sheets.pop();
            if (sheet) {
                var activePage = this._dataStore.getPage(sheet);
                this._config.spreadsheet._changeSheet(activePage.getMeta().toolbarId);
            }
            this._redoActions.push({ command: command, action: action });
            this._redoSheets.push(sheet);
            if (command !== types_1.Actions.resizeCol &&
                command !== types_1.Actions.resizeRow &&
                command !== types_1.Actions.groupAction) {
                this._events.fire(types_1.SpreadsheetEvents.afterAction, [command, (0, main_1.cleanActionConfig)(action.config)]);
            }
        }
    };
    ActionsManager.prototype.redo = function () {
        var item = this._redoActions[this._redoActions.length - 1];
        if (item) {
            var command = item.command, action = item.action;
            if (command !== types_1.Actions.groupAction &&
                !this._events.fire(types_1.SpreadsheetEvents.beforeAction, [
                    command,
                    (0, main_1.cleanActionConfig)(action.config),
                    true,
                ]))
                return;
            this._redoActions.pop();
            action.do();
            var sheet = this._redoSheets.pop();
            if (sheet) {
                var activePage = this._dataStore.getPage(sheet);
                this._config.spreadsheet._changeSheet(activePage.getMeta().toolbarId);
            }
            this._actions.push({ command: command, action: action });
            this._sheets.push(sheet);
            if (command !== types_1.Actions.resizeCol &&
                command !== types_1.Actions.resizeRow &&
                command !== types_1.Actions.groupAction) {
                this._events.fire(types_1.SpreadsheetEvents.afterAction, [command, (0, main_1.cleanActionConfig)(action.config)]);
            }
        }
    };
    return ActionsManager;
}());
exports.ActionsManager = ActionsManager;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeToolbarFormat = exports.getFormatsDropdown = exports.getFormatItem = exports.getToggledValue = exports.updateToolbar = exports.getColorpickerTemplate = void 0;
var en_1 = __webpack_require__(11);
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
function getColorpickerTemplate(color, icon) {
    return "<div class=\"dxi dxi-".concat(icon, " dhx_toolbar-button__icon dhx_toolbar-button__colorpicker\" style=\"border-bottom: solid 3px ").concat(color, "\"></div>");
}
exports.getColorpickerTemplate = getColorpickerTemplate;
function updateToolbar(toolbar, menu, page, grid) {
    var _a;
    var _b = page.getMeta(), merged = _b.merged, focusedCell = _b.focusedCell, selectedCells = _b.selectedCells;
    if (!selectedCells || !focusedCell)
        return;
    var selected = selectedCells.join(",");
    var cellInfo = __assign({ locked: false, format: (0, format_1.getFormat)("common") }, (0, main_1.getCellInfo)(focusedCell.cell, page, grid));
    var css = [];
    var cells = (0, main_1.getCellsArray)(selected, grid);
    var isNotSpaned = !!cells.find(function (c) { return !(0, main_1.isCellSpaned)(c, merged); });
    if (cellInfo.css) {
        css = typeof cellInfo.css === "string" ? cellInfo.css.split(" ") : cellInfo.css;
    }
    var customCssStyles = {};
    for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
        var styles_1 = css_1[_i];
        customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(styles_1));
    }
    var styles = __assign({ color: "#4C4C4C", background: "#FFF", "text-align": "left", "vertical-align": "center", "font-style": "", "font-weight": "", "text-decoration": "", multiline: "clip" }, customCssStyles);
    var updateStyles = function (css) {
        var _loop_2 = function (key) {
            switch (key) {
                case "color":
                    toolbar.data.update(key, {
                        html: getColorpickerTemplate(css[key] || "#4C4C4C", "format-color-text"),
                    });
                    break;
                case "background":
                case "background-color":
                    toolbar.data.update("background", {
                        html: getColorpickerTemplate(css[key] || "#FFF", "format-color-fill"),
                    });
                    break;
                case "text-align":
                    var halign_1 = "halign-".concat(css[key]);
                    if (!toolbar.data.exists("halign") || !toolbar.data.exists(halign_1))
                        return { value: void 0 };
                    toolbar.data.update("halign", { icon: toolbar.data.getItem(halign_1).icon });
                    var conf_halign_1 = {};
                    var parent_halign = toolbar.data.getItem("halign");
                    parent_halign.items.forEach(function (i) {
                        conf_halign_1[i.id] = false;
                        menu.data.update(i.id, { active: i.id === halign_1 });
                    });
                    conf_halign_1[halign_1] = true;
                    toolbar.setState(conf_halign_1);
                    break;
                case "vertical-align":
                    var valign_1 = "valign-".concat(css[key]);
                    if (!toolbar.data.exists("valign") || !toolbar.data.exists(valign_1))
                        return { value: void 0 };
                    var conf_valign_1 = {};
                    var parent_valign = toolbar.data.getItem("valign");
                    parent_valign.items.forEach(function (i) {
                        conf_valign_1[i.id] = false;
                        menu.data.update(i.id, { active: i.id === valign_1 });
                    });
                    conf_valign_1[valign_1] = true;
                    toolbar.setState(conf_valign_1);
                    toolbar.data.update("valign", { icon: toolbar.data.getItem(valign_1).icon });
                    break;
                case "multiline":
                    if (!toolbar.data.exists("multiline"))
                        return { value: void 0 };
                    var multiline_1 = "multiline-".concat(css[key]);
                    var conf_multiline_1 = {};
                    var parent_multiline = toolbar.data.getItem("multiline");
                    parent_multiline.items.forEach(function (i) {
                        conf_multiline_1[i.id] = false;
                        menu.data.update(i.id, { active: i.id === multiline_1 });
                    });
                    conf_multiline_1[multiline_1] = true;
                    toolbar.setState(conf_multiline_1);
                    toolbar.data.update("multiline", { icon: toolbar.data.getItem(multiline_1).icon });
                    break;
                case "font-weight":
                    toolbar.data.update("font-weight-bold", {
                        active: css[key] == "bold" || css[key] == "700",
                    });
                    menu.data.update("font-weight-bold", { active: css[key] == "bold" || css[key] == "700" });
                    break;
                case "font-style":
                    toolbar.data.update("font-style-italic", {
                        active: css[key] === "italic",
                    });
                    menu.data.update("font-style-italic", { active: css[key] === "italic" });
                    break;
                case "text-decoration":
                    var uderlineConfig = { active: css[key].includes("underline") };
                    toolbar.data.update("text-decoration-underline", uderlineConfig);
                    menu.data.update("text-decoration-underline", uderlineConfig);
                    var lineThroughConfig = { active: css[key].includes("line-through") };
                    toolbar.data.update("text-decoration-line-through", lineThroughConfig);
                    menu.data.update("text-decoration-line-through", lineThroughConfig);
                    break;
                default:
                    break;
            }
        };
        for (var key in css) {
            var state_1 = _loop_2(key);
            if (typeof state_1 === "object")
                return state_1.value;
        }
    };
    var text = en_1.default[isNotSpaned ? "merge" : "unmerge"];
    var mergeIcon = "dxi dxi-table-".concat(isNotSpaned ? "merge" : "split", "-cell").concat(isNotSpaned ? "s" : "");
    toolbar.data.update("merge", {
        active: !isNotSpaned,
        icon: mergeIcon,
        tooltip: text,
    });
    menu.data.update("merge", {
        value: text,
        tooltip: text,
    });
    updateStyles(styles);
    // reset format menu state
    var formatItem = toolbar.data.getItem("format");
    if (formatItem) {
        formatItem.items.map(function (item) { return (item.active = false); });
    }
    var _loop_1 = function (key) {
        switch (key) {
            case "locked":
                if (toolbar.data.getItem("lock")) {
                    toolbar.data.update("lock", {
                        active: cellInfo[key],
                    });
                }
                break;
            case "format":
                // eslint-disable-next-line no-case-declarations
                var id_1 = (0, format_1.getDefaultFormatsMap)()[(_a = cellInfo[key]) === null || _a === void 0 ? void 0 : _a.mask] || "common";
                var item = toolbar.data.getItem(id_1);
                if (toolbar.data.getItem("format")) {
                    toolbar.data.update("format", {
                        value: item ? (0, format_1.getFormat)(id_1).name : toolbar.data.getItem("custom_format").value,
                    });
                }
                if (item) {
                    toolbar.data.update(id_1, {
                        active: true,
                    });
                }
                if (toolbar.data.getItem("custom_format")) {
                    toolbar.data.update("custom_format", {
                        hidden: !!item,
                        active: !item,
                    });
                }
                var formats = menu.data.getItems("format");
                formats.forEach(function (f) {
                    menu.data.update(f.id, { active: id_1 === f.id });
                });
                break;
            default:
                break;
        }
    };
    for (var key in cellInfo) {
        _loop_1(key);
    }
    for (var key in page) {
        switch (key) {
            case "filter":
                if (toolbar.data.getItem("filter")) {
                    toolbar.data.update("filter", {
                        active: page[key],
                    });
                }
                break;
        }
    }
}
exports.updateToolbar = updateToolbar;
function getToggledValue(page, cell, name, value, grid) {
    var info = (0, main_1.getCellInfo)(cell, page, grid);
    var css = [];
    if (info.css) {
        css = typeof info.css === "string" ? info.css.split(" ") : info.css;
    }
    var customCssStyles = {};
    for (var _i = 0, css_2 = css; _i < css_2.length; _i++) {
        var styles = css_2[_i];
        customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(styles));
    }
    var v = customCssStyles[name];
    var prevValue = !v || v === "none" ? "" : v;
    var newVal = prevValue.includes(value) ? prevValue.split(value).join("") : "".concat(prevValue, " ").concat(value);
    if (name === "text-decoration" && !newVal) {
        newVal = "none";
    }
    return newVal.trim();
}
exports.getToggledValue = getToggledValue;
function getFormatItem(format, example) {
    if (example === void 0) { example = 1500.31; }
    var name = format.name;
    var val = (0, format_1.getFormattedValue)(example, format);
    return "<div class=\"dhx_format-item\"><span class=\"dhx_format-name\">".concat(en_1.default[name] ||
        name, " </span><span class=\"dhx_format-helper\">").concat(val, "</span></div>");
}
exports.getFormatItem = getFormatItem;
function getFormatsDropdown(config) {
    var formats = config.formats;
    return __spreadArray(__spreadArray([], formats.map(function (format) { return normalizeToolbarFormat(format); }), true), [
        {
            id: "custom_format",
            css: "dhx_format-name-wrap",
            twoState: true,
            hidden: true,
            value: en_1.default.custom,
        },
    ], false);
}
exports.getFormatsDropdown = getFormatsDropdown;
function normalizeToolbarFormat(format) {
    return {
        id: format.id,
        css: "dhx_format-name-wrap",
        twoState: true,
        html: getFormatItem(format, format.example),
    };
}
exports.normalizeToolbarFormat = normalizeToolbarFormat;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowEvents = void 0;
var WindowEvents;
(function (WindowEvents) {
    WindowEvents["resize"] = "resize";
    WindowEvents["headerDoubleClick"] = "headerdoubleclick";
    WindowEvents["move"] = "move";
    WindowEvents["afterShow"] = "aftershow";
    WindowEvents["afterHide"] = "afterhide";
    WindowEvents["beforeShow"] = "beforeshow";
    WindowEvents["beforeHide"] = "beforehide";
})(WindowEvents || (exports.WindowEvents = WindowEvents = {}));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(86), exports);
__exportStar(__webpack_require__(216), exports);


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = exports.Validation = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var helper_1 = __webpack_require__(7);
var label_1 = __webpack_require__(14);
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(5);
var Validation;
(function (Validation) {
    Validation["empty"] = "";
    Validation["validEmail"] = "email";
    Validation["validInteger"] = "integer";
    Validation["validNumeric"] = "numeric";
    Validation["validAlphaNumeric"] = "alphanumeric";
    Validation["validIPv4"] = "IPv4";
})(Validation || (exports.Validation = Validation = {}));
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = [
            "inputType",
            "required",
            "validation",
            "icon",
            "placeholder",
            "autocomplete",
            "readOnly",
            "maxlength",
            "minlength",
            "min",
            "max",
            "step",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._initView(config);
        _this._initHandlers();
        return _this;
    }
    Input.prototype.destructor = function () {
        this.events && this.events.clear();
        this.events = this._uid = this._propsItem = this._propsItem = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    Input.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Input.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Input.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    Input.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    Input.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Input.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Input.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Input.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Input.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var value = args.length ? args[0] : this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = this.config.validation
            ? (0, helper_1.validateInput)(value, this.config.validation)
            : (0, helper_1.baseInputValidate)(value, this.config);
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            !this.isFocused() && this.paint();
        }
        return valid;
    };
    Input.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    Input.prototype.clear = function () {
        if (this.config.value === "" || !this.events.fire(types_1.ItemEvent.beforeChange, [""]))
            return;
        this.config.value = "";
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
    };
    Input.prototype.setValue = function (value) {
        if (typeof value === "undefined" ||
            this.config.value === value ||
            !this.events.fire(types_1.ItemEvent.beforeChange, [value]))
            return;
        this.config.value = value;
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        (0, helper_1.isVerify)(this.config) && this.validate();
    };
    Input.prototype.getValue = function () {
        var _a = this.config, inputType = _a.inputType, value = _a.value;
        if ((inputType === "number" && typeof value === "number") || value === null) {
            return value;
        }
        if (inputType === "number" && typeof value === "string") {
            return value.length ? Number(value) : "";
        }
        if (typeof value === "string") {
            return value.length ? value : "";
        }
        return typeof value === "undefined" ? "" : String(value);
    };
    Input.prototype.isFocused = function () {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
    };
    Input.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    Input.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.blur();
        });
    };
    Input.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        this.config = {
            type: "input",
            id: config.id,
            name: config.name,
            value: "",
            disabled: false,
            hidden: false,
            inputType: "text",
            required: false,
            icon: "",
            placeholder: "",
            autocomplete: false,
            readOnly: false,
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._value = this.config.value;
        this.paint();
    };
    Input.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function (value) {
            _this._value = value;
            _this.paint();
        });
    };
    Input.prototype._getHandlers = function () {
        var _this = this;
        return {
            oninput: function (e) {
                if (e.isComposing)
                    return;
                _this._value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [
                    _this.config.inputType === "number" ? Number(_this._value) : _this._value,
                ]);
            },
            onchange: function (e) {
                _this._value = e.target.value;
                if (_this._value !== _this.config.value)
                    _this.setValue(_this._value);
            },
            onfocus: function () {
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
                _this.paint();
            },
            onblur: function () {
                if (!_this._uid)
                    return;
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
                if (_this._value !== _this.config.value)
                    _this.setValue(_this._value);
                _this.paint();
            },
            onkeydown: function (event) {
                if (event.code === "Enter" && _this.config.type === "input")
                    event.preventDefault();
                _this.events.fire(types_1.ItemEvent.keydown, [event]);
            },
        };
    };
    Input.prototype._draw = function () {
        var _a = this.config, id = _a.id, disabled = _a.disabled, name = _a.name, icon = _a.icon, placeholder = _a.placeholder, required = _a.required, inputType = _a.inputType, hidden = _a.hidden, autocomplete = _a.autocomplete, readOnly = _a.readOnly, maxlength = _a.maxlength, minlength = _a.minlength, max = _a.max, min = _a.min, label = _a.label, helpMessage = _a.helpMessage, value = _a.value;
        var visibility = hidden ? " dhx_form-group--hidden" : "";
        return (0, dom_1.el)("div.dhx_form-group", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), this.isFocused()) + visibility,
        }, [
            this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", {}, [
                (0, dom_1.el)("div.dhx_input__container", {}, [
                    this.config.icon
                        ? (0, dom_1.el)(".dhx_input__icon", {
                            class: this.config.icon,
                        })
                        : null,
                    (0, dom_1.el)("input.dhx_input", {
                        type: ["text", "number", "password"].includes(inputType) ? inputType : "text",
                        "data-dhx-id": name || id,
                        id: id || this._uid,
                        _key: id || this._uid,
                        placeholder: placeholder || "",
                        value: value,
                        name: name || "",
                        disabled: disabled,
                        required: required,
                        readOnly: readOnly,
                        maxlength: maxlength,
                        minlength: minlength,
                        max: max,
                        min: min,
                        onblur: this._handlers.onblur,
                        oninput: this._handlers.oninput,
                        onchange: this._handlers.onchange,
                        onfocus: this._handlers.onfocus,
                        onkeydown: this._handlers.onkeydown,
                        class: icon ? "dhx_input--icon-padding" : "",
                        autocomplete: autocomplete ? "on" : "off",
                        _ref: "input",
                        "aria-label": label || helpMessage || "type ".concat(name || inputType || "text"),
                        "aria-describedby": helpMessage ? "dhx_label__help_".concat(id || this._uid) : null,
                        _hooks: this._getHooks(),
                    }),
                ]),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    Input.prototype._getHooks = function () {
        var _this = this;
        var handler = this._handlers.oninput;
        return {
            didRecycle: function (_oldNode, newNode) {
                if (_this.isFocused() && (0, core_1.isDefined)(_this._value)) {
                    newNode.el.value = _this._value;
                }
            },
            didInsert: function (node) {
                node.el.addEventListener("compositionend", handler);
            },
            willRemove: function (node) {
                node.el.removeEventListener("compositionend", handler);
                handler = null;
            },
        };
    };
    return Input;
}(label_1.Label));
exports.Input = Input;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    dragAndDrop: "Drag & drop",
    or: "or",
    grid: "Grid",
    list: "List",
    browse: "Browse files",
    filesOrFoldersHere: "files or folders here",
    cancel: "Cancel",
    clearAll: "Clear all",
    clearAllSelected: "Clear selected",
    clear: "Clear",
    add: "Add",
    upload: "Upload",
    download: "Download",
    error: "error",
    byte: "B",
    kilobyte: "KB",
    megabyte: "MB",
    gigabyte: "GB",
};
exports.default = locale;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageContainerPosition = exports.Position = exports.RealPosition = void 0;
var RealPosition;
(function (RealPosition) {
    RealPosition["left"] = "left";
    RealPosition["right"] = "right";
    RealPosition["top"] = "top";
    RealPosition["bottom"] = "bottom";
    RealPosition["center"] = "center";
})(RealPosition || (exports.RealPosition = RealPosition = {}));
var Position;
(function (Position) {
    Position["right"] = "right";
    Position["bottom"] = "bottom";
    Position["center"] = "center";
    Position["left"] = "left";
    Position["top"] = "top";
})(Position || (exports.Position = Position = {}));
var MessageContainerPosition;
(function (MessageContainerPosition) {
    MessageContainerPosition["topLeft"] = "top-left";
    MessageContainerPosition["topRight"] = "top-right";
    MessageContainerPosition["bottomLeft"] = "bottom-left";
    MessageContainerPosition["bottomRight"] = "bottom-right";
})(MessageContainerPosition || (exports.MessageContainerPosition = MessageContainerPosition = {}));


/***/ }),
/* 48 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlpha = exports.alphaToHex = exports.isHex = exports.HexToHSV = exports.RGBToHSV = exports.HexToRGB = exports.RGBToHex = exports.HSVtoRGB = void 0;
function HSVtoRGB(hsv) {
    var rgb = { r: 0, g: 0, b: 0 };
    var h = hsv.h / 60;
    var s = hsv.s;
    var v = hsv.v;
    var i = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (i) {
        case 0:
            rgb.r = v;
            rgb.g = t;
            rgb.b = p;
            break;
        case 1:
            rgb.r = q;
            rgb.g = v;
            rgb.b = p;
            break;
        case 2:
            rgb.r = p;
            rgb.g = v;
            rgb.b = t;
            break;
        case 3:
            rgb.r = p;
            rgb.g = q;
            rgb.b = v;
            break;
        case 4:
            rgb.r = t;
            rgb.g = p;
            rgb.b = v;
            break;
        case 5:
            rgb.r = v;
            rgb.g = p;
            rgb.b = q;
            break;
    }
    for (var key in rgb) {
        rgb[key] = Math.round(rgb[key]);
    }
    return rgb;
}
exports.HSVtoRGB = HSVtoRGB;
function RGBToHex(rgb) {
    return Object.keys(rgb).reduce(function (hex, c) {
        var h = rgb[c].toString(16).toUpperCase();
        h = h.length === 1 ? "0" + h : h;
        return (hex += h);
    }, "#");
}
exports.RGBToHex = RGBToHex;
function HexToRGB(hex) {
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (_m, r, g, b) { return r + r + g + g + b + b; });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
exports.HexToRGB = HexToRGB;
function RGBToHSV(rgb) {
    var h;
    var s;
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function (c) {
        return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
        h = s = 0;
    }
    else {
        s = diff / v;
        var rdif = diffc(r);
        var gdif = diffc(g);
        var bdif = diffc(b);
        if (r === v) {
            h = bdif - gdif;
        }
        else if (g === v) {
            h = 1 / 3 + rdif - bdif;
        }
        else if (b === v) {
            h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
            h += 1;
        }
        else if (h > 1) {
            h -= 1;
        }
    }
    return {
        h: h * 360,
        s: s,
        v: v,
    };
}
exports.RGBToHSV = RGBToHSV;
function HexToHSV(hex) {
    return RGBToHSV(HexToRGB(hex.length === 9 ? hex.slice(0, -2) : hex));
}
exports.HexToHSV = HexToHSV;
function isHex(hex) {
    return /(^#[0-9A-F]{8}$)|(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
}
exports.isHex = isHex;
function alphaToHex(alpha) {
    var hex = Math.round(alpha * 255)
        .toString(16)
        .toUpperCase();
    return hex.length === 1 ? "0" + hex : hex;
}
exports.alphaToHex = alphaToHex;
function getAlpha(hex) {
    return hex.length === 9 ? Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2)) : 1;
}
exports.getAlpha = getAlpha;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en = {
    cancel: "Cancel",
    select: "Select",
    rightClickToDelete: "Right click to delete",
    customColors: "Custom colors",
    addNewColor: "Add new color",
};
exports.default = en;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.ajax = void 0;
var types_1 = __webpack_require__(26);
var helpers_1 = __webpack_require__(27);
function toQueryString(data) {
    return Object.keys(data)
        .reduce(function (entries, key) {
        var value = typeof data[key] === "object" ? JSON.stringify(data[key]) : data[key];
        entries.push(key + "=" + encodeURIComponent(value));
        return entries;
    }, [])
        .join("&");
}
function inferResponseType(contentType) {
    if (!contentType) {
        return "text";
    }
    if (contentType.includes("json")) {
        return "json";
    }
    if (contentType.includes("xml")) {
        return "xml";
    }
    return "text";
}
function send(url, data, method, headers, responseType) {
    function parseResponse(responseText, genResponseType) {
        switch (genResponseType) {
            case "json": {
                return JSON.parse(responseText);
            }
            case "text": {
                return responseText;
            }
            case "xml": {
                var driver = (0, helpers_1.toDataDriver)(types_1.DataDriver.xml);
                if (driver) {
                    return driver.toJsonObject(responseText);
                }
                else {
                    return { parseError: "Incorrect data driver type: 'xml'" };
                }
            }
            default: {
                return responseText;
            }
        }
    }
    var allHeaders = headers || {};
    if (responseType) {
        allHeaders.Accept = "application/" + responseType;
    }
    if (method !== "GET") {
        allHeaders["Content-Type"] = allHeaders["Content-Type"] || "application/json";
    }
    if (method === "GET") {
        var urlData = data && typeof data === "object"
            ? toQueryString(data)
            : data && typeof data === "string"
                ? data
                : "";
        if (urlData) {
            url += !url.includes("?") ? "?" : "&";
            url += urlData;
        }
        data = null;
    }
    if (!window.fetch) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    if (responseType === "raw") {
                        resolve({
                            url: xhr.responseURL,
                            headers: xhr
                                .getAllResponseHeaders()
                                .trim()
                                .split(/[\r\n]+/)
                                .reduce(function (acc, cur) {
                                var kv = cur.split(": ");
                                acc[kv[0]] = kv[1];
                                return acc;
                            }, {}),
                            body: xhr.response,
                        });
                    }
                    if (xhr.status === 204) {
                        resolve();
                    }
                    else {
                        resolve(parseResponse(xhr.responseText, responseType || inferResponseType(xhr.getResponseHeader("Content-Type"))));
                    }
                }
                else {
                    reject({
                        status: xhr.status,
                        statusText: xhr.statusText,
                    });
                }
            };
            xhr.onerror = function () {
                reject({
                    status: xhr.status,
                    statusText: xhr.statusText,
                    message: xhr.responseText,
                });
            };
            xhr.open(method, url);
            for (var headerKey in allHeaders) {
                xhr.setRequestHeader(headerKey, allHeaders[headerKey]);
            }
            switch (method) {
                case "POST":
                case "DELETE":
                case "PUT":
                    xhr.send(data !== undefined ? JSON.stringify(data) : "");
                    break;
                case "GET":
                    xhr.send();
                    break;
                default:
                    xhr.send();
                    break;
            }
        });
    }
    else {
        var isJson = allHeaders["Content-Type"] === "application/json";
        if (isJson && data && typeof data === "object") {
            data = JSON.stringify(data);
        }
        return window
            .fetch(url, {
            method: method,
            body: data || null,
            headers: allHeaders,
        })
            .then(function (response) {
            if (response.ok) {
                var genResponseType = responseType || inferResponseType(response.headers.get("Content-Type"));
                if (genResponseType === "raw") {
                    return {
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        headers: Object.fromEntries(response.headers.entries()),
                        url: response.url,
                        body: response.body,
                    };
                }
                if (response.status !== 204) {
                    switch (genResponseType) {
                        case "json": {
                            return response.json();
                        }
                        case "xml": {
                            var driver_1 = (0, helpers_1.toDataDriver)(types_1.DataDriver.xml);
                            if (driver_1) {
                                return response.text().then(function (xmlData) { return driver_1.toJsonObject(xmlData); });
                            }
                            else {
                                return response.text();
                            }
                        }
                        default:
                            return response.text();
                    }
                }
            }
            else {
                return response.text().then(function (message) {
                    return Promise.reject({
                        status: response.status,
                        statusText: response.statusText,
                        message: message,
                    });
                });
            }
        });
    }
}
exports.ajax = {
    get: function (url, data, config) {
        return send(url, data, "GET", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    post: function (url, data, config) {
        return send(url, data, "POST", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    put: function (url, data, config) {
        return send(url, data, "PUT", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    delete: function (url, data, config) {
        return send(url, data, "DELETE", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTreeCell = void 0;
__exportStar(__webpack_require__(70), exports);
__exportStar(__webpack_require__(154), exports);
__exportStar(__webpack_require__(9), exports);
__exportStar(__webpack_require__(30), exports);
var Cells_1 = __webpack_require__(31);
Object.defineProperty(exports, "getTreeCell", { enumerable: true, get: function () { return Cells_1.getTreeCell; } });
__exportStar(__webpack_require__(22), exports);
__exportStar(__webpack_require__(20), exports);


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(130), exports);
__exportStar(__webpack_require__(75), exports);


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Layout = void 0;
var types_1 = __webpack_require__(55);
var Cell_1 = __webpack_require__(71);
var dom_1 = __webpack_require__(1);
var Layout = /** @class */ (function (_super) {
    __extends(Layout, _super);
    function Layout(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        // root layout
        _this._root = _this.config.parent || _this;
        _this._all = {};
        _this._parseConfig();
        _this._progress = false;
        if (_this.config.activeTab) {
            _this.config.activeView = _this.config.activeTab;
        }
        // Need replace to tabbar
        if (_this.config.views) {
            _this.config.activeView = _this.config.activeView || _this._cells[0].id;
            _this._isViewLayout = true;
        }
        if (!config.parent) {
            var view = (0, dom_1.create)({ render: function () { return _this._root && _this.toVDOM(); } }, _this);
            _this.mount(parent, view);
        }
        return _this;
    }
    Layout.prototype.destructor = function () {
        this.unmount();
        if (this.config) {
            for (var _i = 0, _a = this._cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                cell === null || cell === void 0 ? void 0 : cell.destructor();
            }
            this.config = this._cells = this._root = this._xLayout = this._isViewLayout = null;
            this._all = {};
        }
    };
    Layout.prototype.toVDOM = function () {
        var _a;
        if (this._isViewLayout) {
            var roots = [this.getCell(this.config.activeView).toVDOM()];
            return _super.prototype.toVDOM.call(this, roots);
        }
        var nodes = [];
        this._inheritTypes();
        (_a = this._cells) === null || _a === void 0 ? void 0 : _a.forEach(function (cell) {
            var node = cell.toVDOM();
            if (Array.isArray(node)) {
                nodes = nodes.concat(node);
            }
            else {
                nodes.push(node);
            }
        });
        return _super.prototype.toVDOM.call(this, nodes);
    };
    Layout.prototype.removeCell = function (id) {
        if (!this.events.fire(types_1.LayoutEvents.beforeRemove, [id])) {
            return;
        }
        var root = this.config.parent || this;
        if (root !== this) {
            root.removeCell(id);
            return;
        }
        // this === root layout
        var view = this.getCell(id);
        if (view) {
            var parent_1 = view.getParent();
            delete this._all[id];
            parent_1._cells = parent_1._cells.filter(function (cell) { return cell.id != id; });
            parent_1.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterRemove, [id]);
    };
    Layout.prototype.addCell = function (config, index) {
        if (index === void 0) { index = -1; }
        if (!this.events.fire(types_1.LayoutEvents.beforeAdd, [config.id])) {
            return;
        }
        var view = this._createCell(config);
        if (index < 0) {
            index = this._cells.length + index + 1;
        }
        this._cells.splice(index, 0, view);
        this.paint();
        if (!this.events.fire(types_1.LayoutEvents.afterAdd, [config.id])) {
            return;
        }
    };
    Layout.prototype.getId = function (index) {
        if (index < 0) {
            index = this._cells.length + index;
        }
        return this._cells[index] ? this._cells[index].id : undefined;
    };
    Layout.prototype.getRefs = function (name) {
        var _a;
        return (_a = this._root.getRootView().refs) === null || _a === void 0 ? void 0 : _a[name];
    };
    Layout.prototype.getCell = function (id) {
        var _a;
        return (_a = this._root) === null || _a === void 0 ? void 0 : _a._all[id];
    };
    Layout.prototype.forEach = function (callback, parent, level) {
        if (level === void 0) { level = Infinity; }
        if (!this._haveCells(parent) || level < 1) {
            return;
        }
        var array;
        if (parent) {
            array = this._root._all[parent]._cells;
        }
        else {
            array = this._root._cells;
        }
        for (var index = 0; index < array.length; index++) {
            var cell = array[index];
            callback.call(this, cell, index, array);
            if (this._haveCells(cell.id)) {
                cell.forEach(callback, cell.id, --level);
            }
        }
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Layout.prototype.cell = function (id) {
        return this.getCell(id);
    };
    Layout.prototype.progressShow = function () {
        this._progress = true;
        this.paint();
    };
    Layout.prototype.progressHide = function () {
        this._progress = false;
        this.paint();
    };
    Layout.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            enterCollapse: function (e) {
                if (e.keyCode === 13) {
                    _this._handlers.toggle();
                }
            },
            collapse: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.collapse();
            },
            expand: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.expand();
            },
            toggle: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.toggle();
            },
        };
    };
    Layout.prototype._getCss = function (content) {
        var layoutCss = this._xLayout ? "dhx_layout-columns" : "dhx_layout-rows";
        var directionCss = this.config.align ? " " + layoutCss + "--" + this.config.align : "";
        if (content) {
            return (layoutCss +
                " dhx_layout-cell" +
                (this.config.align ? " dhx_layout-cell--" + this.config.align : ""));
        }
        else {
            var cellCss = this.config.parent ? _super.prototype._getCss.call(this) : "dhx_widget dhx_layout";
            var fullModeCss = this.config.parent ? "" : " dhx_layout-cell";
            return cellCss + (this.config.full ? fullModeCss : " " + layoutCss) + directionCss;
        }
    };
    Layout.prototype._parseConfig = function () {
        var _this = this;
        var config = this.config;
        var cells = config.rows || config.cols || config.views || [];
        this._xLayout = !config.rows;
        this._cells = cells.map(function (a) { return _this._createCell(a); });
    };
    Layout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            view = new Layout(this, cell);
        }
        else {
            view = new Cell_1.Cell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        if (cell.init) {
            cell.init(view, cell);
        }
        return view;
    };
    Layout.prototype._haveCells = function (id) {
        if (id) {
            var array = this._root._all[id];
            return array._cells && array._cells.length > 0;
        }
        return Object.keys(this._all).length > 0;
    };
    Layout.prototype._inheritTypes = function (obj) {
        var _this = this;
        if (obj === void 0) { obj = this._cells; }
        if (Array.isArray(obj)) {
            obj.forEach(function (cell) { return _this._inheritTypes(cell); });
        }
        else {
            var cellConfig = obj === null || obj === void 0 ? void 0 : obj.config;
            if ((cellConfig === null || cellConfig === void 0 ? void 0 : cellConfig.rows) || (cellConfig === null || cellConfig === void 0 ? void 0 : cellConfig.cols)) {
                var viewParent = obj.getParent();
                if (!cellConfig.type && viewParent) {
                    if (viewParent.config.type) {
                        cellConfig.type = viewParent.config.type;
                    }
                    else {
                        this._inheritTypes(viewParent);
                    }
                }
            }
        }
    };
    return Layout;
}(Cell_1.Cell));
exports.Layout = Layout;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutEvents = void 0;
var LayoutEvents;
(function (LayoutEvents) {
    LayoutEvents["beforeShow"] = "beforeShow";
    LayoutEvents["afterShow"] = "afterShow";
    LayoutEvents["beforeHide"] = "beforeHide";
    LayoutEvents["afterHide"] = "afterHide";
    LayoutEvents["beforeResizeStart"] = "beforeResizeStart";
    LayoutEvents["resize"] = "resize";
    LayoutEvents["afterResizeEnd"] = "afterResizeEnd";
    LayoutEvents["beforeAdd"] = "beforeAdd";
    LayoutEvents["afterAdd"] = "afterAdd";
    LayoutEvents["beforeRemove"] = "beforeRemove";
    LayoutEvents["afterRemove"] = "afterRemove";
    LayoutEvents["beforeCollapse"] = "beforeCollapse";
    LayoutEvents["afterCollapse"] = "afterCollapse";
    LayoutEvents["beforeExpand"] = "beforeExpand";
    LayoutEvents["afterExpand"] = "afterExpand";
})(LayoutEvents || (exports.LayoutEvents = LayoutEvents = {}));


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(77), exports);
__exportStar(__webpack_require__(146), exports);
__exportStar(__webpack_require__(82), exports);


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ListEvents = void 0;
var ListEvents;
(function (ListEvents) {
    ListEvents["click"] = "click";
    ListEvents["doubleClick"] = "doubleclick";
    ListEvents["focusChange"] = "focuschange";
    ListEvents["beforeEditStart"] = "beforeEditStart";
    ListEvents["afterEditStart"] = "afterEditStart";
    ListEvents["beforeEditEnd"] = "beforeEditEnd";
    ListEvents["afterEditEnd"] = "afterEditEnd";
    ListEvents["itemRightClick"] = "itemRightClick";
    ListEvents["itemMouseOver"] = "itemMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ListEvents["contextmenu"] = "contextmenu";
})(ListEvents || (exports.ListEvents = ListEvents = {}));


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getAutoFilledCells = exports.isCellGreater = exports.getTimeStep = exports.getDateStep = exports.getProgressionStep = exports.getLastCopyingCell = exports.getCellsDiff = exports.alphaRegex = void 0;
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
var date_1 = __webpack_require__(28);
exports.alphaRegex = /(\d+$)/;
function getCellsDiff(firstCell, lastCell, grid) {
    var firstCellIndex = (0, main_1.getCellIndex)(firstCell, grid);
    var lastCellIndex = (0, main_1.getCellIndex)(lastCell, grid);
    var x = lastCellIndex.col - firstCellIndex.col;
    var y = lastCellIndex.row - firstCellIndex.row;
    var negativeDir = x < 0 || y < 0;
    return {
        x: x,
        y: y,
        isLargerByX: Math.abs(x) > Math.abs(y),
        negativeDir: negativeDir,
    };
}
exports.getCellsDiff = getCellsDiff;
function getLastCopyingCell(firstCell, lastCell, grid) {
    var isRange = (0, main_1.isRangeId)(firstCell);
    if (isRange) {
        firstCell = firstCell.split(":")[1];
    }
    var firstCellIndex = (0, main_1.getCellIndex)(firstCell, grid);
    var _a = getCellsDiff(firstCell, lastCell, grid), x = _a.x, y = _a.y, isLargerByX = _a.isLargerByX;
    var nextY = firstCellIndex.row + y;
    var nextX = firstCellIndex.col + x;
    var col = isLargerByX ? nextX : firstCellIndex.col;
    var row = isLargerByX ? firstCellIndex.row : nextY;
    return (0, main_1.getCellNameByIndex)(row, col, grid);
}
exports.getLastCopyingCell = getLastCopyingCell;
function getProgressionStep(progression) {
    var items = progression.map(function (item) { return parseFloat(item) || 0; });
    var sum = items.reduce(function (total, elem) { return total + elem; }, 0);
    var len = items.length;
    return (2 * (sum / len) - 2 * items[0]) / (len - 1);
}
exports.getProgressionStep = getProgressionStep;
function getDateStep(dates) {
    var diff = (0, date_1.dateDiff)(dates[0], dates[1]);
    for (var i = 1; i < dates.length - 1; i++) {
        if ((0, date_1.dateDiff)(dates[i], dates[i + 1]) !== diff) {
            diff = 0;
            i = dates.length;
        }
    }
    return diff;
}
exports.getDateStep = getDateStep;
function getTimeStep(dates) {
    var diff = (0, date_1.timeDiff)(dates[0], dates[1]);
    for (var i = 1; i < dates.length - 1; i++) {
        if ((0, date_1.timeDiff)(dates[i], dates[i + 1]) !== diff) {
            diff = 0;
            i = dates.length;
        }
    }
    return diff;
}
exports.getTimeStep = getTimeStep;
function isCellGreater(a, b, grid) {
    var aa = (0, main_1.getCellIndex)(a, grid);
    var bb = (0, main_1.getCellIndex)(b, grid);
    if (aa.row === bb.row) {
        return aa.col > bb.col;
    }
    else {
        return aa.row > bb.row;
    }
}
exports.isCellGreater = isCellGreater;
function getAutoFilledCells(values, focused, selected, math, grid) {
    var numbers = values
        .filter(function (_a) {
        var value = _a.value, format = _a.format;
        return (0, format_1.isNumeric)(value) && format.id !== "date" && format.id !== "time" && format.id !== "text";
    })
        .map(function (i) { return i.value; });
    var dates = values
        .filter(function (_a) {
        var value = _a.value, format = _a.format;
        return (0, format_1.isNumeric)(value) && format.id === "date";
    })
        .map(function (i) { return (0, date_1.excelDateToJSDate)(i.value); });
    var times = values
        .filter(function (_a) {
        var value = _a.value, format = _a.format;
        return (0, format_1.isNumeric)(value) && format.id === "time";
    })
        .map(function (i) { return (0, date_1.excelDateToJSDate)(i.value); });
    var alphaNumericString = values
        .filter(function (_a) {
        var value = _a.value;
        return !(0, format_1.isNumeric)(value) && value.match(exports.alphaRegex);
    })
        .map(function (i) { return i.value; });
    var alphaNumericNumbers = alphaNumericString.map(function (i) { return parseInt(i.match(exports.alphaRegex)[0]); });
    var dateStep = dates.length < 2 ? 1 : getDateStep(dates);
    var timeStep = times.length < 2 ? 3600 * 1000 : getTimeStep(times);
    var focusedCellsArr = (0, main_1.getCellsArray)(focused, grid);
    var step = getProgressionStep(numbers.length === 1 ? [numbers[0], numbers[0] + 1] : numbers);
    var alphaStep = getProgressionStep(alphaNumericNumbers.length === 1
        ? [alphaNumericNumbers[0], alphaNumericNumbers[0] + 1]
        : alphaNumericNumbers);
    var isCellGreater = function (a, b) {
        var aa = (0, main_1.getCellIndex)(a, grid);
        var bb = (0, main_1.getCellIndex)(b, grid);
        if (aa.row === bb.row) {
            return aa.col > bb.col;
        }
        else {
            return aa.row > bb.row;
        }
    };
    var spans = [];
    var last = parseFloat(numbers[numbers.length - 1]);
    var lastDate = dates[dates.length - 1];
    var lastTime = times[times.length - 1];
    var lastAlphaNumber = alphaNumericNumbers[alphaNumericNumbers.length - 1];
    var current = 0;
    var _a = focused.split(":"), focusedFirst = _a[0], focusedLast = _a[1];
    var _b = selected.split(":"), selectedFirst = _b[0], selectedLast = _b[1];
    var largerByX = getCellsDiff(focusedFirst === selectedFirst && focusedLast ? focusedLast : focusedFirst, selectedFirst, grid).isLargerByX;
    var negativeDir = isCellGreater(focusedFirst, isCellGreater(selectedFirst, selectedLast) ? selectedLast : selectedFirst);
    if (negativeDir) {
        dateStep = -dateStep;
        lastDate = dates[0];
        timeStep = -timeStep;
        lastTime = times[0];
        step = -step;
        last = numbers[numbers.length - 1];
        alphaStep = -alphaStep;
        lastAlphaNumber = alphaNumericNumbers[alphaNumericNumbers.length - 1];
    }
    var targetCells = (0, main_1.getCellsArray)(selected, grid).filter(function (c) { return !focusedCellsArr.includes(c); });
    if (negativeDir) {
        targetCells = targetCells.reverse();
        values = values.reverse();
    }
    var res = targetCells.map(function (c, index) {
        var newVal;
        var isMath;
        isMath = values[current].value.toString().startsWith("=");
        newVal = values[current].value;
        var span = values[current].span;
        if (span) {
            var _a = span, from = _a.from, to = _a.to;
            var index_1 = (0, main_1.getCellIndex)(c, grid);
            var lastCell = (0, main_1.getCellNameByIndex)(index_1.row + to.row - from.row, index_1.col + to.column - from.column, grid);
            var newMerge = "".concat(c, ":").concat(lastCell);
            if (!spans.includes(newMerge)) {
                spans.push(newMerge);
            }
        }
        if (isMath) {
            var row = 0;
            var col = 0;
            var pos = negativeDir
                ? (index + current + focusedCellsArr.length + 1) * -1
                : index - current + focusedCellsArr.length;
            if (largerByX) {
                col = pos;
            }
            else {
                row = pos;
            }
            newVal = math.transposeMath(newVal, row, col);
        }
        if ((0, format_1.isNumeric)(newVal)) {
            switch (values[current].format.id) {
                case "date":
                    lastDate = (0, date_1.addDay)(lastDate, dateStep);
                    newVal = (0, date_1.getExcelDateFromJs)(lastDate);
                    break;
                case "time":
                    lastTime = (0, date_1.addTime)(lastTime, timeStep);
                    newVal = (0, date_1.getExcelDateFromJs)(lastTime);
                    break;
                default:
                    last = last + step;
                    newVal = last.toFixed(5);
            }
        }
        else if (newVal.match(exports.alphaRegex)) {
            lastAlphaNumber = lastAlphaNumber + alphaStep;
            newVal = newVal.replace(exports.alphaRegex, Math.abs(lastAlphaNumber));
        }
        current = values[current + 1] !== undefined ? current + 1 : 0;
        return newVal;
    });
    if (negativeDir) {
        res = res.reverse();
    }
    return {
        cells: "".concat(targetCells[0], ":").concat(targetCells[targetCells.length - 1]),
        value: res,
        spans: spans,
    };
}
exports.getAutoFilledCells = getAutoFilledCells;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(87), exports);
__exportStar(__webpack_require__(247), exports);
__exportStar(__webpack_require__(5), exports);


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    apply: "apply",
    reject: "reject",
};
exports.default = locale;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.blockScreen = void 0;
function blockKeys(e) {
    var active = document.activeElement;
    if (active.classList.contains("dhx_alert__apply-button") && e.key === "Enter") {
        return;
    }
    if (!active.classList.contains("dhx_alert__confirm-reject") &&
        !active.classList.contains("dhx_alert__confirm-aply")) {
        e.preventDefault();
    }
}
function blockScreen(css) {
    var blocker = document.createElement("div");
    blocker.className = "dhx_alert__overlay " + (css || "");
    document.body.appendChild(blocker);
    document.addEventListener("keydown", blockKeys);
    return function () {
        document.body.removeChild(blocker);
        document.removeEventListener("keydown", blockKeys);
    };
}
exports.blockScreen = blockScreen;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disableTooltip = exports.enableTooltip = exports.tooltip = exports.getZIndex = exports.findPosition = void 0;
var html_1 = __webpack_require__(4);
var types_1 = __webpack_require__(47);
var DEFAULT_SHOW_DELAY = 750;
var DEFAULT_HIDE_DELAY = 200;
function findPosition(targetRect, position, width, height, margin, recursion) {
    if (margin === void 0) { margin = 8; }
    if (recursion === void 0) { recursion = 0; }
    var pos;
    var left;
    var top;
    if (recursion > 1) {
        position = types_1.Position.center;
    }
    if (position !== "top" && position !== "bottom") {
        var topOffset = targetRect.top + (targetRect.height - height) / 2;
        var isShift = topOffset < 0 && window.pageYOffset + topOffset + height < scrollY + window.innerHeight;
        top = window.pageYOffset + (isShift ? 0 : topOffset);
    }
    switch (position) {
        case types_1.Position.center:
            left = targetRect.left + window.pageXOffset + (targetRect.width - width) / 2;
            if (left + margin < window.pageXOffset) {
                left = targetRect.left + window.pageXOffset;
            }
            pos = types_1.RealPosition.center;
            return { left: left, top: top, pos: pos };
        case types_1.Position.right:
            pos = types_1.RealPosition.right;
            left = targetRect.right + window.pageXOffset + margin;
            if (left + width > window.innerWidth + window.pageXOffset) {
                // // set left
                return findPosition(targetRect, types_1.Position.left, width, height, margin, ++recursion);
            }
            return { left: left, top: top, pos: pos };
        case types_1.Position.left:
            pos = types_1.RealPosition.left;
            left = window.pageXOffset + targetRect.left - width - margin;
            if (left < 0) {
                // // set right
                return findPosition(targetRect, types_1.Position.right, width, height, margin, ++recursion);
            }
            return { left: left, top: top, pos: pos };
        case types_1.Position.top:
            pos = types_1.RealPosition.top;
            left = window.pageXOffset + targetRect.left + (targetRect.width - width) / 2;
            if (left + width > window.innerWidth + window.pageXOffset) {
                left = window.innerWidth + window.pageXOffset - width;
            }
            else if (left < 0) {
                left = 0;
            }
            if (targetRect.top < height) {
                // // set bottom
                return findPosition(targetRect, types_1.Position.bottom, width, height, margin, ++recursion);
            }
            top = window.pageYOffset + targetRect.top - height - margin;
            return { left: left, top: top, pos: pos };
        case types_1.Position.bottom:
        default:
            left = window.pageXOffset + targetRect.left + (targetRect.width - width) / 2;
            if (left + width > window.innerWidth + window.pageXOffset) {
                left = window.innerWidth + window.pageXOffset - width;
            }
            else if (left < 0) {
                left = 0;
            }
            pos = types_1.RealPosition.bottom;
            top = window.pageYOffset + targetRect.bottom + margin;
            if (top + height > window.innerHeight + window.pageYOffset) {
                // // set top
                return findPosition(targetRect, types_1.Position.top, width, height, margin, ++recursion);
            }
            return { left: left, top: top, pos: pos };
    }
}
exports.findPosition = findPosition;
// tooltip init
var tooltipBox = document.createElement("div");
var tooltipText = document.createElement("span");
tooltipText.className = "dhx_tooltip__text";
tooltipBox.appendChild(tooltipText);
tooltipBox.setAttribute("role", "tooltip");
tooltipBox.style.position = "absolute";
var lastNode = null;
var isActive = false;
var hideTimeout = null;
var showTimeout = null;
var activeListenersDestructor;
function getZIndex(node) {
    if (node &&
        ((node.classList.contains("dhx_popup--window") &&
            node.classList.contains("dhx_popup--window_active")) ||
            node.classList.contains("dhx_popup--window_modal") ||
            node.classList.contains("dhx_popup"))) {
        return 10000000;
    }
    if (node === null || node === void 0 ? void 0 : node.classList.contains("dhx_popup--window")) {
        return 9999999;
    }
    if (node && node.offsetParent) {
        return getZIndex(node.offsetParent);
    }
    return null;
}
exports.getZIndex = getZIndex;
function showTooltip(node, text, position, css, force, margin, htmlEnable) {
    if (css === void 0) { css = ""; }
    if (force === void 0) { force = false; }
    if (margin === void 0) { margin = 8; }
    var rects = node.getBoundingClientRect();
    if (htmlEnable) {
        tooltipText.innerHTML = text;
    }
    else {
        tooltipText.textContent = text;
    }
    tooltipBox.style.left = null;
    tooltipBox.style.top = null;
    document.body.appendChild(tooltipBox);
    tooltipBox.className = "dhx_widget dhx_tooltip ".concat(force ? " dhx_tooltip--forced" : "", " ").concat(css);
    var _a = tooltipBox.getBoundingClientRect(), width = _a.width, height = _a.height;
    var _b = findPosition(rects, position, width, height, margin), left = _b.left, top = _b.top, pos = _b.pos;
    var zIndex = getZIndex(node);
    if (zIndex) {
        tooltipBox.style.zIndex = zIndex.toString();
    }
    switch (pos) {
        case types_1.RealPosition.bottom:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.top:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.left:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.right:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.center:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
    }
    tooltipBox.className += " dhx_tooltip--".concat(pos);
    isActive = true;
    if (!force) {
        setTimeout(function () {
            tooltipBox.className += " dhx_tooltip--animate";
        });
    }
}
function hideTooltip(delay) {
    if (lastNode) {
        hideTimeout = setTimeout(function () {
            document.body.removeChild(tooltipBox);
            isActive = false;
            hideTimeout = null;
        }, delay || DEFAULT_HIDE_DELAY);
    }
}
function addListeners(node, text, config) {
    var force = config.force, showDelay = config.showDelay, hideDelay = config.hideDelay, position = config.position, css = config.css, htmlEnable = config.htmlEnable, margin = config.margin;
    if (!force) {
        showTimeout = setTimeout(function () {
            showTooltip(node, text, position || types_1.Position.bottom, css, false, margin, htmlEnable);
        }, showDelay || DEFAULT_SHOW_DELAY);
    }
    var hide = function () {
        if (isActive) {
            hideTooltip(hideDelay);
        }
        clearTimeout(showTimeout);
        node.removeEventListener("mouseleave", hide);
        node.removeEventListener("blur", hide);
        document.removeEventListener("mousedown", hide);
        lastNode = null;
        activeListenersDestructor = null;
    };
    if (force) {
        showTooltip(node, text, position, css, force, margin, htmlEnable);
    }
    node.addEventListener("mouseleave", hide);
    node.addEventListener("blur", hide);
    document.addEventListener("mousedown", hide);
    activeListenersDestructor = hide;
}
// default
function tooltip(text, config) {
    var node = (0, html_1.toNode)(config.node);
    if (node === lastNode) {
        return;
    }
    if (activeListenersDestructor) {
        activeListenersDestructor();
        activeListenersDestructor = null;
    }
    lastNode = node;
    if (hideTimeout) {
        clearTimeout(hideTimeout);
        hideTimeout = null;
        addListeners(node, text, __assign(__assign({}, config), { force: true }));
    }
    else {
        addListeners(node, text, config);
    }
}
exports.tooltip = tooltip;
function _mousemove(e) {
    var node = (0, html_1.locateNode)(e, "dhx_tooltip_text");
    if (!node) {
        return;
    }
    tooltip(node.getAttribute("dhx_tooltip_text"), {
        position: node.getAttribute("dhx_tooltip_position") || types_1.Position.bottom,
        node: node,
    });
}
function enableTooltip() {
    document.addEventListener("mousemove", _mousemove);
}
exports.enableTooltip = enableTooltip;
function disableTooltip() {
    document.removeEventListener("mousemove", _mousemove);
}
exports.disableTooltip = disableTooltip;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.locale = void 0;
__exportStar(__webpack_require__(114), exports);
__exportStar(__webpack_require__(65), exports);
__exportStar(__webpack_require__(64), exports);
__exportStar(__webpack_require__(49), exports);
var en_1 = __webpack_require__(50);
Object.defineProperty(exports, "locale", { enumerable: true, get: function () { return en_1.default; } });


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.palette = exports.grayShades = void 0;
exports.grayShades = [
    "#000000",
    "#4C4C4C",
    "#666666",
    "#808080",
    "#999999",
    "#B3B3B3",
    "#CCCCCC",
    "#E6E6E6",
    "#F2F2F2",
    "#FFFFFF",
];
exports.palette = [
    ["#D4DAE4", "#B0B8CD", "#949DB1", "#727A8C", "#5E6677", "#3F4757", "#1D2534"],
    ["#FFCDD2", "#FE9998", "#F35C4E", "#E94633", "#D73C2D", "#CA3626", "#BB2B1A"],
    ["#F9E6AD", "#F4D679", "#EDB90F", "#EAA100", "#EA8F00", "#EA7E00", "#EA5D00"],
    ["#BCE4CE", "#90D2AF", "#33B579", "#36955F", "#247346", "#1D5B38", "#17492D"],
    ["#BDF0E9", "#92E7DC", "#02D7C5", "#11B3A5", "#018B80", "#026B60", "#024F43"],
    ["#B3E5FC", "#81D4FA", "#29B6F6", "#039BE5", "#0288D1", "#0277BD", "#01579B"],
    ["#AEC1FF", "#88A3F9", "#5874CD", "#2349AE", "#163FA2", "#083596", "#002381"],
    ["#C5C0DA", "#9F97C1", "#7E6BAD", "#584A8F", "#4F4083", "#473776", "#3A265F"],
    ["#D6BDCC", "#C492AC", "#A9537C", "#963A64", "#81355A", "#6E3051", "#4C2640"],
    ["#D2C5C1", "#B4A09A", "#826358", "#624339", "#5D4037", "#4E342E", "#3E2723"],
];


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorpickerEvents = void 0;
var ColorpickerEvents;
(function (ColorpickerEvents) {
    ColorpickerEvents["beforeChange"] = "beforeChange";
    ColorpickerEvents["change"] = "change";
    ColorpickerEvents["apply"] = "apply";
    ColorpickerEvents["cancelClick"] = "cancelClick";
    ColorpickerEvents["modeChange"] = "modeChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["selectClick"] = "selectClick";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["colorChange"] = "colorChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["viewChange"] = "viewChange";
})(ColorpickerEvents || (exports.ColorpickerEvents = ColorpickerEvents = {}));


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCollection = void 0;
var events_1 = __webpack_require__(3);
var loader_1 = __webpack_require__(117);
var sort_1 = __webpack_require__(120);
var dataproxy_1 = __webpack_require__(34);
var helpers_1 = __webpack_require__(27);
var types_1 = __webpack_require__(26);
var core_1 = __webpack_require__(0);
var DataCollection = /** @class */ (function () {
    function DataCollection(config, events) {
        var _this = this;
        this._filters = {};
        this._changes = { order: [] };
        this.config = config || {};
        this._sort = new sort_1.Sort();
        this._loader = new loader_1.Loader(this, this._changes);
        this.events = events || new events_1.EventSystem(this);
        this.events.on(types_1.DataEvents.dataRequest, function (from, to) {
            var proxy = _this.dataProxy;
            if (proxy && proxy.updateUrl) {
                proxy.updateUrl(null, { from: from, limit: proxy.config.limit || to - from });
                _this.load(proxy);
            }
        });
        this.events.on(types_1.DataEvents.loadError, function (response) {
            setTimeout(function () {
                if (typeof response !== "string") {
                    (0, helpers_1.dhxError)(response);
                }
                else {
                    (0, helpers_1.dhxWarning)(response);
                }
            }, 0);
        });
        this._reset();
    }
    DataCollection.prototype._reset = function () {
        this._order = [];
        this._pull = {};
        this._changes = { order: [] };
        this._initOrder = null;
        this._meta = new WeakMap();
        this._loaded = false;
    };
    DataCollection.prototype.add = function (newItem, index) {
        var _this = this;
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [newItem])) {
            return;
        }
        var out;
        if (Array.isArray(newItem)) {
            out = newItem.map(function (element, key) {
                if (key !== 0) {
                    index = index + 1;
                }
                return _this._add(element, index);
            });
        }
        else {
            out = this._add(newItem, index);
        }
        this._reapplyFilters(true);
        return out;
    };
    DataCollection.prototype.remove = function (id) {
        var _this = this;
        if (id instanceof Array) {
            __spreadArray([], id, true).map(function (elementId) {
                _this._remove(elementId);
            });
        }
        else if ((0, core_1.isId)(id)) {
            this._remove(id);
        }
    };
    DataCollection.prototype.removeAll = function () {
        this._reset();
        this.events.fire(types_1.DataEvents.removeAll);
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.exists = function (id) {
        return !!this._pull[id];
    };
    DataCollection.prototype.getNearId = function (id) {
        var item = this._pull[id];
        if (!item) {
            return this._order[0].id || "";
        }
    };
    DataCollection.prototype.getItem = function (id) {
        return this._pull[id];
    };
    DataCollection.prototype.update = function (id, newItem, silent) {
        var item = this.getItem(id);
        if (item) {
            if ((0, helpers_1.isEqualObj)(newItem, item)) {
                return;
            }
            if ((0, core_1.isId)(newItem.id) && id !== newItem.id) {
                (0, helpers_1.dhxWarning)("this method doesn't allow change id");
                if ((0, helpers_1.isDebug)()) {
                    // eslint-disable-next-line no-debugger
                    debugger;
                }
            }
            else {
                if (newItem.parent && item.parent && newItem.parent !== item.parent) {
                    this.move(id, -1, this, newItem.parent);
                }
                (0, core_1.extend)(this._pull[id], newItem, false);
                if (this.config.update) {
                    this.config.update(this._pull[id]);
                }
                if (!silent) {
                    this._onChange("update", id, this._pull[id]);
                }
            }
            this._reapplyFilters(true);
        }
        else {
            (0, helpers_1.dhxWarning)("item not found");
        }
    };
    DataCollection.prototype.getIndex = function (id) {
        if (!(0, core_1.isId)(id) || !(0, core_1.isDefined)(this._pull[id])) {
            return -1;
        }
        return this._order.findIndex(function (i) { return (i === null || i === void 0 ? void 0 : i.id) == id; });
    };
    DataCollection.prototype.getId = function (index) {
        if (!this._order[index]) {
            return;
        }
        return this._order[index].id;
    };
    DataCollection.prototype.getLength = function () {
        return this._order.length;
    };
    DataCollection.prototype.isDataLoaded = function (from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = this._order.length; }
        if ((0, core_1.isNumeric)(from) && (0, core_1.isNumeric)(to)) {
            return this._order.slice(from, to).filter(function (item) { return item && item.$empty; }).length === 0;
        }
        // if check succeeds once, collection can't go back to not-loaded state
        if (!this._loaded) {
            this._loaded = !this.find(function (item) { return item.$empty; });
        }
        return !!this._loaded;
    };
    DataCollection.prototype.filter = function (rule, config, silent) {
        var _a;
        if (config === null || config === void 0 ? void 0 : config.$restore) {
            rule = this._normalizeFilters(rule || this._filters);
        }
        if (!(config === null || config === void 0 ? void 0 : config.add)) {
            this._order = this._initOrder || this._order;
            this._initOrder = null;
            if (!(config === null || config === void 0 ? void 0 : config.$restore)) {
                for (var key in this._filters) {
                    var filter = this._filters[key];
                    if ((_a = filter.config) === null || _a === void 0 ? void 0 : _a.permanent) {
                        this._applyFilters(filter.rule);
                    }
                    else {
                        delete this._filters[key];
                    }
                }
            }
        }
        var id;
        if (rule && !(config === null || config === void 0 ? void 0 : config.$restore)) {
            id = (config === null || config === void 0 ? void 0 : config.id) || (0, core_1.uid)();
            this._filters[id] = { rule: rule, config: config || {} };
        }
        if (rule && typeof rule !== "function") {
            if ((0, core_1.isDefined)(rule.by)) {
                this._applyFilters(rule);
            }
            else {
                for (var key in rule) {
                    this._applyFilters(rule[key]);
                }
            }
        }
        else {
            this._applyFilters(rule);
        }
        if (!silent) {
            var filters = this._getPureFilters(this._filters);
            this.events.fire(types_1.DataEvents.filter, [(0, core_1.isEmptyObj)(filters) ? null : filters]);
        }
        return id;
    };
    DataCollection.prototype.resetFilter = function (config, silent) {
        var _a;
        var _b = config || {}, id = _b.id, permanent = _b.permanent;
        if ((0, core_1.isEmptyObj)(config)) {
            for (var key in this._filters) {
                if (!((_a = this._filters[key].config) === null || _a === void 0 ? void 0 : _a.permanent)) {
                    delete this._filters[key];
                }
            }
        }
        else if (permanent) {
            this._filters = {};
        }
        else if (id) {
            delete this._filters[id];
        }
        this.filter(null, { $restore: true }, silent);
        return (0, core_1.isEmptyObj)(this._getPureFilters(this._filters));
    };
    DataCollection.prototype.getFilters = function (config) {
        var filters = this.getRawFilters(config);
        var pureFilters = filters ? this._getPureFilters(filters) : {};
        return (0, core_1.isEmptyObj)(pureFilters) ? null : pureFilters;
    };
    DataCollection.prototype.getRawFilters = function (config) {
        var filters = this._filters;
        if (config === null || config === void 0 ? void 0 : config.permanent) {
            filters = Object.keys(filters).reduce(function (obj, key) {
                var _a;
                if ((_a = filters[key].config) === null || _a === void 0 ? void 0 : _a.permanent) {
                    obj[key] = filters[key];
                }
                return obj;
            }, {});
        }
        return (0, core_1.isEmptyObj)(filters) ? null : filters;
    };
    DataCollection.prototype.find = function (conf) {
        for (var key in this._pull) {
            var res = (0, helpers_1.findByConf)(this._pull[key], conf);
            if (res) {
                return res;
            }
        }
        return null;
    };
    DataCollection.prototype.findAll = function (conf) {
        var res = [];
        for (var key in this._pull) {
            var item = (0, helpers_1.findByConf)(this._pull[key], conf);
            if (item) {
                res.push(item);
            }
        }
        return res;
    };
    DataCollection.prototype.sort = function (rule, config) {
        if (!this.isDataLoaded()) {
            (0, helpers_1.dhxWarning)("the method doesn't work with lazyLoad");
            return;
        }
        if (config && config.smartSorting) {
            this._sorter = rule;
        }
        if (rule) {
            this._applySorters(rule);
        }
        this.events.fire(types_1.DataEvents.change, [undefined, "sort", rule]);
    };
    DataCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    DataCollection.prototype.move = function (id, index, target, targetId, newId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId, 0, newId);
        }
    };
    DataCollection.prototype.forEach = function (callback) {
        for (var i = 0; i < this._order.length; i++) {
            callback.call(this, this._order[i], i, this._order);
        }
    };
    DataCollection.prototype.load = function (url, driver) {
        if (typeof url === "string") {
            this.dataProxy = url = new dataproxy_1.DataProxy(url);
        }
        if (typeof driver === "string") {
            var driverName = driver.toLocaleLowerCase();
            if (driverName === "xml" || driverName === "csv") {
                url.config.responseType = url.config.responseType || "text";
            }
        }
        this.dataProxy = url;
        return this._loader.load(url, driver);
    };
    DataCollection.prototype.parse = function (data, driver) {
        this._reset();
        return this._loader.parse(data, driver);
    };
    DataCollection.prototype.$parse = function (data) {
        var apx = this.config.approximate;
        if (apx) {
            data = this._approximate(data, apx.value, apx.maxNum);
        }
        this._parse_data(data);
        this._reapplyFilters(true);
        this.events.fire(types_1.DataEvents.change, [undefined, "load"]);
        this.events.fire(types_1.DataEvents.load);
    };
    DataCollection.prototype.save = function (url) {
        if (typeof url === "string") {
            url = new dataproxy_1.DataProxy(url);
        }
        this._loader.save(url);
    };
    DataCollection.prototype.changeId = function (id, newId, silent) {
        if (newId === void 0) { newId = (0, core_1.uid)(); }
        var item = this.getItem(id);
        if (!item) {
            (0, helpers_1.dhxWarning)("item not found");
        }
        else {
            item.id = newId;
            (0, core_1.extend)(this._pull[id], item);
            this._pull[newId] = this._pull[id];
            if (!silent) {
                this._onChange("update", newId, this._pull[newId]);
            }
            delete this._pull[id];
        }
    };
    // todo: loop through the array and check saved statuses
    DataCollection.prototype.isSaved = function () {
        return !this._changes.order.length; // todo: bad solution, errors and holded elments are missed...
    };
    DataCollection.prototype.map = function (callback) {
        var result = [];
        for (var i = 0; i < this._order.length; i++) {
            result.push(callback.call(this, this._order[i], i, this._order));
        }
        return result;
    };
    DataCollection.prototype.mapRange = function (from, to, callback) {
        if (from < 0) {
            from = 0;
        }
        if (to > this._order.length - 1) {
            to = this._order.length - 1;
        }
        var arr = this._order.slice(from, to);
        var result = [];
        for (var i = from; i <= to; i++) {
            result.push(callback.call(this, this._order[i], i, arr));
        }
        return result;
    };
    DataCollection.prototype.reduce = function (callback, acc) {
        for (var i = 0; i < this._order.length; i++) {
            acc = callback.call(this, acc, this._order[i], i);
        }
        return acc;
    };
    DataCollection.prototype.serialize = function (driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        // remove $ attrs
        var data = [];
        var _loop_1 = function (index) {
            var item = __assign({}, this_1._order[index]);
            Object.keys(item).forEach(function (key) {
                if (key.startsWith("$")) {
                    delete item[key];
                }
            });
            data.push(item);
        };
        var this_1 = this;
        for (var index = 0; index < this._order.length; index++) {
            _loop_1(index);
        }
        var dataDriver = (0, helpers_1.toDataDriver)(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    DataCollection.prototype.getInitialData = function () {
        return this._initOrder;
    };
    DataCollection.prototype.setMeta = function (obj, key, value) {
        if (!obj)
            return;
        var map = this._meta.get(obj);
        if (!map) {
            map = {};
            this._meta.set(obj, map);
        }
        map[key] = value;
    };
    DataCollection.prototype.getMeta = function (obj, key) {
        var map = this._meta.get(obj);
        return map ? map[key] : null;
    };
    DataCollection.prototype.getMetaMap = function (obj) {
        return this._meta.get(obj);
    };
    DataCollection.prototype.setRange = function (from, to) {
        this._range = !to ? null : [from, to];
    };
    DataCollection.prototype.getRawData = function (from, to, order, mode) {
        order = order || this._order;
        if (mode === 1)
            return order;
        if (this._range) {
            from = this._range[0] + from;
            if (to === -1) {
                to = this._range[1];
            }
            else {
                var diff = Math.abs(to - from);
                to = from + diff > this._range[1] ? this._range[1] : from + diff;
            }
        }
        if (!to || (from === 0 && (to === -1 || to === order.length))) {
            return order;
        }
        if (from >= order.length)
            return [];
        if (to === -1 || to > order.length)
            to = order.length;
        var slice = order.slice(from, to);
        if (slice.filter(function (item) { return item.$empty; }).length !== 0) {
            this.events.fire(types_1.DataEvents.dataRequest, [from, to]);
        }
        return slice;
    };
    DataCollection.prototype._add = function (newItem, index) {
        var id = this._addCore(newItem, index);
        this._onChange("add", newItem.id, newItem);
        this.events.fire(types_1.DataEvents.afterAdd, [newItem]);
        return id;
    };
    DataCollection.prototype._remove = function (id) {
        var removedItem = this._pull[id];
        if (removedItem) {
            if (!this.events.fire(types_1.DataEvents.beforeRemove, [removedItem])) {
                return;
            }
            this._removeCore(removedItem.id);
            this._onChange("remove", id, removedItem);
        }
        this.events.fire(types_1.DataEvents.afterRemove, [removedItem]);
    };
    DataCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (!this.exists(id)) {
            return null;
        }
        var newid = (0, core_1.uid)();
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target) {
            if (!(target instanceof DataCollection) && targetId) {
                target.add((0, helpers_1.copyWithoutInner)(this.getItem(id)), index);
                return;
            }
            if (target.exists(id)) {
                target.add(__assign(__assign({}, (0, helpers_1.copyWithoutInner)(this.getItem(id))), { id: newid }), index);
                return newid;
            }
            else {
                target.add((0, helpers_1.copyWithoutInner)(this.getItem(id)), index);
                return id;
            }
        }
        this.add(__assign(__assign({}, (0, helpers_1.copyWithoutInner)(this.getItem(id))), { id: newid }), index);
        return newid;
    };
    DataCollection.prototype._move = function (id, index, target, targetId, key, newId) {
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target && target !== this && this.exists(id)) {
            var item = (0, core_1.copy)(this.getItem(id), true);
            if (newId)
                item.id = newId;
            if ((!newId && target.exists(id)) || target.exists(newId)) {
                item.id = (0, core_1.uid)();
            }
            if (targetId) {
                item.parent = targetId;
            }
            target.add(item, index);
            // remove data from original collection
            this.remove(id);
            return item.id;
        }
        if (this.getIndex(id) === index) {
            return null;
        }
        // move other elements
        var spliced = this._order.splice(this.getIndex(id), 1)[0];
        if (index === -1) {
            index = this._order.length;
        }
        this._order.splice(index, 0, spliced);
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    DataCollection.prototype._addCore = function (obj, index) {
        var _a;
        if (this.config.init) {
            obj = this.config.init(obj);
        }
        obj.id = (_a = obj.id) !== null && _a !== void 0 ? _a : (0, core_1.uid)();
        if (this._pull[obj.id]) {
            (0, helpers_1.dhxError)("Item ".concat(obj.id, " already exist"));
        }
        // todo: not ideal solution
        if (this._initOrder && !(0, helpers_1.isTreeCollection)(this)) {
            this._addToOrder(this._initOrder, obj, index);
        }
        this._addToOrder(this._order, obj, index);
        return obj.id;
    };
    DataCollection.prototype._removeCore = function (id) {
        if (this.getIndex(id) >= 0) {
            this._order = this._order.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
        if (this._initOrder && this._initOrder.length) {
            this._initOrder = this._initOrder.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
    };
    DataCollection.prototype._parse_data = function (data) {
        var index = this._order.length;
        if (this.config.prep) {
            data = this.config.prep(data);
        }
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            this._addCore(obj, index++);
        }
    };
    DataCollection.prototype._approximate = function (data, values, maxNum) {
        var len = data.length;
        var vlen = values.length;
        var rlen = Math.floor(len / maxNum);
        var newData = Array(Math.ceil(len / rlen));
        var index = 0;
        for (var i = 0; i < len; i += rlen) {
            var newItem = (0, core_1.copy)(data[i]);
            var end = Math.min(len, i + rlen);
            for (var j = 0; j < vlen; j++) {
                var sum = 0;
                for (var z = i; z < end; z++) {
                    sum += data[z][values[j]];
                }
                newItem[values[j]] = sum / (end - i);
            }
            newData[index++] = newItem;
        }
        return newData;
    };
    DataCollection.prototype._onChange = function (status, id, obj) {
        var itemCount = 0;
        var maxStack = 10;
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var item = _a[_i];
            // update pending item if previous state is "saving" or if item not saved yet
            var index = this._changes.order.indexOf(item);
            if (item.id === id && !item.saving) {
                itemCount += 1;
                if (index === this._changes.order.length - 1 || this._changes.order[index + 1].id !== id) {
                    // update item
                    if (item.error) {
                        item.error = false;
                    }
                    item = __assign(__assign({}, item), { obj: obj, status: status });
                    itemCount += 1;
                    if (itemCount > maxStack) {
                        this._changes.order.splice(index, itemCount - maxStack, item);
                    }
                    else {
                        this._changes.order.splice(index + 1, 0, item);
                    }
                    this._loader.updateChanges(this._changes);
                    if (status === "remove" && obj.$emptyRow)
                        return;
                    this.events.fire(types_1.DataEvents.change, [id, status, obj]);
                    return;
                }
            }
        }
        this._changes.order.push({ id: id, status: status, obj: __assign({}, obj), saving: false });
        this._loader.updateChanges(this._changes);
        this.events.fire(types_1.DataEvents.change, [id, status, obj]);
    };
    DataCollection.prototype._addToOrder = function (array, obj, index) {
        if (index >= 0 && array[index]) {
            this._pull[obj.id] = obj;
            array.splice(index, 0, obj);
        }
        else {
            this._pull[obj.id] = obj;
            array.push(obj);
        }
    };
    DataCollection.prototype._applySorters = function (by) {
        this._sort.sort(this._order, by, this._sorter);
        // sort the not-filtered dataset
        if (this._initOrder && this._initOrder.length) {
            this._sort.sort(this._initOrder, by, this._sorter);
        }
    };
    DataCollection.prototype._applyFilters = function (rule) {
        if (!rule)
            return;
        var filter = typeof rule !== "function" ? this._getRuleCallback(rule) : rule;
        var fOrder = this._order.filter(function (item) { return filter(item); });
        if (!this._initOrder) {
            this._initOrder = this._order;
        }
        this._order = fOrder;
    };
    DataCollection.prototype._reapplyFilters = function (sort) {
        if (sort === void 0) { sort = false; }
        var permFilters = this.getFilters({ permanent: true });
        if (permFilters) {
            this.filter(permFilters, { $restore: true, add: true }, true);
        }
        if (sort && this._sorter) {
            this._applySorters();
        }
    };
    DataCollection.prototype._getRuleCallback = function (rule) {
        if (!(0, core_1.isDefined)(rule.by) || !(0, core_1.isDefined)(rule.match))
            return;
        return rule.compare
            ? function (obj) { return rule.compare(obj[rule.by], rule.match, obj, rule.multi); }
            : function (obj) { return obj[rule.by] == rule.match; };
    };
    DataCollection.prototype._getPureFilters = function (filters) {
        return Object.keys(filters).reduce(function (obj, key) {
            var _a;
            if (!((_a = filters[key].config) === null || _a === void 0 ? void 0 : _a.$local)) {
                obj[key] = filters[key];
            }
            return obj;
        }, {});
    };
    DataCollection.prototype._normalizeFilters = function (filters) {
        var rules = [];
        for (var key in filters) {
            var rule = filters[key].rule;
            if (typeof rule !== "function") {
                if ((0, core_1.isDefined)(rule.by)) {
                    rules.push(this._getRuleCallback(rule));
                }
                else {
                    for (var key_1 in rule) {
                        rules.push(this._getRuleCallback(rule[key_1]));
                    }
                }
            }
            else {
                rules.push(rule);
            }
        }
        return __assign({}, rules);
    };
    return DataCollection;
}());
exports.DataCollection = DataCollection;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataDriversPro = exports.dataDrivers = void 0;
var JsonDriver_1 = __webpack_require__(68);
var CsvDriver_1 = __webpack_require__(69);
var XMLDriver_1 = __webpack_require__(118);
exports.dataDrivers = {
    json: JsonDriver_1.JsonDriver,
    csv: CsvDriver_1.CsvDriver,
};
exports.dataDriversPro = __assign(__assign({}, exports.dataDrivers), { xml: XMLDriver_1.XMLDriver });


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonDriver = void 0;
var JsonDriver = /** @class */ (function () {
    function JsonDriver() {
    }
    JsonDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    JsonDriver.prototype.serialize = function (data) {
        return data;
    };
    JsonDriver.prototype.getFields = function (row) {
        return row;
    };
    JsonDriver.prototype.getRows = function (data) {
        return typeof data === "string" ? JSON.parse(data) : data;
    };
    return JsonDriver;
}());
exports.JsonDriver = JsonDriver;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvDriver = void 0;
var CsvDriver = /** @class */ (function () {
    function CsvDriver(config) {
        var initConfig = {
            skipHeader: 0,
            nameByHeader: false,
            rowDelimiter: "\n",
            columnDelimiter: ",",
        };
        this.config = __assign(__assign({}, initConfig), config);
        if (this.config.nameByHeader) {
            this.config.skipHeader = 1;
        }
    }
    CsvDriver.prototype.getFields = function (row, headers) {
        var regex = new RegExp("(?<!\")".concat(this.config.columnDelimiter, "(?!\")"));
        var parts = row.trim().split(regex);
        var obj = {};
        for (var i = 0; i < parts.length; i++) {
            obj[headers ? headers[i] : i + 1] = isNaN(Number(parts[i]))
                ? parts[i].replace(/"[,;"]"/gi, function (match) {
                    return match
                        .split("")
                        .splice(1, 1)
                        .slice(-1, 1)
                        .join("");
                })
                : parseFloat(parts[i]);
        }
        return obj;
    };
    CsvDriver.prototype.getRows = function (data) {
        return data.trim().split(this.config.rowDelimiter);
    };
    CsvDriver.prototype.toJsonArray = function (data) {
        var _this = this;
        var rows = this.getRows(data);
        var names = this.config.names;
        if (this.config.skipHeader) {
            var top_1 = rows.splice(0, this.config.skipHeader);
            if (this.config.nameByHeader) {
                names = top_1[0].trim().split(this.config.columnDelimiter);
            }
        }
        return rows.map(function (row) { return _this.getFields(row, names); });
    };
    CsvDriver.prototype.serialize = function (data, withoutHeader) {
        var header = data[0]
            ? Object.keys(data[0])
                .filter(function (key) { return !key.startsWith("$"); })
                .join(this.config.columnDelimiter) + this.config.rowDelimiter
            : "";
        var readyData = this._serialize(data);
        if (withoutHeader) {
            return readyData;
        }
        return header + readyData;
    };
    CsvDriver.prototype._serialize = function (data) {
        var _this = this;
        return data.reduce(function (csv, row) {
            var keys = Object.keys(row);
            var cells = keys.reduce(function (total, key, i) {
                var _a, _b;
                if (key.startsWith("$") || key === "items") {
                    return total;
                }
                return "".concat(total).concat(((_b = (_a = row[key]) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "").replaceAll(/[,;"]/gi, function (match) { return "\"".concat(match, "\""); })).concat(i === keys.length - 1 ? "" : _this.config.columnDelimiter);
            }, "");
            if (row.items) {
                return "".concat(csv).concat(csv ? "\n" : "").concat(cells).concat(_this._serialize(row.items));
            }
            return "".concat(csv).concat(csv ? _this.config.rowDelimiter : "").concat(cells);
        }, "");
    };
    return CsvDriver;
}());
exports.CsvDriver = CsvDriver;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = void 0;
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var html_1 = __webpack_require__(4);
var core_1 = __webpack_require__(0);
var KeyManager_1 = __webpack_require__(21);
var view_1 = __webpack_require__(8);
var ts_data_1 = __webpack_require__(13);
var Exporter_1 = __webpack_require__(123);
var data_1 = __webpack_require__(22);
var cells_1 = __webpack_require__(30);
var main_1 = __webpack_require__(20);
var Selection_1 = __webpack_require__(124);
var types_1 = __webpack_require__(9);
var render_1 = __webpack_require__(24);
var date_1 = __webpack_require__(18);
var content_1 = __webpack_require__(148);
var columnsResizer_1 = __webpack_require__(152);
var keys_1 = __webpack_require__(153);
var FocusManager_1 = __webpack_require__(19);
var Cells_1 = __webpack_require__(31);
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
        };
        _this._destructed = false;
        _this.version = "5.1.8";
        _this.config = (0, core_1.extend)({
            rowHeight: 40,
            headerRowHeight: 40,
            footerRowHeight: 40,
            keyNavigation: true,
            sortable: true,
            columns: [],
            data: [],
            tooltip: true,
            rootParent: (typeof container === "string" && container) || _this._uid,
        }, _this._normalizeConfig(config));
        _this.content = (0, content_1.getContent)();
        _this._scroll = {
            top: 0,
            left: 0,
        };
        // TODO: remove suite_7.0
        _this.config.autoWidth = _this.config.autoWidth || _this.config.fitToContainer;
        _this.config.adjust = _this.config.adjust || _this.config.columnsAutoWidth;
        _this.config.editable = _this.config.editable || _this.config.editing;
        _this.config.leftSplit = _this.config.leftSplit || _this.config.splitAt;
        _this.config.columns.forEach(function (col) {
            col.format = col.format || col.dateFormat;
        });
        var showCellTooltip = function (row, column, node) {
            var _a;
            if (row && column && (0, main_1.isTooltip)(_this.config, column)) {
                var editorOption = void 0;
                if (column.editorType === "combobox" || column.editorType === "select") {
                    var option = (0, data_1.getEditorOptions)(column, row).find(function (item) {
                        var _a;
                        var value = item instanceof Object ? item.id.toString() : item;
                        return value === ((_a = row[column.id]) === null || _a === void 0 ? void 0 : _a.toString());
                    });
                    editorOption = option instanceof Object ? option.value : option;
                }
                else if (column.editorType === "multiselect") {
                    var values_1 = (_a = row[column.id]) === null || _a === void 0 ? void 0 : _a.toString().split(", ");
                    if (values_1 === null || values_1 === void 0 ? void 0 : values_1.length) {
                        var options = (0, data_1.getEditorOptions)(column, row).filter(function (item) {
                            return values_1.includes(item instanceof Object ? item.id.toString() : item);
                        });
                        editorOption = options
                            .map(function (item) {
                            return item instanceof Object ? item.value : item;
                        })
                            .join(", ");
                    }
                }
                var value_1 = (0, data_1.toFormat)(editorOption || row[column.id], column.type, column.format);
                var checkIsExistValue = function () { return !!value_1 || typeof value_1 === "boolean"; };
                if (column.tooltipTemplate) {
                    value_1 = column.tooltipTemplate(value_1, row, column) || null;
                }
                else if (checkIsExistValue() && column.template) {
                    value_1 = column.template(value_1, row, column);
                }
                if (checkIsExistValue()) {
                    (0, main_1.showTooltip)(value_1, __assign({ node: node, htmlEnable: (0, main_1.isHtmlEnable)(_this.config, column) }, (0, main_1.getTooltipConfig)(_this.config, column)));
                }
            }
        };
        var showContentTooltip = function (event, type) {
            var _a, _b;
            if (type === void 0) { type = "header"; }
            var node = event.target;
            var id = node.getAttribute("data-dhx-text-id");
            var column = _this.getColumn(node.getAttribute("data-dhx-id"));
            if (!id || !column) {
                return;
            }
            var cell = (_a = column[type]) === null || _a === void 0 ? void 0 : _a.find(function (c) { return c.id === id; });
            if (!(0, main_1.isContentTooltip)(_this.config, column, cell, type)) {
                return;
            }
            var isContentFunc = (cell === null || cell === void 0 ? void 0 : cell.content) && ["avg", "sum", "max", "min", "count"].includes(cell.content);
            var value = isContentFunc
                ? (_b = _this.content[cell.content]) === null || _b === void 0 ? void 0 : _b.toHtml(column, __assign(__assign({}, _this.config), { datacollection: _this.data }))
                : cell === null || cell === void 0 ? void 0 : cell.text;
            if (typeof (cell === null || cell === void 0 ? void 0 : cell.tooltipTemplate) === "function") {
                value = cell.tooltipTemplate(value, cell, column);
            }
            if (isContentFunc && typeof column.template === "function") {
                value = column.template(value, cell, column);
            }
            if (value === null || value === void 0 ? void 0 : value.toString().length) {
                (0, main_1.showTooltip)(value, __assign({ node: node, htmlEnable: (0, main_1.isHtmlEnable)(_this.config, column, cell) }, (0, main_1.getTooltipConfig)(_this.config, column, cell, type)));
            }
        };
        _this._htmlEvents = {
            onclick: (0, html_1.eventHandler)(function (e) { return (0, html_1.locate)(e); }, {
                "dhx_grid-header-cell--sortable": function (e, id) {
                    var isResizable = e.target.getAttribute("dhx_resized");
                    var column = _this.getColumn(id);
                    if (column &&
                        (0, main_1.isSortable)(_this.config, column) &&
                        !isResizable &&
                        _this.events.fire(types_1.GridEvents.beforeSort, [
                            column,
                            _this._sortDir === "asc" ? "desc" : "asc",
                        ])) {
                        var textId_1 = (0, html_1.locate)(e, "data-dhx-text-id");
                        var cell = column.header.find(function (item) { return item.id === textId_1; });
                        var dir = _this._sortDir === "asc" && _this._sortBy === id ? "desc" : "asc";
                        _this._sort(id, dir, cell.sortAs);
                    }
                },
                "dhx_grid-expand-cell": function (e, rowId) {
                    if (e.target.classList.contains("dhx_grid-expand-cell-icon")) {
                        _this.events.fire(types_1.GridEvents.expand, [rowId]);
                    }
                },
                "dhx_span-expand-cell": function (e, rowId) {
                    if (e.target.classList.contains("dhx_span-expand-cell-icon")) {
                        _this.events.fire(types_1.GridEvents.expand, [rowId]);
                    }
                },
            }),
            onscroll: function (e) {
                _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
            onmouseover: {
                ".dhx_grid-cell.dhx_boolean-cell .dhx_checkbox.dhx_cell-editor__checkbox": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[2].getAttribute("data-dhx-id"));
                    var column = _this.getColumn(path[1].getAttribute("data-dhx-col-id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell:not(.dhx_boolean-cell)": function (e) {
                    var row = _this.data.getItem(e.composedPath()[1].getAttribute("data-dhx-id"));
                    var column = _this.getColumn(e.target.getAttribute("data-dhx-col-id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell:not(.dhx_tree-cell) .dhx_grid-cell__content, .dhx_tree-cell :not(.dhx_grid-cell__content)": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[2].getAttribute("data-dhx-id"));
                    var column = _this.getColumn(path[1].getAttribute("data-dhx-col-id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell.dhx_tree-cell .dhx_grid-cell__content": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[3].getAttribute("data-dhx-id"));
                    var column = _this.getColumn(path[2].getAttribute("data-dhx-col-id"));
                    showCellTooltip(row, column, path[2]);
                },
                ".dhx_span-cell:not(.dhx_grid-header-cell):not(.dhx_grid-footer-cell)": function (e) {
                    var node = e.target;
                    var row = _this.data.getItem(node.getAttribute("data-dhx-id"));
                    var column = _this.getColumn(node.getAttribute("data-dhx-col-id"));
                    var span = _this.getSpan(row.id, column.id);
                    if (row && span && (0, main_1.isTooltip)(_this.config, span)) {
                        var value = span.text || (0, data_1.toFormat)(row[column.id], column.type, column.format);
                        if (span.tooltipTemplate) {
                            value = span.tooltipTemplate(value, span);
                        }
                        else if (column.template) {
                            value = column.template(value, row, column);
                        }
                        if (value) {
                            (0, main_1.showTooltip)(value, __assign({ node: node, htmlEnable: (0, main_1.isHtmlEnable)(_this.config, column) }, (0, main_1.getTooltipConfig)(_this.config, null, span)));
                        }
                    }
                },
                ".dhx_grid-header-cell": function (event) { return showContentTooltip(event, "header"); },
                ".dhx_grid-footer-cell": function (event) { return showContentTooltip(event, "footer"); },
            },
        };
        if (_this.config.eventHandlers) {
            for (var _i = 0, _a = Object.entries(_this.config.eventHandlers); _i < _a.length; _i++) {
                var _b = _a[_i], name_1 = _b[0], events = _b[1];
                _this._htmlEvents[name_1] = (0, html_1.eventHandler)(function (e) {
                    return {
                        col: _this.getColumn((0, html_1.locate)(e, "data-dhx-col-id") || (0, html_1.locate)(e, "data-dhx-id")) ||
                            {},
                        row: _this.data.getItem((0, html_1.locate)(e, "data-dhx-id")) || {},
                    };
                }, events, _this._htmlEvents[name_1]);
            }
        }
        if (_this.config.dragMode || _this.config.dragItem) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
            if (!_this.config.dragItem) {
                _this.config.dragItem = "row";
            }
            if (!_this.config.dragMode) {
                _this.config.dragMode = "both";
            }
        }
        _this._init();
        if (_this.config.columns) {
            _this._parseColumns(true);
        }
        if (_this._canDataParse()) {
            _this.data.parse(_this.config.data);
        }
        _this.selection = new Selection_1.Selection(_this, {
            disabled: !_this.config.selection,
        }, _this.events, _this._uid);
        _this.mount(container, _this._createView());
        (0, dom_1.awaitRedraw)().then(function () {
            if (_this.config.keyNavigation) {
                _this.keyManager = new KeyManager_1.KeyManager(function (e, focusId) {
                    if (focusId === _this._uid && _this.events.fire(types_1.GridEvents.beforeKeyDown, [e])) {
                        _this.events.fire(types_1.GridEvents.afterKeyDown, [e]);
                        return true;
                    }
                    return false;
                });
                _this._initHotKey();
                FocusManager_1.focusManager.setFocusId(_this._uid);
            }
        });
        if (config.autoEmptyRow && _this.data.getLength() === 0) {
            _this._addEmptyRow();
            _this.paint();
        }
        return _this;
    }
    Grid.prototype.destructor = function () {
        this._destructed = true;
        this._destroyContent();
        this.keyManager && this.keyManager.destructor();
        this.events && this.events.clear();
        this._events && this._events.clear();
        this.export = this.content = this.selection = null;
        this._activeFilters = this._filterData = this._scroll = this._touch = this._htmlEvents = this._hiddenFilters = null;
        this.unmount();
    };
    Grid.prototype.setColumns = function (columns) {
        var _this = this;
        this._destroyContent();
        this.config.columns = columns;
        this._parseColumns(true);
        if ((0, main_1.isAutoWidth)(this.config)) {
            this._applyAutoWidth();
        }
        this._adjustColumns();
        this._checkFilters();
        this._checkMarks();
        this._normalizeSpans();
        this.paint();
        if (this.config.keyNavigation) {
            (0, dom_1.awaitRedraw)().then(function () {
                _this._initHotKey(true);
                _this.paint();
            });
        }
    };
    Grid.prototype.addRowCss = function (rowId, css) {
        var item = this.data.getItem(rowId);
        var styles = item.$css || "";
        if (!styles.match(new RegExp(css, "g"))) {
            item.$css = styles + " ".concat(css);
            this.paint();
        }
    };
    Grid.prototype.removeRowCss = function (rowId, css) {
        var item = this.data.getItem(rowId);
        var styles = item.$css ? item.$css.replace(css, "") : "";
        item.$css = styles;
        this.paint();
    };
    Grid.prototype.addCellCss = function (rowId, colId, css) {
        var column = this.getColumn(colId);
        if (column) {
            column.$cellCss = column.$cellCss || {};
            var cellStyle = column.$cellCss[rowId];
            if (cellStyle) {
                // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
                var newClass = cellStyle.match(new RegExp(css, "g")) ? "" : " ".concat(css);
                column.$cellCss[rowId] += newClass;
            }
            else if (this.data.getItem(rowId)) {
                column.$cellCss[rowId] = "".concat(css, " ");
            }
            this.paint();
        }
    };
    Grid.prototype.removeCellCss = function (rowId, colId, css) {
        var column = this.getColumn(colId);
        if (column) {
            if (column.$cellCss[rowId]) {
                column.$cellCss[rowId] = column.$cellCss[rowId].replace(css, "");
                this.paint();
            }
            else if (this.data.getItem(rowId)) {
                column.$cellCss[rowId] = "";
            }
        }
    };
    Grid.prototype.showColumn = function (colId) {
        var column = this.getColumn(colId);
        if (!column || !column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnShow, [column]))
            return;
        column.hidden = false;
        this.config.$totalWidth += column.$width;
        this._parseColumns();
        this.config.data = this._prepareData(this.data);
        var filter = this._hiddenFilters && this._hiddenFilters[column.id];
        if (filter) {
            this._activeFilters[column.id] = filter;
            delete this._hiddenFilters[column.id];
            this._checkFilters();
            this._checkSelectFilterValue();
        }
        this._normalizeSpans();
        this.paint();
        this.events.fire(types_1.GridEvents.afterColumnShow, [column]);
    };
    Grid.prototype.hideColumn = function (colId) {
        var column = this.getColumn(colId);
        if (!column || column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnHide, [column]))
            return;
        column.hidden = true;
        this.config.$totalWidth -= column.$width;
        this._parseColumns();
        this.config.data = this._prepareData(this.data);
        var filter = this._activeFilters && this._activeFilters[column.id];
        if (filter) {
            if (!this._hiddenFilters) {
                this._hiddenFilters = {};
            }
            this._hiddenFilters[column.id] = filter;
            delete this._activeFilters[column.id];
            this._checkFilters();
        }
        this._normalizeSpans();
        this.paint();
        this.events.fire(types_1.GridEvents.afterColumnHide, [column]);
    };
    Grid.prototype.isColumnHidden = function (colId) {
        var column = this.getColumn(colId);
        if (column) {
            return !!column.hidden;
        }
    };
    Grid.prototype.showRow = function (rowId) {
        if (!(0, core_1.isDefined)(rowId)) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row || !row.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowShow, [row]))
            return;
        this.data.update(id, { hidden: false });
        this._checkFilters(true);
        this.paint();
        this.events.fire(types_1.GridEvents.afterRowShow, [row]);
    };
    Grid.prototype.hideRow = function (rowId) {
        if (!(0, core_1.isDefined)(rowId)) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowHide, [row]))
            return;
        this.data.update(id, { hidden: true });
        this._checkFilters(true);
        this._checkSelectFilterValue();
        this.paint();
        this.events.fire(types_1.GridEvents.afterRowHide, [row]);
    };
    Grid.prototype.isRowHidden = function (rowId) {
        if (!(0, core_1.isDefined)(rowId)) {
            return;
        }
        var row = this.data.getItem(rowId.toString());
        if (row) {
            return !!row.hidden;
        }
    };
    Grid.prototype.getScrollState = function () {
        return {
            x: this._scroll.left,
            y: this._scroll.top,
        };
    };
    Grid.prototype.scroll = function (x, y) {
        var gridBody = this.getRootView().refs.grid_body.el.querySelector(".scroll-view") ||
            this.getRootView().refs.grid_body.el;
        gridBody.scrollLeft = (x || x === 0) && typeof x === "number" ? x : gridBody.scrollLeft;
        gridBody.scrollTop = (y || y === 0) && typeof y === "number" ? y : gridBody.scrollTop;
        this.paint();
    };
    Grid.prototype.scrollTo = function (rowId, colId) {
        var _a = this.config, topSplit = _a.topSplit, bottomSplit = _a.bottomSplit, columns = _a.columns, $width = _a.$width, $height = _a.$height, $headerHeight = _a.$headerHeight;
        var filteredColumns = columns.filter(function (col) { return !col.hidden; });
        var rows = this.data.getRawData(0, -1, null, 2);
        var colInd = filteredColumns.findIndex(function (col) { return col.id == colId; });
        var rowInd = rows.findIndex(function (row) { return row.id == rowId; });
        if (!(0, core_1.isDefined)(colInd) || !(0, core_1.isDefined)(rowInd))
            return;
        var scrollState = this.getScrollState();
        var selectedCell = this.selection.getCell();
        var prevColInd = selectedCell && columns.findIndex(function (col) { return col.id == selectedCell.column.id; });
        var prevRowInd = selectedCell && rows.findIndex(function (row) { return row.id == selectedCell.row.id; });
        var leftSplit = (0, render_1.getCurrFixedCols)(this.config, types_1.Split.left).length;
        var rightSplit = (0, render_1.getCurrFixedCols)(this.config, types_1.Split.right).length;
        var isFixedLeft = leftSplit && prevColInd < leftSplit;
        var isFixedRight = rightSplit && prevColInd >= columns.length - rightSplit;
        var isFixedTop = topSplit && prevRowInd < topSplit;
        var isFixedBottom = bottomSplit && prevRowInd >= rows.length - bottomSplit;
        var x = (0, main_1.getTotalWidth)(filteredColumns.slice(0, colInd));
        var y = (0, main_1.getTotalHeight)(rows.slice(0, rowInd));
        if (leftSplit) {
            var leftFixedColsWidth = (0, main_1.getTotalWidth)((0, render_1.getCurrFixedCols)(this.config, types_1.Split.left));
            if ((!isFixedLeft && !isFixedRight && colInd < prevColInd) ||
                x - scrollState.x - leftFixedColsWidth < 0) {
                x -= leftFixedColsWidth;
            }
        }
        if (rightSplit) {
            var rightFixedColsWidth = (0, main_1.getTotalWidth)((0, render_1.getCurrFixedCols)(this.config, types_1.Split.right));
            if ((!isFixedLeft && !isFixedRight && colInd > prevColInd) ||
                $width + scrollState.x - x - filteredColumns[colInd].$width - rightFixedColsWidth < 0) {
                x += rightFixedColsWidth;
            }
        }
        if (topSplit) {
            var topFixedRowsHeight = (0, main_1.getTotalHeight)(rows.slice(0, topSplit));
            if ((!isFixedTop && !isFixedBottom && rowInd < prevRowInd) ||
                y - scrollState.y - topFixedRowsHeight < 0) {
                y -= topFixedRowsHeight;
            }
        }
        if (bottomSplit) {
            var bottomFixedRowsHeight = (0, main_1.getTotalHeight)(rows.slice(-bottomSplit));
            if ((!isFixedTop && !isFixedBottom && rowInd > prevRowInd) ||
                $height + scrollState.y - $headerHeight - y - rows[rowInd].$height - bottomFixedRowsHeight < 0) {
                y += bottomFixedRowsHeight;
            }
        }
        var gridRight = $width + scrollState.x;
        var gridBottom = $height + scrollState.y - $headerHeight;
        var cellTop = y - scrollState.y - rows[rowInd].$height;
        var cellLeft = x - scrollState.x - columns[colInd].$width;
        var cellBottom = y + rows[rowInd].$height * 2 + 18 - gridBottom;
        var cellRight = x + columns[colInd].$width * 2 + 18 - gridRight;
        var scrollTop = cellTop > 0 && cellBottom < 0 ? 0 : cellTop < 0 ? cellTop : cellBottom;
        var scrollLeft = cellLeft > 0 && cellRight < 0 ? 0 : cellLeft < 0 ? cellLeft : cellRight;
        this.scroll(scrollLeft + scrollState.x, scrollTop + scrollState.y);
    };
    Grid.prototype.adjustColumnWidth = function (colId, adjust) {
        if (adjust === void 0) { adjust = true; }
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var col = columns.filter(function (col) { return col.id === colId; });
        var totalCols = this._adjustColumnsWidth({
            rows: this.config.data,
            cols: col,
            totalCols: columns,
            adjust: adjust,
        });
        this.config.$totalWidth = columns.reduce(function (totalWidth, column) {
            if (totalCols[column.id]) {
                column.$fixedWidth = true;
                var max = column.maxWidth;
                var min = column.minWidth;
                var width = totalCols[column.id];
                column.$width = width;
                if (max && width > max) {
                    column.$width = max;
                }
                if (min && column.$width < min) {
                    column.$width = min;
                }
            }
            return (totalWidth += column.$width);
        }, 0);
        this.paint();
    };
    Grid.prototype.getCellRect = function (rowId, colId) {
        var _a, _b;
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var rows = this.data.getRawData(0, -1);
        var span = this.getSpan(rowId, colId);
        var colInd = columns.findIndex(function (obj) { return obj.id == (span ? span.column : colId); });
        var rowInd = rows.findIndex(function (obj) { return obj.id == (span ? span.row : rowId); });
        var x = (0, main_1.getTotalWidth)(columns.slice(0, colInd));
        var y = (0, main_1.getTotalHeight)(rows.slice(0, rowInd));
        return {
            x: x,
            y: y,
            height: (span === null || span === void 0 ? void 0 : span.rowspan) > 1 ? (0, cells_1.getHeight)(rows, span) : ((_a = rows[rowInd]) === null || _a === void 0 ? void 0 : _a.$height) || 0,
            width: (span === null || span === void 0 ? void 0 : span.colspan) > 1
                ? (0, cells_1.getWidth)(this.config.columns, span.colspan, this.config.columns.findIndex(function (item) { return item.id === span.column; }))
                : ((_b = columns[colInd]) === null || _b === void 0 ? void 0 : _b.$width) || 0,
        };
    };
    Grid.prototype.getColumn = function (colId) {
        var _a;
        for (var _i = 0, _b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.columns; _i < _b.length; _i++) {
            var col = _b[_i];
            if (col.id == colId) {
                return col;
            }
        }
    };
    Grid.prototype.addSpan = function (spanObj) {
        this.config.spans = this.config.spans || [];
        var index = (0, core_1.findIndex)(this.config.spans, function (span) { return "".concat(span.row) === "".concat(spanObj.row) && "".concat(span.column) === "".concat(spanObj.column); });
        if (index >= 0) {
            this.config.spans[index] = spanObj;
            return;
        }
        this.config.spans.push((0, Cells_1.normalizeSpan)(spanObj, this.config, this.data));
        this._checkMarks();
        this.paint();
    };
    Grid.prototype.getSpan = function (rowId, colId) {
        var _this = this;
        var _a;
        if (this.config.spans) {
            var rowIndex_1 = this.data.getIndex(rowId.toString());
            var colIndex_1 = this.config.columns.findIndex(function (col) { return col.id === colId; });
            var index = (0, core_1.findIndex)(this.config.spans, function (span) {
                var startRowInd = _this.data.getIndex(span.row.toString());
                var startColInd = _this.config.columns.findIndex(function (col) { return col.id === span.column; });
                var rows = {
                    start: startRowInd,
                    end: span.rowspan ? startRowInd + span.rowspan : startRowInd + 1,
                };
                var cols = {
                    start: startColInd,
                    end: span.colspan ? startColInd + span.colspan : startColInd + 1,
                };
                return (rowIndex_1 >= rows.start &&
                    rowIndex_1 < rows.end &&
                    colIndex_1 >= cols.start &&
                    colIndex_1 < cols.end);
            });
            return (_a = this.config) === null || _a === void 0 ? void 0 : _a.spans[index];
        }
    };
    Grid.prototype.removeSpan = function (rowId, colId) {
        if (this.config.spans) {
            var index = (0, core_1.findIndex)(this.config.spans, function (span) { return "".concat(span.row) == "".concat(rowId) && "".concat(span.column) == "".concat(colId); });
            this.config.spans.splice(index, 1);
            this.paint();
        }
    };
    Grid.prototype.editCell = function (rowId, colId, editorType) {
        var _a;
        var row = this.data.getItem(rowId);
        var col = this.getColumn(colId);
        if (!row || !col) {
            (0, ts_data_1.dhxWarning)("item not found");
            return;
        }
        var colEditorType = col.editorType;
        var span = this.getSpan(row.id, col.id);
        if (!editorType) {
            editorType = this.config.autoHeight && col.type !== "number" ? "textarea" : "input";
            if (col.type === "date") {
                editorType = "datePicker";
            }
            if (col.type === "boolean") {
                editorType = "checkbox";
            }
            if (colEditorType) {
                editorType = colEditorType;
            }
            if ((0, core_1.isDefined)(span === null || span === void 0 ? void 0 : span.text)) {
                editorType = this.config.autoHeight ? "textarea" : "input";
            }
        }
        if (col.type === "number") {
            var isTextSpanEditor = (0, core_1.isDefined)(span === null || span === void 0 ? void 0 : span.text) && ["input", "textarea"].includes(editorType);
            if (!isTextSpanEditor && !["input", "select", "combobox"].includes(editorType)) {
                return;
            }
        }
        if (!this.events.fire(types_1.GridEvents.beforeEditStart, [row, col, editorType])) {
            return;
        }
        if (((_a = this.config.$editable) === null || _a === void 0 ? void 0 : _a.editor) ||
            (this.config.$editable &&
                this.config.$editable.row === rowId &&
                this.config.$editable.col === colId &&
                this.config.$editable.editorType === editorType)) {
            return;
        }
        this.config.$editable = {
            row: row.id,
            col: col.id,
            isSpan: !!span,
            editorType: editorType,
        };
        if (!this.selection.config.disabled) {
            this.selection.setCell(rowId.toString(), colId.toString());
        }
        this.paint();
        this.events.fire(types_1.GridEvents.afterEditStart, [row, col, editorType]);
    };
    Grid.prototype.editEnd = function (withoutSave) {
        if (this.config.$editable && this.config.$editable.editor) {
            this.config.$editable.editor.endEdit(withoutSave);
        }
    };
    Grid.prototype.getSortingState = function () {
        return { dir: this._sortDir, by: this._sortBy };
    };
    Grid.prototype.getHeaderFilter = function (colId) {
        var _this = this;
        var col = this.getColumn(colId);
        if (!col) {
            return;
        }
        var filter = null;
        col.header.forEach(function (cell) {
            if (cell.content) {
                filter = _this.content[cell.content].element[colId];
            }
        });
        return filter;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Grid.prototype.edit = function (rowId, colId, editorType) {
        this.editCell(rowId, colId, editorType);
    };
    Grid.prototype.paint = function () {
        var customHotkeysLength = this.config.hotkeys ? Object.keys(this.config.hotkeys).length : 0;
        if (this.keyManager && !(this.keyManager.getKeyStorageLength() - customHotkeysLength)) {
            this._initHotKey(true);
        }
        _super.prototype.paint.call(this);
    };
    Grid.prototype._createView = function () {
        var _this = this;
        return (0, dom_1.create)({
            render: function (vm, obj) {
                return _this._destructed
                    ? (0, dom_1.el)("div")
                    : (0, render_1.render)(vm, obj, _this._htmlEvents, _this.selection, _this._uid);
            },
            hooks: this._initHooks(),
        }, this);
    };
    Grid.prototype._parseColumns = function (configChanged) {
        if (configChanged === void 0) { configChanged = false; }
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        this.normalizeColumns({ config: this.config, columns: columns, configChanged: configChanged });
        (0, data_1.countColumns)(this.config, columns);
    };
    Grid.prototype.normalizeColumns = function (_a) {
        var _this = this;
        var _b, _c, _d;
        var config = _a.config, columns = _a.columns, configChanged = _a.configChanged;
        config.$headerHeightMap = [];
        config.$footerHeightMap = [];
        config.$headerHeight = config.$footerHeight = 0;
        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
            var col = columns_1[_i];
            col.htmlEnable = (_b = col.htmlEnable) !== null && _b !== void 0 ? _b : config.htmlEnable;
            col.$cellCss = col.$cellCss || {};
            (0, data_1.normalizeArray)(col, "header");
            (0, data_1.normalizeArray)(col, "footer");
            if (col.minWidth && col.minWidth < 20)
                col.minWidth = 20;
            if (col.maxWidth && col.maxWidth < 20)
                col.maxWidth = 20;
            var width = col.minWidth || 100;
            if (col.width) {
                if (col.maxWidth && col.minWidth) {
                    width =
                        col.width >= col.minWidth && col.width <= col.maxWidth
                            ? col.width
                            : col.width >= col.maxWidth
                                ? col.maxWidth
                                : col.minWidth;
                }
                else if (col.maxWidth) {
                    width = col.width <= col.maxWidth ? col.width : col.maxWidth > 100 ? col.maxWidth : 100;
                }
                else if (col.minWidth) {
                    width = col.width >= col.minWidth ? col.width : col.minWidth;
                }
                else {
                    width = col.width;
                }
                width = width < 20 ? 20 : width;
            }
            col.$width = col.$width && !configChanged ? col.$width : width;
            if (col.$width > col.maxWidth) {
                col.$width = col.maxWidth;
            }
            if (col.$width < col.minWidth) {
                col.$width = col.minWidth;
            }
        }
        var _loop_1 = function (col) {
            if ((_c = col.header) === null || _c === void 0 ? void 0 : _c.length) {
                var currentHeight_1 = 0;
                col.header.forEach(function (header, index) {
                    if (config.headerAutoHeight) {
                        currentHeight_1 = _this.getNormalizeContentHeight(header, col, config);
                    }
                    else {
                        currentHeight_1 = config.headerRowHeight;
                    }
                    if (currentHeight_1 > (config.$headerHeightMap[index] || 0)) {
                        config.$headerHeightMap[index] = Math.max(currentHeight_1, config.headerRowHeight);
                    }
                });
            }
            if ((_d = col.footer) === null || _d === void 0 ? void 0 : _d.length) {
                var currentHeight_2 = 0;
                col.footer.forEach(function (footer, index) {
                    if (config.footerAutoHeight) {
                        currentHeight_2 = _this.getNormalizeContentHeight(footer, col, config);
                    }
                    else {
                        currentHeight_2 = config.footerRowHeight;
                    }
                    if (currentHeight_2 > (config.$footerHeightMap[index] || 0)) {
                        config.$footerHeightMap[index] = Math.max(currentHeight_2, config.footerRowHeight);
                    }
                });
            }
        };
        for (var _e = 0, columns_2 = columns; _e < columns_2.length; _e++) {
            var col = columns_2[_e];
            _loop_1(col);
        }
        config.$headerHeight = config.$headerHeightMap.reduce(function (acc, cur) { return (acc += cur); }, 0);
        config.$footerHeight = config.$footerHeightMap.reduce(function (acc, cur) { return (acc += cur); }, 0);
    };
    Grid.prototype.getNormalizeContentHeight = function (row, col, config) {
        return this.config.footerRowHeight;
    };
    Grid.prototype._parseData = function () {
        this._detectColsTypes();
        this.config.data = this.data.map(function (row) { return row; });
        this.config.data = this._prepareData(this.data);
        this._checkMarks();
        this._applyLocalFilter();
        this._checkFilters();
    };
    Grid.prototype._createCollection = function (prep) {
        this.data = new ts_data_1.DataCollection({ prep: prep }, this.events);
    };
    Grid.prototype._getRowIndex = function (rowId) {
        return this.data.getIndex(rowId);
    };
    Grid.prototype._setEventHandlers = function () {
        var _this = this;
        var updater = function (_a) {
            var source = _a.source, target = _a.target, updateObj = __rest(_a, ["source", "target"]);
            if (source === null || source === void 0 ? void 0 : source.length) {
                source.map(function (selectedId) { return _this.data.exists(selectedId) && _this.data.update(selectedId, updateObj); });
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, updateObj);
            }
        };
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            _this._applyLocalFilter(true);
            _this._parseData();
            _this._parseColumns();
            if (_this.config.autoEmptyRow) {
                _this._addEmptyRow();
            }
            if (_this.config.data instanceof ts_data_1.DataCollection) {
                (0, dom_1.awaitRedraw)().then(function () { return _this._normalizeSpans(); });
            }
            else {
                _this._normalizeSpans();
            }
            _this.paint();
        });
        this.data.events.on(ts_data_1.DataEvents.change, function (id, status, obj) {
            if (status === "load") {
                return;
            }
            if (status === "setPage") {
                (0, dom_1.awaitRedraw)().then(function () {
                    var colVisible = _this.config.columns.find(function (col) { return col.hidden !== true; });
                    _this.scrollTo(_this.data.getId(obj[0]).toString(), colVisible.id.toString());
                    _this._render();
                });
                return;
            }
            if (status === "sort") {
                if (!obj.dir) {
                    if (_this._sortBy === obj.by) {
                        _this._sortDir = _this._sortDir === "asc" ? "desc" : "asc";
                    }
                    else {
                        _this._sortDir = "asc";
                    }
                }
                else {
                    _this._sortDir = obj.dir;
                }
                _this._sortBy = obj.by;
            }
            else if (status === "add" || status === "update" || status === "remove") {
                if ((0, core_1.isId)(id) && status === "remove") {
                    var removed = _this.selection.getCells().find(function (cell) { return cell.row.id === id; });
                    removed && _this.selection.removeCell(removed.row.id, removed.column.id);
                }
                _this.config.data = _this._prepareData(_this.data);
            }
            else {
                if ((0, ts_data_1.isTreeCollection)(_this.data)) {
                    _this.config.data = _this._prepareData(_this.data);
                }
                _this._adjustColumns();
            }
            if ((0, core_1.isId)(id)) {
                _this._checkFilters();
                _this._checkSelectFilterValue();
            }
            _this._detectColsTypes();
            _this._removeMarks();
            _this._checkMarks();
            if (_this.config.autoEmptyRow && (!_this._activeFilters || (0, core_1.isEmptyObj)(_this._activeFilters))) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    if (emptyRow.id === id)
                        return;
                    _this.data.move(emptyRow.id, _this.data.getLength() - 1);
                }
                else {
                    _this._addEmptyRow();
                }
            }
            switch (status) {
                case "add":
                case "remove":
                case "sort":
                    _this._normalizeSpans();
            }
            _this._render();
        });
        this.data.events.on(ts_data_1.DataEvents.filter, function (filters) {
            if (!filters && !_this.data.getRawFilters({ permanent: true })) {
                _this._applyLocalFilter();
            }
            if (!filters || (0, ts_data_1.isOnlyPermanentFilters)(filters)) {
                _this._filterData = _this.data.map(function (el) { return el; }) || [];
                _this._setUniqueData();
                _this._clearFilterValue();
            }
            else {
                _this._checkFilters();
            }
            _this._removeMarks();
            _this._checkMarks();
            _this._normalizeSpans();
            _this.paint();
        });
        this.data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this._hiddenFilters = {};
            _this.config.columns.map(function (col) {
                col.header.map(function (cell) {
                    if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                        col.$uniqueData = [];
                    }
                });
            });
            if (!(0, core_1.isEmptyObj)(_this._activeFilters)) {
                _this.data.resetFilter();
            }
            _this._clearFilterValue(true);
        });
        this.events.on(ts_data_1.DragEvents.beforeDrag, function (data, events) {
            if (_this.data.getItem(data.start)) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrag, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragStart, function (data, events) {
            var source = data.source, target = data.target, start = data.start;
            updater({
                source: source,
                target: target,
                $dragtarget: true,
            });
            if (_this.data.getItem(start)) {
                _this.events.fire(types_1.GridEvents.dragRowStart, [data, events]);
                _this._autoScroll("vertical");
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnStart, [data, events]);
                _this._autoScroll("horizontal");
            }
        });
        this.events.on(ts_data_1.DragEvents.dragIn, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowIn, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnIn, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragOut, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowOut, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnOut, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.canDrop, function (data, events) {
            var _a = data, source = _a.source, target = _a.target, dragItem = _a.dragItem;
            delete data.dragItem;
            updater({
                source: source,
                target: target,
                $drophere: true,
            });
            if (dragItem === "row") {
                _this.events.fire(types_1.GridEvents.canRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.canColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.cancelDrop, function (data, events) {
            var source = data.source, target = data.target, start = data.start;
            updater({
                source: source,
                target: target,
                $drophere: undefined,
                $dragtarget: undefined,
            });
            if (_this.data.getItem(start)) {
                _this.events.fire(types_1.GridEvents.cancelRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.cancelColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.beforeDrop, function (data, events) {
            if (_this.config.dragItem === "row" &&
                (_this.config.dragMode === "both" || _this.config.dragMode === "target")) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrop, function (data, events) {
            var _a;
            var _b;
            if (_this.data.getItem(data.start)) {
                var source = data.source;
                if (source.some(function (id) { return id == data.target; }))
                    return;
                var item = _this.data.getItem(data.start);
                for (var _i = 0, _c = _this.config.columns; _i < _c.length; _i++) {
                    var col = _c[_i];
                    if (typeof item[col.id] === "undefined") {
                        _this.data.update(item.id, (_a = {}, _a[col.id] = null, _a), true);
                    }
                }
                var initData = _this.data.getInitialData();
                var startIndex = initData === null || initData === void 0 ? void 0 : initData.findIndex(function (item) { return item.id == data.start; });
                var targetIndex = initData === null || initData === void 0 ? void 0 : initData.findIndex(function (item) { return item.id == data.target; });
                if (startIndex > -1 && targetIndex > -1) {
                    if (((_b = data.source) === null || _b === void 0 ? void 0 : _b.length) > 1) {
                        var moveData = [];
                        var _loop_2 = function (id) {
                            var itemIndex = initData === null || initData === void 0 ? void 0 : initData.findIndex(function (item) { return item.id == id; });
                            var moveItem = initData === null || initData === void 0 ? void 0 : initData.splice(itemIndex, 1)[0];
                            moveData.push(moveItem);
                        };
                        for (var _d = 0, source_1 = source; _d < source_1.length; _d++) {
                            var id = source_1[_d];
                            _loop_2(id);
                        }
                        targetIndex = initData === null || initData === void 0 ? void 0 : initData.findIndex(function (item) { return item.id == data.target; });
                        if (targetIndex > 0)
                            ++targetIndex;
                        initData === null || initData === void 0 ? void 0 : initData.splice.apply(initData, __spreadArray([targetIndex, 0], moveData, false));
                    }
                    else {
                        initData === null || initData === void 0 ? void 0 : initData.splice(targetIndex, 0, initData === null || initData === void 0 ? void 0 : initData.splice(startIndex, 1)[0]);
                    }
                }
                _this.config.data = _this._prepareData(initData || _this.data.map(function (i) { return i; }));
                _this.data.parse(_this.config.data);
                _this._checkFilters();
                _this.paint();
                _this.events.fire(types_1.GridEvents.afterRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.afterColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrag, function (data, events) {
            var source = data.source, target = data.target, start = data.start;
            updater({
                source: source,
                target: target,
                $dragtarget: undefined,
            });
            if (_this.data.getItem(start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.afterColumnDrag, [data, events]);
            }
            _this.config.data = _this._prepareData(_this.data instanceof Array ? _this.data.map(function (i) { return i; }) : _this.data.getInitialData() || _this.data);
            _this.data.parse(_this.config.data);
            _this._normalizeSpans();
        });
        // TODO: When introducing touch events, remove system events
        this.events.on(types_1.GridEvents.cellMouseDown, function (row, col, e) {
            if (!e.targetTouches) {
                _this._dragStart(e);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        if ((col.editable !== false && _this.config.editable) || col.editable) {
                            _this.editCell(row.id, col.id, col.editorType);
                        }
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.cellDblClick, [row, col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this._events.on(types_1.GridSystemEvents.cellTouchMove, function (_row, _col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.cellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        this.events.on(types_1.GridEvents.filterChange, function (val, colId, filter, silent) {
            var _a, _b, _c;
            if (!_this.events.fire(types_1.GridEvents.beforeFilter, [val, colId])) {
                return;
            }
            if (_this.config.autoEmptyRow) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    _this.data.remove(emptyRow.id);
                }
            }
            if (!_this._activeFilters) {
                _this._activeFilters = {};
            }
            var columnConfig = _this.getColumn(colId);
            var conf = columnConfig.header.filter(function (item) { return item.content === filter && item.customFilter !== undefined; })[0];
            if ((filter === "comboFilter" && val !== undefined) || (filter !== "comboFilter" && val !== "")) {
                var options_1 = (0, data_1.getEditorOptions)(columnConfig);
                if ((columnConfig.editorType === "combobox" ||
                    columnConfig.editorType === "select" ||
                    columnConfig.editorType === "multiselect") &&
                    options_1) {
                    if (Array.isArray(val)) {
                        val = val.map(function (item) {
                            var _a;
                            return (((_a = options_1.find(function (option) {
                                return typeof option === "string" ? option === item : option.value === item;
                            })) === null || _a === void 0 ? void 0 : _a.id) || item);
                        });
                    }
                    else {
                        val =
                            (_b = (_a = options_1.find(function (option) {
                                return typeof option === "string" ? option === val : option.value === val;
                            })) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : val;
                    }
                }
                var match = function (colId) {
                    var col = _this.getColumn(colId);
                    return function (val, match, obj, multi) {
                        return _this.content[filter].match({ val: val, match: match, obj: obj, multi: multi, col: col });
                    };
                };
                _this._activeFilters[colId] = {
                    by: colId,
                    match: val,
                    compare: (_c = conf === null || conf === void 0 ? void 0 : conf.customFilter) !== null && _c !== void 0 ? _c : match(colId),
                    multi: (columnConfig === null || columnConfig === void 0 ? void 0 : columnConfig.editorType) === "multiselect",
                };
            }
            else {
                delete _this._activeFilters[colId];
            }
            if (!silent) {
                _this.data.filter(_this._activeFilters);
            }
        });
        this.events.on(types_1.GridEvents.scroll, function (scrollState) {
            _this._scroll = { top: scrollState.y, left: scrollState.x };
            _this.editEnd();
            _this.paint();
        });
        this.events.on(types_1.GridEvents.cellDblClick, function (row, col, e) {
            var targetCheckbox = (0, html_1.locateNodeByClassName)(e, "dhx_boolean-cell");
            if (targetCheckbox || row.hasOwnProperty("$groupName"))
                return;
            if ((col.editable !== false && _this.config.editable) || col.editable) {
                _this.editCell(row.id, col.id, col.editorType);
            }
        });
        this.events.on(types_1.GridEvents.afterEditEnd, function (value, eRow, eCol) {
            var _a;
            var _b;
            if (((_b = _this.config.$editable) === null || _b === void 0 ? void 0 : _b.editor) &&
                (_this.config.$editable.col !== eCol.id || _this.config.$editable.row !== eRow.id))
                return;
            var row;
            var col;
            if (!_this.config.$editable) {
                row = eRow.id;
                col = eCol.id;
            }
            else {
                row = _this.config.$editable.row;
                col = _this.config.$editable.col;
            }
            var span = _this.getSpan(row, col);
            if ((0, core_1.isDefined)(span === null || span === void 0 ? void 0 : span.text) && value !== undefined) {
                span.text = value.toString();
            }
            else {
                var item = _this.data.getItem(row);
                delete item.$emptyRow;
                if (value !== undefined) {
                    _this.data.update(row, __assign(__assign({}, item), (_a = {}, _a[col] = value, _a)));
                }
            }
            _this.config.$editable = null;
            _this.paint();
        });
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            var target = e.target;
            var resizedColumn = target.getAttribute("dhx_resized");
            if (resizedColumn && _this.events.fire(types_1.GridEvents.beforeResizeStart, [col, e])) {
                (0, columnsResizer_1.startResize)(_this, resizedColumn.toString(), e, function () {
                    _this.paint();
                    _this.config.$resizing = null;
                    _this.events.fire(types_1.GridEvents.afterResizeEnd, [col, e]);
                });
            }
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.headerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.footerCellDblClick, function (col, e) {
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.footerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.resize, function () { return _this._parseColumns(); });
        this.events.on(types_1.GridEvents.afterResizeEnd, function (col) {
            var _a;
            _this.config.columns = (_a = _this.config.columns) === null || _a === void 0 ? void 0 : _a.map(function (c) {
                if (c.id == col.id)
                    c.width = col.$width;
                return c;
            });
            _this._parseColumns();
        });
    };
    Grid.prototype._addEmptyRow = function () {
        var id = this.data.getId(this.data.getLength() - 1);
        var lastRow = this.data.getItem(id);
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var isEmpty = (0, main_1.isRowEmpty)(lastRow);
        if (!isEmpty) {
            this.data.add(columns.reduce(function (total, col) {
                total[col.id] = "";
                return total;
            }, { $emptyRow: true }));
        }
    };
    Grid.prototype._sort = function (by, dir, sortAs) {
        var _this = this;
        if (!dir) {
            if (this._sortBy === by) {
                dir = this._sortDir === "asc" ? "desc" : "asc";
            }
            else {
                dir = "asc";
            }
        }
        var defaultAs = function (item) {
            var col = _this.getColumn(by);
            if (item && col.type === "date") {
                return typeof item === "string" ? (0, date_1.stringToDate)(item, col.format).getTime() : item.getTime();
            }
            return item ? "".concat(item) : "";
        };
        this.data.sort({
            by: by,
            dir: dir,
            as: sortAs !== null && sortAs !== void 0 ? sortAs : defaultAs,
        });
        this.events.fire(types_1.GridEvents.afterSort, [this.getColumn(by), dir]);
    };
    Grid.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    Grid.prototype._checkFilters = function (reset) {
        if (reset === void 0) { reset = false; }
        if ((0, core_1.isEmptyObj)(this._activeFilters)) {
            if (reset) {
                this.data.resetFilter();
            }
            this._filterData = this.data.map(function (el) { return el; }) || [];
            this._setUniqueData();
        }
        else {
            var permFilters = this.data.getRawFilters({ permanent: true });
            this.data.filter(permFilters, { $restore: true }, true);
            this._filterData = this.data.map(function (el) { return el; }) || [];
            this._setUniqueData();
            this.data.filter(null, { $restore: true }, true);
            this._filterData = this.data.map(function (el) { return el; }) || [];
            this._setUniqueData(true);
        }
    };
    Grid.prototype._setUniqueData = function (sync) {
        var _this = this;
        if (sync === void 0) { sync = false; }
        if (!this._filterData)
            return;
        this.config.columns.forEach(function (col) {
            col.header.forEach(function (cell) {
                if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                    var multi = col.header.some(function (i) { var _a; return (_a = i.filterConfig) === null || _a === void 0 ? void 0 : _a.multiselection; });
                    var customFilter = col.header.some(function (i) { var _a; return (_a = i.filterConfig) === null || _a === void 0 ? void 0 : _a.filter; });
                    if (!sync || (sync && !multi && !customFilter)) {
                        var unique = (0, data_1.getUnique)(_this._filterData, col.id, multi);
                        var options_2 = (0, data_1.getEditorOptions)(col);
                        if ((col.editorType === "combobox" ||
                            col.editorType === "select" ||
                            col.editorType === "multiselect") &&
                            options_2) {
                            unique = unique.map(function (item) {
                                var foundItem = options_2.find(function (option) {
                                    return typeof option === "string" ? item === option : item === option.id;
                                });
                                return foundItem && typeof foundItem !== "string" ? foundItem.value : item;
                            });
                        }
                        unique =
                            col.type !== "string"
                                ? Array.from(new Set(unique.map(function (val) { return (0, data_1.toFormat)(val, col.type, col.format); })))
                                : unique;
                        if (!sync) {
                            col.$uniqueData = unique;
                            if (col.$activeFilterData)
                                delete col.$activeFilterData;
                        }
                        else {
                            col.$activeFilterData = unique;
                        }
                    }
                }
            });
        });
    };
    Grid.prototype._checkSelectFilterValue = function () {
        var _a;
        var filter = (_a = this.content) === null || _a === void 0 ? void 0 : _a.selectFilter;
        if (!filter)
            return;
        for (var key in filter.value) {
            var col = this.getColumn(key);
            var val = filter.value[key];
            if (!col.hidden && val && !col.$uniqueData.includes(val)) {
                filter.element[key].clear();
            }
        }
    };
    Grid.prototype._clearFilterValue = function (allCols) {
        var _this = this;
        if (allCols === void 0) { allCols = false; }
        var filters = ["selectFilter", "inputFilter"].map(function (i) { var _a; return (_a = _this.content) === null || _a === void 0 ? void 0 : _a[i]; }).filter(function (i) { return i; });
        filters.forEach(function (filter) {
            for (var key in filter.value) {
                if (filter.value[key] && (allCols || !_this.getColumn(key).hidden)) {
                    filter.element[key].clear(true);
                }
            }
        });
    };
    Grid.prototype._adjustColumns = function () {
        var _this = this;
        if (typeof this.config.adjust === "boolean" ||
            this.config.adjust === "data" ||
            this.config.adjust === "header" ||
            this.config.adjust === "footer") {
            var columns = this.config.columns.filter(function (col) { return !col.hidden; });
            if (!columns.length)
                return;
            var data = !this.config.data || !this.config.data.length ? this.data.map(function (row) { return row; }) : this.config.data;
            var totalCols_1 = this._adjustColumnsWidth({
                rows: data,
                cols: columns,
                totalCols: columns,
            });
            this.config.$totalWidth = columns.reduce(function (totalWidth, column) {
                column.$fixedWidth = true;
                var max = column.maxWidth;
                var min = column.minWidth;
                var width = totalCols_1[column.id];
                column.$width = width;
                if (max && width > max) {
                    column.$width = max;
                }
                if (min && column.$width < min) {
                    column.$width = min;
                }
                return (totalWidth += column.$width);
            }, 0);
        }
        else {
            var columns = this.config.columns.filter(function (col) { return !col.hidden && col.adjust; });
            if (!columns.length)
                return;
            columns.forEach(function (col) {
                _this.adjustColumnWidth(col.id, col.adjust);
            });
        }
    };
    Grid.prototype._prepareData = function (data) {
        var _this = this;
        if (this.config.autoHeight || this.config.headerAutoHeight || this.config.footerAutoHeight) {
            this.config.autoHeight = this.config.headerAutoHeight = this.config.footerAutoHeight = false;
        }
        this._normalizeDataType();
        this._adjustColumns();
        return data.map(function (row) {
            row.$height = row.height || _this.config.rowHeight;
            return row;
        });
    };
    Grid.prototype._adjustColumnsWidth = function (_a) {
        var _b, _c, _d;
        var _this = this;
        var rows = _a.rows, cols = _a.cols, _e = _a.adjust, adjust = _e === void 0 ? this.config.adjust : _e;
        var HORIZONTAL_OFFSET = 24;
        var iconOffset = function (col) { return ((0, main_1.isSortable)(_this.config, col) ? 16 : 0); };
        var columnsWidth = {};
        if (adjust === "header" || adjust === true) {
            var currentCols = cols.filter(function (col) { return col.header; });
            var data = (0, data_1.getMaxColsWidth)(this._prepareColumnData(currentCols, "header"), currentCols, {
                font: "normal 14.4px Arial",
            }, "header");
            if (data) {
                for (var _i = 0, _f = Object.entries(data); _i < _f.length; _i++) {
                    var _g = _f[_i], key = _g[0], value = _g[1];
                    columnsWidth = Object.assign(columnsWidth, (_b = {},
                        _b[key] = +value + HORIZONTAL_OFFSET + iconOffset(this.getColumn(key)),
                        _b));
                }
            }
        }
        if (adjust === "footer" || adjust === true) {
            var currentCols = cols.filter(function (col) { return col.footer; });
            var data = (0, data_1.getMaxColsWidth)(this._prepareColumnData(currentCols, "footer"), currentCols, {
                font: "normal 14.4px Arial",
            }, "footer");
            if (data) {
                for (var _h = 0, _j = Object.entries(data); _h < _j.length; _h++) {
                    var _k = _j[_h], key = _k[0], value = _k[1];
                    if ((columnsWidth[key] && columnsWidth[key] < +value + HORIZONTAL_OFFSET) ||
                        !columnsWidth[key]) {
                        columnsWidth = Object.assign(columnsWidth, (_c = {},
                            _c[key] = +value + HORIZONTAL_OFFSET,
                            _c));
                    }
                }
            }
        }
        if (adjust === "data" || adjust === true) {
            var data = (0, data_1.getMaxColsWidth)(rows, cols, {
                font: "normal 14.4px Arial",
            }, "data");
            if (data) {
                for (var _l = 0, _m = Object.entries(data); _l < _m.length; _l++) {
                    var _o = _m[_l], key = _o[0], value = _o[1];
                    if ((columnsWidth[key] && columnsWidth[key] < +value + HORIZONTAL_OFFSET) ||
                        !columnsWidth[key]) {
                        columnsWidth = Object.assign(columnsWidth, (_d = {},
                            _d[key] = +value + HORIZONTAL_OFFSET,
                            _d));
                    }
                }
            }
        }
        return columnsWidth;
    };
    Grid.prototype._prepareColumnData = function (data, type) {
        var _a;
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var totalRow = [];
        for (var i = 0; i < data.length; i++) {
            var row = [];
            for (var k = 0; k < ((_b = data[i]) === null || _b === void 0 ? void 0 : _b[type].length); k++) {
                var rowData = {};
                if ((_d = (_c = data[i]) === null || _c === void 0 ? void 0 : _c[type][k]) === null || _d === void 0 ? void 0 : _d.text) {
                    var isHTML = (_f = (_e = data[i]) === null || _e === void 0 ? void 0 : _e[type][k]) === null || _f === void 0 ? void 0 : _f.htmlEnable;
                    rowData[data[i].id] = ((_h = (_g = data[i]) === null || _g === void 0 ? void 0 : _g[type][k]) === null || _h === void 0 ? void 0 : _h.text) || "";
                    if (isHTML) {
                        rowData[data[i].id] = (0, main_1.removeHTMLTags)(rowData[data[i].id]);
                    }
                    row.push(rowData);
                }
                else if ((_k = (_j = data[i]) === null || _j === void 0 ? void 0 : _j[type][k]) === null || _k === void 0 ? void 0 : _k.content) {
                    var content = (_l = this.content) === null || _l === void 0 ? void 0 : _l[(_o = (_m = data[i]) === null || _m === void 0 ? void 0 : _m[type][k]) === null || _o === void 0 ? void 0 : _o.content];
                    if (typeof content.calculate === "function") {
                        rowData[data[i].id] =
                            (content === null || content === void 0 ? void 0 : content.toHtml(this.getColumn(data[i].id), __assign(__assign({}, this.config), { datacollection: this.data }))) || "";
                    }
                    else {
                        rowData[data[i].id] = "";
                    }
                    row.push(rowData);
                }
            }
            for (var j = 0; j < row.length; j++) {
                for (var _i = 0, _p = Object.entries(row[j]); _i < _p.length; _i++) {
                    var _q = _p[_i], key = _q[0], value = _q[1];
                    totalRow[j] = __assign({}, totalRow[j]) || {};
                    totalRow[j] = Object.assign(totalRow[j], (_a = {}, _a[key] = value, _a));
                }
            }
        }
        return totalRow;
    };
    Grid.prototype._dragStart = function (event) {
        if (this.config.dragMode &&
            (this.config.dragItem === "row" || this.config.dragItem === "both") &&
            !this.config.$editable) {
            var column = this.getColumn(event.target.getAttribute("data-dhx-col-id"));
            if ((column === null || column === void 0 ? void 0 : column.draggable) === false)
                return;
            var item = (0, html_1.locateNode)(event, "data-dhx-id");
            var itemId = item && item.getAttribute("data-dhx-id");
            if (event.targetTouches) {
                this._touch.start = true;
            }
            return ts_data_1.dragManager.onMouseDown(event, [itemId], [this._getRowGhost([itemId])]);
        }
    };
    Grid.prototype._getRowGhost = function (ids) {
        var container = this._container || (0, html_1.toNode)(this._uid);
        var rows = ids.map(function (id) { return container.querySelector(".dhx_grid-row[data-dhx-id=\"".concat(id, "\"]")); });
        var ghostContainer = document.createElement("div");
        rows.forEach(function (node) { return node && ghostContainer.appendChild(node.cloneNode(true)); });
        return ghostContainer;
    };
    Grid.prototype._initHooks = function () {
        var _this = this;
        return {
            didMount: function () {
                if (_this._canDataParse(true)) {
                    if (!_this._container) {
                        _this._applyAutoWidth();
                    }
                    _this.data.parse(_this.config.data);
                }
                if (_this.config.autoWidth) {
                    _this._parseColumns();
                }
            },
        };
    };
    Grid.prototype._normalizeDataType = function () {
        var _this = this;
        var numberColumns = this.config.columns.reduce(function (arr, col) {
            if (col.type === "number")
                arr.push(col);
            return arr;
        }, []);
        if (!numberColumns.length)
            return;
        this.data.forEach(function (item) {
            var _a;
            for (var _i = 0, numberColumns_1 = numberColumns; _i < numberColumns_1.length; _i++) {
                var col = numberColumns_1[_i];
                var value = (0, data_1.getValueForNumberColumn)(col, item[col.id]);
                if (Number.isNaN(value)) {
                    throw new Error("Incorrect data in column with type 'number', see docs: https://docs.dhtmlx.com/suite/grid/api/api_gridcolumn_properties/");
                }
                else if (item[col.id] !== value) {
                    _this.data.update(item.id, (_a = {}, _a[col.id] = value, _a), true);
                }
            }
        });
    };
    Grid.prototype._applyLocalFilter = function (beforePrepareData) {
        if (beforePrepareData === void 0) { beforePrepareData = false; }
        var filterConfig = { add: true, permanent: true, $local: true };
        var filters = this.data.getRawFilters();
        var localFilter = Object.keys(filters || {}).find(function (key) { return filters[key].config.$local; });
        if (localFilter) {
            filterConfig.id = localFilter;
        }
        if (beforePrepareData) {
            this.data.filter(function (i) { return i; }, filterConfig, true);
        }
        else {
            this.data.filter(function (i) { return i && !i.hidden; }, filterConfig, true);
        }
    };
    Grid.prototype._normalizeSpans = function () {
        var _this = this;
        var _a;
        this.config.spans = (_a = this.config.spans) === null || _a === void 0 ? void 0 : _a.map(function (span) { return (0, Cells_1.normalizeSpan)(span, _this.config, _this.data); });
    };
    Grid.prototype._canDataParse = function (afterMount) {
        var _a;
        if (afterMount === void 0) { afterMount = false; }
        if (((_a = this.config.data) === null || _a === void 0 ? void 0 : _a.length) && this.config.data instanceof Array && this.config.columns) {
            return this.config.autoWidth && this.config.autoHeight ? afterMount : !afterMount;
        }
        return false;
    };
    Grid.prototype._init = function () {
        this.events = new events_1.EventSystem(this);
        this._events = new events_1.EventSystem(this);
        this._attachDataCollection();
        this.export = new Exporter_1.Exporter("grid", this.version, this);
        this._setEventHandlers();
    };
    Grid.prototype._attachDataCollection = function () {
        var _this = this;
        var prep = function (data) {
            if (data.spans) {
                _this.config.spans = data.spans;
                data = data.data;
            }
            return data;
        };
        if (this.config.data instanceof ts_data_1.DataCollection) {
            this.data = this.config.data;
            this.data.config.collapsed = this.config.collapsed;
            this.config.data = this.data.serialize();
            return;
        }
        this._createCollection(prep);
    };
    Grid.prototype._setMarks = function (col, func) {
        var colCellsData = [];
        var colCells = this.data.map(function (row) {
            colCellsData.push(row[col.id]);
            return {
                id: row.id,
                data: row[col.id],
                row: row,
            };
        });
        for (var _i = 0, colCells_1 = colCells; _i < colCells_1.length; _i++) {
            var cell = colCells_1[_i];
            var css = func(cell.data, colCellsData, cell.row, col);
            if (css) {
                col.$cellCss = col.$cellCss || {};
                col.$cellCss[cell.id] += " " + css;
            }
        }
    };
    Grid.prototype._checkMarks = function () {
        var _this = this;
        this.config.columns.map(function (col) {
            var mark = col.mark;
            if (mark) {
                if (typeof mark === "function") {
                    _this._setMarks(col, mark);
                }
                else {
                    _this._setMarks(col, function (el, c) {
                        var data = [];
                        c.forEach(function (item) {
                            if (item !== null && item !== undefined && item !== "") {
                                data.push(parseFloat(item));
                            }
                        });
                        var min = (0, core_1.getMinArrayNumber)(data);
                        var max = (0, core_1.getMaxArrayNumber)(data);
                        if (mark.max && max === parseFloat(el)) {
                            return mark.max;
                        }
                        if (mark.min && min === parseFloat(el)) {
                            return mark.min;
                        }
                        return false;
                    });
                }
            }
        });
    };
    Grid.prototype._removeMarks = function () {
        this.config.columns.forEach(function (col) {
            if (col.mark) {
                col.$cellCss = {};
            }
        });
    };
    // [todo] make more smart type detection
    Grid.prototype._detectColsTypes = function () {
        this.config.columns.forEach(function (col) {
            if (col.type) {
                return col;
            }
            if (col.format) {
                col.type = "number";
                return col;
            }
            if (!col.type) {
                col.type = "string";
            }
        });
    };
    Grid.prototype._destroyContent = function () {
        for (var contentName in this.content) {
            if (contentName === "comboFilter") {
                this.content[contentName].destroy();
            }
        }
    };
    Grid.prototype._render = function () {
        this.paint();
    };
    Grid.prototype._initHotKey = function (secondInit) {
        if (secondInit === void 0) { secondInit = false; }
        var handlers = (0, keys_1.getKeysHandlers)(this);
        for (var key in handlers) {
            if (!this.keyManager.exist(key))
                this.keyManager.addHotKey(key, handlers[key]);
        }
        if (!secondInit) {
            for (var key in this.config.hotkeys) {
                this.keyManager.addHotKey(key, this.config.hotkeys[key]);
            }
        }
    };
    Grid.prototype._normalizeConfig = function (config) {
        Object.keys(config).forEach(function (key) {
            if (key.startsWith("$"))
                delete config[key];
        });
        return config;
    };
    Grid.prototype._autoScroll = function (mode) {
        var _a, _b, _c;
        var elem = ((_a = this.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable)
            ? (_b = this.getRootNode()) === null || _b === void 0 ? void 0 : _b.querySelector(".scroll-view")
            : (_c = this.getRootNode()) === null || _c === void 0 ? void 0 : _c.querySelector(".dhx_grid-body");
        if (!elem)
            return;
        var timer = null;
        var _d = elem.getBoundingClientRect(), elemTop = _d.top, elemBottom = _d.bottom, elemLeft = _d.left, elemRight = _d.right, elemHeight = _d.height, elemWidth = _d.width;
        var STEP = 40;
        var DELAY = 100;
        var FIELD_WIDTH = 30;
        var scroll = function (direction) {
            if (direction === "up" || direction === "down") {
                elem.scrollBy(0, direction === "up" ? -STEP : STEP);
            }
            else {
                elem.scrollBy(direction === "left" ? -STEP : STEP, 0);
            }
            timer = setTimeout(function () {
                scroll(direction);
            }, DELAY);
        };
        var handler = function (e) {
            var xPos = e.clientX;
            var yPos = e.clientY;
            switch (mode) {
                case "horizontal":
                    if (xPos > elemRight - FIELD_WIDTH &&
                        xPos < elemRight &&
                        yPos > elemTop &&
                        yPos < elemBottom) {
                        timer || scroll("right");
                    }
                    else if (xPos > elemLeft &&
                        xPos < elemLeft + FIELD_WIDTH &&
                        yPos > elemTop &&
                        yPos < elemBottom) {
                        timer || scroll("left");
                    }
                    else if (timer) {
                        clearTimeout(timer);
                        timer = null;
                    }
                    break;
                case "vertical":
                    if (yPos > elemBottom - FIELD_WIDTH &&
                        yPos < elemBottom &&
                        xPos > elemLeft &&
                        xPos < elemRight) {
                        timer || scroll("down");
                    }
                    else if (yPos > elemTop &&
                        yPos < elemTop + FIELD_WIDTH &&
                        xPos > elemLeft &&
                        xPos < elemRight) {
                        timer || scroll("up");
                    }
                    else if (timer) {
                        clearTimeout(timer);
                        timer = null;
                    }
                    break;
            }
        };
        if (elemWidth < elem.scrollWidth || elemHeight < elem.scrollHeight) {
            document.addEventListener("pointermove", handler);
            document.addEventListener("pointerup", function () {
                document.removeEventListener("pointermove", handler);
                if (timer)
                    clearTimeout(timer);
            }, { once: true });
        }
    };
    Grid.prototype._applyAutoWidth = function () {
        var _a, _b;
        var parentNode = this._container || ((_a = this.getRootView().node.parent) === null || _a === void 0 ? void 0 : _a.el);
        if (!parentNode)
            return;
        var parentSizes = (0, render_1.getElementSizes)(parentNode);
        var scrollView = (_b = this.scrollView) === null || _b === void 0 ? void 0 : _b.config.enable;
        (0, render_1.applyAutoWidth)(this.config, parentSizes, scrollView);
    };
    return Grid;
}(view_1.View));
exports.Grid = Grid;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cell = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var view_1 = __webpack_require__(8);
var types_1 = __webpack_require__(55);
var helpers_1 = __webpack_require__(131);
var events_1 = __webpack_require__(3);
var Layout_1 = __webpack_require__(54);
var Cell = /** @class */ (function (_super) {
    __extends(Cell, _super);
    function Cell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this._disabled = [];
        var p = parent;
        if (p && p.isVisible) {
            _this._parent = p;
        }
        if (_this._parent && _this._parent.events) {
            _this.events = _this._parent.events;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
        }
        _this.config.full =
            _this.config.full === undefined
                ? Boolean(_this.config.header ||
                    _this.config.collapsable ||
                    _this.config.headerHeight ||
                    _this.config.headerIcon ||
                    _this.config.headerImage)
                : _this.config.full;
        _this._afterWindowResized = _this._resizedWindow.bind(_this);
        _this.id = _this.config.id || (0, core_1.uid)();
        _this._initHandlers();
        _this._progress = !!_this.config.progressDefault;
        _this._stopProgressDefault = false;
        if (_this._isXDirection() && !config.width)
            config.$autoWidth = true;
        if (!_this._isXDirection() && !config.height)
            config.$autoHeight = true;
        return _this;
    }
    Cell.prototype.paint = function () {
        var _a;
        if (this.isVisible()) {
            var view = this.getRootView();
            if (view) {
                view.redraw();
            }
            else {
                (_a = this._parent) === null || _a === void 0 ? void 0 : _a.paint();
            }
        }
    };
    Cell.prototype.isVisible = function () {
        var _a;
        // top level node
        if (!this._parent) {
            if (this._container && this._container.tagName) {
                return true;
            }
            return Boolean(this.getRootNode());
        }
        // check active view in case of multiview
        var active = (_a = this._parent.config) === null || _a === void 0 ? void 0 : _a.activeView;
        if (active && active !== this.id) {
            return false;
        }
        // check that all parents of the cell are visible as well
        return !this.config.hidden && (!this._parent || this._parent.isVisible());
    };
    Cell.prototype.hide = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeHide, [this.id])) {
            return;
        }
        this.config.hidden = true;
        this._resetCellsSize();
        if (this._parent && this._parent.paint) {
            this._parent.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterHide, [this.id]);
    };
    Cell.prototype.show = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeShow, [this.id])) {
            return;
        }
        if (this._parent && this._parent.config && this._parent.config.activeView !== undefined) {
            this._parent.config.activeView = this.id;
        }
        else {
            this.config.hidden = false;
        }
        if (this._parent && !this._parent.isVisible()) {
            this._parent.show();
        }
        this.paint();
        this.events.fire(types_1.LayoutEvents.afterShow, [this.id]);
    };
    Cell.prototype.expand = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeExpand, [this.id])) {
            return;
        }
        this.config.collapsed = false;
        this._checkNextSize() || this._checkNextSize(this._getAnyFlexCell());
        this.events.fire(types_1.LayoutEvents.afterExpand, [this.id]);
        this.paint();
    };
    Cell.prototype.collapse = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeCollapse, [this.id])) {
            return;
        }
        this.config.collapsed = true;
        this._checkNextSize() || this._checkNextSize(this._getAnyFlexCell());
        this.events.fire(types_1.LayoutEvents.afterCollapse, [this.id]);
        this.paint();
    };
    Cell.prototype.toggle = function () {
        if (this.config.collapsed) {
            this.expand();
        }
        else {
            this.collapse();
        }
    };
    Cell.prototype._checkNextSize = function (cell) {
        var nextCell = cell !== null && cell !== void 0 ? cell : this._getNextCell();
        if (!nextCell)
            return false;
        if (this._isXDirection() && nextCell.config.$autoWidth && nextCell.config.width) {
            nextCell.config.width = undefined;
            return true;
        }
        if (!this._isXDirection() && nextCell.config.$autoHeight && nextCell.config.height) {
            nextCell.config.height = undefined;
            return true;
        }
        return !cell ? nextCell._checkNextSize() : false;
    };
    Cell.prototype.getParent = function () {
        return this._parent;
    };
    Cell.prototype.destructor = function () {
        var _a;
        this.events && this.events.clear();
        window.removeEventListener("resize", this._afterWindowResized);
        if (this._ui && this._ui.config && typeof ((_a = this._ui) === null || _a === void 0 ? void 0 : _a.destructor) === "function") {
            this._ui.destructor();
        }
        this.config = this.events = this.id = this._parent = this._handlers = this._uid = this._disabled = this._resizerHandlers = null;
        this.unmount();
    };
    Cell.prototype.getWidget = function () {
        return this._ui;
    };
    Cell.prototype.getCellView = function () {
        return this._parent && this._parent.getRefs(this._uid);
    };
    Cell.prototype.attach = function (component, config) {
        this.config.html = null;
        if (typeof component === "object") {
            this._ui = component;
        }
        else if (typeof component === "string") {
            this._ui = new window.dhx[component](null, config);
        }
        else if (typeof component === "function") {
            if (component.prototype instanceof view_1.View) {
                this._ui = new component(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return component(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Cell.prototype.attachHTML = function (html) {
        this.config.html = html;
        this.paint();
    };
    Cell.prototype.detach = function () {
        this._stopProgressDefault = false;
        this._ui = this.config.html = null;
        this.paint();
    };
    Cell.prototype.progressShow = function () {
        if (this.config.progressDefault) {
            this._stopProgressDefault = false;
        }
        this._progress = true;
        this.paint();
    };
    Cell.prototype.progressHide = function () {
        if (this.config.progressDefault) {
            this._stopProgressDefault = true;
        }
        this._progress = false;
        this.paint();
    };
    Cell.prototype.isVisibleProgress = function () {
        return this._progress;
    };
    Cell.prototype.toVDOM = function (nodes) {
        var _a;
        var _b, _c;
        this._saveTheme();
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var isFieldset = this.config.$fieldset;
        var style = this._calculateStyle();
        var stylePadding = (0, core_1.isDefined)(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: "".concat(this.config.padding, "px") }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var progressBar = this._checkProgress() ? this._getProgressBar() : null;
        var kids;
        if (!this.config.html) {
            if (this._ui) {
                var view = this._ui.getRootView();
                if (view.render) {
                    view = (0, dom_1.inject)(view);
                }
                kids = [view];
            }
            else {
                kids = nodes || null;
            }
        }
        var resizer = this.config.resizable && !this._isLastCell() && this._getNextCell() && !this.config.collapsed
            ? (0, dom_1.el)(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid, tabindex: 0 }), [
                (0, dom_1.el)("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var cellContent = isFieldset
            ? (0, dom_1.el)("fieldset.dhx_form-fieldset", {
                class: (this.config.$disabled && " dhx_form-fieldset--disabled") || "",
                style: stylePadding,
                disabled: this.config.$disabled,
            }, [
                (0, dom_1.el)("legend.dhx_form-fieldset-legend", {
                    class: "dhx_form-fieldset-legend--".concat(this.config.labelAlignment || "left"),
                }, this.config.label),
                (0, dom_1.el)(".dhx_layout-cell-content", {
                    class: this._getCss(false),
                }, [].concat(kids)),
            ])
            : this.config.full
                ? [
                    (0, dom_1.el)("div", {
                        tabindex: this.config.collapsable ? "0" : "-1",
                        role: this.config.collapsable ? "button" : null,
                        "aria-label": this.config.collapsable
                            ? "click to ".concat(this.config.collapsed ? "expand" : "collapse")
                            : null,
                        class: "dhx_layout-cell-header" +
                            (this._isXDirection()
                                ? " dhx_layout-cell-header--col"
                                : " dhx_layout-cell-header--row") +
                            (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                            (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                            (((this.getParent() || {}).config || {}).isAccordion
                                ? " dhx_layout-cell-header--accordion"
                                : ""),
                        style: {
                            height: this.config.headerHeight,
                        },
                        onclick: this._handlers.toggle,
                        onkeydown: this._handlers.enterCollapse,
                    }, [
                        this.config.headerIcon &&
                            (0, dom_1.el)("span.dhx_layout-cell-header__icon", {
                                class: this.config.headerIcon,
                            }),
                        this.config.headerImage &&
                            (0, dom_1.el)(".dhx_layout-cell-header__image-wrapper", [
                                (0, dom_1.el)("img", {
                                    src: this.config.headerImage,
                                    class: "dhx_layout-cell-header__image",
                                }),
                            ]),
                        this.config.header && (0, dom_1.el)("h3.dhx_layout-cell-header__title", this.config.header),
                        this.config.collapsable
                            ? (0, dom_1.el)("div.dhx_layout-cell-header__collapse-icon", {
                                class: this._getCollapseIcon(),
                            })
                            : (0, dom_1.el)("div.dhx_layout-cell-header__collapse-icon", {
                                class: "dxi dxi-empty",
                            }),
                    ]),
                    !this.config.collapsed
                        ? (0, dom_1.el)("div", {
                            style: __assign(__assign({}, stylePadding), { height: "calc(100% - ".concat(this.config.headerHeight || 37, "px)") }),
                            class: this._getCss(true) +
                                " dhx_layout-cell-content" +
                                (this.config.type ? typeClass : ""),
                        }, this.config.html
                            ? [
                                (0, dom_1.el)("div", {
                                    ".innerHTML": this.config.html,
                                    class: "dhx_layout-cell dhx_layout-cell-inner_html",
                                }),
                            ]
                            : kids)
                        : null,
                ]
                : this.config.html &&
                    !(this.config.rows &&
                        this.config.cols &&
                        this.config.views)
                    ? [
                        !this.config.collapsed
                            ? (0, dom_1.el)(".dhx_layout-cell-content", { style: stylePadding }, [
                                (0, dom_1.el)(".dhx_layout-cell-inner_html", {
                                    ".innerHTML": this.config.html,
                                }),
                            ])
                            : null,
                    ]
                    : kids;
        var cell = (0, dom_1.el)("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-label"] = this.config.id ? "tab-content-" + this.config.id : null, _a["data-cell-id"] = (_b = this.config.id) !== null && _b !== void 0 ? _b : null, _a["data-dhx-theme"] = (_c = this._theme) !== null && _c !== void 0 ? _c : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type && !this.config.full ? typeClass : ""), style: isFieldset ? style : fullStyle }), cellContent || progressBar ? [].concat(cellContent, progressBar) : null);
        return resizer ? [].concat(cell, resizer) : cell;
    };
    Cell.prototype._saveTheme = function () {
        var _a;
        var cellEl = (_a = this.getCellView()) === null || _a === void 0 ? void 0 : _a.el;
        if (cellEl) {
            this._theme = cellEl.getAttribute("data-dhx-theme");
        }
    };
    Cell.prototype._getProgressBar = function () {
        return (0, dom_1.el)("span", {
            class: "dhx_progress-bar",
        }, [
            (0, dom_1.sv)("svg", {
                viewBox: "25 25 50 50",
                class: "dhx_spinner",
            }, [
                (0, dom_1.sv)("circle", {
                    cx: "50",
                    cy: "50",
                    r: "20",
                    class: "path",
                }),
            ]),
        ]);
    };
    Cell.prototype._getCss = function (_content) {
        return "dhx_layout-cell";
    };
    Cell.prototype._initHandlers = function () {
        var _this = this;
        window.addEventListener("resize", this._afterWindowResized);
        this._handlers = {
            enterCollapse: function (e) {
                if (e.keyCode === 13) {
                    _this._handlers.toggle();
                }
            },
            collapse: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.collapse();
            },
            expand: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.expand();
            },
            toggle: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.toggle();
            },
        };
        var blockOpts = {
            left: null,
            top: null,
            isActive: false,
            range: null,
            xLayout: null,
            nextCell: null,
            size: null,
            resizerLength: null,
            margin: null,
            collapsedSize: null,
        };
        var resizeMove = function (event, startCoords) {
            if (startCoords === void 0) { startCoords = { x: 0, y: 0 }; }
            if (!blockOpts.isActive) {
                return;
            }
            var xLayout = blockOpts.xLayout;
            var clientX = event.targetTouches
                ? event.targetTouches[0].clientX
                : event.clientX + startCoords.x;
            var clientY = event.targetTouches
                ? event.targetTouches[0].clientY
                : event.clientY + startCoords.y;
            var newValue = xLayout
                ? clientX - blockOpts.range.min + window.pageXOffset
                : clientY - blockOpts.range.min + window.pageYOffset;
            var prop = xLayout ? "width" : "height";
            if (newValue < 0) {
                newValue = blockOpts.resizerLength / 2;
            }
            else if (newValue > blockOpts.size) {
                newValue = blockOpts.size - blockOpts.resizerLength;
            }
            var getValue = function (key) { var _a; return parseInt((_a = _this.config[key]) === null || _a === void 0 ? void 0 : _a.toString()); };
            var maxSize = getValue(xLayout ? "maxWidth" : "maxHeight");
            var minSize = getValue(xLayout ? "minWidth" : "minHeight");
            if ((!maxSize || newValue < maxSize) && (!minSize || newValue > minSize)) {
                _this.config[prop] = newValue - blockOpts.resizerLength / 2 + "px";
                blockOpts.nextCell.config[prop] =
                    blockOpts.size - newValue - blockOpts.resizerLength / 2 + "px";
                if (blockOpts.nextCell._getAnyFlexCell())
                    blockOpts.nextCell._getAnyFlexCell().config[prop] = undefined;
                _this.paint();
                _this.events.fire(types_1.LayoutEvents.resize, [_this.id]);
            }
        };
        var iframesInfo = {};
        var resizeEnd = function (event) {
            blockOpts.isActive = false;
            document.body.classList.remove("dhx_no-select--resize");
            if (!event.targetTouches) {
                document.removeEventListener("mouseup", resizeEnd);
                document.removeEventListener("mousemove", resizeMove);
                for (var index in iframesInfo) {
                    iframesInfo[index].node.contentWindow.document.removeEventListener("mouseup", resizeEnd);
                    iframesInfo[index].node.contentWindow.document.removeEventListener("mousemove", iframesInfo[index].listener);
                }
            }
            else {
                document.removeEventListener("touchend", resizeEnd);
                document.removeEventListener("touchmove", resizeMove);
                for (var index in iframesInfo) {
                    iframesInfo[index].node.contentWindow.document.removeEventListener("touchend", resizeEnd);
                    iframesInfo[index].node.contentWindow.document.removeEventListener("touchmove", iframesInfo[index].listener);
                }
            }
            _this.events.fire(types_1.LayoutEvents.afterResizeEnd, [_this.id]);
        };
        var resizeStart = function (event) {
            event.targetTouches && event.preventDefault();
            if (event.which === 3) {
                return;
            }
            if (blockOpts.isActive) {
                resizeEnd(event);
            }
            if (!_this.events.fire(types_1.LayoutEvents.beforeResizeStart, [_this.id])) {
                return;
            }
            document.body.classList.add("dhx_no-select--resize");
            var block = _this.getCellView();
            var nextCell = _this._getNextCell();
            var nextBlock = nextCell.getCellView();
            var resizerBlock = _this._getResizerView();
            var blockOffsets = block.el.getBoundingClientRect();
            var resizerOffsets = resizerBlock.el.getBoundingClientRect();
            var nextBlockOffsets = nextBlock.el.getBoundingClientRect();
            blockOpts.xLayout = _this._isXDirection();
            blockOpts.left = blockOffsets.left + window.pageXOffset;
            blockOpts.top = blockOffsets.top + window.pageYOffset;
            blockOpts.collapsedSize = _this._getCollapsedSize(_this, nextCell);
            blockOpts.margin = (0, helpers_1.getMarginSize)(_this.getParent().config);
            blockOpts.range = (0, helpers_1.getBlockRange)(blockOffsets, nextBlockOffsets, blockOpts.xLayout);
            blockOpts.size =
                blockOpts.range.max - blockOpts.range.min - blockOpts.margin - blockOpts.collapsedSize;
            blockOpts.isActive = true;
            blockOpts.nextCell = nextCell;
            blockOpts.resizerLength = blockOpts.xLayout ? resizerOffsets.width : resizerOffsets.height;
        };
        this._resizerHandlers = {
            onmousedown: function (e) {
                resizeStart(e);
                document.addEventListener("mouseup", resizeEnd);
                document.addEventListener("mousemove", resizeMove);
                var iframes = document.querySelectorAll("iframe");
                if (iframes.length) {
                    iframes.forEach(function (iframe, index) {
                        var iframeCoords = {
                            x: iframe.getBoundingClientRect().x,
                            y: iframe.getBoundingClientRect().y,
                        };
                        iframesInfo[index] = {
                            node: iframe,
                            listener: function (event) { return resizeMove(event, iframeCoords); },
                        };
                    });
                    for (var index in iframesInfo) {
                        iframesInfo[index].node.contentWindow.document.addEventListener("mouseup", resizeEnd);
                        iframesInfo[index].node.contentWindow.document.addEventListener("mousemove", iframesInfo[index].listener);
                    }
                }
            },
            ontouchstart: function (e) {
                resizeStart(e);
                document.addEventListener("touchend", resizeEnd);
                document.addEventListener("touchmove", resizeMove);
                var iframes = document.querySelectorAll("iframe");
                if (iframes.length) {
                    iframes.forEach(function (iframe, index) {
                        var iframeCoords = {
                            x: iframe.getBoundingClientRect().x,
                            y: iframe.getBoundingClientRect().y,
                        };
                        iframesInfo[index] = {
                            node: iframe,
                            listener: function (event) { return resizeMove(event, iframeCoords); },
                        };
                    });
                    for (var index in iframesInfo) {
                        iframesInfo[index].node.contentWindow.document.addEventListener("touchend", resizeEnd);
                        iframesInfo[index].node.contentWindow.document.addEventListener("touchmove", iframesInfo[index].listener);
                    }
                }
            },
            ondragstart: function (e) { return e.preventDefault(); },
        };
    };
    Cell.prototype._getCollapsedSize = function (cell, nextCell) {
        var collapsedSize = 0;
        var parent = this._parent;
        var index = parent._cells.indexOf(cell);
        var nextIndex = parent._cells.indexOf(nextCell);
        if (nextIndex - index === 1)
            return collapsedSize;
        for (var i = index + 1; i < nextIndex; i++) {
            if (parent._cells[i].config.collapsed) {
                if (!this._isXDirection()) {
                    collapsedSize += Number(parent._cells[i].config.headerHeight) || 37;
                }
                else {
                    collapsedSize += 45;
                }
            }
        }
        return collapsedSize;
    };
    Cell.prototype._getCollapseIcon = function () {
        if (this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-right";
        }
        if (this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-left";
        }
        if (!this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-up";
        }
        if (!this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-down";
        }
    };
    Cell.prototype._isLastCell = function () {
        var parent = this._parent;
        return parent && parent._cells.indexOf(this) === parent._cells.length - 1;
    };
    Cell.prototype._getNextCell = function () {
        var parent = this._parent;
        var index = parent._cells.indexOf(this);
        var nextCell = !this._isLastCell() && parent._cells[index + 1];
        if (!nextCell)
            return false;
        if (nextCell.config.hidden || nextCell.config.collapsed) {
            return nextCell._getNextCell();
        }
        else
            return nextCell;
    };
    Cell.prototype._getAnyFlexCell = function (selfInclude) {
        var _this = this;
        var _a;
        if (selfInclude === void 0) { selfInclude = false; }
        var parent = this._parent;
        var prop = this._isXDirection() ? "$autoWidth" : "$autoHeight";
        var cells = (_a = parent === null || parent === void 0 ? void 0 : parent._cells) === null || _a === void 0 ? void 0 : _a.filter(function (cell) { return cell.config[prop] === true && (selfInclude ? true : cell.id !== _this.id); });
        return (cells === null || cells === void 0 ? void 0 : cells.length) ? cells[cells.length - 1] : false;
    };
    Cell.prototype._getResizerView = function () {
        return this._parent.getRefs("resizer_" + this._uid);
    };
    Cell.prototype._isXDirection = function () {
        return this._parent && this._parent._xLayout;
    };
    Cell.prototype._checkProgress = function () {
        if (this instanceof Layout_1.Layout) {
            return this.isVisibleProgress();
        }
        this._calculateProgressState();
        return ((this._progress || this._checkAutoProgress()) &&
            !this.config.collapsed &&
            !this.config.hidden &&
            !this._parent.isVisibleProgress());
    };
    Cell.prototype._checkAutoProgress = function () {
        if (this._stopProgressDefault)
            return false;
        var _a = this.config, html = _a.html, progressDefault = _a.progressDefault;
        return progressDefault && !this._ui && !html;
    };
    Cell.prototype._calculateProgressState = function () {
        if (this._stopProgressDefault)
            return;
        var _a = this.config, html = _a.html, progressDefault = _a.progressDefault;
        if (progressDefault && !this._ui && !html) {
            this._progress = true;
        }
        if (progressDefault && (this._ui || html)) {
            this._progress = false;
        }
    };
    Cell.prototype._calculateStyle = function () {
        var config = this.config;
        if (!config) {
            return;
        }
        var style = {};
        var autoWidth = false;
        var autoHeight = false;
        if (!isNaN(Number(config.width)))
            config.width = config.width + "px";
        if (!isNaN(Number(config.height)))
            config.height = config.height + "px";
        if (!isNaN(Number(config.minWidth)))
            config.minWidth = config.minWidth + "px";
        if (!isNaN(Number(config.minHeight)))
            config.minHeight = config.minHeight + "px";
        if (!isNaN(Number(config.maxWidth)))
            config.maxWidth = config.maxWidth + "px";
        if (!isNaN(Number(config.maxHeight)))
            config.maxHeight = config.maxHeight + "px";
        if (config.width === "content")
            autoWidth = true;
        if (config.height === "content")
            autoHeight = true;
        // if (this._isXDirection() && !config.width) config.$autoWidth = true;
        // if (!this._isXDirection() && !config.height) config.$autoHeight = true;
        var _a = config, width = _a.width, height = _a.height, cols = _a.cols, rows = _a.rows, minWidth = _a.minWidth, minHeight = _a.minHeight, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, gravity = _a.gravity, collapsed = _a.collapsed, $fixed = _a.$fixed;
        var gravityNumber = Math.sign(gravity) === -1 ? 0 : gravity;
        if (typeof gravity === "boolean") {
            gravityNumber = gravity ? 1 : 0;
        }
        var fixed = typeof gravity === "boolean" ? !gravity : Math.sign(gravity) === -1;
        if (this._isXDirection()) {
            if ($fixed || width || (gravity === undefined && (minWidth || maxWidth))) {
                fixed = true;
            }
        }
        else {
            if ($fixed || height || (gravity === undefined && (minHeight || maxHeight))) {
                fixed = true;
            }
        }
        var isFullSizeCell = this._checkFullSizeCell();
        var grow = fixed && !isFullSizeCell ? 0 : isFullSizeCell ? 1 : gravityNumber || 1;
        var fillSpace = this._isXDirection() ? "x" : "y";
        if (minWidth !== undefined && !collapsed)
            style.minWidth = minWidth;
        if (minHeight !== undefined && !collapsed)
            style.minHeight = minHeight;
        if (maxWidth !== undefined)
            style.maxWidth = maxWidth;
        if (maxHeight !== undefined)
            style.maxHeight = maxHeight;
        if (this._parent === undefined && !fillSpace !== undefined) {
            fillSpace = true;
        }
        if (!isFullSizeCell && width !== undefined && width !== "content") {
            style.width = width;
        }
        else {
            if (fillSpace === true) {
                style.width = "100%";
            }
            else if (fillSpace === "x") {
                if (autoWidth) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = this._isXDirection() ? "1px" : "auto";
                    style.flex = "".concat(grow, " ").concat(cols || rows ? "0 ".concat(isAuto) : "1 auto");
                }
            }
        }
        if (!isFullSizeCell && height !== undefined && height !== "content") {
            style.height = height;
        }
        else {
            if (fillSpace === true) {
                style.height = "100%";
            }
            else if (fillSpace === "y") {
                if (autoHeight) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = !this._isXDirection() ? "1px" : "auto";
                    style.flex = "".concat(grow, " ").concat(cols || rows ? "0 ".concat(isAuto) : "1 auto");
                }
            }
        }
        if (fillSpace === true && config.width === undefined && config.height === undefined) {
            style.flex = "".concat(grow, " 1 auto");
        }
        if (collapsed) {
            if (this._isXDirection()) {
                style.width = "auto";
            }
            else {
                style.height = "auto";
            }
            style.flex = "0 0 auto";
        }
        return style;
    };
    Cell.prototype._resizedWindow = function () {
        var _a;
        if (this._isLastFlexCell === undefined) {
            this._isLastFlexCell = ((_a = this._getAnyFlexCell(true)) === null || _a === void 0 ? void 0 : _a.id) === this.id;
        }
        else if (!this._isLastFlexCell) {
            window.removeEventListener("resize", this._afterWindowResized);
        }
        if (this._isLastFlexCell) {
            var prop = this._isXDirection() ? "width" : "height";
            this.config[prop] = undefined;
            this.paint();
        }
    };
    Cell.prototype._resetCellsSize = function () {
        var _this = this;
        var cells = this._parent._cells.filter(function (cell) {
            return cell !== _this && !cell.config.hidden && !cell.config.collapsed;
        });
        var direction = this._isXDirection();
        var autoSize = direction ? "$autoWidth" : "$autoHeight";
        var size = direction ? "width" : "height";
        cells.forEach(function (cell) {
            if (cell.config[autoSize]) {
                cell.config[size] = undefined;
            }
        });
    };
    Cell.prototype._checkFullSizeCell = function () {
        var _this = this;
        if (!this._parent)
            return false;
        var autoSize = this._isXDirection() ? "$autoWidth" : "$autoHeight";
        if (!this.config[autoSize])
            return false;
        var cells = this._parent._cells.filter(function (cell) {
            return cell !== _this && !cell.config.hidden;
        });
        return !!cells.length && cells.every(function (cell) { return cell.config.collapsed; });
    };
    return Cell;
}(view_1.View));
exports.Cell = Cell;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(134), exports);
__exportStar(__webpack_require__(74), exports);


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupEvents = void 0;
var PopupEvents;
(function (PopupEvents) {
    PopupEvents["beforeHide"] = "beforeHide";
    PopupEvents["beforeShow"] = "beforeShow";
    PopupEvents["afterHide"] = "afterHide";
    PopupEvents["afterShow"] = "afterShow";
    PopupEvents["click"] = "click";
})(PopupEvents || (exports.PopupEvents = PopupEvents = {}));


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderEvents = void 0;
var SliderEvents;
(function (SliderEvents) {
    SliderEvents["beforeChange"] = "beforeChange";
    SliderEvents["change"] = "change";
    SliderEvents["focus"] = "focus";
    SliderEvents["blur"] = "blur";
    SliderEvents["keydown"] = "keydown";
    SliderEvents["mousedown"] = "mousedown";
    SliderEvents["mouseup"] = "mouseup";
})(SliderEvents || (exports.SliderEvents = SliderEvents = {}));


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimepickerEvents = void 0;
var TimepickerEvents;
(function (TimepickerEvents) {
    TimepickerEvents["beforeChange"] = "beforeChange";
    TimepickerEvents["change"] = "change";
    TimepickerEvents["beforeApply"] = "beforeApply";
    TimepickerEvents["afterApply"] = "afterApply";
    TimepickerEvents["beforeClose"] = "beforeClose";
    TimepickerEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["apply"] = "apply";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["close"] = "close";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["save"] = "save";
})(TimepickerEvents || (exports.TimepickerEvents = TimepickerEvents = {}));


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEvents = void 0;
var CalendarEvents;
(function (CalendarEvents) {
    CalendarEvents["change"] = "change";
    CalendarEvents["beforeChange"] = "beforechange";
    CalendarEvents["modeChange"] = "modeChange";
    CalendarEvents["monthSelected"] = "monthSelected";
    CalendarEvents["yearSelected"] = "yearSelected";
    CalendarEvents["cancelClick"] = "cancelClick";
    CalendarEvents["dateMouseOver"] = "dateMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    CalendarEvents["dateHover"] = "dateHover";
})(CalendarEvents || (exports.CalendarEvents = CalendarEvents = {}));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Combobox = exports.$template = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var html_1 = __webpack_require__(4);
var keycodes_1 = __webpack_require__(141);
var view_1 = __webpack_require__(8);
var ts_data_1 = __webpack_require__(13);
var ts_layout_1 = __webpack_require__(16);
var ts_list_1 = __webpack_require__(32);
var ts_popup_1 = __webpack_require__(10);
var keyListener_1 = __webpack_require__(145);
var en_1 = __webpack_require__(80);
var types_1 = __webpack_require__(39);
var helper_1 = __webpack_require__(81);
var types_2 = __webpack_require__(82);
function itemsCountTemplate(count, templateFN) {
    if (typeof templateFN === "function") {
        return templateFN(count);
    }
    else {
        return count + " " + en_1.default.selectedItems;
    }
}
var $template = function (item) {
    if (item.icon) {
        return (0, dom_1.el)("div.dhx_combobox-options-wrapper", [
            (0, dom_1.el)("span", { class: "".concat(item.icon, " dhx_combobox-options__icon") }),
            (0, dom_1.el)("span", { class: "dhx_combobox-options__value" }, item.value),
        ]);
    }
    if (item.src) {
        return (0, dom_1.el)("div.dhx_combobox-options-wrapper", [
            (0, dom_1.el)("img", { class: "dhx_combobox-options__image", alt: item.value, src: item.src }),
            (0, dom_1.el)("span", { class: "dhx_combobox-options__value" }, item.value),
        ]);
    }
    return (0, dom_1.el)("span", { class: "dhx_combobox-options__value" }, item.value);
};
exports.$template = $template;
var Combobox = /** @class */ (function (_super) {
    __extends(Combobox, _super);
    function Combobox(element, config) {
        var _this = _super.call(this, element, (0, core_1.extend)({
            listHeight: 224,
            disabled: false,
            readOnly: false,
            newOptions: false,
            htmlEnable: true,
        }, config)) || this;
        _this.config.itemsCount = _this.config.itemsCount || _this.config.showItemsCount; // TODO: remove suite_7.0
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.cellHeight && _this.config.itemHeight === 36) {
            _this.config.itemHeight = _this.config.cellHeight; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data) {
            _this.data = _this.config.data;
            _this.events = new events_1.EventSystem(_this);
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
        }
        _this.popup = new ts_popup_1.Popup();
        _this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (_this.config.multiselection) {
                _this._state.value = "";
            }
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.beforeHide, function (fromOuterClick) {
            fromOuterClick && _this._hideOptions();
        });
        if (_this.config.readonly || _this.config.readOnly) {
            _this.config.readOnly = _this.config.readOnly || _this.config.readonly;
            _this._keyListener = new keyListener_1.KeyListener();
        }
        _this._state = {
            value: "",
            ignoreNext: false,
            canDelete: false,
            unselectActive: false,
            currentState: types_2.ComboState.default,
            creatingState: false,
        };
        _this._initHandlers();
        _this._createLayout();
        if (_this.config.value) {
            _this._setValue(_this.config.value, true);
        }
        _this._initEvents();
        var vnode = (0, dom_1.create)({
            render: function () { return _this._draw(); },
            hooks: {
                didRedraw: function () {
                    if (_this.popup.isVisible()) {
                        _this.focus();
                        _this._configurePopup();
                    }
                },
            },
        });
        // const container = toNode(element);
        _this.mount(element, vnode);
        return _this;
    }
    Combobox.prototype.focus = function () {
        if (this.config.disabled)
            return false;
        var rootView = this.getRootView();
        rootView.refs.input.el.focus();
    };
    Combobox.prototype.blur = function () {
        if (this.config.disabled)
            return false;
        var rootView = this.getRootView();
        rootView.refs.input.el.blur();
        this.popup.hide();
    };
    Combobox.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Combobox.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Combobox.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Combobox.prototype.clear = function () {
        this.list.selection.remove();
        this._state.value = "";
        this._filter();
        this.paint();
    };
    Combobox.prototype.getValue = function (asArray) {
        var ids = this.list.selection.getId();
        if (asArray) {
            return (0, core_1.wrapBox)(ids);
        }
        return Array.isArray(ids) ? ids.join(",") : ids;
    };
    Combobox.prototype.setValue = function (ids, silent) {
        return this._setValue(ids, silent);
    };
    Combobox.prototype.addOption = function (value, join) {
        if (join === void 0) { join = true; }
        if (!value)
            return;
        var id;
        if (typeof value === "string") {
            id = this.data.add({ value: value });
        }
        else if (typeof value === "object") {
            id = this.data.add(value);
        }
        var options = this.config.multiselection && join ? __spreadArray(__spreadArray([], this.list.selection.getId(), true), [id], false) : id;
        this.setValue(options);
    };
    Combobox.prototype.destructor = function () {
        this.popup && this.popup.destructor();
        this.events && this.events.clear();
        this.list && this.list.destructor();
        this._helper && this._helper.destructor();
        this._layout && this._layout.destructor();
        this._keyListener && this._keyListener.destructor();
        this.config = this.events = this.list = this.popup = null;
        this._helper = this._keyListener = this._handlers = this._state = this._uid = this._isPopupConfiqureted = null;
        this.unmount();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Combobox.prototype.setState = function (state) {
        switch (state) {
            case "success":
                this._state.currentState = types_2.ComboState.success;
                break;
            case "error":
                this._state.currentState = types_2.ComboState.error;
                break;
            default:
                this._state.currentState = types_2.ComboState.default;
                break;
        }
        this.paint();
    };
    Combobox.prototype._setValue = function (ids, silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        if (!this._exsistId(ids)) {
            return false;
        }
        this._filter();
        this.list.selection.remove(null, silent);
        if (this.config.multiselection) {
            if (typeof ids === "string") {
                ids = ids.split(",");
            }
            if (typeof ids === "number") {
                ids = [ids];
            }
            ids.forEach(function (id) {
                _this.list.selection.add(id, false, false, silent);
            });
        }
        else {
            var id = (0, core_1.unwrapBox)(ids);
            this.list.selection.add(id, false, false, silent);
            var item = this.data.getItem(id);
            if (item) {
                this._state.value = this._getItemText(item);
            }
        }
        this.paint();
    };
    Combobox.prototype._createLayout = function () {
        var list = (this.list = new ts_list_1.List(null, {
            $template: exports.$template,
            template: this.config.template,
            htmlEnable: this.config.htmlEnable,
            virtual: this.config.virtual,
            keyNavigation: true,
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
            eventHandlers: this.config.eventHandlers,
        }));
        var layout = (this._layout = new ts_layout_1.Layout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                    ".dhx_combobox-options__action-create-option": this._handlers.addOption,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    Combobox.prototype._initHandlers = function () {
        var _this = this;
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            addOption: function () { return _this.addOption(_this._state.value); },
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target, {
                    mode: _this.config.labelPosition === "left" ? "bottom" : "right",
                    theme: e.target,
                });
            },
            selectAll: function () {
                if (_this._state.unselectActive) {
                    _this.list.selection.remove();
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                }
                else {
                    _this.data.filter();
                    _this.list.selection.add();
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                        _this._state.unselectActive = true;
                    }
                }
                _this._changePopupPosition();
                _this.paint();
            },
            onkeydown: function (e) {
                if (e.key === "Tab" && _this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    if (!_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                        _this._showOptions();
                    }
                    if (_this.popup.isVisible()) {
                        if (e.which === keycodes_1.KEY_CODES.RIGHT_ARROW) {
                            if (_this.config.readOnly && !_this.config.multiselection) {
                                _this.list.moveFocus(ts_list_1.MOVE_DOWN);
                                e.preventDefault();
                            }
                        }
                        if (e.which === keycodes_1.KEY_CODES.LEFT_ARROW) {
                            if (_this.config.readOnly && !_this.config.multiselection) {
                                _this.list.moveFocus(ts_list_1.MOVE_UP);
                                e.preventDefault();
                            }
                        }
                        if (e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                            _this.list.moveFocus(ts_list_1.MOVE_DOWN);
                            e.preventDefault();
                        }
                        if (e.which === keycodes_1.KEY_CODES.UP_ARROW) {
                            _this.list.moveFocus(ts_list_1.MOVE_UP);
                            e.preventDefault();
                        }
                        if (e.which === keycodes_1.KEY_CODES.ESC) {
                            _this._hideOptions();
                        }
                        if (e.which === keycodes_1.KEY_CODES.ENTER) {
                            if (_this.data.getLength()) {
                                var id = _this.list.getFocus();
                                var value = _this.config.multiselection
                                    ? __spreadArray(__spreadArray([], _this.list.selection.getId(), true), [id], false) : id;
                                _this.setValue(value);
                            }
                            else if (_this.config.newOptions) {
                                _this.addOption(_this._state.value, true);
                            }
                            if (_this.config.multiselection) {
                                _this._updatePopup();
                            }
                            else if (_this.data.getLength()) {
                                _this._hideOptions();
                            }
                        }
                    }
                }
                _this.events.fire(types_2.ComboboxEvents.keydown, [e, _this.list.getFocus()]);
            },
            onkeyup: function (e) {
                if (!_this.config.multiselection || _this.config.itemsCount) {
                    return;
                }
                if (_this._state.ignoreNext) {
                    _this._state.ignoreNext = false;
                    return;
                }
                if (e.which === keycodes_1.KEY_CODES.BACKSPACE &&
                    !_this._state.value &&
                    _this.config.multiselection &&
                    _this.list.selection.getId().length) {
                    var selected = _this.list.selection.getId();
                    var id = selected[selected.length - 1];
                    _this.list.selection.remove(id);
                    _this._changePopupPosition();
                    _this.paint();
                }
            },
            oninput: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                var input = e.target;
                var value = input.value;
                _this.events.fire(types_2.ComboboxEvents.input, [value]);
                _this._state.value = value;
                if (!value.length) {
                    _this._state.ignoreNext = true;
                    _this._state.canDelete = true;
                }
                else {
                    _this._state.canDelete = false;
                }
                if (!_this.config.multiselection) {
                    _this.list.selection.remove();
                }
                _this._filter(true);
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                }
                _this._updatePopup();
            },
            oninputclick: function (e) {
                var _a;
                if (_this.config.disabled) {
                    return;
                }
                _this.focus();
                if (e.target.classList.contains("dhx_combobox__action-remove")) {
                    var id = (_a = _this.data.getItem((0, html_1.locate)(e))) === null || _a === void 0 ? void 0 : _a.id;
                    if (!(0, core_1.isId)(id)) {
                        return;
                    }
                    _this.list.selection.remove(id);
                    _this._changePopupPosition();
                    _this.paint();
                    return;
                }
                if (e.target.classList.contains("dhx_combobox__action-clear-all")) {
                    _this.list.selection.getId().forEach(function (id) { return _this.list.selection.remove(id); });
                    if (_this.config.selectAllButton && _this._state.unselectActive) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                    _this.paint();
                    return;
                }
                e.preventDefault();
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                    return;
                }
                _this.focus();
            },
            toggleIcon: function () {
                _this.focus();
                if (_this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    _this._showOptions();
                }
            },
            onfocus: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_2.ComboboxEvents.focus, []); },
            onblur: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_2.ComboboxEvents.blur, []); },
        };
    };
    Combobox.prototype._initEvents = function () {
        var _this = this;
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            if (_this.config.value) {
                _this._setValue(_this.config.value, true);
            }
            _this._filter();
        });
        this.data.events.on(ts_data_1.DataEvents.afterAdd, function () {
            if (!_this.config.multiselection) {
                _this._hideOptions();
            }
            else {
                _this._changePopupPosition();
            }
        });
        this.list.events.on(ts_list_1.ListEvents.click, function () {
            if (!_this.config.multiselection) {
                _this._hideOptions();
            }
            _this._changePopupPosition();
        });
        this.list.selection.events.on(types_1.SelectionEvents.beforeSelect, function (id) {
            var value = _this.config.multiselection
                ? __spreadArray(__spreadArray([], _this.getValue(_this.config.multiselection), true), [id], false) : id;
            return _this.events.fire(types_2.ComboboxEvents.beforeChange, [value]);
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterSelect, function () {
            var value = _this.getValue(_this.config.multiselection);
            _this.events.fire(types_2.ComboboxEvents.change, [value]);
            _this._updateSelectedItem(value);
        });
        this.list.selection.events.on(types_1.SelectionEvents.beforeUnSelect, function (id) {
            var value = _this.config.multiselection
                ? _this.getValue(_this.config.multiselection).filter(function (i) { return i != id; })
                : id;
            return _this.events.fire(types_2.ComboboxEvents.beforeChange, [value]);
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterUnSelect, function () {
            var multi = _this.config.multiselection;
            var value = _this.getValue(multi);
            _this.events.fire(types_2.ComboboxEvents.change, [value]);
            if (multi)
                _this._updateSelectedItem(value);
        });
        this.popup.events.on(ts_popup_1.PopupEvents.beforeShow, function () {
            if (!_this.popup.isVisible() && !_this._isPopupConfiqureted) {
                _this._configurePopup();
                return false;
            }
        });
        this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            if (_this.config.readOnly) {
                if (_this._state.value) {
                    var id = _this.list.selection.getId();
                    _this.list.setFocus(id);
                }
                else {
                    _this.list.resetFocus();
                }
                _this._keyListener.startNewListen(function (val) { return _this._findBest(val); });
            }
            _this.list.scrollTo(_this.list.getFocus());
        });
    };
    Combobox.prototype._showOptions = function () {
        if (!this.events.fire(types_2.ComboboxEvents.beforeOpen)) {
            return;
        }
        if (this._state.value.length) {
            this._state.canDelete = true;
        }
        this._filter();
        if (this._configurePopup()) {
            this.events.fire(types_2.ComboboxEvents.open);
            this.events.fire(types_2.ComboboxEvents.afterOpen);
        }
    };
    Combobox.prototype._configurePopup = function () {
        this._isPopupConfiqureted = true;
        var rootView = this.getRootView();
        if (!rootView || !rootView.refs || !rootView.refs.holder) {
            return false;
        }
        if (!this.popup.isVisible()) {
            this._updatePopup();
        }
        return true;
    };
    Combobox.prototype._hideOptions = function () {
        var _this = this;
        if (!this.events.fire(types_2.ComboboxEvents.beforeClose)) {
            return;
        }
        if (this.config.readOnly) {
            this._keyListener.endListen();
        }
        if (!this.config.multiselection && !this.config.readOnly && !this.list.selection.contains()) {
            this._state.value = "";
        }
        (0, dom_1.awaitRedraw)().then(function () { return _this.popup.isVisible() && _this.popup.hide(); });
        this.events.fire(types_2.ComboboxEvents.afterClose);
        this.events.fire(types_2.ComboboxEvents.close); // TODO: remove suite_7.0
        this.data.resetFilter();
        this._filter();
        this.paint();
    };
    Combobox.prototype._filter = function (baseFilter) {
        var _this = this;
        if (baseFilter === void 0) { baseFilter = false; }
        if (this.config.readOnly) {
            return;
        }
        if (this.config.filter) {
            this.data.filter(function (item) { return _this.config.filter(item, _this._state.value); });
        }
        else if (baseFilter) {
            this.data.filter(function (item) { return (0, core_1.isExistValue)(_this._getItemText(item) || "", _this._state.value); });
        }
        var selectedItemId = this.list.selection.getId();
        if (!selectedItemId || this.config.multiselection) {
            this.list.resetFocus();
        }
        else {
            this.list.setFocus(selectedItemId);
        }
        var listCell = this._layout.getCell("list");
        var notFoundCell = this._layout.getCell("not-found");
        if (this.data.getLength() === 0) {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").hide();
            }
            listCell.hide();
            this._state.creatingState = true;
            var notFoundContent = this.config.newOptions ? this._state.value : "";
            notFoundCell.height = (0, helper_1.emptyListHeight)(notFoundContent, this.getRootView().refs.holder.el.offsetWidth);
            notFoundCell.attach(helper_1.emptyListView, notFoundContent);
            notFoundCell.show();
        }
        else {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").show();
            }
            var sameItem = this._state.value && this.data.find(function (item) { return item.value === _this._state.value; });
            if (!sameItem && this._state.value) {
                this._state.creatingState = this.config.newOptions;
                listCell.show();
                if (this.config.newOptions) {
                    var notFoundContent = this._state.value;
                    notFoundCell.height = (0, helper_1.emptyListHeight)(notFoundContent, this.getRootView().refs.holder.el.offsetWidth);
                    notFoundCell.attach(helper_1.emptyListView, notFoundContent);
                    notFoundCell.show();
                }
                else
                    notFoundCell.hide();
            }
            else {
                this._state.creatingState = false;
                if (notFoundCell.isVisible()) {
                    listCell.show();
                    notFoundCell.hide();
                }
            }
        }
    };
    Combobox.prototype._findBest = function (value) {
        var _this = this;
        var best = this.data.find(function (item) { return (0, core_1.isExistValue)(_this._getItemText(item) || "", value); });
        if (!best) {
            return;
        }
        if (this.list.selection.getId() === best.id) {
            return;
        }
        this.list.setFocus(best.id);
        this.paint();
    };
    Combobox.prototype._exsistId = function (id) {
        var _this = this;
        if (id instanceof Array) {
            return id.every(function (i) { return _this.data.exists(i); });
        }
        return this.data.exists(id);
    };
    Combobox.prototype._draw = function () {
        var _a;
        if (!this.config) {
            return (0, dom_1.el)("div");
        }
        var _b = this.config, multiselection = _b.multiselection, labelPosition = _b.labelPosition, hiddenLabel = _b.hiddenLabel, required = _b.required, disabled = _b.disabled, css = _b.css, helpMessage = _b.helpMessage, readOnly = _b.readOnly, placeholder = _b.placeholder;
        var item = multiselection ? null : this.data.getItem(this.list.selection.getId());
        var showPlaceholder = !this.list.selection.getId() ||
            (typeof this.list.selection.getId() === "object" &&
                this.list.selection.getId().length === 0);
        var labelStyle = (0, html_1.getLabelStyle)(this.config);
        var canTemplate = !this.config.multiselection && (this.config.readOnly || !this.popup.isVisible());
        var isInputTemplate = canTemplate && this.config.htmlEnable && this.config.template;
        var isInputImageOrIcon = canTemplate && ((item === null || item === void 0 ? void 0 : item.icon) || (item === null || item === void 0 ? void 0 : item.src)) && !this.config.template;
        return (0, dom_1.el)("div", {
            "data-dhx-widget-id": this._uid,
            onkeydown: this._handlers.onkeydown,
            onkeyup: this._handlers.onkeyup,
            class: "dhx_widget dhx_combobox" +
                (labelPosition === "left" ? " dhx_combobox--label-inline" : "") +
                (hiddenLabel ? " dhx_combobox--sr_only" : "") +
                (required ? " dhx_combobox--required" : "") +
                (disabled ? " dhx_combobox--disabled" : "") +
                (css ? " ".concat(css) : ""),
        }, [
            labelStyle
                ? (0, dom_1.el)("label.dhx_label.dhx_combobox__label", {
                    style: labelStyle.style,
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.oninputclick,
                }, helpMessage
                    ? [
                        (labelStyle.label || required) &&
                            (0, dom_1.el)("span.dhx_label__holder", labelStyle.label),
                        (0, dom_1.el)("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                            id: "dhx_label__help_".concat(this._uid),
                        }),
                    ]
                    : labelStyle.label)
                : null,
            (0, dom_1.el)("div.dhx_combobox-input-box" +
                // (this.popup.isVisible() ? ".dhx_combobox-input-box" : "") +
                (disabled ? ".dhx_combobox-input-box--disabled" : "") +
                (readOnly ? ".dhx_combobox-input-box--readonly" : "") +
                (this._state.currentState === types_2.ComboState.error
                    ? ".dhx_combobox-input-box--state_error"
                    : "") +
                (this._state.currentState === types_2.ComboState.success
                    ? ".dhx_combobox-input-box--state_success"
                    : ""), {
                _ref: "holder",
            }, [
                (0, dom_1.el)("div.dhx_combobox-input__icon", {
                    onclick: this._handlers.toggleIcon,
                }, [
                    (0, dom_1.el)("span" +
                        (this.popup.isVisible() ? ".dxi.dxi-menu-up" : ".dxi.dxi-menu-down")),
                ]),
                (0, dom_1.el)("div.dhx_combobox-input-list-wrapper", {
                    onclick: this._handlers.oninputclick,
                }, [
                    (0, dom_1.el)("ul.dhx_combobox-input-list", __spreadArray(__spreadArray([], this._drawSelectedItems(), true), [
                        (0, dom_1.el)("li.dhx_combobox-input-list__item.dhx_combobox-input-list__item--input", [
                            (isInputTemplate || isInputImageOrIcon) && item
                                ? (0, dom_1.el)("div.dhx_combobox-input__template", {
                                    ".innerHTML": isInputTemplate
                                        ? this.config.template(item)
                                        : null,
                                }, isInputImageOrIcon ? [(0, exports.$template)(item)] : null)
                                : null,
                            (0, dom_1.el)("input.dhx_combobox-input", {
                                oninput: this._handlers.oninput,
                                onfocus: this._handlers.onfocus,
                                onblur: this._handlers.onblur,
                                _ref: "input",
                                _key: this._uid,
                                type: "text",
                                placeHolder: showPlaceholder && placeholder ? placeholder : undefined,
                                value: readOnly && item
                                    ? this._getItemText(item)
                                    : this._state.value,
                                readOnly: readOnly || disabled,
                                required: required,
                                role: "combobox",
                                "aria-label": readOnly
                                    ? "Select value"
                                    : "Type or select value",
                                "aria-describedby": helpMessage
                                    ? "dhx_label__help_".concat(this._uid)
                                    : null,
                                "aria-expanded": this.popup.isVisible().toString(),
                                "aria-controls": (_a = this.list.getRootView().node) === null || _a === void 0 ? void 0 : _a.attrs.id,
                            }),
                        ]),
                    ], false)),
                ]),
            ]),
        ]);
    };
    Combobox.prototype._drawSelectedItems = function () {
        var _this = this;
        if (!this.config.multiselection) {
            return [];
        }
        if (this.config.itemsCount) {
            var count = this.list.selection.getId().length;
            return count
                ? [
                    (0, dom_1.el)("li.dhx_combobox-input-list__item.dhx_combobox-tag", [
                        (0, dom_1.el)("span.dhx_combobox-tag__value", itemsCountTemplate(count, this.config.itemsCount)),
                        (0, dom_1.el)("button.dhx_button.dhx_combobox-tag__action.dhx_combobox__action-clear-all", { "aria-label": "clear all" }, [(0, dom_1.el)("span.dhx_button__icon.dxi.dxi-close-circle")]),
                    ]),
                ]
                : [];
        }
        return this.list.selection.getId().map(function (id) {
            var item = _this.data.getItem(id);
            if (!item) {
                return null;
            }
            var imageOrIcon = _this._drawImageOrIcon(item);
            return (0, dom_1.el)("li.dhx_combobox-input-list__item.dhx_combobox-tag", { "data-dhx-id": id }, __spreadArray(__spreadArray([], (imageOrIcon || !_this.config.template
                ? [imageOrIcon, (0, dom_1.el)("span.dhx_combobox-tag__value", _this._getItemText(item))]
                : [
                    (0, dom_1.el)("span.dhx_combobox-tag__template", {
                        ".innerHTML": _this.config.template(item),
                    }),
                ]), true), [
                (0, dom_1.el)("button.dhx_button.dhx_button--icon.dhx_combobox-tag__action.dhx_combobox__action-remove", {
                    type: "button",
                    "aria-label": "remove",
                }, [(0, dom_1.el)("span.dhx_button__icon.dxi.dxi-close-circle")]),
            ], false));
        });
    };
    Combobox.prototype._drawImageOrIcon = function (item) {
        if (item.src) {
            return (0, dom_1.el)("img.dhx_combobox-tag__image", { src: item.src, alt: "" });
        }
        else if (item.icon) {
            return (0, dom_1.el)("span.dhx_combobox-tag__icon", { class: item.icon });
        }
        return null;
    };
    Combobox.prototype._getItemText = function (item) {
        if (!item) {
            return null;
        }
        return item.value;
    };
    Combobox.prototype._updateSelectedItem = function (id) {
        var _a;
        if (this.config.multiselection) {
            if (this.config.selectAllButton &&
                !this._state.unselectActive &&
                this.data.getLength() === id.length) {
                this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                this._state.unselectActive = true;
            }
            else if (this.config.selectAllButton && this._state.unselectActive) {
                this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                this._state.unselectActive = false;
            }
            if (this._state.value) {
                this._state.value = "";
                this._state.canDelete = id.length === 0;
                this.data.resetFilter();
                this._filter();
            }
        }
        else {
            this._state.value = (_a = this._getItemText(this.data.getItem(id))) !== null && _a !== void 0 ? _a : "";
        }
        this.paint();
    };
    Combobox.prototype._changePopupPosition = function () {
        var _this = this;
        if (this.config.multiselection) {
            (0, dom_1.awaitRedraw)().then(function () {
                _this._updatePopup();
            });
        }
    };
    Combobox.prototype._updatePopup = function () {
        var holderNode = this.getRootView().refs.holder.el;
        this.popup.getContainer().style.width = holderNode.offsetWidth + "px";
        this.popup.show(holderNode, {
            mode: "bottom",
            theme: this.getRootNode(),
        });
    };
    return Combobox;
}(view_1.View));
exports.Combobox = Combobox;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = exports.MOVE_DOWN = exports.MOVE_UP = void 0;
var core_1 = __webpack_require__(0);
var ts_data_1 = __webpack_require__(13);
var dom_1 = __webpack_require__(1);
var KeyManager_1 = __webpack_require__(21);
var types_1 = __webpack_require__(39);
var view_1 = __webpack_require__(8);
var Selection_1 = __webpack_require__(79);
var html_1 = __webpack_require__(4);
var types_2 = __webpack_require__(57);
var editors_1 = __webpack_require__(142);
exports.MOVE_UP = 1;
exports.MOVE_DOWN = 2;
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List(node, config) {
        if (config === void 0) { config = {}; }
        var _this = this;
        var itemHeight = config.itemHeight || (config.virtual ? 37 : null);
        if (itemHeight && typeof itemHeight === "number") {
            itemHeight = itemHeight.toString() + "px";
        }
        _this = _super.call(this, node, (0, core_1.extend)({
            itemHeight: itemHeight,
            keyNavigation: true,
            editable: false,
            selection: true,
            htmlEnable: true,
        }, config)) || this;
        _this._destructed = false;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        // init data colleciton and link events between widget and data
        var data = _this.config.data;
        if (!(data instanceof ts_data_1.DataCollection)) {
            _this.data = new ts_data_1.DataCollection({});
            _this.events = _this.data.events;
            if (data)
                _this.data.parse(data);
        }
        else {
            // [TODO] deprecate in favor of raw data input
            _this.data = data;
            _this.events = data.events;
        }
        _this.selection = new Selection_1.Selection({
            disabled: !_this.config.selection,
            multiselection: _this.config.multiselection,
        }, _this.data, _this.events);
        if (_this.config.keyNavigation) {
            _this.keyManager = new KeyManager_1.KeyManager(function (e, focusId) {
                return focusId == _this._uid && (!_this._edited || (_this._edited && e.key !== "escape"));
            });
            _this._initHotKey();
        }
        _this.events.on(ts_data_1.DataEvents.change, function (_, status, item) {
            if (status === "setPage") {
                _this.scrollTo(_this.data.getId(item[0]));
            }
            _this.paint();
        });
        _this.events.on(ts_data_1.DataEvents.filter, function () {
            _this.paint();
        });
        _this.events.on(types_1.SelectionEvents.afterUnSelect, function () { return _this.paint(); });
        _this.events.on(types_1.SelectionEvents.afterSelect, function (id) {
            if ((0, core_1.isId)(id) && _this.config.selection)
                _this.setFocus(id);
            _this.paint();
        });
        _this.events.on(types_2.ListEvents.afterEditEnd, _this.editEnd.bind(_this));
        var drop = function (value) { return function (info) {
            _this.data.setMeta(_this.data.getItem(info.target), "drop", value);
            _this.paint();
        }; };
        _this.events.on(ts_data_1.DragEvents.canDrop, drop(true));
        _this.events.on(ts_data_1.DragEvents.cancelDrop, drop(false));
        var drag = function (value) { return function (info) {
            info.source.map(function (id) { return _this.data.setMeta(_this.data.getItem(id), "drag", value); });
            _this.paint();
        }; };
        _this.events.on(ts_data_1.DragEvents.dragStart, drag(true));
        _this.events.on(ts_data_1.DragEvents.afterDrag, drag(false));
        _this._handlers = {
            onmousedown: function (e) {
                _this._dragStart(e);
            },
            ontouchstart: function (e) {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var dblTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (dblTap) {
                        e.preventDefault();
                        _this._dblClick(e);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            },
            ontouchmove: function (e) {
                _this._touch.start && e.preventDefault();
                _this._clearTouchTimer();
            },
            ontouchend: function () {
                _this._touch.start = false;
                _this._clearTouchTimer();
            },
            ondragstart: function () { return (_this.config.dragMode && !_this._edited ? false : null); },
            oncontextmenu: function (e) {
                var _a;
                var id = (_a = _this.data.getItem((0, html_1.locate)(e))) === null || _a === void 0 ? void 0 : _a.id;
                if (!(0, core_1.isId)(id)) {
                    return;
                }
                _this.events.fire(types_2.ListEvents.itemRightClick, [id, e]);
            },
            onclick: function (e) {
                var _a;
                var id = (_a = _this.data.getItem((0, html_1.locate)(e))) === null || _a === void 0 ? void 0 : _a.id;
                if (!(0, core_1.isId)(id)) {
                    return;
                }
                _this.selection.add(id, e.ctrlKey || e.metaKey, e.shiftKey);
                if (_this.config.selection) {
                    _this._focus = id;
                }
                _this.events.fire(types_2.ListEvents.click, [id, e]);
                _this.paint();
            },
            ondblclick: function (e) {
                _this._dblClick(e);
            },
            onscroll: function (e) {
                if (_this.config.virtual) {
                    _this._topOffset = e.target.scrollTop;
                    _this._visibleHeight = e.target.offsetHeight;
                    _this.paint();
                }
            },
            onmouseover: function (e) {
                var _a;
                var id = (_a = _this.data.getItem((0, html_1.locate)(e))) === null || _a === void 0 ? void 0 : _a.id;
                if (!(0, core_1.isId)(id)) {
                    return;
                }
                var prevId = (0, html_1.locate)(e.relatedTarget);
                if (id !== prevId)
                    _this.events.fire(types_2.ListEvents.itemMouseOver, [id, e]);
            },
        };
        var evs = _this.config.eventHandlers;
        if (evs) {
            for (var _i = 0, _a = Object.entries(evs); _i < _a.length; _i++) {
                var _b = _a[_i], event_name = _b[0], events = _b[1];
                _this._handlers[event_name] = (0, html_1.eventHandler)(function (e) { return (0, html_1.locate)(e); }, events, _this._handlers[event_name]);
            }
        }
        if (_this.config.dragMode) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
        }
        // defaults for virtual rendering
        _this._topOffset = _this._visibleHeight = 0;
        var view = (0, dom_1.create)({
            render: function () {
                return _this._destructed ? (0, dom_1.el)("div") : _this._renderList();
            },
            hooks: {
                didMount: function (vm) {
                    if (_this.config.virtual)
                        _this._visibleHeight = vm.node.el.offsetHeight;
                },
                didRedraw: function (vm) { return _this._didRedraw(vm); },
            },
        });
        _this.mount(node, view);
        return _this;
    }
    List.prototype._didRedraw = function (vm) {
        // do nothing
    };
    List.prototype._dblClick = function (e) {
        var _a;
        var id = (0, html_1.locate)(e);
        if (!id) {
            return;
        }
        id = (_a = this.data.getItem(id)) === null || _a === void 0 ? void 0 : _a.id;
        if (this.config.editable) {
            this.editItem(id);
        }
        this.events.fire(types_2.ListEvents.doubleClick, [id, e]);
    };
    List.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    List.prototype._dragStart = function (e) {
        var _this = this;
        this._touch.start = true;
        var itemsForGhost = [];
        var item = (0, html_1.locateNode)(e, "data-dhx-id");
        var itemId = item && item.getAttribute("data-dhx-id");
        var selectionIds = this.selection.getId();
        if (this.config.multiselection && selectionIds instanceof Array) {
            selectionIds.map(function (id) {
                if (id !== itemId && _this.getRootView().refs[id]) {
                    itemsForGhost.push(_this.getRootView().refs[id].el);
                }
            });
            selectionIds = __spreadArray([], selectionIds, true);
        }
        if (typeof selectionIds === "string") {
            selectionIds = [selectionIds];
        }
        return this.config.dragMode && !this._edited
            ? ts_data_1.dragManager.onMouseDown(e, selectionIds || [itemId], itemsForGhost)
            : null;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.disableSelection = function () {
        this.selection.disable();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.enableSelection = function () {
        this.selection.enable();
    };
    List.prototype.editItem = function (id) {
        this._edited = id;
        if (!this.data.getItem(this._edited) || !this.events.fire(types_2.ListEvents.beforeEditStart, [id])) {
            this._edited = null;
            return;
        }
        this.paint();
        this.events.fire(types_2.ListEvents.afterEditStart, [id]);
    };
    // [TODO] maybe better name
    List.prototype.editEnd = function (value, id) {
        if (this._edited) {
            if (value !== null) {
                var item = this.data.getItem(id);
                this.data.update(id, __assign(__assign({}, item), { value: value }));
                this._changed = true;
            }
            this._edited = null;
            this.paint();
        }
    };
    /*
        Focus API allows to mark item as active one, but not selected yet
        Used by keyboard navigation
    */
    List.prototype.getFocusItem = function () {
        return this.data.getItem(this._focus);
    };
    List.prototype.setFocus = function (id) {
        if (this._focus != id && this.data.exists(id)) {
            this._focus = id;
            this.events.fire(types_2.ListEvents.focusChange, [this.data.getIndex(this._focus), this._focus]);
            this.scrollTo(id);
            this.paint();
        }
    };
    List.prototype.resetFocus = function () {
        this._focus = undefined;
        this.events.fire(types_2.ListEvents.focusChange);
        this.scrollTo(this.data.getId(0));
        this.paint();
    };
    List.prototype.getFocus = function () {
        return this._focus;
    };
    List.prototype.destructor = function () {
        this._destructed = true;
        this.events && this.events.clear();
        this.keyManager && this.keyManager.destructor();
        this.selection && this.selection.destructor();
        this.config = this.events = this.selection = this.keyManager = null;
        this._handlers = this._focus = this._edited = this._events = this._topOffset = this._visibleHeight = this._touch = null;
        this.unmount();
    };
    List.prototype.scrollTo = function (id) {
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var listEl = this.getRootNode();
        this._scrollTo(id, listEl);
    };
    List.prototype._scrollTo = function (id, el) {
        if (!el)
            return;
        var index = this.data.getIndex(id);
        if (index === -1)
            return;
        var virtual = this.config.virtual;
        var currentPage = Math.floor(index / el.children.length) || 0;
        var item = el.children[index - el.children.length * currentPage];
        if (!virtual && !item)
            return;
        var height = virtual ? parseInt(this.config.itemHeight) : item.clientHeight;
        var top = virtual ? index * height : item.offsetTop;
        if (top >= el.scrollTop + el.clientHeight - height) {
            el.scrollTo(0, top - el.clientHeight + height);
        }
        else if (top < el.scrollTop) {
            el.scrollTo(0, top);
        }
    };
    List.prototype._renderItem = function (item, index) {
        var addEmpty = function (node) {
            node.class += " dhx_list-item--empty";
        };
        var itemHeight = this.config.itemHeight;
        if (item.$empty) {
            return (0, dom_1.el)("li", {
                class: "dhx_list-item",
                style: {
                    height: itemHeight,
                },
            });
        }
        var html = "";
        if (this.config.template)
            html = this.config.template(item);
        if (item.html)
            html = item.html;
        var focus = item.id == this._focus && this.config.keyNavigation;
        if (item.id == this._edited) {
            var editor = (0, editors_1.getEditor)(item, this);
            return editor.toHTML();
        }
        var mx = this.data.getMetaMap(item);
        var node = __assign(__assign(__assign(__assign({}, this._events), { class: "dhx_list-item" +
                (mx && mx.selected ? " dhx_list-item--selected" : "") +
                (focus ? " dhx_list-item--focus" : "") +
                (mx && mx.drop && !this._edited ? " dhx_list-item--drophere" : "") +
                (mx && mx.drag && !this._edited ? " dhx_list-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_list-item--drag" : "") +
                (item.css ? " " + item.css : ""), "data-dhx-id": item.id, _ref: item.id.toString(), style: {
                height: itemHeight,
            }, _key: item.id }), this.getItemAriaAttrs(this, item)), { tabindex: focus ? 0 : -1 });
        if (html) {
            if (html === item.html || this.config.htmlEnable) {
                node[".innerHTML"] = html;
                return (0, dom_1.el)("li", node);
            }
            else {
                return (0, dom_1.el)("li", node, html);
            }
        }
        else if (this.config.$template) {
            if (!item.value)
                addEmpty(node);
            return (0, dom_1.el)("li", node, [this.config.$template(item)]);
        }
        else {
            var value = item.text || item.value;
            if (!value)
                addEmpty(node);
            if (this.config.htmlEnable) {
                node[".innerHTML"] = value;
            }
            else
                node.class += " dhx_list-item--text";
            return this.config.htmlEnable ? (0, dom_1.el)("li", node) : (0, dom_1.el)("li", node, value);
        }
    };
    List.prototype._renderList = function () {
        var _this = this;
        var range = this._getRange();
        // mapRange
        var data = this.data.getRawData(range[0], range[1]);
        var kids = data.map(function (obj, index) { return _this._renderItem(obj, index); });
        if (this.config.virtual) {
            kids = __spreadArray(__spreadArray([
                (0, dom_1.el)(".div", { style: { height: range[2] + "px" } })
            ], kids, true), [
                (0, dom_1.el)(".div", { style: { height: range[3] + "px" } }),
            ], false);
        }
        return (0, dom_1.el)("ul.dhx_widget.dhx_list", __assign(__assign({ style: {
                "max-height": this.config.height,
                position: "relative",
            }, tabindex: 0, id: this._uid, class: (this.config.css ? this.config.css : "") +
                (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : ""), "data-dhx-widget-id": this._uid }, this._handlers), this._getListAriaAttrs(this.config, this.data.getLength())), kids);
    };
    List.prototype.moveFocus = function (mode, step) {
        var length = this.data.getLength();
        if (!length) {
            return;
        }
        var id = this._focus;
        var index = id ? this.data.getIndex(id) : -1;
        step = step || 1;
        if (mode === exports.MOVE_DOWN) {
            id = this.data.getId(Math.min(index + step, length - 1));
        }
        else if (mode === exports.MOVE_UP) {
            id = this.data.getId(Math.max(index - step, 0));
        }
        this.setFocus(id);
    };
    List.prototype._getRange = function () {
        if (this.config.virtual) {
            var overscanCount = 5;
            var visibleHeight = this._visibleHeight || parseInt(this.config.height);
            var itemHeight = parseInt(this.config.itemHeight);
            var total = this.data.getRawData(0, -1).length;
            var totalHeight = total * itemHeight;
            var position = this._topOffset;
            // correct value to be in [0, total-visible] range
            position = Math.max(0, Math.min(position, totalHeight - visibleHeight));
            var index = Math.floor(position / itemHeight);
            var count = Math.min(total - index, Math.floor(visibleHeight / itemHeight) + overscanCount);
            this._topOffset = position;
            return [index, count + index, index * itemHeight, totalHeight - itemHeight * (count + index)];
        }
        else {
            return [0, -1, 0, 0];
        }
    };
    List.prototype._getHotkeys = function () {
        var _this = this;
        return {
            arrowDown: function (e) {
                _this.moveFocus(exports.MOVE_DOWN);
                if (_this._changed)
                    _this._changed = false;
                e.preventDefault();
            },
            arrowUp: function (e) {
                _this.moveFocus(exports.MOVE_UP);
                if (_this._changed)
                    _this._changed = false;
                e.preventDefault();
            },
            escape: function () {
                _this.editEnd(null);
                if (_this._changed)
                    _this._changed = false;
            },
            enter: function (e) {
                var _a;
                if (_this._changed) {
                    _this._changed = false;
                    return;
                }
                var selected = _this.selection.getItem();
                var selectedId = selected instanceof Array ? (_a = selected[0]) === null || _a === void 0 ? void 0 : _a.id : selected === null || selected === void 0 ? void 0 : selected.id;
                if (_this.config.editable &&
                    !_this._edited &&
                    ((selected && selectedId === _this._focus) || !selected)) {
                    _this.editItem(_this._focus);
                }
                else
                    _this.selection.add(_this._focus);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "shift+enter": function (e) {
                _this.selection.add(_this._focus, false, true);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "ctrl+enter": function (e) {
                _this.selection.add(_this._focus, true, false);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "ctrl+a": function (e) {
                if (_this.config.multiselection) {
                    e.preventDefault();
                    _this.selection.remove();
                    var ids = _this.data.map(function (i) { return i.id; });
                    ids.forEach(function (id) {
                        if (_this.config.multiselection === "ctrlClick") {
                            _this.selection.add(id, true);
                        }
                        else {
                            _this.selection.add(id);
                        }
                    });
                }
            },
        };
    };
    List.prototype._initHotKey = function () {
        var handlers = this._getHotkeys();
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    List.prototype.getItemAriaAttrs = function (context, item) {
        var getAriaGrabbed = function (context, item) {
            return context.config.dragMode && !context._edited
                ? { "aria-grabbed": Boolean(item.$dragtarget && !context._edited).toString() }
                : {};
        };
        var getAriaRoleDescription = function (context) {
            return context.config.editable
                ? {
                    "aria-roledescription": "".concat(context._edited ? "Press Enter to stop editing" : "Double click to edit content"),
                }
                : {};
        };
        return __assign(__assign({ role: "option", "aria-selected": item.id === this._focus ? "true" : "false" }, getAriaGrabbed(context, item)), getAriaRoleDescription(context));
    };
    List.prototype._getListAriaAttrs = function (config, dataLength) {
        return {
            role: "listbox",
            "aria-label": "Listbox ".concat(config.title || "", ", count of options = ").concat(dataLength, ".").concat(config.editable ? " Content is editable." : ""),
            "aria-multiselectable": config.selection && config.multiselection ? "true" : "false",
            "aria-readonly": config.editable ? "false" : "true",
        };
    };
    return List;
}(view_1.View));
exports.List = List;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Selection = void 0;
var types_1 = __webpack_require__(39);
var ts_data_1 = __webpack_require__(13);
var core_1 = __webpack_require__(0);
var Selection = /** @class */ (function () {
    function Selection(config, data, events) {
        var _this = this;
        this.config = config;
        this.events = events;
        this._data = data;
        this._selected = [];
        this._data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this._selected = [];
        });
        if (typeof this.config.multiselection === "string") {
            var types = ["click", "ctrlClick"];
            if (!types.includes(this.config.multiselection)) {
                this.config.multiselection = false;
            }
        }
        this._data.events.on(ts_data_1.DataEvents.beforeRemove, function (obj) {
            _this._nextSelection = null;
            if (_this._selected.length === 1) {
                var next = _this._data.getIndex(obj.id);
                var count = _this._data.getLength();
                if (count > 1) {
                    var lastIndex = count == next - 1 ? next - 1 : next + 1;
                    _this._nextSelection = _this._data.getId(lastIndex);
                }
            }
        });
        this._data.events.on(ts_data_1.DataEvents.afterRemove, function (obj) {
            var hasIndex = _this._selected.indexOf(obj.id);
            if (hasIndex !== -1) {
                _this._selected.splice(hasIndex, 1);
            }
            if ((0, core_1.isId)(_this._nextSelection)) {
                _this.add(_this._nextSelection);
                _this._nextSelection = null;
            }
        });
    }
    Selection.prototype.enable = function () {
        this.config.disabled = false;
    };
    Selection.prototype.disable = function () {
        this.remove();
        this.config.disabled = true;
    };
    Selection.prototype.getId = function () {
        if (this.config.multiselection) {
            return this._selected;
        }
        return this._selected[0];
    };
    Selection.prototype.getItem = function () {
        var _this = this;
        if (this.config.multiselection) {
            return this._selected.map(function (id) { return _this._data.getItem(id); });
        }
        return this._selected.length ? this._data.getItem(this._selected[0]) : null;
    };
    Selection.prototype.contains = function (id) {
        if ((0, core_1.isId)(id)) {
            return this._selected.includes(id);
        }
        return this._selected.length > 0;
    };
    Selection.prototype.remove = function (id, silent) {
        var _this = this;
        if ((0, core_1.isId)(id)) {
            this._unselectItem(id, silent);
        }
        else {
            this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId, silent); });
            this._selected = [];
        }
    };
    Selection.prototype.add = function (id, isCtrl, isShift, silent) {
        var _this = this;
        if (this.config.disabled) {
            return;
        }
        if (typeof id === "undefined") {
            var unSelected = this._data.serialize().filter(function (_a) {
                var id = _a.id;
                return !_this._selected.includes(id);
            });
            unSelected.forEach(function (_a) {
                var id = _a.id;
                _this._addMulti(id, silent);
            });
            return;
        }
        var multi = this.config.multiselection;
        if (isShift && this._selected.length && multi) {
            this._addMulti(id, silent);
        }
        else {
            this._addSingle(id, multi && (multi !== "ctrlClick" || isCtrl), silent);
        }
    };
    Selection.prototype.destructor = function () {
        var _this = this;
        this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId, true); });
    };
    Selection.prototype._addMulti = function (id, silent) {
        var _a;
        var last = this._selected[this._selected.length - 1];
        var i1 = this._data.getIndex(last);
        var i2 = this._data.getIndex(id);
        if (i1 > i2) {
            _a = [i2, i1], i1 = _a[0], i2 = _a[1];
        }
        for (i1; i1 <= i2; i1++) {
            var id_1 = this._data.getId(i1);
            this._selectItem(id_1, silent);
        }
    };
    Selection.prototype._addSingle = function (id, isCtrl, silent) {
        var _this = this;
        if (!isCtrl) {
            this._selected.forEach(function (selectedId) {
                if (selectedId != id)
                    _this._unselectItem(selectedId);
            });
        }
        if (isCtrl && this._selected.includes(id)) {
            this._unselectItem(id, silent);
        }
        else {
            this._selectItem(id, silent);
        }
    };
    Selection.prototype._selectItem = function (id, silent) {
        var item = this._data.getItem(id);
        if (!item || this._data.getMeta(item, "selected"))
            return;
        if (!silent && !this.events.fire(types_1.SelectionEvents.beforeSelect, [id]))
            return;
        this._selected.push(id);
        this._data.setMeta(item, "selected", true);
        if (!silent)
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
    };
    Selection.prototype._unselectItem = function (id, silent) {
        if (!silent && !this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id]))
            return;
        this._selected = this._selected.filter(function (selectedId) { return selectedId !== id; });
        this._data.setMeta(this._data.getItem(id), "selected", false);
        if (!silent)
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    notFound: "Not Found",
    selectAll: "Select All",
    unselectAll: "Unselect All",
    selectedItems: "selected items",
    createItem: "Create",
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.emptyListHeight = exports.emptyListView = exports.unselectAllView = exports.selectAllView = void 0;
var dom_1 = __webpack_require__(1);
var en_1 = __webpack_require__(80);
function selectAllView() {
    return (0, dom_1.el)(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.selectAll);
}
exports.selectAllView = selectAllView;
function unselectAllView() {
    return (0, dom_1.el)(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.unselectAll);
}
exports.unselectAllView = unselectAllView;
function emptyListView(value) {
    return (0, dom_1.el)("ul.dhx_list", [
        (0, dom_1.el)("li.dhx_list-item.dhx_combobox-options__item".concat(value ? ".dhx_combobox-options__action-create-option" : ""), {}, value ? "".concat(en_1.default.createItem, " \"").concat(value, "\"") : en_1.default.notFound),
    ]);
}
exports.emptyListView = emptyListView;
function emptyListHeight(value, width) {
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = "normal 14px Roboto";
    var sumValue = value ? "".concat(en_1.default.createItem, " \"").concat(value, "\"") : en_1.default.notFound;
    return 13 + 20 * Math.ceil(ctx.measureText(sumValue).width / (width - 16));
}
exports.emptyListHeight = emptyListHeight;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ComboState = exports.ComboboxEvents = void 0;
var ComboboxEvents;
(function (ComboboxEvents) {
    ComboboxEvents["beforeChange"] = "beforeChange";
    ComboboxEvents["change"] = "change";
    ComboboxEvents["focus"] = "focus";
    ComboboxEvents["blur"] = "blur";
    ComboboxEvents["keydown"] = "keydown";
    ComboboxEvents["input"] = "input";
    ComboboxEvents["beforeOpen"] = "beforeOpen";
    ComboboxEvents["afterOpen"] = "afterOpen";
    ComboboxEvents["beforeClose"] = "beforeClose";
    ComboboxEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["open"] = "open";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["close"] = "close";
})(ComboboxEvents || (exports.ComboboxEvents = ComboboxEvents = {}));
var ComboState;
(function (ComboState) {
    ComboState[ComboState["default"] = 0] = "default";
    ComboState[ComboState["error"] = 1] = "error";
    ComboState[ComboState["success"] = 2] = "success";
})(ComboState || (exports.ComboState = ComboState = {}));


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFixedCols = exports.getFixedColsHeader = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var Cells_1 = __webpack_require__(31);
var FixedRows_1 = __webpack_require__(84);
var main_1 = __webpack_require__(20);
var render_1 = __webpack_require__(24);
function getFixedColsHeader(renderConfig, layout, mode) {
    if ((mode === types_1.Split.left &&
        (typeof renderConfig.leftSplit !== "number" || !renderConfig.fixedColumns.left.length)) ||
        (mode === types_1.Split.right &&
            (typeof renderConfig.rightSplit !== "number" || !renderConfig.fixedColumns.right.length))) {
        return;
    }
    var leftSplit = renderConfig.leftSplit, rightSplit = renderConfig.rightSplit, $positions = renderConfig.$positions, $totalWidth = renderConfig.$totalWidth, $scrollBarWidth = renderConfig.$scrollBarWidth;
    var isRightSplit = mode === types_1.Split.right;
    var columns = isRightSplit ? renderConfig.fixedColumns.right : renderConfig.fixedColumns.left;
    var width = (0, main_1.getTotalWidth)(columns);
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var frozenHeaderCols = (0, FixedRows_1.getFixedRows)(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, $positions), { xStart: 0, xEnd: isRightSplit ? rightSplit : leftSplit }), scroll: { top: 0, left: 0 }, filteredColumns: columns }), __assign(__assign({}, layout), { name: "header", position: "top", shifts: { x: 0, y: 0 } }), mode);
    var headerRowsConfig = __assign(__assign({}, layout), { name: "header", position: "top" });
    return (0, dom_1.el)(".dhx_".concat(headerRowsConfig.name, "-fixed-cols"), __assign({ onwheel: main_1.scrollFixedColsAndRows, class: isRightSplit ? "dhx_grid__cols_right--fixed" : "dhx_grid__cols_left--fixed", style: {
            position: "absolute",
            top: 0,
            left: isRightSplit
                ? $totalWidth < layout.wrapper.width - $scrollBarWidth.y - render_1.BORDERS
                    ? $totalWidth - width
                    : layout.wrapper.width - width - $scrollBarWidth.y - render_1.BORDERS
                : 0,
            width: width,
            overflow: "hidden",
        } }, getRowAriaAttrs(frozenHeaderCols.length)), frozenHeaderCols.body);
}
exports.getFixedColsHeader = getFixedColsHeader;
function getFixedCols(renderConfig, layout, mode, source) {
    if ((mode === types_1.Split.left &&
        (typeof renderConfig.leftSplit !== "number" || !renderConfig.fixedColumns.left.length)) ||
        (mode === types_1.Split.right &&
            (typeof renderConfig.rightSplit !== "number" || !renderConfig.fixedColumns.right.length))) {
        return;
    }
    var leftSplit = renderConfig.leftSplit, rightSplit = renderConfig.rightSplit, $totalWidth = renderConfig.$totalWidth, $totalHeight = renderConfig.$totalHeight, headerHeight = renderConfig.headerHeight, configFooterHeight = renderConfig.footerHeight, $positions = renderConfig.$positions, scroll = renderConfig.scroll, data = renderConfig.data, $scrollBarWidth = renderConfig.$scrollBarWidth;
    var isRightSplit = mode === types_1.Split.right;
    var fixedContentHeight = $totalHeight + headerHeight + configFooterHeight;
    var fixedColsHeight;
    if (fixedContentHeight > layout.gridBodyHeight) {
        fixedColsHeight = renderConfig.$footer
            ? fixedContentHeight - $scrollBarWidth.x
            : layout.gridBodyHeight;
    }
    else if (fixedContentHeight < layout.gridBodyHeight - $scrollBarWidth.x) {
        fixedColsHeight = fixedContentHeight;
    }
    else {
        fixedColsHeight = renderConfig.$footer
            ? layout.gridBodyHeight
            : layout.gridBodyHeight - $scrollBarWidth.x;
    }
    var columns = isRightSplit ? renderConfig.fixedColumns.right : renderConfig.fixedColumns.left;
    var width = (0, main_1.getTotalWidth)(columns);
    var renderFrom = isRightSplit ? "rightFixedCols" : "leftFixedCols";
    var fixedCols = (0, Cells_1.getCells)(__assign(__assign({}, renderConfig), { filteredColumns: columns, $renderFrom: renderFrom, $positions: __assign(__assign({}, $positions), { xStart: 0, xEnd: isRightSplit ? rightSplit : leftSplit }) }));
    var isSticky = layout.sticky;
    var footerRowsConfig = __assign(__assign({}, layout), { name: "footer", position: "bottom" });
    var frozenFooterCols = (0, FixedRows_1.getRows)(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, $positions), { xStart: 0, xEnd: isRightSplit ? rightSplit : leftSplit }) }), __assign(__assign({}, layout), { name: "footer", position: "bottom" }));
    var footerHeight = 0;
    frozenFooterCols.forEach(function (node) { return (footerHeight += node.attrs.style.height); });
    var frozenFooterSpans = (0, FixedRows_1.getFixedSpans)(__assign(__assign({}, renderConfig), { filteredColumns: columns }), __assign(__assign({}, layout), { name: "footer", position: "bottom" }), mode);
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var frozenFooter = isSticky
        ? (0, dom_1.el)(".dhx_".concat(footerRowsConfig.name, "-fixed-cols"), __assign({ onwheel: main_1.scrollFixedColsAndRows, class: isRightSplit ? "dhx_grid__cols_right--fixed" : "dhx_grid__cols_left--fixed", style: {
                position: "absolute",
                top: fixedColsHeight < layout.gridBodyHeight ? fixedColsHeight - footerHeight : null,
                left: isRightSplit
                    ? $totalWidth < layout.wrapper.width - $scrollBarWidth.y - render_1.BORDERS
                        ? $totalWidth - width
                        : layout.wrapper.width - width - $scrollBarWidth.y - render_1.BORDERS
                    : 0,
                bottom: fixedColsHeight >= layout.gridBodyHeight
                    ? "".concat(isSticky ? $scrollBarWidth.x : 0, "px")
                    : null,
            } }, getRowAriaAttrs(frozenFooterCols.length)), [
            frozenFooterCols,
            (0, dom_1.el)("span.dhx_span-spans", {
                class: "dhx_footer-spans",
                role: "presentation",
            }, frozenFooterSpans),
        ])
        : null;
    var pos = $positions;
    var spans = (0, Cells_1.getSpans)(__assign(__assign({}, renderConfig), { $renderFrom: renderFrom }), source || (isRightSplit ? types_1.Split.right : types_1.Split.left));
    var getFixedColAriaAttrs = function () { return ({
        role: "presentation",
        "aria-label": "Fixed column",
    }); };
    return [
        (0, dom_1.el)(".dhx_grid-fixed-cols-wrap", __assign({ style: {
                left: isRightSplit
                    ? $totalWidth < layout.wrapper.width - $scrollBarWidth.y - render_1.BORDERS
                        ? $totalWidth - width
                        : layout.wrapper.width - width - $scrollBarWidth.y - render_1.BORDERS
                    : 0,
                height: fixedColsHeight >= layout.gridBodyHeight
                    ? (isSticky ? layout.gridBodyHeight : layout.gridBodyHeight + headerHeight) -
                        $scrollBarWidth.x
                    : fixedColsHeight,
                paddingTop: headerHeight,
                overflow: "hidden",
                width: width,
            } }, getFixedColAriaAttrs()), [
            (0, dom_1.el)(".dhx_grid-fixed-cols", __assign(__assign({ onwheel: main_1.scrollFixedColsAndRows, class: isRightSplit ? "dhx_grid__cols_right--fixed" : "dhx_grid__cols_left--fixed", style: {
                    top: -scroll.top + headerHeight - 1 + "px",
                    paddingTop: layout.shifts.y,
                    height: $totalHeight,
                    position: "absolute",
                }, _flags: dom_1.KEYED_LIST }, (0, Cells_1.getHandlers)(pos.yStart, pos.xStart, renderConfig)), getRowAriaAttrs(data.length)), __spreadArray(__spreadArray([], fixedCols, true), [spans && (0, dom_1.el)("span.dhx_span-spans", { role: "presentation" }, [spans])], false)),
            isRightSplit
                ? (0, dom_1.el)(".dhx_grid__cols-border--frozen", { role: "presentation", style: { left: 0 } })
                : (0, dom_1.el)(".dhx_grid__cols-border--frozen", { role: "presentation", style: { right: 0 } }),
        ]),
        renderConfig.$footer ? frozenFooter : null,
    ];
}
exports.getFixedCols = getFixedCols;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFixedDataRows = exports.getFixedRows = exports.getFixedSpans = exports.getRows = void 0;
var dom_1 = __webpack_require__(1);
var cells_1 = __webpack_require__(30);
var main_1 = __webpack_require__(20);
var types_1 = __webpack_require__(9);
var Cells_1 = __webpack_require__(31);
var FixedCols_1 = __webpack_require__(83);
var core_1 = __webpack_require__(0);
var BORDERS = 2;
function handleMouse(col, config, type, e) {
    if (!type)
        return;
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        config._events.fire(type, [col, e]);
    }
    else {
        config.events.fire(type, [col, e]);
    }
}
function getHandlers(column, rowName, config) {
    return {
        onclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellClick"]],
        onmouseover: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseOver"]],
        onmousedown: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ontouchstart: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ondblclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellDblClick"]],
        oncontextmenu: [handleMouse, column, config, types_1.GridEvents[rowName + "CellRightClick"]],
        ontouchmove: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CellTouchMove"]],
        ontouchend: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CelltouchEnd"]],
    };
}
function buildRows(columns, name) {
    var header = columns.map(function (col) { return col[name] || [{}]; });
    return (0, main_1.transpose)(header);
}
function getCustomContentCell(cell, column, config, rowName, css, rowIndex, isHTMLEnable) {
    if (css === void 0) { css = ""; }
    if (isHTMLEnable === void 0) { isHTMLEnable = false; }
    var type = column.type ? "dhx_".concat(column.type, "-cell") : "dhx_string-cell";
    // TODO: over with index of filter inside of header or footer
    var content = config.content[cell.content] && config.content[cell.content].toHtml(column, config);
    var cellRow = {};
    config.filteredColumns.forEach(function (col) {
        var hasContent = !!config.content[col[rowName][rowIndex].content];
        cellRow[col.id] =
            (hasContent && config.content[col[rowName][rowIndex].content].toHtml(col, config)) ||
                col[rowName][rowIndex].text;
    });
    var contentBody = column.template && typeof content === "string" ? column.template(content, cellRow, column) : content;
    return (0, dom_1.el)(".".concat(type), {
        style: {
            class: css.trim(),
            padding: 0,
        },
    }, [
        content &&
            (typeof content === "string" || typeof content === "number"
                ? (0, dom_1.el)("div", {
                    class: "dhx_grid-footer-cell-text",
                    role: "presentation",
                    ".innerHTML": isHTMLEnable ? contentBody : null,
                }, isHTMLEnable ? null : contentBody)
                : content),
    ]);
}
function getRows(config, rowsConfig) {
    if (!config.data || !config.filteredColumns) {
        return [];
    }
    var getRowAriaAttrs = function (ind) { return ({
        role: "row",
        "aria-rowindex": ind + 1,
    }); };
    var rowName = rowsConfig.name;
    var isAutoHeight = rowName === "header" ? config.headerAutoHeight : config.footerAutoHeight;
    var pos = config.$positions;
    var columns = config.currentColumns;
    var rows = buildRows(columns, rowName);
    var colRange;
    var colsCount = 1;
    return rows.map(function (row, j) {
        var rowHeight = (rowName === "header"
            ? config.$headerHeightMap
            : config.$footerHeightMap)[j];
        return (0, dom_1.el)(".dhx_".concat(rowName, "-row"), __assign({ style: {
                height: rowHeight,
            } }, getRowAriaAttrs(j)), row.map(function (cell, i) {
            var _a;
            var css = cell.css || "";
            var column = columns[i];
            var colIndex = pos.xStart + i + 1;
            var isHTMLEnable = (0, main_1.isHtmlEnable)(config, column, cell);
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            var ariaSort = "none";
            if (config.sortBy && "".concat(column.id) === config.sortBy && !cell.content) {
                var dir = config.sortDir || "asc";
                sortIconCss += " dhx_grid-sort-icon--".concat(dir);
                css += " dhx_grid-".concat(rowName, "-cell--sorted ");
                ariaSort = dir === "asc" ? "ascending" : "descending";
            }
            var sortIconVisible = (0, main_1.isSortable)(config, column) &&
                cell.text &&
                rowName !== "footer" &&
                cell.headerSort !== false;
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            var isFirstCol = i === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = i === columns.length - 1 ? "dhx_last-column-cell" : "";
            if (!cell.content) {
                if (cell.align) {
                    css += " dhx_grid-header-cell--align_".concat(cell.align, " ");
                }
                else {
                    css += " dhx_grid-header-cell--".concat(column.type === "number" || column.type === "percent" || column.type === "date"
                        ? "align_right"
                        : "align_left", " ");
                }
            }
            css += "".concat(isFirstCol, " ").concat(isLastCol);
            var resizable = column.resizable !== undefined ? column.resizable : config.resizable;
            if (resizable) {
                var isLeftResize = config.rightSplit &&
                    config.$scrollBarWidth.xState &&
                    config.fixedColumns.right.includes(column);
                resizable = (0, dom_1.el)("div", {
                    class: "dhx_resizer_grip_wrap",
                    "aria-hidden": "true",
                }, [
                    (0, dom_1.el)("div", {
                        class: "dhx_resizer_grip" +
                            (isLeftResize
                                ? " dhx_resizer_grip--left"
                                : " dhx_resizer_grip--right"),
                        dhx_resized: column.id,
                        style: {
                            height: "".concat(rows.length * 100, "%"),
                        },
                    }, [(0, dom_1.el)("div", { class: "dhx_resizer_grip_line" })]),
                ]);
                var colSpan = column.header && ((_a = column.header[0]) === null || _a === void 0 ? void 0 : _a.colspan);
                if (colSpan) {
                    colRange = colSpan;
                    colsCount = 1;
                }
                if (colRange && colsCount !== colRange) {
                    if (j === 0)
                        resizable = null;
                    colsCount++;
                }
                if (rowName === "footer") {
                    resizable = null;
                }
            }
            if (cell.align) {
                css += " dhx_align-".concat(cell.align);
            }
            var getCellAriaAttrs = function (rowName, colIndex, ariaSort) {
                var attrs = {
                    "aria-colindex": colIndex,
                };
                if (!sortIconVisible) {
                    // if cell is sortable - set tabindex on button (getInnerCellAriaAttrs),
                    // else - on cell
                    // attrs["tabindex"] = 0;
                    // TODO: after sort AND if first cell is not visible: selection.setCell(first cell) -> scrollTo
                    // TODO: use arrows to navigate, set tabindex for first cell only
                }
                if (rowName === "footer" || cell.content) {
                    attrs["role"] = "gridcell";
                }
                else {
                    attrs["role"] = "columnheader";
                    attrs["aria-sort"] = ariaSort;
                    // attrs["aria-label"] = title;
                }
                return attrs;
            };
            if (cell.content) {
                return (0, dom_1.el)(".dhx_grid-".concat(rowName, "-cell.dhx_grid-custom-content-cell"), __assign(__assign({ class: css.trim(), "data-dhx-id": column.id, "data-dhx-text-id": cell.id, _key: column.id, style: {
                        width: column.$width,
                        height: rowName === "footer" ? rowHeight + BORDERS / 2 + "px" : rowHeight + "px",
                    } }, getHandlers(column, rowName, config)), getCellAriaAttrs(rowName, colIndex, ariaSort)), [
                    getCustomContentCell(cell, column, config, rowName, "", j, isHTMLEnable),
                    resizable || null,
                ]);
            }
            var getInnerCellAriaAttrs = function (rowName, text) {
                return sortIconVisible
                    ? {
                        role: "button",
                        "aria-label": "Sort by ".concat(text),
                        // tabindex: 0,
                        // TODO: after sort AND if first cell is not visible: selection.setCell(first cell) -> scrollTo
                        // TODO: use arrows to navigate, set tabindex for first cell only
                    }
                    : {};
            };
            var cellCss = "dhx_grid-header-cell-text_content";
            if (isAutoHeight)
                cellCss += " dhx_grid-header-cell-text_content-auto-height";
            return (0, dom_1.el)(".dhx_grid-".concat(rowName, "-cell"), __assign(__assign({ class: css.trim(), "data-dhx-id": column.id, "data-dhx-text-id": cell.id, _key: column.id, style: {
                    width: column.$width,
                    height: rowName === "footer" ? rowHeight + BORDERS / 2 + "px" : rowHeight + "px",
                } }, getHandlers(column, rowName, config)), getCellAriaAttrs(rowName, colIndex, ariaSort)), [
                (0, dom_1.el)("div.dhx_grid-header-cell-text", {
                    role: "presentation",
                }, [
                    (0, dom_1.el)("span", __assign(__assign({ class: cellCss }, getInnerCellAriaAttrs(rowName, cell.text)), { ".innerHTML": isHTMLEnable ? cell.text : null }), isHTMLEnable ? null : cell.text),
                    resizable || null,
                ]),
                sortIconVisible && (0, dom_1.el)("div", { class: sortIconCss, "aria-hidden": "true" }),
            ]);
        }));
    });
}
exports.getRows = getRows;
function getFixedSpans(config, rowsConfig, mode) {
    var columns = config.columns, cols = config.filteredColumns;
    var rows = (0, main_1.transpose)(cols.map(function (col) { return col[rowsConfig.name] || []; }));
    var rowName = rowsConfig.name;
    var isAutoHeight = rowName === "header" ? config.headerAutoHeight : config.footerAutoHeight;
    var heightMap = (rowName === "header" ? config.$headerHeightMap : config.$footerHeightMap);
    var leftShift = 0;
    return rows.map(function (row, i) {
        leftShift = 0;
        var rowHeight = heightMap[i];
        return (0, dom_1.el)(".dhx_span-row", {
            class: "dhx_header-row",
            "aria-hidden": "true",
        }, row
            .map(function (cell, cellIdx) {
            var spanPartByRightSplit;
            var col = cols[cellIdx];
            if (mode === types_1.Split.right && cellIdx === 0 && !cell.colspan) {
                var rows_1 = (0, main_1.transpose)(columns.map(function (col) { return col[rowsConfig.name] || []; }));
                outer: for (var j = 0; j < rows_1[i].length; j++) {
                    var currCell = rows_1[i][j];
                    if (currCell.colspan > 1) {
                        var spanCols = columns.slice(j, j + currCell.colspan);
                        for (var k = 0; k < spanCols.length; k++) {
                            if (spanCols[k].id !== col.id)
                                continue;
                            spanPartByRightSplit = {
                                cell: currCell,
                                col: columns[j],
                                widthBefore: (0, cells_1.getWidth)(spanCols, k, 0),
                                isLastCol: j + currCell.colspan >= columns.length,
                            };
                            break outer;
                        }
                    }
                }
            }
            var nCell = (spanPartByRightSplit === null || spanPartByRightSplit === void 0 ? void 0 : spanPartByRightSplit.cell) || cell;
            var nCol = (spanPartByRightSplit === null || spanPartByRightSplit === void 0 ? void 0 : spanPartByRightSplit.col) || col;
            var isHTMLEnable = (0, main_1.isHtmlEnable)(config, col, cell);
            leftShift += nCol.hidden ? 0 : nCol.$width;
            var isFirstCol = cellIdx === 0 ? "dhx_first-column-cell" : "";
            var n = mode ? 1 : config.fixedColumns.right.length + 1;
            var reducedColspan = cell.colspan && (0, cells_1.getReducedColspan)(columns, col.id, cell.colspan);
            var isLastCol = (spanPartByRightSplit === null || spanPartByRightSplit === void 0 ? void 0 : spanPartByRightSplit.isLastCol) ||
                cellIdx === cols.length - n ||
                (reducedColspan || 1) + (cellIdx - 1) >= cols.length - n
                ? "dhx_last-column-cell"
                : "";
            var spanHeight = rowHeight;
            var spanPositionTop = rowHeight * i;
            if (nCell.rowspan) {
                var count = nCell.rowspan - 1;
                while (count > 0) {
                    spanHeight += heightMap[i + count];
                    count--;
                }
                spanHeight -= 1;
            }
            if (nCell.rowspan || nCell.colspan) {
                spanPositionTop = 0;
                for (var j = i - 1; j >= 0; j--) {
                    spanPositionTop += heightMap[j];
                }
            }
            var sortIconVisible = (0, main_1.isSortable)(config, nCol) &&
                nCell.rowspan &&
                nCell.text &&
                rowsConfig.name !== "footer" &&
                nCell.headerSort !== false;
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            if (config.sortBy && "".concat(nCol.id) === config.sortBy && !nCell.content) {
                sortIconCss += " dhx_grid-sort-icon--".concat(config.sortDir || "asc");
            }
            var cellAlign = nCol.align
                ? "dhx_align-".concat(nCol.align)
                : (nCol.type === "number" || nCol.type === "percent" || nCol.type === "date") &&
                    !nCell.colspan
                    ? "dhx_align-right"
                    : "dhx_align-left";
            var css = "dhx_grid-".concat(rowName, "-cell ").concat(isFirstCol, " ").concat(isLastCol, " ").concat(nCell.rowspan ? "dhx_span-cell__rowspan" : "", " ").concat(nCell.align ? "dhx_align-".concat(nCell.align) : cellAlign, " ").concat(nCell.css ? nCell.css : "");
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            if (!nCell.content) {
                if (nCell.align) {
                    css += " dhx_grid-header-cell--align_".concat(nCell.align, " ");
                }
                else {
                    css += " dhx_grid-header-cell--".concat(nCol.type === "number" || nCol.type === "percent" || nCol.type === "date"
                        ? "align_right"
                        : "align_left", " ");
                }
            }
            var content = null;
            if (nCell.content) {
                content = getCustomContentCell(nCell, nCol, config, rowName, css, i);
                content.attrs.style = __assign(__assign({}, content.attrs.style), { width: "100%", borderRight: "0" });
            }
            var borderLeft = "";
            if (leftShift - nCol.$width > 0) {
                borderLeft = "var(--dhx-border)";
            }
            var cellCss = "dhx_grid-header-cell-text_content";
            if (isAutoHeight)
                cellCss += " dhx_grid-header-cell-text_content-auto-height";
            var spanElement = (0, dom_1.el)("span", {
                class: cellCss,
                ".innerHTML": isHTMLEnable ? nCell.text : null,
            }, isHTMLEnable ? null : nCell.text);
            return nCell.colspan || nCell.rowspan
                ? (0, dom_1.el)(".dhx_span-cell", __assign({ style: {
                        width: (0, cells_1.getWidth)(columns, nCell.colspan, (0, core_1.findIndex)(columns, function (item) { return item.id === nCol.id; })),
                        height: spanHeight,
                        left: leftShift -
                            nCol.$width -
                            ((spanPartByRightSplit === null || spanPartByRightSplit === void 0 ? void 0 : spanPartByRightSplit.widthBefore) || 0),
                        borderLeft: borderLeft,
                        top: spanPositionTop,
                    }, class: css.trim(), "data-dhx-id": nCol.id, "data-dhx-text-id": nCell.id }, getHandlers(nCol, rowName, config)), [
                    content || nCell.rowspan
                        ? (0, dom_1.el)("div.dhx_grid-header-cell-text", {
                            role: "presentation",
                        }, [spanElement])
                        : spanElement,
                    sortIconVisible && (0, dom_1.el)("div", { class: sortIconCss }),
                    (mode === types_1.Split.left &&
                        reducedColspan &&
                        cellIdx + reducedColspan > cols.length) ||
                        spanPartByRightSplit
                        ? (0, dom_1.el)(".dhx_grid__cols-border--frozen", {
                            role: "presentation",
                            style: {
                                left: ((spanPartByRightSplit === null || spanPartByRightSplit === void 0 ? void 0 : spanPartByRightSplit.widthBefore) ||
                                    (0, cells_1.getWidth)(cols, cols.length - cellIdx, cellIdx)) -
                                    BORDERS / 2,
                            },
                        })
                        : null,
                ])
                : null;
        })
            .filter(function (cell) { return cell; }));
    });
}
exports.getFixedSpans = getFixedSpans;
function getRowAriaAttrs(rowCount) {
    return { role: "rowgroup", "aria-rowcount": rowCount };
}
function getFixedRows(config, rowsConfig, mode) {
    var _a;
    var leftSplit = config.leftSplit, $totalWidth = config.$totalWidth;
    var rows = getRows(config, rowsConfig);
    var spans = getFixedSpans(config, rowsConfig, mode);
    var fixedCols = null;
    if (rowsConfig.name === "footer" && !rowsConfig.sticky) {
        var rightSplit_1 = config.rightSplit, fixedColumns_1 = config.fixedColumns;
        var getCols = function (isRightSplit) {
            if (isRightSplit === void 0) { isRightSplit = false; }
            var columns = isRightSplit ? fixedColumns_1.right : fixedColumns_1.left;
            return (!isRightSplit && leftSplit >= 0) || (isRightSplit && rightSplit_1 >= 0)
                ? getRows(__assign(__assign({}, config), { currentColumns: columns, $positions: __assign(__assign({}, config.$positions), { xStart: 0, xEnd: isRightSplit ? rightSplit_1 : leftSplit }) }), rowsConfig)
                : [];
        };
        fixedCols = __spreadArray(__spreadArray([], getCols(), true), getCols(true), true);
    }
    var styles = (_a = {
            position: "sticky"
        },
        _a[rowsConfig.position] = 0,
        _a);
    var left;
    if (!rowsConfig.sticky) {
        styles.left = -config.scroll.left;
        left = -config.scroll.left;
        styles.position = "relative";
    }
    return (0, dom_1.el)(".dhx_".concat(rowsConfig.name, "-wrapper").concat(config.rightSplit ? ".dhx_grid__rows_right--fixed" : ""), {
        class: rowsConfig.sticky ? "" : "dhx_compatible-".concat(rowsConfig.name),
        style: __assign(__assign({}, styles), { left: rowsConfig.sticky ? left : 0, height: rowsConfig.name === "footer"
                ? config[rowsConfig.name + "Height"] + BORDERS / 2
                : config[rowsConfig.name + "Height"], width: rowsConfig.sticky ? $totalWidth : rowsConfig.wrapper.width - BORDERS }),
        role: "presentation",
    }, [
        (0, dom_1.el)(".dhx_grid-".concat(rowsConfig.name).concat(leftSplit ? ".dhx_grid_fixed_left" : ""), {
            style: {
                height: rowsConfig.name === "footer"
                    ? config[rowsConfig.name + "Height"] + BORDERS / 2
                    : config[rowsConfig.name + "Height"],
                left: left,
                paddingLeft: rowsConfig.shifts.x,
                width: $totalWidth,
            },
            role: "presentation",
        }, [
            (0, dom_1.el)(".dhx_".concat(rowsConfig.name, "-rows"), __assign({}, getRowAriaAttrs(__spreadArray([], rows, true).length)), __spreadArray([], rows, true)),
            (0, dom_1.el)(".dhx_".concat(rowsConfig.name, "-spans"), {
                style: {
                    marginLeft: -rowsConfig.shifts.x,
                },
                class: "dhx_".concat(rowsConfig.name, "-rows"),
                role: "presentation",
            }, spans),
            fixedCols &&
                (0, dom_1.el)(".dhx_".concat(rowsConfig.name, "-fixed-cols"), {
                    style: {
                        position: "absolute",
                        top: 0,
                        left: config.scroll.left + "px",
                        height: "100%",
                    },
                }, fixedCols),
        ]),
        (0, dom_1.el)("div", { style: { width: $totalWidth }, role: "presentation" }),
    ]);
}
exports.getFixedRows = getFixedRows;
function getFixedDataRows(config, layout, mode) {
    if ((mode === types_1.Split.top && typeof config.topSplit !== "number") ||
        (mode === types_1.Split.bottom && typeof config.bottomSplit !== "number")) {
        return;
    }
    var $totalWidth = config.$totalWidth, topSplit = config.topSplit, bottomSplit = config.bottomSplit, $positions = config.$positions, data = config.data, $totalHeight = config.$totalHeight, $width = config.$width, headerHeight = config.headerHeight, footerHeight = config.footerHeight, $scrollBarWidth = config.$scrollBarWidth;
    var isBottomSplit = mode === types_1.Split.bottom;
    var splitedData = isBottomSplit ? config.fixedRows.bottom : config.fixedRows.top;
    var $renderFrom = isBottomSplit ? "bottomFixedRows" : "topFixedRows";
    var fixedRows = (0, Cells_1.getCells)(__assign(__assign({}, config), { data: splitedData, $renderFrom: $renderFrom, $positions: __assign(__assign({}, $positions), { yStart: 0, yEnd: isBottomSplit ? bottomSplit : topSplit }) }));
    var fixedRowsHeight = splitedData.reduce(function (acc, item) { return acc + item.$height; }, 0);
    var spans = (0, Cells_1.getSpans)(__assign(__assign({}, config), { $renderFrom: $renderFrom, data: data }), isBottomSplit ? types_1.Split.bottom : types_1.Split.top);
    var bottomSplitHeight = (0, main_1.getTotalHeight)(config.fixedRows.bottom);
    var getCols = function (split) {
        return ((0, FixedCols_1.getFixedCols)(__assign(__assign({}, config), { headerHeight: 0, data: splitedData, $renderFrom: $renderFrom, scroll: __assign(__assign({}, config.scroll), { top: -1 }), $positions: __assign(__assign({}, $positions), { yStart: 0, yEnd: isBottomSplit ? bottomSplit : topSplit }), $totalHeight: fixedRowsHeight, $data: data }), __assign(__assign({}, layout), { shifts: __assign(__assign({}, layout.shifts), { y: 0 }) }), split, mode) || []);
    };
    var fixedCols = __spreadArray(__spreadArray([], getCols(types_1.Split.left), true), getCols(types_1.Split.right), true);
    return [
        (0, dom_1.el)(".dhx_grid-fixed-data-rows-wrap", {
            class: isBottomSplit ? "dhx_grid__rows_bottom--fixed" : "",
            style: {
                top: isBottomSplit
                    ? $totalHeight + headerHeight + footerHeight <
                        layout.wrapper.height - $scrollBarWidth.x - BORDERS
                        ? $totalHeight + headerHeight - bottomSplitHeight + BORDERS / 2
                        : layout.wrapper.height -
                            bottomSplitHeight -
                            footerHeight -
                            BORDERS / 2 -
                            $scrollBarWidth.x
                    : headerHeight,
                overflow: "hidden",
                height: fixedRowsHeight > layout.wrapper.height ? layout.wrapper.height : fixedRowsHeight,
                width: $totalWidth + $scrollBarWidth.y + BORDERS < $width
                    ? $totalWidth
                    : $width - $scrollBarWidth.y - BORDERS,
            },
        }, __spreadArray(__spreadArray([
            (0, dom_1.el)(".dhx_grid-fixed-cols", __assign(__assign({ onwheel: main_1.scrollFixedColsAndRows, style: {
                    left: -config.scroll.left + "px",
                    paddingLeft: layout.shifts.x,
                    position: "absolute",
                    width: $totalWidth,
                }, _flags: dom_1.KEYED_LIST }, (0, Cells_1.getHandlers)(0, $positions.xStart, config)), getRowAriaAttrs(data.length)), [
                (0, dom_1.el)(".dhx_grid-fixed-rows", {
                    class: config.rightSplit ? "dhx_grid__rows_right--fixed" : "",
                }, __spreadArray(__spreadArray([], fixedRows, true), [spans && (0, dom_1.el)(".dhx_span-spans", { role: "presentation" }, [spans])], false)),
            ])
        ], fixedCols, true), [
            config.bottomSplit ? (0, dom_1.el)(".dhx_grid__rows-border--frozen", { role: "presentation" }) : null,
        ], false)),
    ];
}
exports.getFixedDataRows = getFixedDataRows;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toolbar = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var html_1 = __webpack_require__(4);
var ts_message_1 = __webpack_require__(17);
var ts_navbar_1 = __webpack_require__(23);
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(element, config) {
        var _this = _super.call(this, element, (0, core_1.extend)({
            navigationType: "click",
            $name: "toolbar",
        }, config)) || this;
        _this._currentRoot = null;
        var render = function () { return _this._draw(element); };
        _this.mount(element, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Toolbar.prototype.getState = function (id) {
        if ((0, core_1.isDefined)(id) && !this.data.getItem(id)) {
            return;
        }
        var state = {};
        this.data.eachChild(this.data.getRoot(), function (item) {
            if (item.twoState && !item.group) {
                state[item.id] = item.active;
            }
            else if (item.type === "input" ||
                item.type === "selectButton" ||
                item.type === "datePicker") {
                state[item.id] = item.value;
            }
        }, false);
        for (var key in this._groups) {
            if (this._groups[key].active) {
                state[key] = this._groups[key].active;
            }
        }
        if ((0, core_1.isId)(id)) {
            return state[id];
        }
        return state;
    };
    Toolbar.prototype.setState = function (state) {
        var _a;
        var _loop_1 = function (key) {
            if (this_1._groups && this_1._groups[key]) {
                if (this_1._groups[key].active) {
                    this_1.data.update(this_1._groups[key].active, { active: false });
                    this_1._groups[key].active = state[key];
                    this_1.data.update(state[key], { active: true });
                }
            }
            else {
                var item = this_1.data.getItem(key);
                switch (item.type) {
                    case "input":
                        this_1.data.update(key, { value: state[key] });
                        break;
                    case "selectButton":
                        {
                            var selected = (_a = item.items) === null || _a === void 0 ? void 0 : _a.find(function (option) { return option.value === state[key]; });
                            this_1.data.update(key, { value: state[key], icon: selected === null || selected === void 0 ? void 0 : selected.icon });
                        }
                        break;
                    case "datePicker":
                        if (item.$calendar) {
                            if (state[key]) {
                                item.$calendar.setValue(state[key]);
                            }
                            else {
                                item.$calendar.clear();
                            }
                        }
                        else {
                            this_1.data.update(key, { value: state[key] });
                        }
                        break;
                    default:
                        this_1.data.update(key, { active: state[key] });
                }
            }
        };
        var this_1 = this;
        for (var key in state) {
            _loop_1(key);
        }
    };
    Toolbar.prototype.setFocus = function (id) {
        if (!this.data.getItem(id) || this.data.getItem(id).type !== "input") {
            return;
        }
        var inputEl = this.getRootNode().querySelector("[data-dhx-id=\"".concat(id, "\"]"));
        if (!inputEl) {
            return;
        }
        inputEl.focus();
    };
    Toolbar.prototype._customHandlers = function () {
        var _this = this;
        return {
            input: function (e) {
                var id = (0, html_1.locate)(e);
                var item = _this.data.getItem(id);
                if (!item)
                    return;
                var value = e.target.value;
                _this.data.update(id, { value: value });
                if (item.type === "input") {
                    _this.events.fire(ts_navbar_1.NavigationBarEvents.input, [id, value]);
                }
            },
            tooltip: function (e) {
                var elem = (0, html_1.locateNode)(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("data-dhx-id");
                var item = _this.data.getItem(id);
                if (item === null || item === void 0 ? void 0 : item.tooltip) {
                    (0, ts_message_1.tooltip)(item.tooltip, {
                        node: elem,
                        position: ts_message_1.Position.bottom,
                    });
                }
            },
        };
    };
    Toolbar.prototype._getFactory = function () {
        return (0, ts_navbar_1.createFactory)({
            widget: this,
            defaultType: "navItem",
            allowedTypes: [
                "button",
                "imageButton",
                "selectButton",
                "navItem",
                "menuItem",
                "separator",
                "spacer",
                "title",
                "input",
                "customHTML",
                "datePicker",
                "customHTMLButton",
            ],
            widgetName: "toolbar",
        });
    };
    Toolbar.prototype._draw = function (element) {
        var _this = this;
        var getAriaAttrs = function (element) { return ({
            role: "toolbar",
            "aria-label": element || "", // to differ toolbars if there are 2 or more on page
        }); };
        var toolbarHeight = this.data.getLength()
            ? this.data.reduce(function (result, item) {
                switch (item.type) {
                    case "title":
                        return !result ? 20 : result;
                    case "button":
                        return item.size === "small" && (!result || result <= 28) ? 28 : result || 32;
                    default:
                        return 32;
                }
            }, 0) + 24
            : null;
        return (0, dom_1.el)("nav.dhx_widget.dhx_toolbar", {
            style: { height: toolbarHeight },
            class: this.config.css ? this.config.css : "",
        }, [
            (0, dom_1.el)("ul.dhx_navbar.dhx_navbar--horizontal", __assign(__assign({ "data-dhx-widget-id": this._uid, tabindex: 0 }, getAriaAttrs(element)), { onclick: this._handlers.onclick, onmousedown: this._handlers.onmousedown, oninput: this._handlers.input, onmouseover: this._handlers.tooltip, onkeydown: this._handlers.onkeydown, onmousemove: this._handlers.onmousemove, onmouseleave: this._handlers.onmouseleave, _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = (0, html_1.locateNode)(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("data-dhx-id");
                            var item = _this.data.getItem(id);
                            if (item === null || item === void 0 ? void 0 : item.tooltip) {
                                (0, ts_message_1.tooltip)(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                } }), this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ]);
    };
    Toolbar.prototype._getMode = function (item, root) {
        return item.id === root ? "bottom" : "right";
    };
    Toolbar.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Toolbar.prototype._setRoot = function (id) {
        if (this.data.getParent(id) === this.data.getRoot()) {
            this._currentRoot = id;
        }
    };
    return Toolbar;
}(ts_navbar_1.Navbar));
exports.Toolbar = Toolbar;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Window = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var KeyManager_1 = __webpack_require__(21);
var FocusManager_1 = __webpack_require__(19);
var ts_layout_1 = __webpack_require__(16);
var ts_toolbar_1 = __webpack_require__(33);
var helpers_1 = __webpack_require__(214);
var types_1 = __webpack_require__(43);
var WindowController_1 = __webpack_require__(215);
var ts_navbar_1 = __webpack_require__(23);
var Window = /** @class */ (function () {
    function Window(config) {
        var _this = this;
        this.config = (0, core_1.extend)({
            movable: false,
            resizable: false,
            closable: config.modal,
        }, config);
        if (this.config.node && typeof this.config.node === "string") {
            this.config.node = document.getElementById(this.config.node);
        }
        else if (!this.config.node) {
            this.config.node = document.body;
        }
        this._uid = (0, core_1.uid)();
        this.events = new events_1.EventSystem(this);
        var popup = (this._popup = document.createElement("div"));
        popup.tabIndex = 1;
        popup.setAttribute("role", "dialog");
        popup.setAttribute("aria-modal", "".concat(this.config.modal || false));
        if (!this.config.modal) {
            WindowController_1.default.add(this._uid, this._popup);
        }
        this._fullScreen = false;
        this._isActive = false;
        this._keyManager = new KeyManager_1.KeyManager(function (_, focusId) {
            return focusId === _this._uid || _this.getContainer().contains(document.activeElement);
        });
        this._initHandlers();
        this._initUI();
        if (this.config.html) {
            this.attachHTML(this.config.html);
        }
    }
    Window.prototype.paint = function () {
        this._layout.paint();
    };
    Window.prototype.isFullScreen = function () {
        return this._fullScreen;
    };
    Window.prototype.setFullScreen = function () {
        if (!this._fullScreen) {
            this._fullScreen = true;
            this.setSize(window.innerWidth, window.innerHeight);
            this.setPosition(window.pageXOffset, window.pageYOffset);
        }
    };
    Window.prototype.unsetFullScreen = function () {
        if (this._fullScreen) {
            this._fullScreen = false;
            this.setSize(this._oldSizes.width, this._oldSizes.height);
            this.setPosition(this._oldPosition.left, this._oldPosition.top);
        }
    };
    Window.prototype.setSize = function (width, height) {
        this._oldSizes = {
            width: this._popup.offsetWidth,
            height: this._popup.offsetHeight,
        };
        var size = {
            width: this._oldSizes.width,
            height: this._oldSizes.height,
        };
        if ((0, core_1.isDefined)(width)) {
            this.config.width = size.width = width;
        }
        if ((0, core_1.isDefined)(height)) {
            this.config.height = size.height = height;
        }
        this._popup.style.width = size.width + "px";
        this._popup.style.height = size.height + "px";
        this.events.fire(types_1.WindowEvents.resize, [
            size,
            this._oldSizes,
            { left: true, top: true, bottom: true, right: true },
        ]);
    };
    Window.prototype.getSize = function () {
        return {
            width: this._popup.offsetWidth,
            height: this._popup.offsetHeight,
        };
    };
    Window.prototype.setPosition = function (left, top) {
        this._oldPosition = {
            left: this._popup.offsetLeft,
            top: this._popup.offsetTop,
        };
        var position = {
            left: this._oldPosition.left,
            top: this._oldPosition.top,
        };
        if ((0, core_1.isDefined)(left)) {
            this.config.left = position.left = left;
        }
        if ((0, core_1.isDefined)(top)) {
            this.config.top = position.top = top;
        }
        this._popup.style.left = position.left + "px";
        this._popup.style.top = position.top + "px";
        this.events.fire(types_1.WindowEvents.resize, [
            position,
            this._oldPosition,
            { left: true, top: true, bottom: true, right: true },
        ]);
    };
    Window.prototype.getPosition = function () {
        return {
            left: this._popup.offsetLeft,
            top: this._popup.offsetTop,
        };
    };
    Window.prototype.show = function (left, top) {
        if (left === void 0) { left = this.config.left; }
        if (top === void 0) { top = this.config.top; }
        if (!this.events.fire(types_1.WindowEvents.beforeShow, [{ left: left, top: top }])) {
            return;
        }
        if (this.isVisible()) {
            this.hide();
        }
        WindowController_1.default.setActive(this._uid);
        this._popup.className +=
            " dhx_popup dhx_widget" +
                (this.config.modal ? " dhx_popup--window_modal" : " dhx_popup--window") +
                (this.config.css ? " " + this.config.css : "");
        this._popup.style.position = this.config.modal ? "fixed" : "absolute";
        this._popup.setAttribute("data-dhx-widget-id", this._uid);
        var _a = this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
        var width = (this.config.width =
            (typeof this.config.width === "number" && this.config.width) ||
                (typeof this.config.minWidth === "number" && this.config.minWidth) ||
                containerInnerWidth / 2);
        var height = (this.config.height =
            (typeof this.config.height === "number" && this.config.height) ||
                (typeof this.config.minHeight === "number" && this.config.minHeight) ||
                containerInnerHeight / 2);
        this.config.left = left = (0, core_1.isDefined)(left)
            ? left
            : (containerInnerWidth - width) / (this.config.modal ? 2 : 2 + containerXOffset);
        this.config.top = top = (0, core_1.isDefined)(top)
            ? top
            : (containerInnerHeight - height) / (this.config.modal ? 2 : 2 + containerYOffset);
        if (this._isActive) {
            this._popup.style.left = left + "px";
            this._popup.style.top = top + "px";
            return;
        }
        if (this.config.viewportOverflow) {
            WindowController_1.default.openFreeWindow(this.config.node);
        }
        if (this.config.modal) {
            this._blockScreen();
        }
        this._popup.style.width = width + "px";
        this._popup.style.height = height + "px";
        this._popup.style.left = left + "px";
        this._popup.style.top = top + "px";
        this.config.node.appendChild(this._popup);
        this._popup.focus();
        this._isActive = true;
        this._layout.getCell("content").paint();
        this.events.fire(types_1.WindowEvents.afterShow, [{ left: left, top: top }]);
        FocusManager_1.focusManager.setFocusId(this._uid);
    };
    Window.prototype.hide = function () {
        this._hide();
    };
    Window.prototype._hide = function (e) {
        if (!this._isActive ||
            !this.events.fire(types_1.WindowEvents.beforeHide, [{ left: this.config.left, top: this.config.top }, e])) {
            return;
        }
        if (this.config.viewportOverflow) {
            WindowController_1.default.closeFreeWindow(this.config.node);
        }
        if (this._blocker) {
            this.config.node.removeChild(this._blocker);
            if (this.config.closable) {
                this._keyManager.removeHotKey(null, this);
            }
            this._blocker = null;
        }
        this.config.node.removeChild(this._popup);
        this._isActive = false;
        this.events.fire(types_1.WindowEvents.afterHide, [{ left: this.config.left, top: this.config.top }, e]);
    };
    Window.prototype.isVisible = function () {
        return this._isActive;
    };
    Window.prototype.getWidget = function () {
        return this._layout.getCell("content").getWidget();
    };
    Window.prototype.getContainer = function () {
        return this.getRootView().data._container;
    };
    Window.prototype.attach = function (name, config) {
        this._layout.getCell("content").attach(name, config);
    };
    Window.prototype.attachHTML = function (html) {
        this._layout.getCell("content").attachHTML(html);
    };
    Window.prototype.getRootView = function () {
        return this._layout.getRootView();
    };
    Window.prototype.destructor = function () {
        this._isActive && this.hide();
        this.header && this.header.destructor();
        this.footer && this.footer.destructor();
        this.events && this.events.clear();
        this._keyManager && this._keyManager.destructor();
        this._layout && this._layout.destructor();
        this.config = this.header = this.footer = this.events = null;
        this._popup = this._uid = this._handlers = this._isActive = this._keyManager = this._fullScreen = this._oldSizes = this._oldPosition = null;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Window.prototype.fullScreen = function () {
        this.setFullScreen();
    };
    Window.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            headerDblClick: function (e) { return _this.events.fire(types_1.WindowEvents.headerDoubleClick, [e]); },
            move: function (e) {
                if (e.which === 3) {
                    return;
                }
                e.preventDefault();
                (0, helpers_1.detectDrag)(e).then(function (pos) {
                    if (pos) {
                        _this._startDrag(pos.x, pos.y);
                    }
                });
            },
            resize: {
                ".dhx_window-resizer": function (e) {
                    if (e.which === 3) {
                        return;
                    }
                    e.preventDefault();
                    WindowController_1.default.setActive(_this._uid);
                    (0, helpers_1.detectDrag)(e).then(function (pos) {
                        if (pos) {
                            var classList = e.target.classList;
                            if (classList.contains("dhx_window-resizer--left")) {
                                _this._startResize({ left: true });
                            }
                            else if (classList.contains("dhx_window-resizer--right")) {
                                _this._startResize({ right: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top")) {
                                _this._startResize({ top: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom")) {
                                _this._startResize({ bottom: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom_left")) {
                                _this._startResize({ left: true, bottom: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom_right")) {
                                _this._startResize({ bottom: true, right: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top_left")) {
                                _this._startResize({ top: true, left: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top_right")) {
                                _this._startResize({ top: true, right: true });
                            }
                        }
                    });
                },
            },
            setActive: function () {
                WindowController_1.default.setActive(_this._uid);
            },
        };
    };
    Window.prototype._initUI = function () {
        var _this = this;
        var rows = [];
        var isHeader = (this.config.header || this.config.title || this.config.closable || this.config.movable) &&
            this.config.header !== false;
        if (isHeader) {
            rows.push({
                id: "header",
                height: "content",
                css: "dhx_window-header " + (this.config.movable ? "dhx_window-header--movable" : ""),
                on: {
                    mousedown: this.config.movable && this._handlers.move,
                    dblclick: this._handlers.headerDblClick,
                },
            });
        }
        rows.push({
            id: "content",
            css: isHeader ? "dhx_window-content" : "dhx_window-content-without-header",
        });
        if (this.config.footer) {
            rows.push({ id: "footer", height: "content", css: "dhx_window-footer" });
        }
        if (this.config.resizable) {
            rows.push({ id: "resizers", height: "content", css: "resizers" });
        }
        var layout = (this._layout = new ts_layout_1.Layout(this._popup, {
            css: "dhx_window" + (this.config.modal ? " dhx_window--modal" : ""),
            rows: rows,
            on: {
                mousedown: this._handlers.setActive,
            },
            id: this._uid,
        }));
        if (isHeader) {
            var header = (this.header = new ts_toolbar_1.Toolbar());
            if (this.config.title) {
                this.header.data.add({
                    type: "title",
                    value: this.config.title,
                    id: "title",
                    css: "title_max",
                });
                this._popup.setAttribute("aria-label", this.config.title);
            }
            if (this.config.closable) {
                this.header.data.add({
                    type: "spacer",
                });
                this.header.data.add({
                    id: "close",
                    type: "button",
                    view: "link",
                    size: "medium",
                    color: "secondary",
                    circle: true,
                    icon: "dxi dxi-close",
                });
                header.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
                    if (id === "close") {
                        _this._hide(e);
                    }
                });
            }
            layout.getCell("header").attach(header);
        }
        if (this.config.footer) {
            var footer = (this.footer = new ts_toolbar_1.Toolbar());
            layout.getCell("footer").attach(footer);
        }
        if (this.config.resizable) {
            layout.getCell("resizers").attach(function () { return _this._drawResizers(); });
        }
    };
    Window.prototype._drawResizers = function () {
        return (0, dom_1.el)(".dhx-resizers", {
            onmousedown: this._handlers.resize,
        }, [
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--left", { _ref: "left" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--right", { _ref: "right" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--bottom", { _ref: "bottom" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--top", { _ref: "top" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--bottom_right", { _ref: "bottomRight" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--bottom_left", { _ref: "bottomLeft" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--top_right", { _ref: "topRight" }),
            (0, dom_1.el)(".dhx_window-resizer.dhx_window-resizer--top_left", { _ref: "topLeft" }),
        ]);
    };
    Window.prototype._startDrag = function (x, y) {
        var _this = this;
        this.config.node.classList.add("dhx_window--stop_selection");
        var deltaX = x - this._popup.offsetLeft;
        var deltaY = y - this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var mousemove = function (e) {
            var oldposition = {
                left: _this._popup.offsetLeft,
                top: _this._popup.offsetTop,
            };
            var newX = e.pageX - deltaX;
            var newY = e.pageY - deltaY;
            if (!_this.config.viewportOverflow) {
                var _a = _this._getContainerParams(), containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset, containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight;
                if (newX < containerXOffset) {
                    newX = containerXOffset;
                }
                else if (newX > containerXOffset + containerInnerWidth - width) {
                    newX = containerXOffset + containerInnerWidth - width;
                }
                if (newY < containerYOffset) {
                    newY = containerYOffset;
                }
                else if (newY > containerYOffset + containerInnerHeight - height) {
                    newY = containerYOffset + containerInnerHeight - height;
                }
            }
            _this.config.left = newX;
            _this.config.top = newY;
            _this._popup.style.left = newX + "px";
            _this._popup.style.top = newY + "px";
            var position = { left: newX, top: newY };
            _this.events.fire(types_1.WindowEvents.move, [
                position,
                oldposition,
                { left: true, top: true, bottom: true, right: true },
            ]);
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    Window.prototype._startResize = function (resizeConfig) {
        var _this = this;
        var minWidth = this.config.minWidth | 100;
        var minHeight = this.config.minHeight | 100;
        var left = this._popup.offsetLeft;
        var top = this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var root = this.getRootView().refs;
        var resizer;
        var resizeClassName;
        switch (true) {
            case resizeConfig.bottom && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--bottom_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--bottom_right";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--top_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--top-right";
                resizer = root.right;
                break;
            case resizeConfig.top:
                resizeClassName = "dhx_window-body-pointer--top";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom:
                resizeClassName = "dhx_window-body-pointer--bottom";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--right";
                resizer = root.right;
                break;
        }
        resizer.el.classList.add("dhx_window-resizer--active");
        this.config.node.classList.add("dhx_window--stop_selection");
        this.config.node.classList.add(resizeClassName);
        var mousemove = function (e) {
            var _a = _this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
            var size = {
                width: _this._notInNode() ? e.pageX - left : e.pageX - _this.config.node.offsetLeft - left,
                height: _this._notInNode() ? e.pageY - top : e.pageY - _this.config.node.offsetTop - top,
                left: _this._notInNode() ? e.pageX : e.pageX - _this.config.node.offsetLeft,
                top: _this._notInNode() ? e.pageY : e.pageY - _this.config.node.offsetTop,
            };
            if (resizeConfig.right) {
                if (size.width < minWidth) {
                    size.width = minWidth;
                }
                else if (size.width > containerXOffset + containerInnerWidth - left) {
                    size.width = containerXOffset + containerInnerWidth - left;
                }
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.bottom) {
                if (size.height < minHeight) {
                    size.height = minHeight;
                }
                else if (size.height > containerYOffset + containerInnerHeight - top) {
                    size.height = containerYOffset + containerInnerHeight - top;
                }
                _this._popup.style.height = size.height + "px";
            }
            if (resizeConfig.left) {
                if (left + width - size.left < minWidth) {
                    size.left = left + width - minWidth;
                }
                size.width = left + width - size.left;
                _this.config.left = size.left;
                _this._popup.style.left = size.left + "px";
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.top) {
                if (size.top < containerYOffset) {
                    size.top = containerYOffset;
                }
                else if (top + height - size.top < minHeight) {
                    size.top = top + height - minHeight;
                }
                size.height = top + height - size.top;
                _this.config.top = size.top;
                _this._popup.style.top = size.top + "px";
                _this._popup.style.height = size.height + "px";
            }
            _this.config.width = _this._popup.offsetWidth;
            _this.config.height = _this._popup.offsetHeight;
            _this.events.fire(types_1.WindowEvents.resize, [size, { left: left, top: top, height: height, width: width }, resizeConfig]);
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
            _this.config.node.classList.remove(resizeClassName);
            resizer.el.classList.remove("dhx_window-resizer--active");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    Window.prototype._blockScreen = function () {
        var _this = this;
        var blocker = document.createElement("div");
        blocker.className = "dhx_window__overlay";
        this.config.node.appendChild(blocker);
        this._blocker = blocker;
        if (this.config.closable) {
            blocker.addEventListener("click", function (e) { return _this._hide(e); });
            this._keyManager.addHotKey("escape", function (e) {
                var collection1 = Array.prototype.slice.call(document.querySelectorAll(".dhx_popup--window_modal"));
                var collection2 = Array.prototype.slice.call(document.querySelectorAll(".dhx_popup--window"));
                var mainCollection = collection1.concat(collection2);
                if (mainCollection.length === 1) {
                    _this._hide(e);
                    return;
                }
                mainCollection.sort(function (a, b) {
                    return +window.getComputedStyle(b).zIndex - +window.getComputedStyle(a).zIndex;
                });
                if (mainCollection[mainCollection.length - 1] === _this._popup) {
                    _this._hide(e);
                }
                return;
            });
        }
    };
    Window.prototype._notInNode = function () {
        return this.config.node === document.body || this.config.modal;
    };
    Window.prototype._getContainerParams = function () {
        var notInNode = this._notInNode();
        return {
            containerInnerWidth: notInNode ? window.innerWidth : this.config.node.offsetWidth,
            containerInnerHeight: notInNode ? window.innerHeight : this.config.node.offsetHeight,
            containerXOffset: notInNode ? window.pageXOffset : this.config.node.scrollLeft,
            containerYOffset: notInNode ? window.pageYOffset : this.config.node.scrollTop,
        };
    };
    return Window;
}());
exports.Window = Window;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = void 0;
var events_1 = __webpack_require__(3);
var view_1 = __webpack_require__(8);
var ts_layout_1 = __webpack_require__(16);
var core_1 = __webpack_require__(0);
var dateinput_1 = __webpack_require__(221);
var button_1 = __webpack_require__(222);
var checkbox_1 = __webpack_require__(88);
var checkboxGroup_1 = __webpack_require__(223);
var input_1 = __webpack_require__(45);
var radioGroup_1 = __webpack_require__(224);
var select_1 = __webpack_require__(226);
var textarea_1 = __webpack_require__(227);
var textinput_1 = __webpack_require__(228);
var combo_1 = __webpack_require__(229);
var sliderform_1 = __webpack_require__(230);
var helper_1 = __webpack_require__(7);
var simplevault_1 = __webpack_require__(89);
var timeinput_1 = __webpack_require__(241);
var colorpicker_1 = __webpack_require__(242);
var spacer_1 = __webpack_require__(243);
var avatar_1 = __webpack_require__(244);
var fieldset_1 = __webpack_require__(245);
var ToggleButton_1 = __webpack_require__(94);
var ToggleGroup_1 = __webpack_require__(246);
var types_1 = __webpack_require__(5);
var dom_1 = __webpack_require__(1);
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(container, config) {
        var _this = _super.call(this, null, (0, core_1.extend)({
            disabled: false,
            hidden: false,
            css: "",
        }, config)) || this;
        _this._isValid = true;
        _this._state = {};
        _this.events = new events_1.EventSystem(_this);
        _this.container = container;
        _this._initUI(container);
        _this.config.hidden && _this.hide(true);
        _this.config.disabled && _this.disable();
        _this.events.on(types_1.FormEvents.afterShow, function () {
            _this._formContainerShow();
        });
        _this.events.on(types_1.FormEvents.afterHide, function () {
            if (!Object.values(_this._attachments).some(function (item) { return !item.config.hidden; })) {
                _this._formContainerHide();
            }
        });
        (0, dom_1.awaitRedraw)().then(function () {
            var node = _this.layout.getRootNode();
            if (node) {
                node.setAttribute("role", "form");
                _this.config.title && node.setAttribute("aria-label", _this.config.title);
            }
        });
        return _this;
    }
    Form.prototype.paint = function () {
        _super.prototype.paint.call(this);
        this.layout.paint();
    };
    Form.prototype.send = function (url, method, asFormData) {
        var _this = this;
        if (method === void 0) { method = "POST"; }
        if (this.events.fire(types_1.FormEvents.beforeSend)) {
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        resolve(xhr.response || xhr.responseText);
                    }
                    else {
                        reject({
                            status: xhr.status,
                            statusText: xhr.statusText,
                        });
                    }
                };
                xhr.onloadend = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                        _this.events.fire(types_1.FormEvents.afterSend);
                    }
                };
                xhr.onerror = function () {
                    reject({
                        status: xhr.status,
                        statusText: xhr.statusText,
                    });
                };
                if (method === "GET") {
                    url += "?" + encodeURIComponent(JSON.stringify(_this.getValue()));
                }
                xhr.open(method, url);
                if (!asFormData) {
                    xhr.setRequestHeader("Content-Type", "application/json");
                }
                switch (method) {
                    case "POST":
                        _this._send();
                        xhr.send(asFormData ? _this.getValue(true) : JSON.stringify(_this.getValue()));
                        break;
                    case "DELETE":
                    case "PUT":
                        xhr.send(asFormData ? _this.getValue(true) : JSON.stringify(_this.getValue()));
                        break;
                    case "GET":
                        xhr.send();
                        break;
                    default:
                        xhr.send();
                        break;
                }
            });
        }
    };
    Form.prototype.clear = function (method) {
        switch (method) {
            case types_1.ClearMethod.value:
                this._clear();
                break;
            case types_1.ClearMethod.validation:
                this._clearValidate();
                break;
            default:
                this._clear();
                this._clearValidate();
                break;
        }
        this.paint();
    };
    Form.prototype.setValue = function (obj) {
        for (var item in obj) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].setValue === "function" &&
                    this._attachments[key].config.name === item) {
                    this._attachments[key].setValue(obj[item]);
                }
            }
        }
    };
    Form.prototype.getValue = function (asFormData) {
        if (asFormData) {
            var formData_1 = new FormData();
            var _loop_1 = function (key) {
                if (Array.isArray(this_1._state[key])) {
                    this_1._state[key].forEach(function (value, i) { return formData_1.append(key + "[".concat(i, "]"), value); });
                }
                else {
                    formData_1.append(key, this_1._state[key]);
                }
            };
            var this_1 = this;
            for (var key in this._state) {
                _loop_1(key);
            }
            return formData_1;
        }
        return __assign({}, this._state);
    };
    Form.prototype.getItem = function (name) {
        for (var item in this._attachments) {
            if (item == name) {
                return this._attachments[item];
            }
        }
    };
    Form.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        this._isValid = true;
        for (var key in this._attachments) {
            if (typeof this._attachments[key].validate === "function") {
                if ((0, helper_1.isVerify)(this._attachments[key].config) && !this._attachments[key].validate(silent)) {
                    this._isValid = false;
                    !silent && this.events.fire(types_1.FormEvents.validationFail, [key, this._attachments[key]]);
                }
            }
        }
        return this._isValid;
    };
    Form.prototype.setProperties = function (arg, props) {
        if (typeof arg === "string" && props && !(0, core_1.isEmptyObj)(props)) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].setProperties === "function" && key === arg) {
                    this._attachments[key].setProperties(props);
                }
            }
        }
        if (typeof arg === "object" && !(0, core_1.isEmptyObj)(arg)) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].setProperties === "function" && !(0, core_1.isEmptyObj)(arg[key])) {
                    this._attachments[key].setProperties(arg[key]);
                }
            }
        }
    };
    Form.prototype.getProperties = function (name) {
        if (name) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].getProperties === "function" && key === name) {
                    return this._attachments[key].getProperties();
                }
            }
        }
        var obj = {};
        for (var key in this._attachments) {
            if (typeof this._attachments[key].getProperties === "function") {
                obj[key] = this._attachments[key].getProperties();
            }
        }
        return obj;
    };
    Form.prototype.show = function () {
        if (!this.config.hidden && !Object.values(this._attachments).some(function (item) { return !item.config.hidden; })) {
            return;
        }
        this._formContainerShow();
        for (var key in this._attachments) {
            if (typeof this._attachments[key].show === "function") {
                this._attachments[key].show();
            }
        }
    };
    Form.prototype.hide = function (init) {
        if (this.config.hidden && !init) {
            return;
        }
        this._formContainerHide();
        for (var key in this._attachments) {
            if (typeof this._attachments[key].hide === "function") {
                this._attachments[key].hide(init);
            }
        }
    };
    Form.prototype.setFocus = function (name) {
        for (var item in this._attachments) {
            var control = this._attachments[item];
            if (control.config.type === "radiogroup" || control.config.type === "checkboxgroup") {
                control.focus(name);
            }
            if (control.config.name === name) {
                control.focus();
            }
        }
    };
    Form.prototype.blur = function (name) {
        if (!name) {
            this.forEach(function (control) {
                if (typeof control.blur === "function") {
                    control.blur();
                }
            });
        }
        for (var item in this._attachments) {
            var control = this._attachments[item];
            if (control.config.type === "radiogroup" || control.config.type === "checkboxgroup") {
                control.blur(name);
            }
            if (control.config.name === name) {
                control.blur();
            }
        }
    };
    Form.prototype.isVisible = function (name) {
        if (!name) {
            return !this.config.hidden;
        }
        for (var key in this._attachments) {
            if (key === name) {
                return !this._attachments[key].config.hidden;
            }
        }
    };
    Form.prototype.disable = function () {
        this.config.disabled = true;
        for (var key in this._attachments) {
            if (typeof this._attachments[key].disable === "function") {
                this._attachments[key].disable();
            }
        }
    };
    Form.prototype.enable = function () {
        this.config.disabled = false;
        for (var key in this._attachments) {
            if (typeof this._attachments[key].enable === "function") {
                this._attachments[key].enable();
            }
        }
    };
    Form.prototype.isDisabled = function (name) {
        if (!name) {
            return this.config.disabled;
        }
        for (var key in this._attachments) {
            if (key === name) {
                return this._attachments[key].config.disabled;
            }
        }
    };
    Form.prototype.forEach = function (callback) {
        var items = Object.values(this._attachments);
        for (var index = 0; index < items.length; index++) {
            callback.call(this, items[index], index, items);
        }
    };
    Form.prototype.destructor = function () {
        this.unmount();
        for (var key in this._attachments) {
            if (typeof this._attachments[key].destructor === "function") {
                this._attachments[key].destructor();
            }
        }
        this.events && this.events.clear();
        this.layout && this.layout.destructor();
        this.config = this._attachments = this._state = this._uid = this.container = this.events = this._isValid = null;
    };
    Form.prototype.getRootView = function () {
        return this.layout.getRootView();
    };
    Form.prototype._addLayoutItem = function (item) {
        var id = (item.id = item.id || (0, core_1.uid)());
        var name = (item.name = item.name || id.toString());
        item.type = item.type && item.type.toLowerCase();
        var padding = item.padding, config = __rest(item, ["padding"]);
        var width = item.width, height = item.height;
        var autoSize = item.type !== "spacer";
        if (autoSize && !height)
            height = "content";
        switch (config.type) {
            case "button":
            case "togglegroup":
                width = config.width || (!config.full && "content");
                break;
            case "simplevault":
                config.$vaultHeight = height;
                break;
        }
        this._initItemHandlers(item, name);
        var cell = {
            id: name,
            width: width,
            height: height,
            padding: padding,
            hidden: config.hidden,
            css: this.getCellCSS(config),
        };
        if (item.type === "fieldset") {
            cell.$fieldset = true;
            cell.label = item.label;
            cell.labelAlignment = item.labelAlignment;
            this._createLayoutConfig(item, cell);
        }
        return cell;
    };
    Form.prototype._initItemHandlers = function (item, name) {
        var _this = this;
        switch (item.type) {
            case "avatar":
                {
                    var avatar_2 = (this._attachments[name] = new avatar_1.Avatar(null, item));
                    this._state[name] = avatar_2.getValue();
                    avatar_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.change, function (value) {
                        _this._state[name] = value;
                        _this.events.fire(types_1.FormEvents.change, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                        if (!init) {
                            return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                        }
                    });
                    avatar_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                        _this.layout.getCell(name).hide();
                        !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                        _this.layout.getCell(name).show();
                        _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                        _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                        return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                        _this._changeProps(name, props, avatar_2.config);
                        _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                        _this.paint();
                    });
                    avatar_2.events.on(types_1.ItemEvent.focus, function (value) {
                        _this.events.fire(types_1.FormEvents.focus, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.blur, function (value) {
                        _this.events.fire(types_1.FormEvents.blur, [name, value]);
                    });
                    avatar_2.events.on(types_1.ItemEvent.keydown, function (event) {
                        _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                    });
                }
                break;
            case "toggle":
                {
                    var toggle_1 = (this._attachments[name] = new ToggleButton_1.ToggleButton(null, item));
                    this._state[name] = toggle_1.getValue();
                    toggle_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.change, function (value) {
                        _this._state[name] = value;
                        _this.events.fire(types_1.FormEvents.change, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                        if (!init) {
                            return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                        }
                    });
                    toggle_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                        _this.layout.getCell(name).hide();
                        !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                        _this.layout.getCell(name).show();
                        _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (config) {
                        return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, config]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.afterChangeProperties, function (config) {
                        _this._changeProps(name, config, toggle_1.config);
                        _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, config]);
                        _this.paint();
                    });
                    toggle_1.events.on(types_1.ItemEvent.focus, function (value) {
                        _this.events.fire(types_1.FormEvents.focus, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.blur, function (value) {
                        _this.events.fire(types_1.FormEvents.blur, [name, value]);
                    });
                    toggle_1.events.on(types_1.ItemEvent.keydown, function (event) {
                        _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                    });
                }
                break;
            case "togglegroup":
                {
                    var toggleGroup_1 = (this._attachments[name] = new ToggleGroup_1.ToggleGroup(null, item));
                    this._state[name] = toggleGroup_1.getValue();
                    toggleGroup_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.change, function (value) {
                        _this._state[name] = value;
                        _this.events.fire(types_1.FormEvents.change, [name, value]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.beforeHide, function (value, id, init) {
                        if (!init) {
                            return _this.events.fire(types_1.FormEvents.beforeHide, [name, value, id]);
                        }
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.beforeShow, function (value, id) {
                        return _this.events.fire(types_1.FormEvents.beforeShow, [name, value, id]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.afterHide, function (value, id, init) {
                        !toggleGroup_1.isVisible() && _this.layout.getCell(name).hide();
                        !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value, id]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.afterShow, function (value, id) {
                        _this.layout.getCell(name).show();
                        _this.events.fire(types_1.FormEvents.afterShow, [name, value, id]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (config) {
                        return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, config]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.afterChangeProperties, function (config) {
                        _this._changeProps(name, config, toggleGroup_1.config);
                        _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, config]);
                        _this.paint();
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.focus, function (value, id) {
                        _this.events.fire(types_1.FormEvents.focus, [name, value, id]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.blur, function (value, id) {
                        _this.events.fire(types_1.FormEvents.blur, [name, value, id]);
                    });
                    toggleGroup_1.events.on(types_1.ItemEvent.keydown, function (event, id) {
                        _this.events.fire(types_1.FormEvents.keydown, [event, name, id]);
                    });
                }
                break;
            case "button":
                {
                    var button_2 = (this._attachments[name] = new button_1.Button(null, item));
                    button_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                        return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                    });
                    button_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                        _this._changeProps(name, props, button_2.config);
                        _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                        _this.paint();
                    });
                    button_2.events.on(types_1.ItemEvent.click, function (e) {
                        e.preventDefault();
                        _this.events.fire(types_1.FormEvents.click, [name, e]);
                        _this.events.fire(types_1.FormEvents.buttonClick, [name, e]);
                        if (button_2.config.submit && _this.validate()) {
                            button_2.config.url && _this.send(button_2.config.url);
                        }
                    });
                    button_2.events.on(types_1.ItemEvent.beforeHide, function (text, init) {
                        if (!init) {
                            return _this.events.fire(types_1.FormEvents.beforeHide, [name, text]);
                        }
                    });
                    button_2.events.on(types_1.ItemEvent.beforeShow, function (text) {
                        return _this.events.fire(types_1.FormEvents.beforeShow, [name, text]);
                    });
                    button_2.events.on(types_1.ItemEvent.afterHide, function (text, init) {
                        _this.layout.getCell(name).hide();
                        !init && _this.events.fire(types_1.FormEvents.afterHide, [name, text]);
                    });
                    button_2.events.on(types_1.ItemEvent.afterShow, function (text) {
                        _this.layout.getCell(name).show();
                        _this.events.fire(types_1.FormEvents.afterShow, [name, text]);
                    });
                    button_2.events.on(types_1.ItemEvent.focus, function (text) {
                        _this.events.fire(types_1.FormEvents.focus, [name, text]);
                    });
                    button_2.events.on(types_1.ItemEvent.blur, function (text) {
                        _this.events.fire(types_1.FormEvents.blur, [name, text]);
                    });
                    button_2.events.on(types_1.ItemEvent.keydown, function (event) {
                        _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                    });
                }
                break;
            case "datepicker": {
                var datePicker_1 = (this._attachments[name] = new dateinput_1.DatePicker(null, item));
                this._state[name] = datePicker_1.getValue(item.valueFormat === "Date");
                datePicker_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, datePicker_1.config);
                    _this._state[name] = datePicker_1.getValue(item.valueFormat === "Date");
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                datePicker_1.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "checkbox": {
                var checkbox_2 = (this._attachments[name] = new checkbox_1.Checkbox(null, item));
                this._state[name] = checkbox_2.getValue();
                checkbox_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, checkbox_2.config);
                    _this._state[name] = checkbox_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                checkbox_2.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "checkboxgroup": {
                var checkboxGroup_2 = (this._attachments[name] = new checkboxGroup_1.CheckboxGroup(null, item));
                this._state[name] = checkboxGroup_2.getValue();
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, checkboxGroup_2.config);
                    _this._state[name] = checkboxGroup_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeHide, function (value, id, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value, id]);
                    }
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeShow, function (value, id) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value, id]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterHide, function (value, id, init) {
                    !checkboxGroup_2.isVisible() && _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value, id]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterShow, function (value, id) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value, id]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.focus, function (value, id) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value, id]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.blur, function (value, id) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value, id]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.keydown, function (event, id) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name, id]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "combo": {
                var combo_2 = (this._attachments[name] = new combo_1.Combo(null, item));
                this._state[name] = combo_2.getValue();
                combo_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                combo_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, combo_2.config);
                    _this._state[name] = combo_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                combo_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                combo_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                combo_2.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.keydown, function (event, id) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name, id]);
                });
                break;
            }
            case "input": {
                var input_2 = (this._attachments[name] = new input_1.Input(null, item));
                this._state[name] = input_2.getValue();
                input_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                input_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, input_2.config);
                    _this._state[name] = input_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                input_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                input_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                input_2.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "radiogroup": {
                var radioGroup_2 = (this._attachments[name] = new radioGroup_1.RadioGroup(null, item));
                this._state[name] = radioGroup_2.getValue();
                radioGroup_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, radioGroup_2.config);
                    _this._state[name] = radioGroup_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeHide, function (value, id, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value, id]);
                    }
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeShow, function (value, id) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value, id]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterHide, function (value, id, init) {
                    !radioGroup_2.isVisible() && _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value, id]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterShow, function (value, id) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value, id]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.focus, function (value, id) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value, id]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.blur, function (value, id) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value, id]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.keydown, function (event, id) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name, id]);
                });
                break;
            }
            case "select": {
                var select_2 = (this._attachments[name] = new select_1.Select(null, item));
                this._state[name] = select_2.getValue();
                select_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                select_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, select_2.config);
                    _this._state[name] = select_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                select_2.events.on(types_1.ItemEvent.changeOptions, function (options) {
                    _this.layout.getCell(name).config.options = __spreadArray([], options, true);
                });
                select_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                select_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                select_2.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "simplevault": {
                var simpleVault_1 = (this._attachments[name] = new simplevault_1.SimpleVault(null, item));
                this._state[name] = simpleVault_1.getValue();
                simpleVault_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, simpleVault_1.config);
                    _this._state[name] = simpleVault_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "slider": {
                var sliderForm = (this._attachments[name] = new sliderform_1.SliderForm(null, item));
                this._state[name] = sliderForm.getValue();
                sliderForm.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                sliderForm.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "textarea": {
                var textarea_2 = (this._attachments[name] = new textarea_1.Textarea(null, item));
                this._state[name] = textarea_2.getValue();
                textarea_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, textarea_2.config);
                    _this._state[name] = textarea_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                textarea_2.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                textarea_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                textarea_2.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "text": {
                var text_1 = (this._attachments[name] = new textinput_1.Text(null, item));
                this._state[name] = text_1.getValue();
                text_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                text_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, text_1.config);
                    _this._state[name] = text_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                text_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                text_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "timepicker": {
                var timePicker_1 = (this._attachments[name] = new timeinput_1.TimePicker(null, item));
                this._state[name] =
                    (item.value && timePicker_1.getValue(item.valueFormat === "timeObject")) || "";
                timePicker_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, timePicker_1.config);
                    _this._state[name] = timePicker_1.getValue(item.valueFormat === "timeObject");
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                timePicker_1.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "colorpicker": {
                var colorPicker_1 = (this._attachments[name] = new colorpicker_1.ColorPicker(null, item));
                this._state[name] = colorPicker_1.getValue();
                colorPicker_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, colorPicker_1.config);
                    _this._state[name] = colorPicker_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeChange, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeChange, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.focus, function (value) {
                    _this.events.fire(types_1.FormEvents.focus, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.blur, function (value) {
                    _this.events.fire(types_1.FormEvents.blur, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.keydown, function (event) {
                    _this.events.fire(types_1.FormEvents.keydown, [event, name]);
                });
                break;
            }
            case "fieldset": {
                var fieldset_2 = (this._attachments[name] = new fieldset_1.Fieldset(item));
                fieldset_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                fieldset_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, fieldset_2.config);
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                break;
            }
            case "spacer":
            default: {
                var spacer_2 = (this._attachments[name] = new spacer_1.Spacer(null, item));
                spacer_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                spacer_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, spacer_2.config);
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.paint();
                });
                spacer_2.events.on(types_1.ItemEvent.beforeHide, function (init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name]);
                    }
                });
                spacer_2.events.on(types_1.ItemEvent.beforeShow, function () {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name]);
                });
                spacer_2.events.on(types_1.ItemEvent.afterHide, function (init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name]);
                });
                spacer_2.events.on(types_1.ItemEvent.afterShow, function () {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name]);
                });
                break;
            }
        }
    };
    Form.prototype._changeProps = function (name, props, config) {
        var properties = ["width", "height", "css", "padding", "label", "labelAlignment", "align"];
        for (var key in props) {
            if (properties.includes(key) && (0, core_1.isDefined)(props[key])) {
                if (key === "css") {
                    this.layout.getCell(name).config[key] = this.getCellCSS(config);
                }
                else {
                    this.layout.getCell(name).config[key] = props[key];
                }
            }
        }
    };
    Form.prototype.getCellCSS = function (config) {
        var classList = config.css ? config.css + " dhx_form-element" : "dhx_form-element";
        switch (config.type) {
            case "button":
            case "togglegroup":
                if (config.full && !config.width) {
                    classList += " dhx_button--full-gravity";
                }
                break;
            case "text":
                if (config.width === "content")
                    classList += " dhx_form-element--fit-content";
                break;
        }
        return classList;
    };
    Form.prototype._addLayoutItems = function (items) {
        var _this = this;
        return items.map(function (item) {
            if ((0, helper_1.isBlock)(item)) {
                var layoutConfig = { width: "content", height: "content" };
                _this._createLayoutConfig(item, layoutConfig);
                return layoutConfig;
            }
            return _this._addLayoutItem(item);
        });
    };
    Form.prototype._checkLayoutConfig = function (config, layoutConfig) {
        if ((0, core_1.isDefined)(config.css)) {
            layoutConfig.css = config.css;
        }
        if ((0, core_1.isDefined)(config.title)) {
            layoutConfig.header = config.title;
        }
        if ((0, core_1.isDefined)(config.padding)) {
            layoutConfig.padding = config.padding;
        }
        if ((0, core_1.isDefined)(config.width)) {
            layoutConfig.width = config.width;
        }
        if ((0, core_1.isDefined)(config.height)) {
            layoutConfig.height = config.height;
        }
        if ((0, core_1.isDefined)(config.align)) {
            layoutConfig.align = config.align;
        }
        return layoutConfig;
    };
    Form.prototype._createLayoutConfig = function (config, layoutConfig) {
        layoutConfig = this._checkLayoutConfig(config, layoutConfig);
        if ((0, core_1.isDefined)(config.rows)) {
            layoutConfig.rows = this._addLayoutItems(config.rows);
        }
        else if ((0, core_1.isDefined)(config.cols)) {
            layoutConfig.cols = this._addLayoutItems(config.cols);
        }
    };
    Form.prototype._initUI = function (container) {
        this._attachments = {};
        var layoutConfig = {
            padding: "8px",
        };
        this.config.css += " dhx_form";
        this._createLayoutConfig(this.config, layoutConfig);
        this.layout = new ts_layout_1.Layout(container, layoutConfig);
        (0, helper_1.setAttacments)(this._attachments, this.layout);
    };
    Form.prototype._clear = function () {
        this._state = {};
        for (var key in this._attachments) {
            var name_1 = this._attachments[key].config.name;
            if (typeof this._attachments[key].clear === "function") {
                this._attachments[key].clear();
                name_1
                    ? (this._state[name_1] = this._attachments[key].getValue())
                    : (this._state[key] = this._attachments[key].getValue());
            }
        }
    };
    Form.prototype._clearValidate = function () {
        for (var key in this._attachments) {
            if (typeof this._attachments[key].clearValidate === "function") {
                this._attachments[key].clearValidate();
            }
        }
    };
    Form.prototype._formContainerShow = function () {
        this.config.hidden = false;
        if (!this.getRootView().node)
            return;
        var root = this.getRootView().node.el;
        root.style.display = "flex";
    };
    Form.prototype._formContainerHide = function () {
        this.config.hidden = true;
        if (!this.getRootView().node)
            return;
        var root = this.getRootView().node.el;
        root.style.display = "none";
    };
    Form.prototype._send = function () {
        for (var key in this._attachments) {
            if (typeof this._attachments[key].send === "function") {
                this._attachments[key].send();
            }
        }
    };
    return Form;
}(view_1.View));
exports.Form = Form;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkbox = void 0;
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var helper_1 = __webpack_require__(7);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(5);
var label_1 = __webpack_require__(14);
var core_1 = __webpack_require__(0);
var Checkbox = /** @class */ (function (_super) {
    __extends(Checkbox, _super);
    function Checkbox(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "text",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Checkbox.prototype.setProperties = function (propertyConfig, silent) {
        if (silent === void 0) { silent = false; }
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            (!silent && !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()])))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        !silent && this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Checkbox.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Checkbox.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    Checkbox.prototype.hide = function (init) {
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), init]);
    };
    Checkbox.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Checkbox.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Checkbox.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Checkbox.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Checkbox.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var value = this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required || this.config.$required)
            valid = !!this.config.checked;
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    Checkbox.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    Checkbox.prototype.setValue = function (checked, silent) {
        if (silent === void 0) { silent = false; }
        if (typeof checked === "undefined" ||
            checked === this.config.checked ||
            (!silent && !this.events.fire(types_1.ItemEvent.beforeChange, [this._getValue(checked)])))
            return;
        this.config.checked = !!checked;
        if (!silent) {
            this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
            (0, helper_1.isVerify)(this.config) && this.validate();
        }
    };
    Checkbox.prototype.getValue = function () {
        return this._getValue(this.config.checked);
    };
    Checkbox.prototype.clear = function (silent) {
        if (!this.config.checked ||
            (!silent && !this.events.fire(types_1.ItemEvent.beforeChange, [this._getValue(false)]))) {
            return;
        }
        this.config.checked = false;
        if (!silent) {
            this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        }
        (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
    };
    Checkbox.prototype.destructor = function () {
        this.events && this.events.clear();
        this._inGroup = this._propsItem = this._props = this._uid = this.events = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    Checkbox.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    Checkbox.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.blur();
        });
    };
    Checkbox.prototype.isChecked = function () {
        return !!this.config.checked;
    };
    Checkbox.prototype._getValue = function (checked) {
        if (typeof this.config.value === "string") {
            return (checked && this.config.value) || "";
        }
        return !!checked;
    };
    Checkbox.prototype._initView = function (config) {
        var _this = this;
        this._inGroup = this.config.$group;
        if (!this._inGroup) {
            this.config = {
                type: config.type,
                id: config.id,
                name: config.name,
                checked: false,
                disabled: false,
                required: false,
                label: "",
                labelWidth: "",
                labelPosition: "top",
                hiddenLabel: false,
                helpMessage: "",
                preMessage: "",
                successMessage: "",
                errorMessage: "",
                width: "content",
                height: "content",
            };
            for (var key in config) {
                if (key !== "id" && key !== "type" && key !== "name") {
                    this.config[key] = config[key];
                }
            }
            if (this.config.helpMessage) {
                this._helper = new ts_popup_1.Popup({
                    css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
                });
                this._helper.attachHTML(this.config.helpMessage);
            }
            this._handlers = {
                showHelper: function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this._helper.show(e.target, {
                        mode: _this.config.labelPosition === "left" ? "bottom" : "right",
                        theme: _this.getRootNode(),
                    });
                },
                hideHelper: function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this._helper.hide();
                },
                onchange: function (e) {
                    var checked = e.target.checked;
                    if (!_this.events.fire(types_1.ItemEvent.beforeChange, [_this._getValue(checked)])) {
                        var element = _this.getRootView().refs.input.el;
                        element.checked = !checked;
                        return;
                    }
                    _this.config.checked = checked;
                    _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                    (0, helper_1.isVerify)(_this.config) && _this.validate();
                },
                onfocus: function () { return _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]); },
                onblur: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_1.ItemEvent.blur, [_this.getValue()]); },
                onkeydown: function (event) {
                    _this.events.fire(types_1.ItemEvent.keydown, [event]);
                },
            };
        }
        else {
            this.config = {
                type: config.type,
                id: config.id,
                text: "",
                width: "content",
                height: "content",
                padding: 0,
            };
            for (var key in config) {
                if (key !== "id" && key !== "type" && key !== "name") {
                    this.config[key] = config[key];
                }
            }
            this._handlers = {
                onchange: function (e) {
                    var checked = e.target.checked;
                    if (!_this.events.fire(types_1.ItemEvent.beforeChange, [_this._getValue(checked)])) {
                        var element = _this.getRootView().refs.input.el;
                        element.checked = !checked;
                        return;
                    }
                    _this.config.checked = checked;
                    _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                    (0, helper_1.isVerify)(_this.config) && _this.validate();
                },
                onfocus: function () { return _this.events.fire(types_1.ItemEvent.focus, [_this.getValue(), _this.config.id]); },
                onblur: function () { return _this.events.fire(types_1.ItemEvent.blur, [_this.getValue(), _this.config.id]); },
                onkeydown: function (event) {
                    _this.events.fire(types_1.ItemEvent.keydown, [event, _this.config.id]);
                },
            };
        }
    };
    Checkbox.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function () { return _this.paint(); });
    };
    Checkbox.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, checked = _a.checked, disabled = _a.disabled, name = _a.name, required = _a.required, $required = _a.$required, text = _a.text, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage;
        return (0, dom_1.el)("label.dhx_checkbox.dhx_form-group.dhx_form-group--checkbox", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config) || !!$required),
        }, !this._inGroup
            ? [
                label || labelWidth || helpMessage || required ? this._drawLabel() : null,
                (0, dom_1.el)(".dhx_checkbox__container", [
                    (0, dom_1.el)(".dhx_checkbox__holder", [
                        (0, dom_1.el)("input.dhx_checkbox__input", {
                            type: "checkbox",
                            "data-dhx-id": name || id,
                            id: id,
                            _key: id || this._uid,
                            value: value,
                            name: name,
                            disabled: disabled,
                            checked: checked,
                            onchange: this._handlers.onchange,
                            onfocus: this._handlers.onfocus,
                            onblur: this._handlers.onblur,
                            onkeydown: this._handlers.onkeydown,
                            required: required,
                            _ref: "input",
                            "aria-label": label || "checkbox ".concat(text || ""),
                            "aria-describedby": helpMessage
                                ? "dhx_label__help_".concat(id || this._uid)
                                : null,
                        }),
                        (0, dom_1.el)("span.dhx_checkbox__visual-input"),
                        (0, dom_1.el)("span.dhx_text", [text]),
                    ]),
                    required &&
                        (0, helper_1.getValidationMessage)(this.config) &&
                        (0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config)),
                ]),
            ]
            : [
                (0, dom_1.el)(".dhx_checkbox__holder", [
                    (0, dom_1.el)("input.dhx_checkbox__input", {
                        type: "checkbox",
                        id: id,
                        value: value || "",
                        name: name || "",
                        disabled: disabled,
                        checked: checked,
                        onchange: this._handlers.onchange,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        required: required,
                        _ref: "input",
                    }),
                    (0, dom_1.el)("span.dhx_checkbox__visual-input"),
                    (0, dom_1.el)("span.dhx_text", [text]),
                ]),
            ]);
    };
    return Checkbox;
}(label_1.Label));
exports.Checkbox = Checkbox;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleVault = exports.FileStatus = void 0;
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var html_1 = __webpack_require__(4);
var core_1 = __webpack_require__(0);
var ts_data_1 = __webpack_require__(13);
var ts_vault_1 = __webpack_require__(231);
var ts_popup_1 = __webpack_require__(10);
var helper_1 = __webpack_require__(7);
var en_1 = __webpack_require__(240);
var types_1 = __webpack_require__(5);
var label_1 = __webpack_require__(14);
var FileStatus;
(function (FileStatus) {
    FileStatus["queue"] = "queue";
    FileStatus["uploaded"] = "uploaded";
    FileStatus["failed"] = "failed";
    FileStatus["inprogress"] = "inprogress";
})(FileStatus || (exports.FileStatus = FileStatus = {}));
var SimpleVault = /** @class */ (function (_super) {
    __extends(SimpleVault, _super);
    function SimpleVault(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsSimpleVault = [
            "params",
            "headerParams",
            "target",
            "fieldName",
            "singleRequest",
            "updateFromResponse",
            "autosend",
            "accept",
            "validation",
        ];
        _this._props = __spreadArray(__spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true), _this._propsSimpleVault, true);
        _this.events = new events_1.EventSystem(_this);
        _this.data = new ts_data_1.DataCollection();
        _this._uploader = new ts_vault_1.Uploader(__assign({ target: "", accept: "", fieldName: "file", singleRequest: false, updateFromResponse: true, autosend: false }, config), _this.data, _this.data.events);
        _this._initView(__assign(__assign({}, _this._uploader.config), config));
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    SimpleVault.prototype.send = function (params) {
        this._uploader.send(params);
    };
    SimpleVault.prototype.selectFile = function () {
        this._uploader.selectFile();
    };
    SimpleVault.prototype.setValue = function (value) {
        if (!value.length) {
            return;
        }
        this.data.parse(value);
        (0, helper_1.isVerify)(this.config) && this.validate();
    };
    SimpleVault.prototype.getValue = function () {
        return this.data.serialize();
    };
    SimpleVault.prototype.clear = function () {
        if (this.getValue().length === 0 || !this.events.fire(types_1.ItemEvent.beforeChange, [[]])) {
            return;
        }
        this.data.removeAll();
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
        this.paint();
    };
    SimpleVault.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    SimpleVault.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    SimpleVault.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    SimpleVault.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    SimpleVault.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    SimpleVault.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    SimpleVault.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var value = args.length ? args[0] : this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required)
            valid = !!value.length;
        if (typeof this.config.validation === "function")
            valid = this.config.validation(value);
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    SimpleVault.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    SimpleVault.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsSimpleVault.includes(key)) {
                    this._uploader.config[key] = propertyConfig[key];
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    SimpleVault.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    SimpleVault.prototype.focus = function () {
        var _a, _b, _c;
        (_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el.focus();
        this.paint();
    };
    SimpleVault.prototype.blur = function () {
        var _a, _b, _c;
        (_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el.blur();
        this.paint();
    };
    SimpleVault.prototype.destructor = function () {
        this.events && this.events.clear();
        this._helper && this._helper.destructor();
        this.config = this.events = this._uid = this._helper = this._handlers = this._uploader = this.data = null;
        this._propsItem = this._propsSimpleVault = this._props = this._dragover = this._dragoverTimeout = null;
        this.unmount();
    };
    SimpleVault.prototype._initView = function (config) {
        var _a;
        this.config = __assign({ type: config.type, id: config.id, name: config.name, value: [], disabled: false, hidden: false, css: "", label: "", labelWidth: "", labelPosition: "top", hiddenLabel: false, helpMessage: "", preMessage: "", successMessage: "", errorMessage: "", width: "content", height: "content" }, config);
        if ((_a = config.value) === null || _a === void 0 ? void 0 : _a.length) {
            this.data.parse(config.value);
        }
        this.paint();
    };
    SimpleVault.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            add: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                e.preventDefault();
                _this._uploader.selectFile();
            },
            remove: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                var id = (0, html_1.locate)(e);
                if (!id) {
                    return;
                }
                _this.data.remove(id);
            },
            ondragover: function (e) {
                var types = e.dataTransfer.types;
                for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var type = types_2[_i];
                    if (type !== "Files" && type !== "application/x-moz-file") {
                        return;
                    }
                }
                if (_this._dragoverTimeout) {
                    clearTimeout(_this._dragoverTimeout);
                }
                else {
                    _this.paint();
                }
                _this._dragover = true;
                _this._dragoverTimeout = setTimeout(function () {
                    _this._dragover = false;
                    _this._dragoverTimeout = null;
                    _this.paint();
                }, 150);
            },
            showHelper: function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._helper.show(e.target, {
                    mode: _this.config.labelPosition === "left" ? "bottom" : "right",
                    theme: e.target,
                });
            },
            hideHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.hide();
            },
        };
        this._uploader.events.on("beforeUploadFile", function (file) {
            if (_this.config.autosend && !_this.validate(true))
                return false;
            return _this.events.fire(types_1.ItemEvent.beforeUploadFile, [file, _this.config.value]);
        });
        this._uploader.events.on("uploadBegin", function (files) {
            _this.events.fire(types_1.ItemEvent.uploadBegin, [files, _this.config.value]);
        });
        this._uploader.events.on("uploadComplete", function (files) {
            _this.events.fire(types_1.ItemEvent.uploadComplete, [files, _this.config.value]);
        });
        this._uploader.events.on("uploadFail", function (file) {
            _this.events.fire(types_1.ItemEvent.uploadFail, [file, _this.config.value]);
        });
        this._uploader.events.on("uploadFile", function (file, extra) {
            _this.events.fire(types_1.ItemEvent.uploadFile, [file, _this.config.value, extra]);
        });
        this._uploader.events.on("uploadProgress", function (progress) {
            _this.events.fire(types_1.ItemEvent.uploadProgress, [progress, _this.config.value]);
        });
        this.data.events.on(ts_data_1.DataEvents.beforeAdd, function (file) {
            return _this.events.fire(types_1.ItemEvent.beforeChange, [__spreadArray(__spreadArray([], _this.config.value, true), [file], false), file]);
        });
        this.data.events.on(ts_data_1.DataEvents.beforeRemove, function (file) {
            var value = _this.config.value.filter(function (i) { return i.id !== file.id; });
            return _this.events.fire(types_1.ItemEvent.beforeChange, [value, file]);
        });
        this.data.events.on(types_1.ItemEvent.change, function (_id, method, file) {
            if (!method) {
                return;
            }
            var value = (_this.config.value = _this.getValue());
            if (!(_this._uploader.isActive && method === "update")) {
                _this.events.fire(types_1.ItemEvent.change, [value, file]);
                (0, helper_1.isVerify)(_this.config) && _this.validate();
            }
            _this.paint();
        });
    };
    SimpleVault.prototype._draw = function () {
        var _this = this;
        if (this.config.helpMessage) {
            if (this._helper) {
                this._helper.attachHTML(this.config.helpMessage);
            }
            else {
                this._helper = new ts_popup_1.Popup({
                    css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
                });
                this._helper.attachHTML(this.config.helpMessage);
            }
        }
        var files = this.data.getLength()
            ? (0, dom_1.el)("ul.dhx_simplevault__files.dhx_simplevault-files", {
                class: this.config.$vaultHeight ? "" : "dhx_simplevault-files__fixed",
            }, this.data.map(function (file) {
                return (0, dom_1.el)("li.dhx_simplevault-files__item", [
                    (0, dom_1.el)("span.dhx_simplevault-files__item-name", (file.file && file.file.name) || file.name),
                    (0, dom_1.el)(".dhx_button.dhx_simplevault-files__delete.dhx_button--icon.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                        "data-dhx-id": file.id,
                        onclick: _this._handlers.remove,
                    }, [(0, dom_1.el)("span.dxi.dxi-delete-forever")]),
                ]);
            }))
            : null;
        var _a = this.config, id = _a.id, helpMessage = _a.helpMessage, disabled = _a.disabled, required = _a.required, label = _a.label, hidden = _a.hidden, accept = _a.accept;
        var labelStyle = (0, html_1.getLabelStyle)(this.config);
        var visibility = (hidden && " dhx_form-group--hidden") || "";
        return (0, dom_1.el)(".dhx_form-group.dhx_form-group--simplevault", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config)) + visibility,
        }, [
            labelStyle &&
                (0, dom_1.el)("legend.dhx_label", {
                    class: helpMessage ? "dhx_label--with-help" : "",
                    style: labelStyle.style,
                    onclick: this._handlers.add,
                    "aria-label": label || "select files",
                }, helpMessage
                    ? [
                        (labelStyle.label || required) &&
                            (0, dom_1.el)("span.dhx_label__holder", labelStyle.label),
                        (0, dom_1.el)("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                            onfocus: this._handlers.showHelper,
                            onblur: this._handlers.hideHelper,
                        }),
                    ]
                    : labelStyle.label),
            (0, dom_1.el)(".dhx_input__wrapper", { id: this._uid }, [
                (0, dom_1.el)("div", {
                    _hooks: {
                        didInsert: function (node) {
                            _this._uploader.linkDropArea(node.el);
                        },
                    },
                    ondragover: this._handlers.ondragover,
                    class: "dhx_simplevault" + (this._dragover ? " dhx_simplevault--on-drag" : ""),
                }, [
                    (0, dom_1.el)("div.dhx_simplevault-loader", [
                        (0, dom_1.el)("span.dhx_simplevault__icon.dxi.dxi-vault"),
                    ]),
                    (0, dom_1.el)(".dhx_simplevault__drop-area", [
                        (0, dom_1.el)("input.dhx_simplevault__input", {
                            _ref: "input",
                            type: "file",
                            id: id,
                            disabled: disabled,
                            accept: accept,
                        }),
                        (0, dom_1.el)("span.dhx_simplevault__icon.dxi.dxi-vault"),
                        (0, dom_1.el)("span.dhx_simplevault__title", [
                            (0, dom_1.el)("span", en_1.default.simpleVaultText),
                            (0, dom_1.el)("br"),
                            (0, dom_1.el)("label.dhx_simplevault__label", {
                                onclick: this._handlers.add,
                                for: id,
                            }, " " + en_1.default.simpleVaultLabel),
                        ]),
                    ]),
                    files,
                ]),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", {}, (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    return SimpleVault;
}(label_1.Label));
exports.SimpleVault = SimpleVault;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uploader = void 0;
var core_1 = __webpack_require__(0);
var html_1 = __webpack_require__(4);
var ts_data_1 = __webpack_require__(13);
var types_1 = __webpack_require__(37);
var Uploader = /** @class */ (function () {
    function Uploader(config, data, events) {
        if (config === void 0) { config = {}; }
        this.config = (0, core_1.extend)({
            autosend: true,
            updateFromResponse: true,
            fieldName: "file",
            accept: "",
        }, config);
        this.data = data || new ts_data_1.DataCollection();
        this.events = events || this.data.events;
        this.isActive = false;
        this._fileInput = document.createElement("input");
        this._fileInput.type = "file";
        this._fileInput.accept = this.config.accept;
        this._fileInput.multiple = true;
        this._initEvents();
        this._dropAreas = new Map();
    }
    Uploader.prototype.selectFile = function () {
        this._fileInput.click();
    };
    Uploader.prototype.linkDropArea = function (element) {
        var _this = this;
        var node = (0, html_1.toNode)(element);
        var dragover = function (e) { return e.preventDefault(); };
        var drop = function (e) {
            e.preventDefault();
            _this.parseFiles(e.dataTransfer);
        };
        node.addEventListener("dragover", dragover);
        node.addEventListener("drop", drop);
        this._dropAreas.set(node, {
            dragover: dragover,
            drop: drop,
        });
    };
    Uploader.prototype.unlinkDropArea = function (element) {
        var _this = this;
        if (!element) {
            this._dropAreas.forEach(function (_, node) {
                _this._unlinkDropArea(node);
            });
            this._dropAreas.clear();
        }
        else {
            var node = (0, html_1.toNode)(element);
            this._unlinkDropArea(node);
            this._dropAreas.delete(node);
        }
    };
    Uploader.prototype.parseFiles = function (dataTransfer) {
        if (!dataTransfer.items || !dataTransfer.items[0] || !dataTransfer.items[0].webkitGetAsEntry) {
            var files = dataTransfer.files;
            for (var i = 0; i < files.length; i++) {
                this._addFile(files[i]);
            }
            if (this.config.autosend) {
                this.send();
            }
        }
        else {
            this._parseAsWebkitEntry(dataTransfer.items);
        }
    };
    Uploader.prototype.send = function (params) {
        var _this = this;
        if (this._uploadInfo && this.isActive) {
            // cancel two active sends
            return;
        }
        var all = this.data.findAll(function (item) { return item.status === types_1.FileStatus.queue || item.status === types_1.FileStatus.failed; });
        var files = all.filter(function (file) { return _this.events.fire(types_1.UploaderEvents.beforeUploadFile, [file]); });
        if (!files.length) {
            return;
        }
        this.isActive = true;
        this._uploadInfo = {
            files: files,
            count: files.length,
            size: files.reduce(function (s, f) { return s + f.file.size; }, 0),
        };
        this.events.fire(types_1.UploaderEvents.uploadBegin, [files]);
        this.events.fire(types_1.UploaderEvents.uploadProgress, [0, 0, this._uploadInfo.size]);
        if (this.config.singleRequest) {
            this._xhrSend(files, params);
        }
        else {
            for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
                var fileWrapper = files_1[_i];
                this._xhrSend([fileWrapper], params);
            }
        }
    };
    Uploader.prototype.abort = function (id) {
        if (!id) {
            if (!this._uploadInfo || !this._uploadInfo.files) {
                return;
            }
            for (var _i = 0, _a = this._uploadInfo.files; _i < _a.length; _i++) {
                var fileWrapper = _a[_i];
                this.abort(fileWrapper.id);
            }
            return;
        }
        else {
            var item = this.data.getItem(id);
            if (!item || !item.request || item.request.readyState === 4) {
                return;
            }
            item.request.abort();
        }
    };
    Uploader.prototype._unlinkDropArea = function (node) {
        var handlers = this._dropAreas.get(node);
        if (!handlers) {
            return;
        }
        var dragover = handlers.dragover, drop = handlers.drop;
        node.removeEventListener("dragover", dragover);
        node.removeEventListener("drop", drop);
    };
    Uploader.prototype._initEvents = function () {
        var _this = this;
        this._fileInput.addEventListener("change", function () {
            var files = _this._fileInput.files;
            for (var i = 0; i < files.length; i++) {
                _this._addFile(files[i]);
            }
            if (_this.config.autosend) {
                _this.send();
            }
            _this._fileInput.value = null; // clear file input after get info about files
        });
    };
    Uploader.prototype._xhrSend = function (fileWrappers, params) {
        var _this = this;
        var formData = this._createFormData(fileWrappers, params);
        var request = new XMLHttpRequest();
        var headerParams = this.config.headerParams;
        for (var _i = 0, fileWrappers_1 = fileWrappers; _i < fileWrappers_1.length; _i++) {
            var fileWrapper = fileWrappers_1[_i];
            this.data.update(fileWrapper.id, {
                request: request,
                status: types_1.FileStatus.inprogress,
                progress: 0,
            });
        }
        request.open("POST", this.config.target);
        if (headerParams) {
            for (var headerItem in headerParams) {
                request.setRequestHeader(headerItem, headerParams[headerItem]);
            }
        }
        request.upload.onprogress = function (ev) {
            for (var _i = 0, fileWrappers_2 = fileWrappers; _i < fileWrappers_2.length; _i++) {
                var fileWrapper = fileWrappers_2[_i];
                _this.data.update(fileWrapper.id, {
                    progress: ev.loaded / ev.total,
                    status: types_1.FileStatus.inprogress,
                });
            }
            var current = _this._uploadInfo.files.reduce(function (tot, file) { return tot + file.size * file.progress; }, 0) || 0;
            var total = _this._uploadInfo.size;
            var progress = (current / _this._uploadInfo.size) * 100 || 0;
            _this.events.fire(types_1.UploaderEvents.uploadProgress, [progress, current, total]);
        };
        request.onloadend = function () {
            _this._uploadInfo.count = _this.config.singleRequest ? 0 : _this._uploadInfo.count - 1;
            var status = request.status === 200 ? types_1.FileStatus.uploaded : types_1.FileStatus.failed;
            var extra = request.status === 200 && request.response ? JSON.parse(request.response) : null;
            for (var _i = 0, fileWrappers_3 = fileWrappers; _i < fileWrappers_3.length; _i++) {
                var fileWrapper = fileWrappers_3[_i];
                _this.data.update(fileWrapper.id, { status: status });
                if (status === types_1.FileStatus.uploaded) {
                    if (_this.config.updateFromResponse && extra) {
                        if (_this.config.singleRequest && extra[fileWrapper.id]) {
                            _this.data.update(fileWrapper.id, extra[fileWrapper.id]);
                        }
                        else if (!_this.config.singleRequest) {
                            _this.data.update(fileWrapper.id, extra);
                        }
                    }
                    _this.events.fire(types_1.UploaderEvents.uploadFile, [fileWrapper, extra]);
                }
                else {
                    _this.events.fire(types_1.UploaderEvents.uploadFail, [fileWrapper]);
                }
            }
            if (_this._uploadInfo.count === 0) {
                _this.isActive = false;
                _this.events.fire(types_1.UploaderEvents.uploadComplete, [_this._uploadInfo.files]);
            }
        };
        request.send(formData);
    };
    Uploader.prototype._parseAsWebkitEntry = function (items) {
        var _this = this;
        var reads = [];
        for (var i = 0; i < items.length; i++) {
            var item = items[i].webkitGetAsEntry();
            reads.push(this._traverseFileTree(item));
        }
        Promise.all(reads).then(function () {
            if (_this.config.autosend) {
                _this.send();
            }
        });
    };
    Uploader.prototype._createFormData = function (fileWrappers, params) {
        var fieldName = this.config.fieldName;
        var formData = new FormData();
        var extraParams = this.config.params;
        if (params) {
            for (var key in params) {
                formData.append(key, params[key]);
            }
        }
        if (extraParams) {
            for (var key in extraParams) {
                formData.append(key, extraParams[key]);
            }
        }
        var brackets = fileWrappers.length > 1 ? "[]" : "";
        for (var _i = 0, fileWrappers_4 = fileWrappers; _i < fileWrappers_4.length; _i++) {
            var fileWrapper = fileWrappers_4[_i];
            formData.append(fieldName + brackets, fileWrapper.file, fileWrapper.file.name);
            formData.append(fieldName + "_fullname" + brackets, fileWrapper.path + fileWrapper.file.name);
            var id = typeof fileWrapper.id === "object" ? fileWrapper.id : fileWrapper.id.toString();
            formData.append(fieldName + "_id" + brackets, id);
        }
        return formData;
    };
    Uploader.prototype._addFile = function (file, path) {
        if (path === void 0) { path = ""; }
        var fileWrapper = {
            id: (0, core_1.uid)(),
            file: file,
            progress: 0,
            status: types_1.FileStatus.queue,
            src: null,
            path: path,
        };
        this.data.add(fileWrapper);
    };
    Uploader.prototype._traverseFileTree = function (item) {
        var _this = this;
        return new Promise(function (res) {
            var count = 0;
            var readDirectory = function (reader, path) {
                count++;
                reader.readEntries(function (entries) {
                    count--;
                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                        var entry = entries_1[_i];
                        // eslint-disable-next-line @typescript-eslint/no-use-before-define
                        readEntry(entry, path);
                    }
                    if (count === 0) {
                        res();
                    }
                });
            };
            var readEntry = function (entry, path) {
                if (entry.isFile) {
                    count++;
                    entry.file(function (file) {
                        count--;
                        _this._addFile(file, path);
                        if (count === 0) {
                            res();
                        }
                    });
                }
                else if (entry.isDirectory) {
                    var reader = entry.createReader();
                    readDirectory(reader, path + entry.name + "/");
                }
            };
            readEntry(item, "");
        });
    };
    return Uploader;
}());
exports.Uploader = Uploader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.removeItem = exports.isImage = exports.getFileClassName = exports.getFileType = exports.FileType = exports.calculateCover = exports.truncateWord = exports.getBasis = void 0;
var en_1 = __webpack_require__(46);
var basis = ["byte", "kilobyte", "megabyte", "gigabyte"];
function getBasis(size, current) {
    if (size === void 0) { size = 0; }
    if (current === void 0) { current = 0; }
    return size < 1024
        ? size + " " + en_1.default[basis[current]]
        : this.getBasis(Math.round(size / 1024), current + 1);
}
exports.getBasis = getBasis;
var MAX_WORD_LENGTH = 13;
function truncateWord(word, len) {
    if (len === void 0) { len = MAX_WORD_LENGTH; }
    var start;
    var end;
    if (word.length <= len) {
        return word;
    }
    var dotIndex = word.lastIndexOf(".");
    if (dotIndex === -1) {
        end = word.substr(word.length - 4);
        start = word.substr(0, len - 7);
    }
    else {
        var endStartFrom = dotIndex - 3;
        end = word.substr(endStartFrom);
        start = word.substr(0, len - (word.length - endStartFrom));
    }
    return start + "..." + end;
}
exports.truncateWord = truncateWord;
function calculateCover(image) {
    var width = image.width, height = image.height;
    var imageAspectRatio = width / height;
    var sHeight;
    var sWidth;
    var sx;
    var sy;
    if (imageAspectRatio > 1) {
        // width > height
        sWidth = height;
        sHeight = height;
        sx = (width - sWidth) / 2;
        sy = 0;
    }
    else if (imageAspectRatio < 1) {
        // width < height
        sWidth = width;
        sHeight = width;
        sx = 0;
        sy = (height - sHeight) / 2;
    }
    else {
        // width == height
        sHeight = width;
        sWidth = width;
        sx = 0;
        sy = 0;
    }
    return {
        sx: sx,
        sy: sy,
        sWidth: sWidth,
        sHeight: sHeight,
        dx: 0,
        dy: 0,
    };
}
exports.calculateCover = calculateCover;
var FileType;
(function (FileType) {
    FileType["image"] = "image";
    FileType["video"] = "video";
    FileType["archive"] = "archive";
    FileType["table"] = "table";
    FileType["document"] = "document";
    FileType["presentation"] = "presentation";
    FileType["application"] = "application";
    FileType["web"] = "web";
    FileType["apple"] = "apple";
    FileType["pdf"] = "pdf";
    FileType["psd"] = "psd";
    FileType["audio"] = "audio";
    FileType["other"] = "other";
    FileType["text"] = "text";
})(FileType || (exports.FileType = FileType = {}));
function getMimeAndExtension(fileWrapper) {
    var extension = fileWrapper.name.split(".").pop() || "none";
    var mime = fileWrapper.file ? fileWrapper.file.type : "";
    return {
        extension: extension,
        mime: mime,
    };
}
function getFileType(extension, mime) {
    switch (extension) {
        case "jpg":
        case "jpeg":
        case "gif":
        case "png":
        case "bmp":
        case "tiff":
        case "pcx":
        case "svg":
        case "ico":
            return FileType.image;
        case "avi":
        case "mpg":
        case "mpeg":
        case "rm":
        case "move":
        case "mov":
        case "mkv":
        case "flv":
        case "f4v":
        case "mp4":
        case "3gp":
        case "wmv":
        case "webm":
        case "vob":
            return FileType.video;
        case "rar":
        case "zip":
        case "tar":
        case "tgz":
        case "arj":
        case "gzip":
        case "bzip2":
        case "7z":
        case "ace":
        case "apk":
        case "deb":
        case "zipx":
        case "cab":
        case "tar-gz":
        case "rpm":
        case "xar":
            return FileType.archive;
        case "xlr":
        case "xls":
        case "xlsm":
        case "xlsx":
        case "ods":
        case "csv":
        case "tsv":
            return FileType.table;
        case "doc":
        case "docx":
        case "docm":
        case "dot":
        case "dotx":
        case "odt":
        case "wpd":
        case "wps":
        case "pages":
            return FileType.document;
        case "wav":
        case "aiff":
        case "au":
        case "mp3":
        case "aac":
        case "wma":
        case "ogg":
        case "flac":
        case "ape":
        case "wv":
        case "m4a":
        case "mid":
        case "midi":
            return FileType.audio;
        case "pot":
        case "potm":
        case "potx":
        case "pps":
        case "ppsm":
        case "ppsx":
        case "ppt":
        case "pptx":
        case "pptm":
        case "odp":
            return FileType.presentation;
        case "html":
        case "htm":
        case "eml":
            return FileType.web;
        case "exe":
            return FileType.application;
        case "dmg":
            return FileType.apple;
        case "pdf":
        case "ps":
        case "eps":
            return FileType.pdf;
        case "psd":
            return FileType.psd;
        case "txt":
        case "djvu":
        case "nfo":
        case "xml":
            return FileType.text;
        default:
            switch (mime.split("/")[0]) {
                case "image":
                    return FileType.image;
                case "audio":
                    return FileType.audio;
                case "video":
                    return FileType.video;
                default:
                    return FileType.other;
            }
    }
}
exports.getFileType = getFileType;
function getFileClassName(fileWrapper) {
    var _a = getMimeAndExtension(fileWrapper), mime = _a.mime, extension = _a.extension;
    return getFileType(extension, mime) + " extension-" + extension;
}
exports.getFileClassName = getFileClassName;
function isImage(fileWrapper) {
    var _a = getMimeAndExtension(fileWrapper), mime = _a.mime, extension = _a.extension;
    var fileType = getFileType(extension, mime);
    return fileType === FileType.image;
}
exports.isImage = isImage;
function removeItem(data, id) {
    if (data.exists(id)) {
        data.update(id, { $toRemove: true });
        setTimeout(function () {
            data.update(id, { $toRemove: false }, true);
            data.remove(id);
        }, 200);
    }
}
exports.removeItem = removeItem;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataView = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var ts_list_1 = __webpack_require__(32);
var editors_1 = __webpack_require__(237);
var DataView = /** @class */ (function (_super) {
    __extends(DataView, _super);
    function DataView(node, config) {
        if (config === void 0) { config = {}; }
        return _super.call(this, node, (0, core_1.extend)({
            itemsInRow: 1,
            gap: "0px",
        }, config)) || this;
    }
    DataView.prototype.scrollTo = function (id) {
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var dataViewEl = this.getRootNode();
        this._scrollTo(id, dataViewEl);
    };
    DataView.prototype._scrollTo = function (id, el) {
        var _a;
        if (!el)
            return;
        var getPage = function (index, rest, total) {
            var count = 0;
            if (!total)
                return count;
            while (index + rest >= total) {
                count++;
                index = index + rest - total;
            }
            return count;
        };
        var index = this.data.getIndex(id);
        if (index === -1)
            return;
        var virtual = this.config.virtual;
        var rest = this.config.itemsInRow - ((_a = el.lastElementChild) === null || _a === void 0 ? void 0 : _a.children.length) || 0;
        var currentPage = getPage(index, rest, el.children.length * this.config.itemsInRow);
        var restTotal = currentPage * rest;
        var currentRow = Math.floor((index + restTotal) / this.config.itemsInRow);
        var itemRow = el.children[currentRow - el.children.length * currentPage];
        if (!virtual && !itemRow)
            return;
        var item = itemRow.children[(index + restTotal) % this.config.itemsInRow];
        var gap = parseInt(this.config.gap.toString().replace("px", ""), null);
        if (item.offsetTop >= el.clientHeight + el.scrollTop - item.clientHeight) {
            el.scrollTop = item.offsetTop - el.clientHeight + item.clientHeight + gap;
        }
        else if (item.offsetTop < el.scrollTop - gap) {
            el.scrollTop = item.offsetTop - gap;
        }
    };
    DataView.prototype._didRedraw = function (vm) {
        var rootEl = vm.node.el;
        var hasScroll = rootEl.scrollHeight > rootEl.offsetHeight;
        var classAttr = vm.node.attrs.class.replace(" dhx_dataview--has-scroll", "");
        var newClassName = hasScroll ? classAttr + " dhx_dataview--has-scroll" : classAttr;
        vm.node.patch({ class: newClassName });
    };
    DataView.prototype._renderItem = function (item, index) {
        var _a = this.config, itemsInRow = _a.itemsInRow, gap = _a.gap, template = _a.template, itemHeight = _a.itemHeight;
        var html = template ? template(item) : item.htmlContent;
        var focus = item.id == this._focus;
        var isLastItemInRow = (index + 1) % this.config.itemsInRow === 0;
        var gapWithPx = function (gapSize) { return parseFloat(gapSize); };
        if (item.id == this._edited) {
            var editor = (0, editors_1.getEditor)(item, this);
            return editor.toHTML(isLastItemInRow);
        }
        var id = item.id.toString();
        var mx = this.data.getMetaMap(item);
        return (0, dom_1.el)("div", __assign(__assign({ class: "dhx_dataview-item" +
                (mx && mx.selected ? " dhx_dataview-item--selected" : "") +
                (focus ? " dhx_dataview-item--focus" : "") +
                (mx && mx.drop && !this._edited ? " dhx_dataview-item--drophere" : "") +
                (mx && mx.drag && !this._edited ? " dhx_dataview-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_dataview-item--drag" : "") +
                (gapWithPx(gap) ? " dhx_dataview-item--with-gap" : "") +
                (item.css ? " " + item.css : "") +
                (isLastItemInRow ? " dhx_dataview-item--last-item-in-row" : ""), style: {
                width: "calc(".concat(100 / itemsInRow, "% - ").concat(gapWithPx(gap), " * ").concat((itemsInRow - 1) /
                    itemsInRow, "px)"),
                "margin-right": isLastItemInRow ? "" : gap,
                height: template ? null : itemHeight,
            }, _key: id, "data-dhx-id": id, _ref: id }, this.getDataViewItemAriaAttrs(this, item)), { tabindex: focus ? 0 : -1 }), html
            ? [
                (0, dom_1.el)(".dhx_dataview-item__inner-html", {
                    ".innerHTML": html,
                    role: "presentation",
                }),
            ]
            : item.value || item.text || item.value);
    };
    DataView.prototype._renderList = function () {
        var _this = this;
        var data = this.data.getRawData(0, -1);
        var _a = this.config, itemsInRow = _a.itemsInRow, css = _a.css, gap = _a.gap;
        var currentCounter = 0;
        var rows = data.reduce(function (items, obj, index) {
            if (currentCounter === 0) {
                items.push([]);
            }
            items[items.length - 1].push(_this._renderItem(obj, index));
            currentCounter = (currentCounter + 1) % itemsInRow;
            return items;
        }, []);
        return (0, dom_1.el)("", __assign(__assign(__assign(__assign({}, this._handlers), { "data-dhx-widget-id": this._uid, class: (css ? css : "") +
                " dhx_widget dhx_dataview" +
                (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : ""), style: {
                height: this.config.height,
            } }), this.getDataViewAriaAttrs(this.config, this.data.getLength(), rows.length, itemsInRow)), { tabindex: 0 }), rows.map(function (row, index) {
            return (0, dom_1.el)(".dhx_dataview-row", {
                style: { margin: gap },
                "aria-label": "Row ".concat(index + 1),
            }, row);
        }));
    };
    DataView.prototype._getHotkeys = function () {
        var _this = this;
        var handlers = _super.prototype._getHotkeys.call(this);
        handlers.arrowUp = function (e) {
            _this.moveFocus(ts_list_1.MOVE_UP, _this.config.itemsInRow);
            if (_this._changed)
                _this._changed = false;
            e.preventDefault();
        };
        handlers.arrowDown = function (e) {
            _this.moveFocus(ts_list_1.MOVE_DOWN, _this.config.itemsInRow);
            if (_this._changed)
                _this._changed = false;
            e.preventDefault();
        };
        handlers.arrowLeft = function (e) {
            _this.moveFocus(ts_list_1.MOVE_UP);
            if (_this._changed)
                _this._changed = false;
            e.preventDefault();
        };
        handlers.arrowRight = function (e) {
            _this.moveFocus(ts_list_1.MOVE_DOWN);
            if (_this._changed)
                _this._changed = false;
            e.preventDefault();
        };
        return handlers;
    };
    DataView.prototype.getDataViewItemAriaAttrs = function (context, item) {
        var getAriaGrabbed = function (context, item) {
            return context.config.dragMode && !context._edited
                ? { "aria-grabbed": Boolean(item.$dragtarget && !context._edited).toString() }
                : {};
        };
        var getAriaRoleDescription = function (context) {
            return context.config.editable
                ? {
                    "aria-roledescription": "".concat(context._edited ? "Press Enter to stop editing" : "Double click to edit content"),
                }
                : {};
        };
        return __assign(__assign({ role: "option", "aria-selected": item.$selected ? "true" : "false" }, getAriaGrabbed(context, item)), getAriaRoleDescription(context));
    };
    DataView.prototype.getDataViewAriaAttrs = function (config, itemsCount, rowsCount, itemsInRow) {
        return {
            role: "listbox",
            "aria-label": "Dataview, ".concat(itemsCount, " options on ").concat(rowsCount, " rows, ").concat(itemsInRow, " options per row.").concat(config.editable ? " Content is editable." : ""),
            "aria-multiselectable": config.selection && config.multiselection ? "true" : "false",
            "aria-readonly": config.editable ? "false" : "true",
        };
    };
    return DataView;
}(ts_list_1.List));
exports.DataView = DataView;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DataViewEvents = void 0;
var DataViewEvents;
(function (DataViewEvents) {
    DataViewEvents["click"] = "click";
    DataViewEvents["doubleClick"] = "doubleclick";
    DataViewEvents["focusChange"] = "focuschange";
    DataViewEvents["beforeEditStart"] = "beforeEditStart";
    DataViewEvents["afterEditStart"] = "afterEditStart";
    DataViewEvents["beforeEditEnd"] = "beforeEditEnd";
    DataViewEvents["afterEditEnd"] = "afterEditEnd";
    DataViewEvents["itemRightClick"] = "itemRightClick";
    DataViewEvents["itemMouseOver"] = "itemMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataViewEvents["contextmenu"] = "contextmenu";
})(DataViewEvents || (exports.DataViewEvents = DataViewEvents = {}));


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleButton = void 0;
var types_1 = __webpack_require__(5);
var view_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var helper_1 = __webpack_require__(7);
var core_1 = __webpack_require__(0);
var ToggleButton = /** @class */ (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(container, config) {
        var _this = _super.call(this, container, __assign({ full: false, selected: false, disabled: false, hidden: false, width: "content", height: "content", text: "", icon: "", offIcon: "", offText: "", css: "", padding: "" }, config)) || this;
        _this.events = new events_1.EventSystem();
        _this.props = __spreadArray(__spreadArray([], (_this.config.$group ? [] : helper_1.baseProps), true), [
            "value",
            "offIcon",
            "offText",
            "icon",
            "text",
            "full",
        ], false);
        _this.initHandlers();
        var render = function () { return _this.draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    ToggleButton.prototype.setValue = function (selected, silent) {
        if (selected === void 0) { selected = false; }
        if (silent === void 0) { silent = false; }
        if (typeof selected !== "boolean" ||
            selected === this.config.selected ||
            (!silent && !this.events.fire(types_1.ItemEvent.beforeChange, [selected]))) {
            return;
        }
        this.config.selected = selected;
        !silent && this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        this.paint();
    };
    ToggleButton.prototype.getValue = function () {
        var _a = this.config, value = _a.value, selected = _a.selected;
        if (typeof value === "string")
            return selected ? value : "";
        if (typeof value === "number")
            return selected ? value : 0;
        return !!selected;
    };
    ToggleButton.prototype.isSelected = function () {
        return !!this.config.selected;
    };
    ToggleButton.prototype.show = function () {
        if (!this.config.hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    ToggleButton.prototype.hide = function (init) {
        if (init === void 0) { init = false; }
        if ((this.config.hidden && !init) ||
            !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), init]);
    };
    ToggleButton.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    ToggleButton.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.button.el.focus();
            _this.paint();
        });
    };
    ToggleButton.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.button.el.blur();
            _this.paint();
        });
    };
    ToggleButton.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    ToggleButton.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    ToggleButton.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    ToggleButton.prototype.setProperties = function (config) {
        if (!config ||
            (0, core_1.isEmptyObj)(config) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in config) {
            if (this.props.includes(key))
                this.config[key] = config[key];
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
    };
    ToggleButton.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this.props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    ToggleButton.prototype.destructor = function () {
        this.events.clear();
        this.unmount();
    };
    ToggleButton.prototype.draw = function () {
        var _a = this.config, id = _a.id, name = _a.name, selected = _a.selected, disabled = _a.disabled, hidden = _a.hidden, text = _a.text, offText = _a.offText, icon = _a.icon, offIcon = _a.offIcon, full = _a.full, $group = _a.$group, $gap = _a.$gap, $extraCss = _a.$extraCss, css = _a.css;
        return (0, dom_1.el)("button.dhx_toggle", {
            "data-dhx-id": name || id,
            role: "button",
            type: "button",
            "aria-pressed": selected,
            "aria-label": text || name,
            disabled: disabled,
            class: ((!$group && "dhx_form-group dhx_form-group--toggle ") || "") +
                ((selected && "dhx_toggle--selected ") || "") +
                ((disabled && "dhx_toggle--disabled ") || "") +
                ((hidden && "dhx_toggle--hidden ") || "") +
                ((full && "dhx_toggle--full ") || "") +
                (($group && $extraCss) || "") +
                (($group && css) || ""),
            style: {
                marginLeft: $gap,
            },
            onclick: this.handlers.onclick,
            onfocus: this.handlers.onfocus,
            onblur: this.handlers.onblur,
            onkeydown: this.handlers.onkeydown,
            _ref: "button",
        }, [
            icon && (0, dom_1.el)("i.dhx_toggle__icon", { class: selected ? icon : offIcon || icon }),
            text && (0, dom_1.el)("span.dhx_toggle__text", {}, selected ? text : offText || text),
        ]);
    };
    ToggleButton.prototype.initHandlers = function () {
        var _this = this;
        this.handlers = {
            onclick: function () { return _this.setValue(!_this.config.selected); },
            onfocus: function () { return _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]); },
            onblur: function () { return _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]); },
            onkeydown: function (event) { return _this.events.fire(types_1.ItemEvent.keydown, [event]); },
        };
    };
    return ToggleButton;
}(view_1.View));
exports.ToggleButton = ToggleButton;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*! @license DOMPurify 2.4.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.7/LICENSE */



function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var hasOwnProperty = Object.hasOwnProperty,
    setPrototypeOf = Object.setPrototypeOf,
    isFrozen = Object.isFrozen,
    getPrototypeOf = Object.getPrototypeOf,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var freeze = Object.freeze,
    seal = Object.seal,
    create = Object.create; // eslint-disable-line import/no-mutable-exports

var _ref = typeof Reflect !== 'undefined' && Reflect,
    apply = _ref.apply,
    construct = _ref.construct;

if (!apply) {
  apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}

if (!freeze) {
  freeze = function freeze(x) {
    return x;
  };
}

if (!seal) {
  seal = function seal(x) {
    return x;
  };
}

if (!construct) {
  construct = function construct(Func, args) {
    return _construct(Func, _toConsumableArray(args));
  };
}

var arrayForEach = unapply(Array.prototype.forEach);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringToString = unapply(String.prototype.toString);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
  return function (thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return apply(func, thisArg, args);
  };
}
function unconstruct(func) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return construct(func, args);
  };
}
/* Add properties to a lookup table */

function addToSet(set, array, transformCaseFunc) {
  var _transformCaseFunc;

  transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;

  if (setPrototypeOf) {
    // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
  }

  var l = array.length;

  while (l--) {
    var element = array[l];

    if (typeof element === 'string') {
      var lcElement = transformCaseFunc(element);

      if (lcElement !== element) {
        // Config presets (e.g. tags.js, attrs.js) are immutable.
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }

        element = lcElement;
      }
    }

    set[element] = true;
  }

  return set;
}
/* Shallow clone an object */

function clone(object) {
  var newObject = create(null);
  var property;

  for (property in object) {
    if (apply(hasOwnProperty, object, [property]) === true) {
      newObject[property] = object[property];
    }
  }

  return newObject;
}
/* IE10 doesn't support __lookupGetter__ so lets'
 * simulate it. It also automatically checks
 * if the prop is function or getter and behaves
 * accordingly. */

function lookupGetter(object, prop) {
  while (object !== null) {
    var desc = getOwnPropertyDescriptor(object, prop);

    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }

      if (typeof desc.value === 'function') {
        return unapply(desc.value);
      }
    }

    object = getPrototypeOf(object);
  }

  function fallbackValue(element) {
    console.warn('fallback value for', element);
    return null;
  }

  return fallbackValue;
}

var html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

var svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.

var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
var mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']); // Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.

var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
var text = freeze(['#text']);

var html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
var svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
var mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
var DOCTYPE_NAME = seal(/^html$/i);

var getGlobal = function getGlobal() {
  return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
 * @param {Document} document The document object (to determine policy name suffix)
 * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
 * are not supported).
 */


var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
  if (_typeof(trustedTypes) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
    return null;
  } // Allow the callers to control the unique policy name
  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
  // Policy creation with duplicate names throws in Trusted Types.


  var suffix = null;
  var ATTR_NAME = 'data-tt-policy-suffix';

  if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
    suffix = document.currentScript.getAttribute(ATTR_NAME);
  }

  var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML: function createHTML(html) {
        return html;
      },
      createScriptURL: function createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    // Policy creation failed (most likely another DOMPurify script has
    // already run). Skip creating the policy, as this will only cause errors
    // if TT are enforced.
    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
    return null;
  }
};

function createDOMPurify() {
  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

  var DOMPurify = function DOMPurify(root) {
    return createDOMPurify(root);
  };
  /**
   * Version label, exposed for easier checks
   * if DOMPurify is up to date or not
   */


  DOMPurify.version = '2.4.7';
  /**
   * Array of elements that DOMPurify removed during sanitation.
   * Empty if nothing was removed.
   */

  DOMPurify.removed = [];

  if (!window || !window.document || window.document.nodeType !== 9) {
    // Not running in a browser, provide a factory function
    // so that you can pass your own Window
    DOMPurify.isSupported = false;
    return DOMPurify;
  }

  var originalDocument = window.document;
  var document = window.document;
  var DocumentFragment = window.DocumentFragment,
      HTMLTemplateElement = window.HTMLTemplateElement,
      Node = window.Node,
      Element = window.Element,
      NodeFilter = window.NodeFilter,
      _window$NamedNodeMap = window.NamedNodeMap,
      NamedNodeMap = _window$NamedNodeMap === void 0 ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
      HTMLFormElement = window.HTMLFormElement,
      DOMParser = window.DOMParser,
      trustedTypes = window.trustedTypes;
  var ElementPrototype = Element.prototype;
  var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
  var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
  var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
  var getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a
  // new document created via createHTMLDocument. As per the spec
  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
  // a new empty registry is used when creating a template contents owner
  // document, so we use that as our parent document to ensure nothing
  // is inherited.

  if (typeof HTMLTemplateElement === 'function') {
    var template = document.createElement('template');

    if (template.content && template.content.ownerDocument) {
      document = template.content.ownerDocument;
    }
  }

  var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);

  var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';
  var _document = document,
      implementation = _document.implementation,
      createNodeIterator = _document.createNodeIterator,
      createDocumentFragment = _document.createDocumentFragment,
      getElementsByTagName = _document.getElementsByTagName;
  var importNode = originalDocument.importNode;
  var documentMode = {};

  try {
    documentMode = clone(document).documentMode ? document.documentMode : {};
  } catch (_) {}

  var hooks = {};
  /**
   * Expose whether this browser supports running the full DOMPurify.
   */

  DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined && documentMode !== 9;
  var MUSTACHE_EXPR$1 = MUSTACHE_EXPR,
      ERB_EXPR$1 = ERB_EXPR,
      TMPLIT_EXPR$1 = TMPLIT_EXPR,
      DATA_ATTR$1 = DATA_ATTR,
      ARIA_ATTR$1 = ARIA_ATTR,
      IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA,
      ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
  var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
  /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */

  /* allowed element names */

  var ALLOWED_TAGS = null;
  var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));
  /* Allowed attribute names */

  var ALLOWED_ATTR = null;
  var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));
  /*
   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
   */

  var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

  var FORBID_TAGS = null;
  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

  var FORBID_ATTR = null;
  /* Decide if ARIA attributes are okay */

  var ALLOW_ARIA_ATTR = true;
  /* Decide if custom data attributes are okay */

  var ALLOW_DATA_ATTR = true;
  /* Decide if unknown protocols are okay */

  var ALLOW_UNKNOWN_PROTOCOLS = false;
  /* Decide if self-closing tags in attributes are allowed.
   * Usually removed due to a mXSS issue in jQuery 3.0 */

  var ALLOW_SELF_CLOSE_IN_ATTR = true;
  /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */

  var SAFE_FOR_TEMPLATES = false;
  /* Decide if document with <html>... should be returned */

  var WHOLE_DOCUMENT = false;
  /* Track whether config is already set on this instance of DOMPurify. */

  var SET_CONFIG = false;
  /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */

  var FORCE_BODY = false;
  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */

  var RETURN_DOM = false;
  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */

  var RETURN_DOM_FRAGMENT = false;
  /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */

  var RETURN_TRUSTED_TYPE = false;
  /* Output should be free from DOM clobbering attacks?
   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
   */

  var SANITIZE_DOM = true;
  /* Achieve full DOM Clobbering protection by isolating the namespace of named
   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
   *
   * HTML/DOM spec rules that enable DOM Clobbering:
   *   - Named Access on Window (§7.3.3)
   *   - DOM Tree Accessors (§3.1.5)
   *   - Form Element Parent-Child Relations (§4.10.3)
   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
   *   - HTMLCollection (§4.2.10.2)
   *
   * Namespace isolation is implemented by prefixing `id` and `name` attributes
   * with a constant string, i.e., `user-content-`
   */

  var SANITIZE_NAMED_PROPS = false;
  var SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
  /* Keep element content when removing element? */

  var KEEP_CONTENT = true;
  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */

  var IN_PLACE = false;
  /* Allow usage of profiles like html, svg and mathMl */

  var USE_PROFILES = {};
  /* Tags to ignore content of when KEEP_CONTENT is true */

  var FORBID_CONTENTS = null;
  var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
  /* Tags that are safe for data: URIs */

  var DATA_URI_TAGS = null;
  var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
  /* Attributes safe for values like "javascript:" */

  var URI_SAFE_ATTRIBUTES = null;
  var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
  var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  /* Document namespace */

  var NAMESPACE = HTML_NAMESPACE;
  var IS_EMPTY_INPUT = false;
  /* Allowed XHTML+XML namespaces */

  var ALLOWED_NAMESPACES = null;
  var DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  /* Parsing of strict XHTML documents */

  var PARSER_MEDIA_TYPE;
  var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
  var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
  var transformCaseFunc;
  /* Keep a reference to config to pass to hooks */

  var CONFIG = null;
  /* Ideally, do not touch anything below this line */

  /* ______________________________________________ */

  var formElement = document.createElement('form');

  var isRegexOrFunction = function isRegexOrFunction(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  /**
   * _parseConfig
   *
   * @param  {Object} cfg optional config literal
   */
  // eslint-disable-next-line complexity


  var _parseConfig = function _parseConfig(cfg) {
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    /* Shield configuration object from tampering */


    if (!cfg || _typeof(cfg) !== 'object') {
      cfg = {};
    }
    /* Shield configuration object from prototype pollution */


    cfg = clone(cfg);
    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.

    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
    /* Set configuration parameters */

    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent
    cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent
    transformCaseFunc // eslint-disable-line indent
    ) // eslint-disable-line indent
    : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent
    cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent
    transformCaseFunc // eslint-disable-line indent
    ) // eslint-disable-line indent
    : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true

    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

    RETURN_DOM = cfg.RETURN_DOM || false; // Default false

    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

    FORCE_BODY = cfg.FORCE_BODY || false; // Default false

    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false

    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

    IN_PLACE = cfg.IN_PLACE || false; // Default false

    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};

    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }

    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }

    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }

    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }

    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    /* Parse profile info */


    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));
      ALLOWED_ATTR = [];

      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }

      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }

      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }

      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    /* Merge configuration parameters */


    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }

      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }

    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }

      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }

    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }

    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }

      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    /* Add #text in case KEEP_CONTENT is set to true */


    if (KEEP_CONTENT) {
      ALLOWED_TAGS['#text'] = true;
    }
    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
    }
    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ['tbody']);
      delete FORBID_TAGS.tbody;
    } // Prevent further manipulation of configuration.
    // Not available in IE8, Safari 5, etc.


    if (freeze) {
      freeze(cfg);
    }

    CONFIG = cfg;
  };

  var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
  var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML
  // namespace. We need to specify them explicitly
  // so that they don't get erroneously deleted from
  // HTML namespace.

  var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
  /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */

  var ALL_SVG_TAGS = addToSet({}, svg$1);
  addToSet(ALL_SVG_TAGS, svgFilters);
  addToSet(ALL_SVG_TAGS, svgDisallowed);
  var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
  addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
  /**
   *
   *
   * @param  {Element} element a DOM element whose namespace is being checked
   * @returns {boolean} Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */

  var _checkValidNamespace = function _checkValidNamespace(element) {
    var parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode
    // can be null. We just simulate parent in this case.

    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: 'template'
      };
    }

    var tagName = stringToLowerCase(element.tagName);
    var parentTagName = stringToLowerCase(parent.tagName);

    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }

    if (element.namespaceURI === SVG_NAMESPACE) {
      // The only way to switch from HTML namespace to SVG
      // is via <svg>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'svg';
      } // The only way to switch from MathML to SVG is via`
      // svg if parent is either <annotation-xml> or MathML
      // text integration points.


      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      } // We only allow elements that are defined in SVG
      // spec. All others are disallowed in SVG namespace.


      return Boolean(ALL_SVG_TAGS[tagName]);
    }

    if (element.namespaceURI === MATHML_NAMESPACE) {
      // The only way to switch from HTML namespace to MathML
      // is via <math>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'math';
      } // The only way to switch from SVG to MathML is via
      // <math> and HTML integration points


      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
      } // We only allow elements that are defined in MathML
      // spec. All others are disallowed in MathML namespace.


      return Boolean(ALL_MATHML_TAGS[tagName]);
    }

    if (element.namespaceURI === HTML_NAMESPACE) {
      // The only way to switch from SVG to HTML is via
      // HTML integration points, and from MathML to HTML
      // is via MathML text integration points
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }

      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      } // We disallow tags that are specific for MathML
      // or SVG and should never appear in HTML namespace


      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    } // For XHTML and XML documents that support custom namespaces


    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    } // The code should never reach this place (this means
    // that the element somehow got namespace that is not
    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
    // Return false just in case.


    return false;
  };
  /**
   * _forceRemove
   *
   * @param  {Node} node a DOM node
   */


  var _forceRemove = function _forceRemove(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });

    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-remove
      node.parentNode.removeChild(node);
    } catch (_) {
      try {
        node.outerHTML = emptyHTML;
      } catch (_) {
        node.remove();
      }
    }
  };
  /**
   * _removeAttribute
   *
   * @param  {String} name an Attribute name
   * @param  {Node} node a DOM node
   */


  var _removeAttribute = function _removeAttribute(name, node) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: node.getAttributeNode(name),
        from: node
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: node
      });
    }

    node.removeAttribute(name); // We void attribute values for unremovable "is"" attributes

    if (name === 'is' && !ALLOWED_ATTR[name]) {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(node);
        } catch (_) {}
      } else {
        try {
          node.setAttribute(name, '');
        } catch (_) {}
      }
    }
  };
  /**
   * _initDocument
   *
   * @param  {String} dirty a string of dirty markup
   * @return {Document} a DOM, filled with the dirty markup
   */


  var _initDocument = function _initDocument(dirty) {
    /* Create a HTML document */
    var doc;
    var leadingWhitespace;

    if (FORCE_BODY) {
      dirty = '<remove></remove>' + dirty;
    } else {
      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
      var matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }

    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
    }

    var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */

    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {}
    }
    /* Use createHTMLDocument in case DOMParser is not available */


    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, 'template', null);

      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {// Syntax error if dirtyPayload is invalid xml
      }
    }

    var body = doc.body || doc.documentElement;

    if (dirty && leadingWhitespace) {
      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    /* Work on whole document or just its body */


    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    }

    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  /**
   * _createIterator
   *
   * @param  {Document} root document/fragment to create iterator for
   * @return {Iterator} iterator instance
   */


  var _createIterator = function _createIterator(root) {
    return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
  };
  /**
   * _isClobbered
   *
   * @param  {Node} elm element to check for clobbering attacks
   * @return {Boolean} true if clobbered, false if safe
   */


  var _isClobbered = function _isClobbered(elm) {
    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');
  };
  /**
   * _isNode
   *
   * @param  {Node} obj object to check whether it's a DOM node
   * @return {Boolean} true is object is a DOM node
   */


  var _isNode = function _isNode(object) {
    return _typeof(Node) === 'object' ? object instanceof Node : object && _typeof(object) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
  };
  /**
   * _executeHook
   * Execute user configurable hooks
   *
   * @param  {String} entryPoint  Name of the hook's entry point
   * @param  {Node} currentNode node to work on with the hook
   * @param  {Object} data additional hook parameters
   */


  var _executeHook = function _executeHook(entryPoint, currentNode, data) {
    if (!hooks[entryPoint]) {
      return;
    }

    arrayForEach(hooks[entryPoint], function (hook) {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  };
  /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   *
   * @param   {Node} currentNode to check for permission to exist
   * @return  {Boolean} true if node was killed, false if left alive
   */


  var _sanitizeElements = function _sanitizeElements(currentNode) {
    var content;
    /* Execute a hook if present */

    _executeHook('beforeSanitizeElements', currentNode, null);
    /* Check if element is clobbered or can clobber */


    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Check if tagname contains Unicode */


    if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Now let's check the element's type and name */


    var tagName = transformCaseFunc(currentNode.nodeName);
    /* Execute a hook if present */

    _executeHook('uponSanitizeElement', currentNode, {
      tagName: tagName,
      allowedTags: ALLOWED_TAGS
    });
    /* Detect mXSS attempts abusing namespace confusion */


    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Mitigate a problem with templates inside select */


    if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Remove element if anything forbids its presence */


    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      /* Check if we have a custom element to handle */
      if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
      }
      /* Keep content except for bad-listed elements */


      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        var parentNode = getParentNode(currentNode) || currentNode.parentNode;
        var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

        if (childNodes && parentNode) {
          var childCount = childNodes.length;

          for (var i = childCount - 1; i >= 0; --i) {
            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
          }
        }
      }

      _forceRemove(currentNode);

      return true;
    }
    /* Check whether element has a valid namespace */


    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Make sure that older browsers don't get fallback-tag mXSS */


    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Sanitize element content to be template-safe */


    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
      /* Get the element's text content */
      content = currentNode.textContent;
      content = stringReplace(content, MUSTACHE_EXPR$1, ' ');
      content = stringReplace(content, ERB_EXPR$1, ' ');
      content = stringReplace(content, TMPLIT_EXPR$1, ' ');

      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    /* Execute a hook if present */


    _executeHook('afterSanitizeElements', currentNode, null);

    return false;
  };
  /**
   * _isValidAttribute
   *
   * @param  {string} lcTag Lowercase tag name of containing element.
   * @param  {string} lcName Lowercase attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid, otherwise false.
   */
  // eslint-disable-next-line complexity


  var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
    /* Make sure attribute cannot clobber */
    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
      return false;
    }
    /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */


    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND
      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
      _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
        return false;
      }
      /* Check value is safe. First, is attr inert? If so, is safe */

    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if (value) {
      return false;
    } else ;

    return true;
  };
  /**
   * _basicCustomElementCheck
   * checks if at least one dash is included in tagName, and it's not the first char
   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
   * @param {string} tagName name of the tag of the node to sanitize
   */


  var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
    return tagName.indexOf('-') > 0;
  };
  /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param  {Node} currentNode to sanitize
   */


  var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
    var attr;
    var value;
    var lcName;
    var l;
    /* Execute a hook if present */

    _executeHook('beforeSanitizeAttributes', currentNode, null);

    var attributes = currentNode.attributes;
    /* Check if we have attributes; if not we might have a text node */

    if (!attributes) {
      return;
    }

    var hookEvent = {
      attrName: '',
      attrValue: '',
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR
    };
    l = attributes.length;
    /* Go backwards over all attributes; safely remove bad ones */

    while (l--) {
      attr = attributes[l];
      var _attr = attr,
          name = _attr.name,
          namespaceURI = _attr.namespaceURI;
      value = name === 'value' ? attr.value : stringTrim(attr.value);
      lcName = transformCaseFunc(name);
      /* Execute a hook if present */

      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

      value = hookEvent.attrValue;
      /* Did the hooks approve of the attribute? */

      if (hookEvent.forceKeepAttr) {
        continue;
      }
      /* Remove attribute */


      _removeAttribute(name, currentNode);
      /* Did the hooks approve of the attribute? */


      if (!hookEvent.keepAttr) {
        continue;
      }
      /* Work around a security issue in jQuery 3.0 */


      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);

        continue;
      }
      /* Sanitize attribute content to be template-safe */


      if (SAFE_FOR_TEMPLATES) {
        value = stringReplace(value, MUSTACHE_EXPR$1, ' ');
        value = stringReplace(value, ERB_EXPR$1, ' ');
        value = stringReplace(value, TMPLIT_EXPR$1, ' ');
      }
      /* Is `value` valid for this attribute? */


      var lcTag = transformCaseFunc(currentNode.nodeName);

      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      /* Full DOM Clobbering protection via namespace isolation,
       * Prefix id and name attributes with `user-content-`
       */


      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
        // Remove the attribute with this value
        _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value


        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      /* Handle attributes that require Trusted Types */


      if (trustedTypesPolicy && _typeof(trustedTypes) === 'object' && typeof trustedTypes.getAttributeType === 'function') {
        if (namespaceURI) ; else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case 'TrustedHTML':
              {
                value = trustedTypesPolicy.createHTML(value);
                break;
              }

            case 'TrustedScriptURL':
              {
                value = trustedTypesPolicy.createScriptURL(value);
                break;
              }
          }
        }
      }
      /* Handle invalid data-* attribute set by try-catching it */


      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
          currentNode.setAttribute(name, value);
        }

        arrayPop(DOMPurify.removed);
      } catch (_) {}
    }
    /* Execute a hook if present */


    _executeHook('afterSanitizeAttributes', currentNode, null);
  };
  /**
   * _sanitizeShadowDOM
   *
   * @param  {DocumentFragment} fragment to iterate over recursively
   */


  var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
    var shadowNode;

    var shadowIterator = _createIterator(fragment);
    /* Execute a hook if present */


    _executeHook('beforeSanitizeShadowDOM', fragment, null);

    while (shadowNode = shadowIterator.nextNode()) {
      /* Execute a hook if present */
      _executeHook('uponSanitizeShadowNode', shadowNode, null);
      /* Sanitize tags and elements */


      if (_sanitizeElements(shadowNode)) {
        continue;
      }
      /* Deep shadow DOM detected */


      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(shadowNode.content);
      }
      /* Check attributes, sanitize if necessary */


      _sanitizeAttributes(shadowNode);
    }
    /* Execute a hook if present */


    _executeHook('afterSanitizeShadowDOM', fragment, null);
  };
  /**
   * Sanitize
   * Public method providing core sanitation functionality
   *
   * @param {String|Node} dirty string or DOM node
   * @param {Object} configuration object
   */
  // eslint-disable-next-line complexity


  DOMPurify.sanitize = function (dirty) {
    var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var body;
    var importedNode;
    var currentNode;
    var oldNode;
    var returnNode;
    /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */

    IS_EMPTY_INPUT = !dirty;

    if (IS_EMPTY_INPUT) {
      dirty = '<!-->';
    }
    /* Stringify, in case dirty is an object */


    if (typeof dirty !== 'string' && !_isNode(dirty)) {
      if (typeof dirty.toString === 'function') {
        dirty = dirty.toString();

        if (typeof dirty !== 'string') {
          throw typeErrorCreate('dirty is not a string, aborting');
        }
      } else {
        throw typeErrorCreate('toString is not a function');
      }
    }
    /* Check we can run. Otherwise fall back or ignore */


    if (!DOMPurify.isSupported) {
      if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
        if (typeof dirty === 'string') {
          return window.toStaticHTML(dirty);
        }

        if (_isNode(dirty)) {
          return window.toStaticHTML(dirty.outerHTML);
        }
      }

      return dirty;
    }
    /* Assign config vars */


    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    /* Clean up removed elements */


    DOMPurify.removed = [];
    /* Check if dirty is correctly typed for IN_PLACE */

    if (typeof dirty === 'string') {
      IN_PLACE = false;
    }

    if (IN_PLACE) {
      /* Do some early pre-sanitization to avoid unsafe root nodes */
      if (dirty.nodeName) {
        var tagName = transformCaseFunc(dirty.nodeName);

        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
        }
      }
    } else if (dirty instanceof Node) {
      /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */
      body = _initDocument('<!---->');
      importedNode = body.ownerDocument.importNode(dirty, true);

      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
        /* Node is already a body, use as is */
        body = importedNode;
      } else if (importedNode.nodeName === 'HTML') {
        body = importedNode;
      } else {
        // eslint-disable-next-line unicorn/prefer-dom-node-append
        body.appendChild(importedNode);
      }
    } else {
      /* Exit directly if we have nothing to do */
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf('<') === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      /* Initialize the document to work on */


      body = _initDocument(dirty);
      /* Check we have a DOM node from the data */

      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
      }
    }
    /* Remove first element node (ours) if FORCE_BODY is set */


    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    /* Get node iterator */


    var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
    /* Now start iterating over the created document */


    while (currentNode = nodeIterator.nextNode()) {
      /* Fix IE's strange behavior with manipulated textNodes #89 */
      if (currentNode.nodeType === 3 && currentNode === oldNode) {
        continue;
      }
      /* Sanitize tags and elements */


      if (_sanitizeElements(currentNode)) {
        continue;
      }
      /* Shadow DOM detected, sanitize it */


      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
      /* Check attributes, sanitize if necessary */


      _sanitizeAttributes(currentNode);

      oldNode = currentNode;
    }

    oldNode = null;
    /* If we sanitized `dirty` in-place, return it. */

    if (IN_PLACE) {
      return dirty;
    }
    /* Return sanitized string or DOM */


    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);

        while (body.firstChild) {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }

      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {
        /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */
        returnNode = importNode.call(originalDocument, returnNode, true);
      }

      return returnNode;
    }

    var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    /* Serialize doctype if allowed */

    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
    }
    /* Sanitize final string template-safe */


    if (SAFE_FOR_TEMPLATES) {
      serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, ' ');
      serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, ' ');
      serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR$1, ' ');
    }

    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  /**
   * Public method to set the configuration once
   * setConfig
   *
   * @param {Object} cfg configuration object
   */


  DOMPurify.setConfig = function (cfg) {
    _parseConfig(cfg);

    SET_CONFIG = true;
  };
  /**
   * Public method to remove the configuration
   * clearConfig
   *
   */


  DOMPurify.clearConfig = function () {
    CONFIG = null;
    SET_CONFIG = false;
  };
  /**
   * Public method to check if an attribute value is valid.
   * Uses last set config, if any. Otherwise, uses config defaults.
   * isValidAttribute
   *
   * @param  {string} tag Tag name of containing element.
   * @param  {string} attr Attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
   */


  DOMPurify.isValidAttribute = function (tag, attr, value) {
    /* Initialize shared config vars if necessary. */
    if (!CONFIG) {
      _parseConfig({});
    }

    var lcTag = transformCaseFunc(tag);
    var lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  /**
   * AddHook
   * Public method to add DOMPurify hooks
   *
   * @param {String} entryPoint entry point for the hook to add
   * @param {Function} hookFunction function to execute
   */


  DOMPurify.addHook = function (entryPoint, hookFunction) {
    if (typeof hookFunction !== 'function') {
      return;
    }

    hooks[entryPoint] = hooks[entryPoint] || [];
    arrayPush(hooks[entryPoint], hookFunction);
  };
  /**
   * RemoveHook
   * Public method to remove a DOMPurify hook at a given entryPoint
   * (pops it from the stack of hooks if more are present)
   *
   * @param {String} entryPoint entry point for the hook to remove
   * @return {Function} removed(popped) hook
   */


  DOMPurify.removeHook = function (entryPoint) {
    if (hooks[entryPoint]) {
      return arrayPop(hooks[entryPoint]);
    }
  };
  /**
   * RemoveHooks
   * Public method to remove all DOMPurify hooks at a given entryPoint
   *
   * @param  {String} entryPoint entry point for the hooks to remove
   */


  DOMPurify.removeHooks = function (entryPoint) {
    if (hooks[entryPoint]) {
      hooks[entryPoint] = [];
    }
  };
  /**
   * RemoveAllHooks
   * Public method to remove all DOMPurify hooks
   *
   */


  DOMPurify.removeAllHooks = function () {
    hooks = {};
  };

  return DOMPurify;
}

var purify = createDOMPurify();

module.exports = purify;
//# sourceMappingURL=purify.cjs.js.map


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(97);
__webpack_require__(98);
__webpack_require__(99);
__webpack_require__(100);
__webpack_require__(101);
module.exports = __webpack_require__(102);


/***/ }),
/* 97 */
/***/ (function(module, exports) {

Object.values = Object.values
    ? Object.values
    : function (obj) {
        var allowedTypes = [
            "[object String]",
            "[object Object]",
            "[object Array]",
            "[object Function]",
        ];
        var objType = Object.prototype.toString.call(obj);
        if (obj === null || typeof obj === "undefined") {
            throw new TypeError("Cannot convert undefined or null to object");
        }
        else if (!~allowedTypes.indexOf(objType)) {
            return [];
        }
        else {
            // if ES6 is supported
            if (Object.keys) {
                return Object.keys(obj).map(function (key) {
                    return obj[key];
                });
            }
            var result = [];
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    result.push(obj[prop]);
                }
            }
            return result;
        }
    };
if (!Object.assign) {
    Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            "use strict";
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (target === undefined || target === null) {
                throw new TypeError("Cannot convert first argument to object");
            }
            var to = Object(target);
            for (var i = 0; i < args.length; i++) {
                var nextSource = args[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                var keysArray = Object.keys(Object(nextSource));
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        },
    });
}


/***/ }),
/* 98 */
/***/ (function(module, exports) {

/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
// eslint-disable-next-line @typescript-eslint/unbound-method
if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, "includes", {
        value: function (searchElement, fromIndex) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            // 1. Let O be ? ToObject(this value).
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }
            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;
            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
            function sameValueZero(x, y) {
                return x === y || (typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y));
            }
            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return true;
                }
                // c. Increase k by 1.
                k++;
            }
            // 8. Return false
            return false;
        },
        configurable: true,
        writable: true,
    });
}
// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, "find", {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== "function") {
                throw new TypeError("predicate must be a function");
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        },
        configurable: true,
        writable: true,
    });
}
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        if (this == null) {
            throw new TypeError("Array.prototype.findIndex called on null or undefined");
        }
        if (typeof predicate !== "function") {
            throw new TypeError("predicate must be a function");
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}


/***/ }),
/* 99 */
/***/ (function(module, exports) {

if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
        "use strict";
        if (typeof start !== "number") {
            start = 0;
        }
        if (start + search.length > this.length) {
            return false;
        }
        else {
            return this.indexOf(search, start) !== -1;
        }
    };
}
if (!String.prototype.endsWith) {
    Object.defineProperty(String.prototype, "endsWith", {
        value: function (searchString, position) {
            var subjectString = this.toString();
            if (position === undefined || position > subjectString.length) {
                position = subjectString.length;
            }
            position -= searchString.length;
            var lastIndex = subjectString.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
        },
    });
}
if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, "startsWith", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (searchString, position) {
            position = position || 0;
            return this.indexOf(searchString, position) === position;
        },
    });
}
if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return padString.slice(0, targetLength) + String(this);
        }
    };
}
if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return String(this) + padString.slice(0, targetLength);
        }
    };
}


/***/ }),
/* 100 */
/***/ (function(module, exports) {

/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
if (Element && !Element.prototype.matches) {
    var proto = Element.prototype;
    proto.matches =
        proto.matchesSelector ||
            proto.mozMatchesSelector ||
            proto.msMatchesSelector ||
            proto.oMatchesSelector ||
            proto.webkitMatchesSelector;
}
// Source: https://github.com/naminho/svg-classlist-polyfill/blob/master/polyfill.js
if (!("classList" in SVGElement.prototype)) {
    Object.defineProperty(SVGElement.prototype, "classList", {
        get: function get() {
            var _this = this;
            return {
                contains: function contains(className) {
                    return _this.className.baseVal.split(" ").indexOf(className) !== -1;
                },
                add: function add(className) {
                    return _this.setAttribute("class", _this.getAttribute("class") + " " + className);
                },
                remove: function remove(className) {
                    var removedClass = _this
                        .getAttribute("class")
                        .replace(new RegExp("(\\s|^)".concat(className, "(\\s|$)"), "g"), "$2");
                    if (_this.classList.contains(className)) {
                        _this.setAttribute("class", removedClass);
                    }
                },
                toggle: function toggle(className) {
                    if (this.contains(className)) {
                        this.remove(className);
                    }
                    else {
                        this.add(className);
                    }
                },
            };
        },
        configurable: true,
    });
}
// Source: https://github.com/tc39/proposal-object-values-entries/blob/master/polyfill.js
if (!Object.entries) {
    var reduce_1 = Function.bind.call(Function.call, Array.prototype.reduce);
    var isEnumerable_1 = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable);
    var concat_1 = Function.bind.call(Function.call, Array.prototype.concat);
    Object.entries = function entries(O) {
        return reduce_1(Object.keys(O), function (e, k) { return concat_1(e, typeof k === "string" && isEnumerable_1(O, k) ? [[k, O[k]]] : []); }, []);
    };
}
// Source: https://gist.github.com/rockinghelvetica/00b9f7b5c97a16d3de75ba99192ff05c
if (!Event.prototype.composedPath) {
    Event.prototype.composedPath = function () {
        if (this.path) {
            return this.path;
        }
        var target = this.target;
        this.path = [];
        while (target.parentNode !== null) {
            this.path.push(target);
            target = target.parentNode;
        }
        this.path.push(document, window);
        return this.path;
    };
}


/***/ }),
/* 101 */
/***/ (function(module, exports) {

Math.sign =
    Math.sign ||
        function (x) {
            x = +x;
            if (x === 0 || isNaN(x)) {
                return x;
            }
            return x > 0 ? 1 : -1;
        };


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Spreadsheet = exports.css = exports.i18n = exports.setTheme = exports.message = void 0;
var CssManager_1 = __webpack_require__(103);
Object.defineProperty(exports, "css", { enumerable: true, get: function () { return CssManager_1.cssManager; } });
var en_1 = __webpack_require__(11);
__webpack_require__(104);
var locale_1 = __webpack_require__(105);
var ts_message_1 = __webpack_require__(17);
Object.defineProperty(exports, "message", { enumerable: true, get: function () { return ts_message_1.message; } });
var dom_1 = __webpack_require__(1);
Object.defineProperty(exports, "setTheme", { enumerable: true, get: function () { return dom_1.setTheme; } });
var d = (window.dhx = window.dhx || {});
exports.i18n = d.i18n || {};
exports.i18n.setLocale = locale_1.setLocale;
exports.i18n.spreadsheet = exports.i18n.spreadsheet || en_1.default;
d.css = d.css || CssManager_1.cssManager;
var Spreadsheet_1 = __webpack_require__(113);
Object.defineProperty(exports, "Spreadsheet", { enumerable: true, get: function () { return Spreadsheet_1.Spreadsheet; } });


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.cssManager = exports.CssManager = void 0;
var core_1 = __webpack_require__(0);
var CssManager = /** @class */ (function () {
    function CssManager() {
        this._classes = {};
        var styles = document.createElement("style");
        styles.id = "dhx_generated_styles";
        this._styleCont = document.head.appendChild(styles);
    }
    CssManager.prototype.update = function () {
        if (this._styleCont.innerHTML !== this._generateCss()) {
            document.head.appendChild(this._styleCont);
            this._styleCont.innerHTML = this._generateCss();
        }
    };
    CssManager.prototype.remove = function (className) {
        delete this._classes[className];
        this.update();
    };
    CssManager.prototype.add = function (cssList, customId, silent) {
        if (silent === void 0) { silent = false; }
        var cssString = this._toCssString(cssList);
        var id = this._findSameClassId(cssString);
        if (id && customId && customId !== id) {
            this._classes[customId] = this._classes[id];
            return customId;
        }
        if (id) {
            return id;
        }
        return this._addNewClass(cssString, customId, silent);
    };
    CssManager.prototype.get = function (className) {
        if (this._classes[className]) {
            var props = {};
            var css = this._classes[className].split(";");
            for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
                var item = css_1[_i];
                if (item) {
                    var prop = item.split(":");
                    props[prop[0]] = prop[1];
                }
            }
            return props;
        }
        return null;
    };
    CssManager.prototype.destructor = function () {
        this._classes = this._styleCont = null;
    };
    CssManager.prototype._findSameClassId = function (cssString) {
        for (var key in this._classes) {
            if (cssString === this._classes[key]) {
                return key;
            }
        }
        return null;
    };
    CssManager.prototype._addNewClass = function (cssString, customId, silent) {
        var id = customId || "dhx_generated_class_".concat((0, core_1.uid)());
        this._classes[id] = cssString;
        if (!silent) {
            this.update();
        }
        return id;
    };
    CssManager.prototype._toCssString = function (cssList) {
        var cssString = "";
        for (var key in cssList) {
            var prop = cssList[key];
            var name_1 = key.replace(/[A-Z]{1}/g, function (letter) { return "-".concat(letter.toLowerCase()); });
            cssString += "".concat(name_1, ":").concat(prop, ";");
        }
        return cssString;
    };
    CssManager.prototype._generateCss = function () {
        var result = "";
        for (var key in this._classes) {
            var cssProps = this._classes[key];
            result += ".".concat(key, "{").concat(cssProps, "}\n");
        }
        return result;
    };
    return CssManager;
}());
exports.CssManager = CssManager;
exports.cssManager = new CssManager();


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.setLocale = void 0;
function setLocale(component, value) {
    var target = this[component];
    if (!target)
        return;
    for (var key in value) {
        target[key] = value[key];
    }
}
exports.setLocale = setLocale;
;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.message = void 0;
var core_1 = __webpack_require__(0);
var html_1 = __webpack_require__(4);
var types_1 = __webpack_require__(47);
var nodeTimeout = new WeakMap();
var containers = new Map();
function createMessageContainer(parent, position) {
    var messageContainer = document.createElement("div");
    messageContainer.setAttribute("data-position", position);
    messageContainer.className =
        "dhx_message-container " +
            "dhx_message-container--" +
            position +
            (parent === document.body ? " dhx_message-container--in-body" : "");
    return messageContainer;
}
function onExpire(node, fromClick) {
    if (fromClick) {
        clearTimeout(nodeTimeout.get(node));
    }
    var container = node.parentNode;
    var position = container.getAttribute("data-position");
    var parent = container.parentNode;
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        return;
    }
    var positionInfo = messageContainerInfo[position];
    if (!positionInfo) {
        return;
    }
    var stack = positionInfo.stack;
    var index = stack.indexOf(node);
    if (index !== -1) {
        container.removeChild(node);
        stack.splice(index, 1);
        if (stack.length === 0) {
            parent.removeChild(container);
        }
        return;
    }
}
function message(props) {
    var _a;
    if (typeof props === "string") {
        props = { text: props };
    }
    props.position = props.position || types_1.MessageContainerPosition.topRight;
    var messageBox = document.createElement("div");
    messageBox.className = "dhx_widget dhx_message " + (props.css || "");
    messageBox.setAttribute("role", "alert");
    var textId = props.text && (0, core_1.uid)();
    textId && messageBox.setAttribute("aria-describedby", textId);
    if (props.html) {
        messageBox.innerHTML = props.html;
    }
    else {
        messageBox.innerHTML = "<span class=\"dhx_message__text\" id=".concat(textId, "></span>\n\t\t").concat(props.icon ? "<span class=\"dhx_message__icon dxi ".concat(props.icon, "\"></span>") : "");
        messageBox.querySelector("#".concat(textId)).textContent = props.text;
    }
    var parent = props.node ? (0, html_1.toNode)(props.node) : document.body;
    var position = getComputedStyle(parent).position;
    if (position === "static") {
        parent.style.position = "relative";
    }
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        containers.set(parent, (_a = {},
            _a[props.position] = {
                stack: [],
                container: createMessageContainer(parent, props.position),
            },
            _a));
    }
    else if (!messageContainerInfo[props.position]) {
        messageContainerInfo[props.position] = {
            stack: [],
            container: createMessageContainer(parent, props.position),
        };
    }
    var _b = containers.get(parent)[props.position], stack = _b.stack, container = _b.container;
    if (stack.length === 0) {
        parent.appendChild(container);
    }
    stack.push(messageBox);
    container.appendChild(messageBox);
    function closeMessage(fromClick) {
        if (fromClick === void 0) { fromClick = true; }
        if (!messageBox)
            return;
        onExpire(messageBox, fromClick);
        messageBox = null;
    }
    if (props.expire) {
        var timeout = setTimeout(function () { return closeMessage(false); }, props.expire);
        nodeTimeout.set(messageBox, timeout);
    }
    messageBox.onclick = function () { return closeMessage(); };
    return {
        close: function () { return closeMessage(); },
    };
}
exports.message = message;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.alert = void 0;
var en_1 = __webpack_require__(60);
var common_1 = __webpack_require__(61);
var core_1 = __webpack_require__(0);
function alert(props) {
    var apply = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.apply;
    var unblock = (0, common_1.blockScreen)(props.blockerCss);
    return new Promise(function (res) {
        var contentId = "dhx_alert__".concat((0, core_1.uid)(), "_content");
        var headerId = "dhx_alert__".concat((0, core_1.uid)(), "_header");
        var alertBox = document.createElement("div");
        alertBox.setAttribute("role", "alert");
        alertBox.setAttribute("aria-modal", "true");
        props.text && alertBox.setAttribute("aria-describedby", contentId);
        props.header && alertBox.setAttribute("aria-labelledby", headerId);
        alertBox.className = "dhx_widget dhx_alert " + (props.css || "");
        var closeAlert = function (e) {
            if (e.key === "Escape" || e.key === "Esc") {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                close(e);
                res(false);
            }
        };
        function close(e) {
            e.preventDefault();
            unblock();
            document.body.removeChild(alertBox);
            document.removeEventListener("keydown", closeAlert);
        }
        alertBox.innerHTML = "\n\t\t\t".concat(props.header
            ? "<div id=".concat(headerId, " class=\"dhx_alert__header\"> ").concat(props.htmlEnable !== false ? props.header : "", " </div>")
            : "", "\n\t\t\t").concat(props.text
            ? "<div id=".concat(contentId, " class=\"dhx_alert__content\">").concat(props.htmlEnable !== false ? props.text : "", "</div>")
            : "", "\n\t\t\t<div class=\"dhx_alert__footer ").concat(props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "", "\">\n\t\t\t\t<button type=\"button\" aria-label=\"confirm\" class=\"dhx_alert__apply-button dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">").concat(apply, "</button>\n\t\t\t</div>");
        if (props.htmlEnable === false) {
            props.header && (alertBox.querySelector("#".concat(headerId)).textContent = props.header);
            props.text && (alertBox.querySelector("#".concat(contentId)).textContent = props.text);
        }
        document.body.appendChild(alertBox);
        alertBox.querySelector(".dhx_alert__apply-button").focus();
        alertBox.querySelector("button").addEventListener("click", function (e) {
            close(e);
            res(true);
        });
        document.addEventListener("keydown", closeAlert);
    });
}
exports.alert = alert;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(109);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(48)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(48), __webpack_require__(110)))

/***/ }),
/* 110 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirm = void 0;
var en_1 = __webpack_require__(60);
var common_1 = __webpack_require__(61);
var core_1 = __webpack_require__(0);
function confirm(props) {
    props.buttonsAlignment = props.buttonsAlignment || "right";
    var apply = props.buttons && props.buttons[1] ? props.buttons[1] : en_1.default.apply;
    var reject = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.reject;
    var unblock = (0, common_1.blockScreen)("dhx_alert__overlay-confirm " + (props.blockerCss || ""));
    return new Promise(function (res) {
        var confirmBox = document.createElement("div");
        confirmBox.setAttribute("role", "alertdialog");
        confirmBox.setAttribute("aria-modal", "true");
        var headerId = props.header && (0, core_1.uid)();
        var textId = props.header && (0, core_1.uid)();
        textId && confirmBox.setAttribute("aria-describedby", textId);
        headerId && confirmBox.setAttribute("aria-labelledby", headerId);
        var focusItem;
        var answer = function (val) {
            unblock();
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            confirmBox.removeEventListener("click", clickHandler);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            document.removeEventListener("keydown", closeConfirm);
            document.body.removeChild(confirmBox);
            res(val);
        };
        var clickHandler = function (e) {
            if (e.target.tagName === "BUTTON") {
                answer(e.target.classList.contains("dhx_alert__confirm-aply"));
            }
        };
        var closeConfirm = function (e) {
            if (e.key === "Escape" || e.key === "Esc") {
                confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
                answer(e.target.classList.contains("dhx_alert__confirm-reject"));
            }
            else if (e.key === "Tab") {
                if (focusItem === "aply") {
                    focusItem = "reject";
                    confirmBox.querySelector(".dhx_alert__confirm-reject").focus();
                }
                else {
                    focusItem = "aply";
                    confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
                }
                e.preventDefault();
            }
        };
        confirmBox.className = "dhx_widget dhx_alert dhx_alert--confirm" + (props.css ? " " + props.css : "");
        confirmBox.innerHTML = "\n\t\t".concat(props.header
            ? "<div class=\"dhx_alert__header\" id=".concat(headerId, "> ").concat(props.htmlEnable !== false ? props.header : "", " </div>")
            : "", "\n\t\t").concat(props.text
            ? "<div class=\"dhx_alert__content\" id=".concat(textId, ">").concat(props.htmlEnable !== false ? props.text : "", "</div>")
            : "", "\n\t\t\t<div class=\"dhx_alert__footer ").concat(props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "", "\">\n\t\t\t\t<button type=\"button\" aria-label=\"reject\" class=\"dhx_alert__confirm-reject dhx_button dhx_button--view_link dhx_button--color_primary dhx_button--size_medium\">").concat(reject, "</button>\n\t\t\t\t<button type=\"button\"  aria-label=\"aply\"class=\"dhx_alert__confirm-aply dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">").concat(apply, "</button>\n\t\t\t</div>");
        if (props.htmlEnable === false) {
            props.header && (confirmBox.querySelector("#".concat(headerId)).textContent = props.header);
            props.text && (confirmBox.querySelector("#".concat(textId)).textContent = props.text);
        }
        document.body.appendChild(confirmBox);
        focusItem = "aply";
        confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
        confirmBox.addEventListener("click", clickHandler);
        document.addEventListener("keydown", closeConfirm);
    });
}
exports.confirm = confirm;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

/**
* Copyright (c) 2017, Leon Sorokin
* All rights reserved. (MIT Licensed)
*
* domvm.js (DOM ViewModel)
* A thin, fast, dependency-free vdom view layer
* @preserve https://github.com/leeoniya/domvm (v3.2.6, micro build)
*/

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

// NOTE: if adding a new *VNode* type, make it < COMMENT and renumber rest.
// There are some places that test <= COMMENT to assert if node is a VNode

// VNode types
var ELEMENT	= 1;
var TEXT		= 2;
var COMMENT	= 3;

// placeholder types
var VVIEW		= 4;
var VMODEL		= 5;

var ENV_DOM = typeof window !== "undefined";
var win = ENV_DOM ? window : {};
var rAF = win.requestAnimationFrame;

var emptyObj = {};

function noop() {}

var isArr = Array.isArray;

function isSet(val) {
	return val != null;
}

function isPlainObj(val) {
	return val != null && val.constructor === Object;		//  && typeof val === "object"
}

function insertArr(targ, arr, pos, rem) {
	targ.splice.apply(targ, [pos, rem].concat(arr));
}

function isVal(val) {
	var t = typeof val;
	return t === "string" || t === "number";
}

function isFunc(val) {
	return typeof val === "function";
}

function isProm(val) {
	return typeof val === "object" && isFunc(val.then);
}



function assignObj(targ) {
	var args = arguments;

	for (var i = 1; i < args.length; i++)
		{ for (var k in args[i])
			{ targ[k] = args[i][k]; } }

	return targ;
}

// export const defProp = Object.defineProperty;

function deepSet(targ, path, val) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			{ targ[seg] = val; }
		else
			{ targ[seg] = targ = targ[seg] || {}; }
	}
}

/*
export function deepUnset(targ, path) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			targ[seg] = val;
		else
			targ[seg] = targ = targ[seg] || {};
	}
}
*/

function sliceArgs(args, offs) {
	var arr = [];
	for (var i = offs; i < args.length; i++)
		{ arr.push(args[i]); }
	return arr;
}

function cmpObj(a, b) {
	for (var i in a)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

function cmpArr(a, b) {
	var alen = a.length;

	if (b.length !== alen)
		{ return false; }

	for (var i = 0; i < alen; i++)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

// https://github.com/darsain/raft
// rAF throttler, aggregates multiple repeated redraw calls within single animframe
function raft(fn) {
	if (!rAF)
		{ return fn; }

	var id, ctx, args;

	function call() {
		id = 0;
		fn.apply(ctx, args);
	}

	return function() {
		ctx = this;
		args = arguments;
		if (!id) { id = rAF(call); }
	};
}

function curry(fn, args, ctx) {
	return function() {
		return fn.apply(ctx, args);
	};
}

/*
export function prop(val, cb, ctx, args) {
	return function(newVal, execCb) {
		if (newVal !== undefined && newVal !== val) {
			val = newVal;
			execCb !== false && isFunc(cb) && cb.apply(ctx, args);
		}

		return val;
	};
}
*/

/*
// adapted from https://github.com/Olical/binary-search
export function binaryKeySearch(list, item) {
    var min = 0;
    var max = list.length - 1;
    var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

    return -1;
}
*/

// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
// impl borrowed from https://github.com/ivijs/ivi
function longestIncreasingSubsequence(a) {
	var p = a.slice();
	var result = [];
	result.push(0);
	var u;
	var v;

	for (var i = 0, il = a.length; i < il; ++i) {
		var j = result[result.length - 1];
		if (a[j] < a[i]) {
			p[i] = j;
			result.push(i);
			continue;
		}

		u = 0;
		v = result.length - 1;

		while (u < v) {
			var c = ((u + v) / 2) | 0;
			if (a[result[c]] < a[i]) {
				u = c + 1;
			} else {
				v = c;
			}
		}

		if (a[i] < a[result[u]]) {
			if (u > 0) {
				p[i] = result[u - 1];
			}
			result[u] = i;
		}
	}

	u = result.length;
	v = result[u - 1];

	while (u-- > 0) {
		result[u] = v;
		v = p[v];
	}

	return result;
}

// based on https://github.com/Olical/binary-search
function binaryFindLarger(item, list) {
	var min = 0;
	var max = list.length - 1;
	var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

	return (min == list.length) ? null : min;

//	return -1;
}

function isEvProp(name) {
	return name[0] === "o" && name[1] === "n";
}

function isSplProp(name) {
	return name[0] === "_";
}

function isStyleProp(name) {
	return name === "style";
}

function repaint(node) {
	node && node.el && node.el.offsetHeight;
}

function isHydrated(vm) {
	return vm.node != null && vm.node.el != null;
}

// tests interactive props where real val should be compared
function isDynProp(tag, attr) {
//	switch (tag) {
//		case "input":
//		case "textarea":
//		case "select":
//		case "option":
			switch (attr) {
				case "value":
				case "checked":
				case "selected":
//				case "selectedIndex":
					return true;
			}
//	}

	return false;
}

function getVm(n) {
	n = n || emptyObj;
	while (n.vm == null && n.parent)
		{ n = n.parent; }
	return n.vm;
}

function VNode() {}

var VNodeProto = VNode.prototype = {
	constructor: VNode,

	type:	null,

	vm:		null,

	// all this stuff can just live in attrs (as defined) just have getters here for it
	key:	null,
	ref:	null,
	data:	null,
	hooks:	null,
	ns:		null,

	el:		null,

	tag:	null,
	attrs:	null,
	body:	null,

	flags:	0,

	_class:	null,
	_diff:	null,

	// pending removal on promise resolution
	_dead:	false,
	// part of longest increasing subsequence?
	_lis:	false,

	idx:	null,
	parent:	null,

	/*
	// break out into optional fluent module
	key:	function(val) { this.key	= val; return this; },
	ref:	function(val) { this.ref	= val; return this; },		// deep refs
	data:	function(val) { this.data	= val; return this; },
	hooks:	function(val) { this.hooks	= val; return this; },		// h("div").hooks()
	html:	function(val) { this.html	= true; return this.body(val); },

	body:	function(val) { this.body	= val; return this; },
	*/
};

function defineText(body) {
	var node = new VNode;
	node.type = TEXT;
	node.body = body;
	return node;
}

// creates a one-shot self-ending stream that redraws target vm
// TODO: if it's already registered by any parent vm, then ignore to avoid simultaneous parent & child refresh

var tagCache = {};

var RE_ATTRS = /\[(\w+)(?:=(\w+))?\]/g;

function cssTag(raw) {
	{
		var cached = tagCache[raw];

		if (cached == null) {
			var tag, id, cls, attr;

			tagCache[raw] = cached = {
				tag:	(tag	= raw.match( /^[-\w]+/))		?	tag[0]						: "div",
				id:		(id		= raw.match( /#([-\w]+)/))		? 	id[1]						: null,
				class:	(cls	= raw.match(/\.([-\w.]+)/))		?	cls[1].replace(/\./g, " ")	: null,
				attrs:	null,
			};

			while (attr = RE_ATTRS.exec(raw)) {
				if (cached.attrs == null)
					{ cached.attrs = {}; }
				cached.attrs[attr[1]] = attr[2] || "";
			}
		}

		return cached;
	}
}

// (de)optimization flags

// forces slow bottom-up removeChild to fire deep willRemove/willUnmount hooks,
var DEEP_REMOVE = 1;
// prevents inserting/removing/reordering of children
var FIXED_BODY = 2;
// enables fast keyed lookup of children via binary search, expects homogeneous keyed body
var KEYED_LIST = 4;
// indicates an vnode match/diff/recycler function for body
var LAZY_LIST = 8;

function initElementNode(tag, attrs, body, flags) {
	var node = new VNode;

	node.type = ELEMENT;

	if (isSet(flags))
		{ node.flags = flags; }

	node.attrs = attrs;

	var parsed = cssTag(tag);

	node.tag = parsed.tag;

	// meh, weak assertion, will fail for id=0, etc.
	if (parsed.id || parsed.class || parsed.attrs) {
		var p = node.attrs || {};

		if (parsed.id && !isSet(p.id))
			{ p.id = parsed.id; }

		if (parsed.class) {
			node._class = parsed.class;		// static class
			p.class = parsed.class + (isSet(p.class) ? (" " + p.class) : "");
		}
		if (parsed.attrs) {
			for (var key in parsed.attrs)
				{ if (!isSet(p[key]))
					{ p[key] = parsed.attrs[key]; } }
		}

//		if (node.attrs !== p)
			node.attrs = p;
	}

	var mergedAttrs = node.attrs;

	if (isSet(mergedAttrs)) {
		if (isSet(mergedAttrs._key))
			{ node.key = mergedAttrs._key; }

		if (isSet(mergedAttrs._ref))
			{ node.ref = mergedAttrs._ref; }

		if (isSet(mergedAttrs._hooks))
			{ node.hooks = mergedAttrs._hooks; }

		if (isSet(mergedAttrs._data))
			{ node.data = mergedAttrs._data; }

		if (isSet(mergedAttrs._flags))
			{ node.flags = mergedAttrs._flags; }

		if (!isSet(node.key)) {
			if (isSet(node.ref))
				{ node.key = node.ref; }
			else if (isSet(mergedAttrs.id))
				{ node.key = mergedAttrs.id; }
			else if (isSet(mergedAttrs.name))
				{ node.key = mergedAttrs.name + (mergedAttrs.type === "radio" || mergedAttrs.type === "checkbox" ? mergedAttrs.value : ""); }
		}
	}

	if (body != null)
		{ node.body = body; }

	return node;
}

function setRef(vm, name, node) {
	var path = ["refs"].concat(name.split("."));
	deepSet(vm, path, node);
}

function setDeepRemove(node) {
	while (node = node.parent)
		{ node.flags |= DEEP_REMOVE; }
}

// vnew, vold
function preProc(vnew, parent, idx, ownVm) {
	if (vnew.type === VMODEL || vnew.type === VVIEW)
		{ return; }

	vnew.parent = parent;
	vnew.idx = idx;
	vnew.vm = ownVm;

	if (vnew.ref != null)
		{ setRef(getVm(vnew), vnew.ref, vnew); }

	var nh = vnew.hooks,
		vh = ownVm && ownVm.hooks;

	if (nh && (nh.willRemove || nh.didRemove) ||
		vh && (vh.willUnmount || vh.didUnmount))
		{ setDeepRemove(vnew); }

	if (isArr(vnew.body))
		{ preProcBody(vnew); }
	else {}
}

function preProcBody(vnew) {
	var body = vnew.body;

	for (var i = 0; i < body.length; i++) {
		var node2 = body[i];

		// remove false/null/undefined
		if (node2 === false || node2 == null)
			{ body.splice(i--, 1); }
		// flatten arrays
		else if (isArr(node2)) {
			insertArr(body, node2, i--, 1);
		}
		else {
			if (node2.type == null)
				{ body[i] = node2 = defineText(""+node2); }

			if (node2.type === TEXT) {
				// remove empty text nodes
				if (node2.body == null || node2.body === "")
					{ body.splice(i--, 1); }
				// merge with previous text node
				else if (i > 0 && body[i-1].type === TEXT) {
					body[i-1].body += node2.body;
					body.splice(i--, 1);
				}
				else
					{ preProc(node2, vnew, i, null); }
			}
			else
				{ preProc(node2, vnew, i, null); }
		}
	}
}

var unitlessProps = {
	animationIterationCount: true,
	boxFlex: true,
	boxFlexGroup: true,
	boxOrdinalGroup: true,
	columnCount: true,
	flex: true,
	flexGrow: true,
	flexPositive: true,
	flexShrink: true,
	flexNegative: true,
	flexOrder: true,
	gridRow: true,
	gridColumn: true,
	order: true,
	lineClamp: true,

	borderImageOutset: true,
	borderImageSlice: true,
	borderImageWidth: true,
	fontWeight: true,
	lineHeight: true,
	opacity: true,
	orphans: true,
	tabSize: true,
	widows: true,
	zIndex: true,
	zoom: true,

	fillOpacity: true,
	floodOpacity: true,
	stopOpacity: true,
	strokeDasharray: true,
	strokeDashoffset: true,
	strokeMiterlimit: true,
	strokeOpacity: true,
	strokeWidth: true
};

function autoPx(name, val) {
	{
		// typeof val === 'number' is faster but fails for numeric strings
		return !isNaN(val) && !unitlessProps[name] ? (val + "px") : val;
	}
}

// assumes if styles exist both are objects or both are strings
function patchStyle(n, o) {
	var ns =     (n.attrs || emptyObj).style;
	var os = o ? (o.attrs || emptyObj).style : null;

	// replace or remove in full
	if (ns == null || isVal(ns))
		{ n.el.style.cssText = ns; }
	else {
		for (var nn in ns) {
			var nv = ns[nn];

			if (os == null || nv != null && nv !== os[nn])
				{ n.el.style[nn] = autoPx(nn, nv); }
		}

		// clean old
		if (os) {
			for (var on in os) {
				if (ns[on] == null)
					{ n.el.style[on] = ""; }
			}
		}
	}
}

var didQueue = [];

function fireHook(hooks, name, o, n, immediate) {
	if (hooks != null) {
		var fn = o.hooks[name];

		if (fn) {
			if (name[0] === "d" && name[1] === "i" && name[2] === "d") {	// did*
				//	console.log(name + " should queue till repaint", o, n);
				immediate ? repaint(o.parent) && fn(o, n) : didQueue.push([fn, o, n]);
			}
			else {		// will*
				//	console.log(name + " may delay by promise", o, n);
				return fn(o, n);		// or pass  done() resolver
			}
		}
	}
}

function drainDidHooks(vm) {
	if (didQueue.length) {
		repaint(vm.node);

		var item;
		while (item = didQueue.shift())
			{ item[0](item[1], item[2]); }
	}
}

var doc = ENV_DOM ? document : null;

function closestVNode(el) {
	while (el._node == null)
		{ el = el.parentNode; }
	return el._node;
}

function createElement(tag, ns) {
	if (ns != null)
		{ return doc.createElementNS(ns, tag); }
	return doc.createElement(tag);
}

function createTextNode(body) {
	return doc.createTextNode(body);
}

function createComment(body) {
	return doc.createComment(body);
}

// ? removes if !recycled
function nextSib(sib) {
	return sib.nextSibling;
}

// ? removes if !recycled
function prevSib(sib) {
	return sib.previousSibling;
}

// TODO: this should collect all deep proms from all hooks and return Promise.all()
function deepNotifyRemove(node) {
	var vm = node.vm;

	var wuRes = vm != null && fireHook(vm.hooks, "willUnmount", vm, vm.data);

	var wrRes = fireHook(node.hooks, "willRemove", node);

	if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE && isArr(node.body)) {
		for (var i = 0; i < node.body.length; i++)
			{ deepNotifyRemove(node.body[i]); }
	}

	return wuRes || wrRes;
}

function _removeChild(parEl, el, immediate) {
	var node = el._node, vm = node.vm;

	if (isArr(node.body)) {
		if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE) {
			for (var i = 0; i < node.body.length; i++)
				{ _removeChild(el, node.body[i].el); }
		}
		else
			{ deepUnref(node); }
	}

	delete el._node;

	parEl.removeChild(el);

	fireHook(node.hooks, "didRemove", node, null, immediate);

	if (vm != null) {
		fireHook(vm.hooks, "didUnmount", vm, vm.data, immediate);
		vm.node = null;
	}
}

// todo: should delay parent unmount() by returning res prom?
function removeChild(parEl, el) {
	var node = el._node;

	// already marked for removal
	if (node._dead) { return; }

	var res = deepNotifyRemove(node);

	if (res != null && isProm(res)) {
		node._dead = true;
		res.then(curry(_removeChild, [parEl, el, true]));
	}
	else
		{ _removeChild(parEl, el); }
}

function deepUnref(node) {
	var obody = node.body;

	for (var i = 0; i < obody.length; i++) {
		var o2 = obody[i];
		delete o2.el._node;

		if (o2.vm != null)
			{ o2.vm.node = null; }

		if (isArr(o2.body))
			{ deepUnref(o2); }
	}
}

function clearChildren(parent) {
	var parEl = parent.el;

	if ((parent.flags & DEEP_REMOVE) === 0) {
		isArr(parent.body) && deepUnref(parent);
		parEl.textContent = null;
	}
	else {
		var el = parEl.firstChild;

		do {
			var next = nextSib(el);
			removeChild(parEl, el);
		} while (el = next);
	}
}

// todo: hooks
function insertBefore(parEl, el, refEl) {
	var node = el._node, inDom = el.parentNode != null;

	// el === refEl is asserted as a no-op insert called to fire hooks
	var vm = (el === refEl || !inDom) ? node.vm : null;

	if (vm != null)
		{ fireHook(vm.hooks, "willMount", vm, vm.data); }

	fireHook(node.hooks, inDom ? "willReinsert" : "willInsert", node);
	parEl.insertBefore(el, refEl);
	fireHook(node.hooks, inDom ? "didReinsert" : "didInsert", node);

	if (vm != null)
		{ fireHook(vm.hooks, "didMount", vm, vm.data); }
}

function insertAfter(parEl, el, refEl) {
	insertBefore(parEl, el, refEl ? nextSib(refEl) : null);
}

var onemit = {};

function emitCfg(cfg) {
	assignObj(onemit, cfg);
}

function emit(evName) {
	var targ = this,
		src = targ;

	var args = sliceArgs(arguments, 1).concat(src, src.data);

	do {
		var evs = targ.onemit;
		var fn = evs ? evs[evName] : null;

		if (fn) {
			fn.apply(targ, args);
			break;
		}
	} while (targ = targ.parent());

	if (onemit[evName])
		{ onemit[evName].apply(targ, args); }
}

var onevent = noop;

function config(newCfg) {
	onevent = newCfg.onevent || onevent;

	{
		if (newCfg.onemit)
			{ emitCfg(newCfg.onemit); }
	}

	
}

function bindEv(el, type, fn) {
	el[type] = fn;
}

function exec(fn, args, e, node, vm) {
	var out = fn.apply(vm, args.concat([e, node, vm, vm.data]));

	// should these respect out === false?
	vm.onevent(e, node, vm, vm.data, args);
	onevent.call(null, e, node, vm, vm.data, args);

	if (out === false) {
		e.preventDefault();
		e.stopPropagation();
	}
}

function handle(e) {
	var node = closestVNode(e.target);
	var vm = getVm(node);

	var evDef = e.currentTarget._node.attrs["on" + e.type], fn, args;

	if (isArr(evDef)) {
		fn = evDef[0];
		args = evDef.slice(1);
		exec(fn, args, e, node, vm);
	}
	else {
		for (var sel in evDef) {
			if (e.target.matches(sel)) {
				var evDef2 = evDef[sel];

				if (isArr(evDef2)) {
					fn = evDef2[0];
					args = evDef2.slice(1);
				}
				else {
					fn = evDef2;
					args = [];
				}

				exec(fn, args, e, node, vm);
			}
		}
	}
}

function patchEvent(node, name, nval, oval) {
	if (nval === oval)
		{ return; }

	var el = node.el;

	if (nval == null || isFunc(nval))
		{ bindEv(el, name, nval); }
	else if (oval == null)
		{ bindEv(el, name, handle); }
}

function remAttr(node, name, asProp) {
	if (name[0] === ".") {
		name = name.substr(1);
		asProp = true;
	}

	if (asProp)
		{ node.el[name] = ""; }
	else
		{ node.el.removeAttribute(name); }
}

// setAttr
// diff, ".", "on*", bool vals, skip _*, value/checked/selected selectedIndex
function setAttr(node, name, val, asProp, initial) {
	var el = node.el;

	if (val == null)
		{ !initial && remAttr(node, name, false); }		// will also removeAttr of style: null
	else if (node.ns != null)
		{ el.setAttribute(name, val); }
	else if (name === "class")
		{ el.className = val; }
	else if (name === "id" || typeof val === "boolean" || asProp)
		{ el[name] = val; }
	else if (name[0] === ".")
		{ el[name.substr(1)] = val; }
	else
		{ el.setAttribute(name, val); }
}

function patchAttrs(vnode, donor, initial) {
	var nattrs = vnode.attrs || emptyObj;
	var oattrs = donor.attrs || emptyObj;

	if (nattrs === oattrs) {
		
	}
	else {
		for (var key in nattrs) {
			var nval = nattrs[key];
			var isDyn = isDynProp(vnode.tag, key);
			var oval = isDyn ? vnode.el[key] : oattrs[key];

			if (nval === oval) {}
			else if (isStyleProp(key))
				{ patchStyle(vnode, donor); }
			else if (isSplProp(key)) {}
			else if (isEvProp(key))
				{ patchEvent(vnode, key, nval, oval); }
			else
				{ setAttr(vnode, key, nval, isDyn, initial); }
		}

		// TODO: bench style.cssText = "" vs removeAttribute("style")
		for (var key in oattrs) {
			!(key in nattrs) &&
			!isSplProp(key) &&
			remAttr(vnode, key, isDynProp(vnode.tag, key) || isEvProp(key));
		}
	}
}

function createView(view, data, key, opts) {
	if (view.type === VVIEW) {
		data	= view.data;
		key		= view.key;
		opts	= view.opts;
		view	= view.view;
	}

	return new ViewModel(view, data, key, opts);
}

//import { XML_NS, XLINK_NS } from './defineSvgElement';
function hydrateBody(vnode) {
	for (var i = 0; i < vnode.body.length; i++) {
		var vnode2 = vnode.body[i];
		var type2 = vnode2.type;

		// ELEMENT,TEXT,COMMENT
		if (type2 <= COMMENT)
			{ insertBefore(vnode.el, hydrate(vnode2)); }		// vnode.el.appendChild(hydrate(vnode2))
		else if (type2 === VVIEW) {
			var vm = createView(vnode2.view, vnode2.data, vnode2.key, vnode2.opts)._redraw(vnode, i, false);		// todo: handle new data updates
			type2 = vm.node.type;
			insertBefore(vnode.el, hydrate(vm.node));
		}
		else if (type2 === VMODEL) {
			var vm = vnode2.vm;
			vm._redraw(vnode, i);					// , false
			type2 = vm.node.type;
			insertBefore(vnode.el, vm.node.el);		// , hydrate(vm.node)
		}
	}
}

//  TODO: DRY this out. reusing normal patch here negatively affects V8's JIT
function hydrate(vnode, withEl) {
	if (vnode.el == null) {
		if (vnode.type === ELEMENT) {
			vnode.el = withEl || createElement(vnode.tag, vnode.ns);

		//	if (vnode.tag === "svg")
		//		vnode.el.setAttributeNS(XML_NS, 'xmlns:xlink', XLINK_NS);

			if (vnode.attrs != null)
				{ patchAttrs(vnode, emptyObj, true); }

			if ((vnode.flags & LAZY_LIST) === LAZY_LIST)	// vnode.body instanceof LazyList
				{ vnode.body.body(vnode); }

			if (isArr(vnode.body))
				{ hydrateBody(vnode); }
			else if (vnode.body != null && vnode.body !== "")
				{ vnode.el.textContent = vnode.body; }
		}
		else if (vnode.type === TEXT)
			{ vnode.el = withEl || createTextNode(vnode.body); }
		else if (vnode.type === COMMENT)
			{ vnode.el = withEl || createComment(vnode.body); }
	}

	vnode.el._node = vnode;

	return vnode.el;
}

// prevent GCC from inlining some large funcs (which negatively affects Chrome's JIT)
//window.syncChildren = syncChildren;
window.lisMove = lisMove;

function nextNode(node, body) {
	return body[node.idx + 1];
}

function prevNode(node, body) {
	return body[node.idx - 1];
}

function parentNode(node) {
	return node.parent;
}

var BREAK = 1;
var BREAK_ALL = 2;

function syncDir(advSib, advNode, insert, sibName, nodeName, invSibName, invNodeName, invInsert) {
	return function(node, parEl, body, state, convTest, lis) {
		var sibNode, tmpSib;

		if (state[sibName] != null) {
			// skip dom elements not created by domvm
			if ((sibNode = state[sibName]._node) == null) {
				state[sibName] = advSib(state[sibName]);
				return;
			}

			if (parentNode(sibNode) !== node) {
				tmpSib = advSib(state[sibName]);
				sibNode.vm != null ? sibNode.vm.unmount(true) : removeChild(parEl, state[sibName]);
				state[sibName] = tmpSib;
				return;
			}
		}

		if (state[nodeName] == convTest)
			{ return BREAK_ALL; }
		else if (state[nodeName].el == null) {
			insert(parEl, hydrate(state[nodeName]), state[sibName]);	// should lis be updated here?
			state[nodeName] = advNode(state[nodeName], body);		// also need to advance sib?
		}
		else if (state[nodeName].el === state[sibName]) {
			state[nodeName] = advNode(state[nodeName], body);
			state[sibName] = advSib(state[sibName]);
		}
		// head->tail or tail->head
		else if (!lis && sibNode === state[invNodeName]) {
			tmpSib = state[sibName];
			state[sibName] = advSib(tmpSib);
			invInsert(parEl, tmpSib, state[invSibName]);
			state[invSibName] = tmpSib;
		}
		else {
			if (lis && state[sibName] != null)
				{ return lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state); }

			return BREAK;
		}
	};
}

function lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state) {
	if (sibNode._lis) {
		insert(parEl, state[nodeName].el, state[sibName]);
		state[nodeName] = advNode(state[nodeName], body);
	}
	else {
		// find closest tomb
		var t = binaryFindLarger(sibNode.idx, state.tombs);
		sibNode._lis = true;
		var tmpSib = advSib(state[sibName]);
		insert(parEl, state[sibName], t != null ? body[state.tombs[t]].el : t);

		if (t == null)
			{ state.tombs.push(sibNode.idx); }
		else
			{ state.tombs.splice(t, 0, sibNode.idx); }

		state[sibName] = tmpSib;
	}
}

var syncLft = syncDir(nextSib, nextNode, insertBefore, "lftSib", "lftNode", "rgtSib", "rgtNode", insertAfter);
var syncRgt = syncDir(prevSib, prevNode, insertAfter, "rgtSib", "rgtNode", "lftSib", "lftNode", insertBefore);

function syncChildren(node, donor) {
	var obody	= donor.body,
		parEl	= node.el,
		body	= node.body,
		state = {
			lftNode:	body[0],
			rgtNode:	body[body.length - 1],
			lftSib:		((obody)[0] || emptyObj).el,
			rgtSib:		(obody[obody.length - 1] || emptyObj).el,
		};

	converge:
	while (1) {
//		from_left:
		while (1) {
			var l = syncLft(node, parEl, body, state, null, false);
			if (l === BREAK) { break; }
			if (l === BREAK_ALL) { break converge; }
		}

//		from_right:
		while (1) {
			var r = syncRgt(node, parEl, body, state, state.lftNode, false);
			if (r === BREAK) { break; }
			if (r === BREAK_ALL) { break converge; }
		}

		sortDOM(node, parEl, body, state);
		break;
	}
}

// TODO: also use the state.rgtSib and state.rgtNode bounds, plus reduce LIS range
function sortDOM(node, parEl, body, state) {
	var kids = Array.prototype.slice.call(parEl.childNodes);
	var domIdxs = [];

	for (var k = 0; k < kids.length; k++) {
		var n = kids[k]._node;

		if (n.parent === node)
			{ domIdxs.push(n.idx); }
	}

	// list of non-movable vnode indices (already in correct order in old dom)
	var tombs = longestIncreasingSubsequence(domIdxs).map(function (i) { return domIdxs[i]; });

	for (var i = 0; i < tombs.length; i++)
		{ body[tombs[i]]._lis = true; }

	state.tombs = tombs;

	while (1) {
		var r = syncLft(node, parEl, body, state, null, true);
		if (r === BREAK_ALL) { break; }
	}
}

function alreadyAdopted(vnode) {
	return vnode.el._node.parent !== vnode.parent;
}

function takeSeqIndex(n, obody, fromIdx) {
	return obody[fromIdx];
}

function findSeqThorough(n, obody, fromIdx) {		// pre-tested isView?
	for (; fromIdx < obody.length; fromIdx++) {
		var o = obody[fromIdx];

		if (o.vm != null) {
			// match by key & viewFn || vm
			if (n.type === VVIEW && o.vm.view === n.view && o.vm.key === n.key || n.type === VMODEL && o.vm === n.vm)
				{ return o; }
		}
		else if (!alreadyAdopted(o) && n.tag === o.tag && n.type === o.type && n.key === o.key && (n.flags & ~DEEP_REMOVE) === (o.flags & ~DEEP_REMOVE))
			{ return o; }
	}

	return null;
}

function findHashKeyed(n, obody, fromIdx) {
	return obody[obody._keys[n.key]];
}

/*
// list must be a sorted list of vnodes by key
function findBinKeyed(n, list) {
	var idx = binaryKeySearch(list, n.key);
	return idx > -1 ? list[idx] : null;
}
*/

// have it handle initial hydrate? !donor?
// types (and tags if ELEM) are assumed the same, and donor exists
function patch(vnode, donor) {
	fireHook(donor.hooks, "willRecycle", donor, vnode);

	var el = vnode.el = donor.el;

	var obody = donor.body;
	var nbody = vnode.body;

	el._node = vnode;

	// "" => ""
	if (vnode.type === TEXT && nbody !== obody) {
		el.nodeValue = nbody;
		return;
	}

	if (vnode.attrs != null || donor.attrs != null)
		{ patchAttrs(vnode, donor, false); }

	// patch events

	var oldIsArr = isArr(obody);
	var newIsArr = isArr(nbody);
	var lazyList = (vnode.flags & LAZY_LIST) === LAZY_LIST;

//	var nonEqNewBody = nbody != null && nbody !== obody;

	if (oldIsArr) {
		// [] => []
		if (newIsArr || lazyList)
			{ patchChildren(vnode, donor); }
		// [] => "" | null
		else if (nbody !== obody) {
			if (nbody != null)
				{ el.textContent = nbody; }
			else
				{ clearChildren(donor); }
		}
	}
	else {
		// "" | null => []
		if (newIsArr) {
			clearChildren(donor);
			hydrateBody(vnode);
		}
		// "" | null => "" | null
		else if (nbody !== obody) {
			if (el.firstChild)
				{ el.firstChild.nodeValue = nbody; }
			else
				{ el.textContent = nbody; }
		}
	}

	fireHook(donor.hooks, "didRecycle", donor, vnode);
}

// larger qtys of KEYED_LIST children will use binary search
//const SEQ_FAILS_MAX = 100;

// TODO: modify vtree matcher to work similar to dom reconciler for keyed from left -> from right -> head/tail -> binary
// fall back to binary if after failing nri - nli > SEQ_FAILS_MAX
// while-advance non-keyed fromIdx
// [] => []
function patchChildren(vnode, donor) {
	var nbody		= vnode.body,
		nlen		= nbody.length,
		obody		= donor.body,
		olen		= obody.length,
		isLazy		= (vnode.flags & LAZY_LIST) === LAZY_LIST,
		isFixed		= (vnode.flags & FIXED_BODY) === FIXED_BODY,
		isKeyed		= (vnode.flags & KEYED_LIST) === KEYED_LIST,
		domSync		= !isFixed && vnode.type === ELEMENT,
		doFind		= true,
		find		= (
			isKeyed ? findHashKeyed :				// keyed lists/lazyLists
			isFixed || isLazy ? takeSeqIndex :		// unkeyed lazyLists and FIXED_BODY
			findSeqThorough							// more complex stuff
		);

	if (isKeyed) {
		var keys = {};
		for (var i = 0; i < obody.length; i++)
			{ keys[obody[i].key] = i; }
		obody._keys = keys;
	}

	if (domSync && nlen === 0) {
		clearChildren(donor);
		if (isLazy)
			{ vnode.body = []; }	// nbody.tpl(all);
		return;
	}

	var donor2,
		node2,
		foundIdx,
		patched = 0,
		everNonseq = false,
		fromIdx = 0;		// first unrecycled node (search head)

	if (isLazy) {
		var fnode2 = {key: null};
		var nbodyNew = Array(nlen);
	}

	for (var i = 0; i < nlen; i++) {
		if (isLazy) {
			var remake = false;
			var diffRes = null;

			if (doFind) {
				if (isKeyed)
					{ fnode2.key = nbody.key(i); }

				donor2 = find(fnode2, obody, fromIdx);
			}

			if (donor2 != null) {
                foundIdx = donor2.idx;
				diffRes = nbody.diff(i, donor2);

				// diff returns same, so cheaply adopt vnode without patching
				if (diffRes === true) {
					node2 = donor2;
					node2.parent = vnode;
					node2.idx = i;
					node2._lis = false;
				}
				// diff returns new diffVals, so generate new vnode & patch
				else
					{ remake = true; }
			}
			else
				{ remake = true; }

			if (remake) {
				node2 = nbody.tpl(i);			// what if this is a VVIEW, VMODEL, injected element?
				preProc(node2, vnode, i);

				node2._diff = diffRes != null ? diffRes : nbody.diff(i);

				if (donor2 != null)
					{ patch(node2, donor2); }
			}
			else {
				// TODO: flag tmp FIXED_BODY on unchanged nodes?

				// domSync = true;		if any idx changes or new nodes added/removed
			}

			nbodyNew[i] = node2;
		}
		else {
			var node2 = nbody[i];
			var type2 = node2.type;

			// ELEMENT,TEXT,COMMENT
			if (type2 <= COMMENT) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {
					patch(node2, donor2);
					foundIdx = donor2.idx;
				}
			}
			else if (type2 === VVIEW) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {		// update/moveTo
					foundIdx = donor2.idx;
					var vm = donor2.vm._update(node2.data, vnode, i);		// withDOM
				}
				else
					{ var vm = createView(node2.view, node2.data, node2.key, node2.opts)._redraw(vnode, i, false); }	// createView, no dom (will be handled by sync below)

				type2 = vm.node.type;
			}
			else if (type2 === VMODEL) {
				// if the injected vm has never been rendered, this vm._update() serves as the
				// initial vtree creator, but must avoid hydrating (creating .el) because syncChildren()
				// which is responsible for mounting below (and optionally hydrating), tests .el presence
				// to determine if hydration & mounting are needed
				var withDOM = isHydrated(node2.vm);

				var vm = node2.vm._update(node2.data, vnode, i, withDOM);
				type2 = vm.node.type;
			}
		}

		// found donor & during a sequential search ...at search head
		if (!isKeyed && donor2 != null) {
			if (foundIdx === fromIdx) {
				// advance head
				fromIdx++;
				// if all old vnodes adopted and more exist, stop searching
				if (fromIdx === olen && nlen > olen) {
					// short-circuit find, allow loop just create/init rest
					donor2 = null;
					doFind = false;
				}
			}
			else
				{ everNonseq = true; }

			if (olen > 100 && everNonseq && ++patched % 10 === 0)
				{ while (fromIdx < olen && alreadyAdopted(obody[fromIdx]))
					{ fromIdx++; } }
		}
	}

	// replace List w/ new body
	if (isLazy)
		{ vnode.body = nbodyNew; }

	domSync && syncChildren(vnode, donor);
}

// view + key serve as the vm's unique identity
function ViewModel(view, data, key, opts) {
	var vm = this;

	vm.view = view;
	vm.data = data;
	vm.key = key;

	if (opts) {
		vm.opts = opts;
		vm.config(opts);
	}

	var out = isPlainObj(view) ? view : view.call(vm, vm, data, key, opts);

	if (isFunc(out))
		{ vm.render = out; }
	else {
		vm.render = out.render;
		vm.config(out);
	}

	// these must be wrapped here since they're debounced per view
	vm._redrawAsync = raft(function (_) { return vm.redraw(true); });
	vm._updateAsync = raft(function (newData) { return vm.update(newData, true); });

	vm.init && vm.init.call(vm, vm, vm.data, vm.key, opts);
}

var ViewModelProto = ViewModel.prototype = {
	constructor: ViewModel,

	_diff:	null,	// diff cache

	init:	null,
	view:	null,
	key:	null,
	data:	null,
	state:	null,
	api:	null,
	opts:	null,
	node:	null,
	hooks:	null,
	onevent: noop,
	refs:	null,
	render:	null,

	mount: mount,
	unmount: unmount,
	config: function(opts) {
		var t = this;

		if (opts.init)
			{ t.init = opts.init; }
		if (opts.diff)
			{ t.diff = opts.diff; }
		if (opts.onevent)
			{ t.onevent = opts.onevent; }

		// maybe invert assignment order?
		if (opts.hooks)
			{ t.hooks = assignObj(t.hooks || {}, opts.hooks); }

		{
			if (opts.onemit)
				{ t.onemit = assignObj(t.onemit || {}, opts.onemit); }
		}
	},
	parent: function() {
		return getVm(this.node.parent);
	},
	root: function() {
		var p = this.node;

		while (p.parent)
			{ p = p.parent; }

		return p.vm;
	},
	redraw: function(sync) {
		var vm = this;
		sync ? vm._redraw(null, null, isHydrated(vm)) : vm._redrawAsync();
		return vm;
	},
	update: function(newData, sync) {
		var vm = this;
		sync ? vm._update(newData, null, null, isHydrated(vm)) : vm._updateAsync(newData);
		return vm;
	},

	_update: updateSync,
	_redraw: redrawSync,
	_redrawAsync: null,
	_updateAsync: null,
};

function mount(el, isRoot) {
	var vm = this;

	if (isRoot) {
		clearChildren({el: el, flags: 0});

		vm._redraw(null, null, false);

		// if placeholder node doesnt match root tag
		if (el.nodeName.toLowerCase() !== vm.node.tag) {
			hydrate(vm.node);
			insertBefore(el.parentNode, vm.node.el, el);
			el.parentNode.removeChild(el);
		}
		else
			{ insertBefore(el.parentNode, hydrate(vm.node, el), el); }
	}
	else {
		vm._redraw(null, null);

		if (el)
			{ insertBefore(el, vm.node.el); }
	}

	if (el)
		{ drainDidHooks(vm); }

	return vm;
}

// asSub means this was called from a sub-routine, so don't drain did* hook queue
function unmount(asSub) {
	var vm = this;

	var node = vm.node;
	var parEl = node.el.parentNode;

	// edge bug: this could also be willRemove promise-delayed; should .then() or something to make sure hooks fire in order
	removeChild(parEl, node.el);

	if (!asSub)
		{ drainDidHooks(vm); }
}

function reParent(vm, vold, newParent, newIdx) {
	if (newParent != null) {
		newParent.body[newIdx] = vold;
		vold.idx = newIdx;
		vold.parent = newParent;
		vold._lis = false;
	}
	return vm;
}

function redrawSync(newParent, newIdx, withDOM) {
	var isRedrawRoot = newParent == null;
	var vm = this;
	var isMounted = vm.node && vm.node.el && vm.node.el.parentNode;

	var vold = vm.node, oldDiff, newDiff;

	if (vm.diff != null) {
		oldDiff = vm._diff;
		vm._diff = newDiff = vm.diff(vm, vm.data);

		if (vold != null) {
			var cmpFn = isArr(oldDiff) ? cmpArr : cmpObj;
			var isSame = oldDiff === newDiff || cmpFn(oldDiff, newDiff);

			if (isSame)
				{ return reParent(vm, vold, newParent, newIdx); }
		}
	}

	isMounted && fireHook(vm.hooks, "willRedraw", vm, vm.data);

	var vnew = vm.render.call(vm, vm, vm.data, oldDiff, newDiff);

	if (vnew === vold)
		{ return reParent(vm, vold, newParent, newIdx); }

	// todo: test result of willRedraw hooks before clearing refs
	vm.refs = null;

	// always assign vm key to root vnode (this is a de-opt)
	if (vm.key != null && vnew.key !== vm.key)
		{ vnew.key = vm.key; }

	vm.node = vnew;

	if (newParent) {
		preProc(vnew, newParent, newIdx, vm);
		newParent.body[newIdx] = vnew;
	}
	else if (vold && vold.parent) {
		preProc(vnew, vold.parent, vold.idx, vm);
		vold.parent.body[vold.idx] = vnew;
	}
	else
		{ preProc(vnew, null, null, vm); }

	if (withDOM !== false) {
		if (vold) {
			// root node replacement
			if (vold.tag !== vnew.tag || vold.key !== vnew.key) {
				// hack to prevent the replacement from triggering mount/unmount
				vold.vm = vnew.vm = null;

				var parEl = vold.el.parentNode;
				var refEl = nextSib(vold.el);
				removeChild(parEl, vold.el);
				insertBefore(parEl, hydrate(vnew), refEl);

				// another hack that allows any higher-level syncChildren to set
				// reconciliation bounds using a live node
				vold.el = vnew.el;

				// restore
				vnew.vm = vm;
			}
			else
				{ patch(vnew, vold); }
		}
		else
			{ hydrate(vnew); }
	}

	isMounted && fireHook(vm.hooks, "didRedraw", vm, vm.data);

	if (isRedrawRoot && isMounted)
		{ drainDidHooks(vm); }

	return vm;
}

// this also doubles as moveTo
// TODO? @withRedraw (prevent redraw from firing)
function updateSync(newData, newParent, newIdx, withDOM) {
	var vm = this;

	if (newData != null) {
		if (vm.data !== newData) {
			fireHook(vm.hooks, "willUpdate", vm, newData);
			vm.data = newData;

			
		}
	}

	return vm._redraw(newParent, newIdx, withDOM);
}

function defineElement(tag, arg1, arg2, flags) {
	var attrs, body;

	if (arg2 == null) {
		if (isPlainObj(arg1))
			{ attrs = arg1; }
		else
			{ body = arg1; }
	}
	else {
		attrs = arg1;
		body = arg2;
	}

	return initElementNode(tag, attrs, body, flags);
}

//export const XML_NS = "http://www.w3.org/2000/xmlns/";
var SVG_NS = "http://www.w3.org/2000/svg";

function defineSvgElement(tag, arg1, arg2, flags) {
	var n = defineElement(tag, arg1, arg2, flags);
	n.ns = SVG_NS;
	return n;
}

function defineComment(body) {
	var node = new VNode;
	node.type = COMMENT;
	node.body = body;
	return node;
}

// placeholder for declared views
function VView(view, data, key, opts) {
	this.view = view;
	this.data = data;
	this.key = key;
	this.opts = opts;
}

VView.prototype = {
	constructor: VView,

	type: VVIEW,
	view: null,
	data: null,
	key: null,
	opts: null,
};

function defineView(view, data, key, opts) {
	return new VView(view, data, key, opts);
}

// placeholder for injected ViewModels
function VModel(vm) {
	this.vm = vm;
}

VModel.prototype = {
	constructor: VModel,

	type: VMODEL,
	vm: null,
};

function injectView(vm) {
//	if (vm.node == null)
//		vm._redraw(null, null, false);

//	return vm.node;

	return new VModel(vm);
}

function injectElement(el) {
	var node = new VNode;
	node.type = ELEMENT;
	node.el = node.key = el;
	return node;
}

function lazyList(items, cfg) {
	var len = items.length;

	var self = {
		items: items,
		length: len,
		// defaults to returning item identity (or position?)
		key: function(i) {
			return cfg.key(items[i], i);
		},
		// default returns 0?
		diff: function(i, donor) {
			var newVals = cfg.diff(items[i], i);
			if (donor == null)
				{ return newVals; }
			var oldVals = donor._diff;
			var same = newVals === oldVals || isArr(oldVals) ? cmpArr(newVals, oldVals) : cmpObj(newVals, oldVals);
			return same || newVals;
		},
		tpl: function(i) {
			return cfg.tpl(items[i], i);
		},
		map: function(tpl) {
			cfg.tpl = tpl;
			return self;
		},
		body: function(vnode) {
			var nbody = Array(len);

			for (var i = 0; i < len; i++) {
				var vnode2 = self.tpl(i);

			//	if ((vnode.flags & KEYED_LIST) === KEYED_LIST && self. != null)
			//		vnode2.key = getKey(item);

				vnode2._diff = self.diff(i);			// holds oldVals for cmp

				nbody[i] = vnode2;

				// run preproc pass (should this be just preProc in above loop?) bench
				preProc(vnode2, vnode, i);
			}

			// replace List with generated body
			vnode.body = nbody;
		}
	};

	return self;
}

var nano = {
	config: config,

	ViewModel: ViewModel,
	VNode: VNode,

	createView: createView,

	defineElement: defineElement,
	defineSvgElement: defineSvgElement,
	defineText: defineText,
	defineComment: defineComment,
	defineView: defineView,

	injectView: injectView,
	injectElement: injectElement,

	lazyList: lazyList,

	FIXED_BODY: FIXED_BODY,
	DEEP_REMOVE: DEEP_REMOVE,
	KEYED_LIST: KEYED_LIST,
	LAZY_LIST: LAZY_LIST,
};

function protoPatch(n, doRepaint) {
	patch$1(this, n, doRepaint);
}

// newNode can be either {class: style: } or full new VNode
// will/didPatch hooks?
function patch$1(o, n, doRepaint) {
	if (n.type != null) {
		// no full patching of view roots, just use redraw!
		if (o.vm != null)
			{ return; }

		preProc(n, o.parent, o.idx, null);
		o.parent.body[o.idx] = n;
		patch(n, o);
		doRepaint && repaint(n);
		drainDidHooks(getVm(n));
	}
	else {
		// TODO: re-establish refs

		// shallow-clone target
		var donor = Object.create(o);
		// fixate orig attrs
		donor.attrs = assignObj({}, o.attrs);
		// assign new attrs into live targ node
		var oattrs = assignObj(o.attrs, n);
		// prepend any fixed shorthand class
		if (o._class != null) {
			var aclass = oattrs.class;
			oattrs.class = aclass != null && aclass !== "" ? o._class + " " + aclass : o._class;
		}

		patchAttrs(o, donor);

		doRepaint && repaint(o);
	}
}

VNodeProto.patch = protoPatch;

function nextSubVms(n, accum) {
	var body = n.body;

	if (isArr(body)) {
		for (var i = 0; i < body.length; i++) {
			var n2 = body[i];

			if (n2.vm != null)
				{ accum.push(n2.vm); }
			else
				{ nextSubVms(n2, accum); }
		}
	}

	return accum;
}

function defineElementSpread(tag) {
	var args = arguments;
	var len = args.length;
	var body, attrs;

	if (len > 1) {
		var bodyIdx = 1;

		if (isPlainObj(args[1])) {
			attrs = args[1];
			bodyIdx = 2;
		}

		if (len === bodyIdx + 1 && (isVal(args[bodyIdx]) || isArr(args[bodyIdx]) || attrs && (attrs._flags & LAZY_LIST) === LAZY_LIST))
			{ body = args[bodyIdx]; }
		else
			{ body = sliceArgs(args, bodyIdx); }
	}

	return initElementNode(tag, attrs, body);
}

function defineSvgElementSpread() {
	var n = defineElementSpread.apply(null, arguments);
	n.ns = SVG_NS;
	return n;
}

ViewModelProto.emit = emit;
ViewModelProto.onemit = null;

ViewModelProto.body = function() {
	return nextSubVms(this.node, []);
};

nano.defineElementSpread = defineElementSpread;
nano.defineSvgElementSpread = defineSvgElementSpread;

return nano;

})));
//# sourceMappingURL=domvm.micro.js.map


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spreadsheet = void 0;
var ts_colorpicker_1 = __webpack_require__(63);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var html_1 = __webpack_require__(4);
var view_1 = __webpack_require__(8);
var ts_data_1 = __webpack_require__(13);
var ts_grid_1 = __webpack_require__(52);
var ts_layout_1 = __webpack_require__(16);
var ts_toolbar_1 = __webpack_require__(33);
var ts_menu_1 = __webpack_require__(171);
var ActionsManager_1 = __webpack_require__(41);
var context_1 = __webpack_require__(200);
var menu_1 = __webpack_require__(201);
var toolbar_1 = __webpack_require__(202);
var EditLine_1 = __webpack_require__(203);
var actions_1 = __webpack_require__(29);
var buffer_1 = __webpack_require__(205);
var CustomCsvDriver_1 = __webpack_require__(206);
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
var selection_1 = __webpack_require__(58);
var toolbar_2 = __webpack_require__(42);
var newKeyManager_1 = __webpack_require__(207);
var en_1 = __webpack_require__(11);
var Selection_1 = __webpack_require__(208);
var DateEditor_1 = __webpack_require__(209);
var types_1 = __webpack_require__(6);
var ts_popup_1 = __webpack_require__(10);
var ts_navbar_1 = __webpack_require__(23);
var core_1 = __webpack_require__(0);
var Exporter_1 = __webpack_require__(210);
var XlsxDriver_1 = __webpack_require__(211);
var FileProxy_1 = __webpack_require__(212);
var math_1 = __webpack_require__(213);
var muon_1 = __webpack_require__(25);
var types_2 = __webpack_require__(43);
var ts_window_1 = __webpack_require__(44);
var hotkeys_1 = __webpack_require__(217);
var FocusManager_1 = __webpack_require__(19);
var date_1 = __webpack_require__(28);
var date_2 = __webpack_require__(18);
var SelectEditor_1 = __webpack_require__(218);
var TimeEditor_1 = __webpack_require__(219);
var ValidationForm_1 = __webpack_require__(220);
var SearchForm_1 = __webpack_require__(249);
var ts_message_1 = __webpack_require__(17);
var LinkForm_1 = __webpack_require__(250);
var FilterForm_1 = __webpack_require__(251);
var Merge_1 = __webpack_require__(252);
var Cells_1 = __webpack_require__(31);
var defaultLocalization = {
    decimal: ".",
    thousands: ",",
    currency: "$",
    dateFormat: "%d/%m/%Y",
    timeFormat: 12,
};
var Spreadsheet = /** @class */ (function (_super) {
    __extends(Spreadsheet, _super);
    function Spreadsheet(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.container = container === null ? container : (0, html_1.toNode)(container);
        _this._sizes = {
            rowsCount: 1000,
            colsCount: 200,
        };
        _this._editors = {};
        _this.config = (0, main_1.extendConfig)({
            rowsCount: { validate: function (val) { return val >= 0; }, default: 1000 },
            colsCount: { validate: function (val) { return val >= 0; }, default: 26 },
            menu: { validate: function (val) { return typeof val === "boolean"; }, default: false },
            editLine: {
                validate: function (val) { return typeof val === "boolean"; },
                default: true,
            },
            readonly: {
                validate: function (val) { return typeof val === "boolean"; },
                default: false,
            },
            autoFormat: {
                validate: function (val) { return typeof val === "boolean"; },
                default: true,
            },
            importModulePath: {
                validate: function (val) { return typeof val === "string"; },
                default: "https://cdn.dhtmlx.com/libs/excel2json/1.3/worker.js?vx",
            },
            exportModulePath: {
                validate: function (val) { return typeof val === "string"; },
                default: "https://cdn.dhtmlx.com/libs/json2excel/1.2/worker.js?vx",
            },
            multiSheets: { validate: function (val) { return typeof val === "boolean"; }, default: true },
            // dateFormat: { validate: val => typeof val === "string", default: "%d/%m/%Y" },
            // timeFormat: { validate: val => typeof val === "number", default: 12 },
            formats: { validate: function (val) { return val instanceof Array; }, default: [] },
        }, _this.config);
        var localization = __assign(__assign(__assign({}, defaultLocalization), { dateFormat: _this.config.dateFormat || defaultLocalization.dateFormat, timeFormat: (_this.config.timeFormat || defaultLocalization.timeFormat) }), _this.config.localization);
        _this.config.localization = localization;
        _this._range = { cell: "", mode: 0, cursor: 0, editor: null, inline: 0 };
        _this.events = new events_1.EventSystem();
        (0, format_1.initFormat)(_this, _this.config.localization);
        _this._initLayout();
        _this._colorpicker = new ts_colorpicker_1.Colorpicker(null);
        _this._colorpickerPopup = new ts_popup_1.Popup();
        _this._colorpickerPopup.attach(_this._colorpicker);
        _this._linkForm = new LinkForm_1.LinkForm(_this._grid, _this.insertLink.bind(_this), _this.events);
        _this._setEventsHandlers();
        _this._actionsManager = new ActionsManager_1.ActionsManager({
            spreadsheet: _this,
            editLine: _this._editLine,
            grid: _this._grid,
            dataStore: _this._dataStore,
            events: _this.events,
        });
        _this._buffer = new buffer_1.BufferManager(_this, _this._grid, 
        // eslint-disable-next-line @typescript-eslint/unbound-method
        _this._callAction, _this._activePage, _this._dataStore);
        dhx.css.add({
            textDecoration: "underline",
            color: "#163FA2",
        }, "dhx_spreadsheet_link");
        _this.selection = new Selection_1.Selection(_this, _this._grid, _this._buffer, _this._activePage);
        var gridRoot = _this._grid.getRootView();
        gridRoot.hooks = gridRoot.hooks || {};
        gridRoot.hooks.didMount = function (vm) {
            _this._updateGridSizes();
            var cell = _this.selection.getFocusedCell();
            var val = _this.getValue(cell);
            _this._editLine.setValue(val);
            if (!_this.config.readonly) {
                vm.node.el.addEventListener("contextmenu", function (e) {
                    _this.contextMenu.data.update("lock", {
                        value: _this.isLocked(_this.selection.getSelectedCell())
                            ? en_1.default.unlockCell
                            : en_1.default.lockCell,
                    });
                    _this._contextMenuVisible = true;
                    _this.contextMenu.showAt(e);
                    e.preventDefault();
                });
            }
            // [todo] move to layout didMount event
            _this.container = _this._layout.getRootView().node.el;
            gridRoot.hooks.didRedraw = function (view) {
                _this.events.fire(types_1.SpreadsheetEvents.gridRedraw, [view]);
            };
        };
        _this._initHotkeys();
        var tabbarRoot = _this._tabbar.getRootView();
        tabbarRoot.hooks = tabbarRoot.hooks || {};
        var addContextListener = function (vm) {
            vm.node.el.addEventListener("contextmenu", function (e) {
                _this.endEdit();
                var id = (0, html_1.locate)(e);
                if (id && id !== "add-sheet" && !_this.config.readonly) {
                    var sheetsLength = _this._sheets.getLength();
                    var contextData = _this.sheetContextMenu.data;
                    if (_this.config.multiSheets && sheetsLength === 2) {
                        contextData.update("delete", { disabled: true });
                    }
                    else if (_this.config.multiSheets &&
                        sheetsLength > 2 &&
                        contextData.getItem("delete").disabled) {
                        contextData.update("delete", { disabled: false });
                    }
                    _this.sheetContextMenu.showAt(e.target, "right");
                    _this._focusedSheet = id;
                    e.preventDefault();
                }
            });
        };
        tabbarRoot.hooks.didMount = function (vm) {
            vm.node &&
                vm.node.el &&
                vm.node.el.addEventListener("dblclick", function (e) {
                    var id = (0, html_1.locate)(e);
                    if (id && id !== "add-sheet" && !_this.config.readonly) {
                        e.preventDefault();
                        _this._focusedSheet = id;
                        _this.sheetContextMenu.events.fire(ts_navbar_1.NavigationBarEvents.click, ["rename", e]);
                        _this._awaitRedraw(function () { return FocusManager_1.focusManager.setFocusId(null); });
                    }
                });
            addContextListener(vm);
        };
        tabbarRoot.hooks.didRedraw = function (vm) { return addContextListener(vm); };
        _this._generateGridStruct();
        _this.export = new Exporter_1.Exporter(_this, _this._grid);
        var view = (0, dom_1.create)({ render: function () { return _this._render(); } });
        _this.mount(container, view);
        FocusManager_1.focusManager.setFocusId(_this._uid);
        _this._spanControl = new Merge_1.Merge(_this._callAction.bind(_this), _this.config, _this._grid, _this.isLocked.bind(_this));
        _this._filterForm = new FilterForm_1.FilterForm(_this._grid, _this.setFilter.bind(_this));
        return _this;
    }
    Spreadsheet.prototype.destructor = function () {
        var _a, _b;
        this.unmount();
        this._layout.unmount();
        this.contextMenu.destructor();
        this.menu.destructor();
        this.toolbar.destructor();
        this._editLine.destructor();
        this._tabbar.destructor();
        (_a = this._searchForm) === null || _a === void 0 ? void 0 : _a.destructor();
        (_b = this._linkForm) === null || _b === void 0 ? void 0 : _b.destructor();
    };
    Spreadsheet.prototype.paint = function () {
        if (this.config.rowsCount !== this._sizes.rowsCount ||
            this.config.colsCount !== this._sizes.colsCount) {
            this._generateGridStruct();
        }
        this._layout.paint();
        this._grid.paint();
    };
    Spreadsheet.prototype.load = function (url, type) {
        var _this = this;
        if (type === "xlsx" || (type === "json" && !url)) {
            if (!(0, main_1.isWasmSupported)()) {
                throw new Error("WebAssembly is not supported by your browser");
            }
            this._xlsxProxy = this._xlsxProxy || new FileProxy_1.FileProxy(this);
            return this._xlsxProxy.load(type, url).then(function (data) {
                _this.parse(data, type);
            });
        }
        var proxy = (0, ts_data_1.toProxy)(url);
        return proxy.load().then(function (data) {
            _this.parse(data, type);
        });
    };
    Spreadsheet.prototype.parse = function (data, type) {
        var _this = this;
        if (type === "csv") {
            type = new CustomCsvDriver_1.CustomCsvDriver(this._grid);
        }
        if (type === "xlsx") {
            type = new XlsxDriver_1.XlsxDriver();
        }
        this._sheets.forEach(function (sheet) {
            if (sheet.id !== "add-sheet") {
                _this._dataStore.removePage(sheet.value);
                _this._sheets.remove(sheet.id);
            }
        });
        var driver = (0, ts_data_1.toDataDriver)(type || "json");
        data = driver.toJsonArray(data, this._grid);
        this._grid.config.columns.map(function (col) {
            col.$cellCss = {};
        });
        var preparedData = {
            sheets: [],
        };
        var _a = this.config, multiSheets = _a.multiSheets, _b = _a.leftSplit, leftSplit = _b === void 0 ? -1 : _b, _d = _a.topSplit, topSplit = _d === void 0 ? -1 : _d, colsCount = _a.colsCount, rowsCount = _a.rowsCount;
        if ("sheets" in data) {
            for (var i = 0; i < (multiSheets ? data.sheets.length : 1); i++) {
                var sheet = data.sheets[i];
                sheet.name = sheet.name || this._generateNewSheetName();
                preparedData.sheets.push(sheet);
            }
        }
        else {
            if ("data" in data) {
                preparedData.sheets.push(__assign({ name: this._activeSheetName.name }, data));
            }
        }
        var multilineClasses = [];
        if ("styles" in data) {
            var styles = data.styles;
            for (var key in styles) {
                var css = styles[key];
                var converted = (0, main_1.convertStyles)(css);
                var className = dhx.css.add(__assign({ "white-space": "nowrap" }, converted), key);
                if (converted.multiline === "wrap") {
                    multilineClasses.push(className);
                }
            }
            dhx.css.update();
        }
        if (Array.isArray(data)) {
            preparedData.sheets.push({ data: data, name: this._generateNewSheetName() });
        }
        for (var _i = 0, _e = preparedData.sheets; _i < _e.length; _i++) {
            var sheet = _e[_i];
            this._dataStore.addPage(sheet.name);
            this._sheets.add({ value: sheet.name, id: sheet.id });
        }
        var _loop_1 = function (sheet) {
            var page = this_1._dataStore.getPage(sheet.name);
            var initData = __spreadArray([], sheet.data, true);
            var sheetData = [];
            while (initData.length) {
                sheetData.push(initData.splice(0, 1000));
            }
            var rowHeight = this_1._grid.config.rowHeight;
            var cols = sheet.cols || [];
            var rows = sheet.rows || [];
            while (rows.length < rowsCount) {
                rows.push({ height: rowHeight });
            }
            while (cols.length < colsCount) {
                cols.push({ width: 120 });
            }
            var merged = sheet.merged || [];
            if ((topSplit || leftSplit) && merged) {
                merged = merged.filter(function (span) { return (0, main_1.checkSpan)(span, leftSplit, topSplit, _this._grid); });
                merged = merged.map(function (span) {
                    var _a = span.to, toRow = _a.row, toColumn = _a.column;
                    return __assign(__assign({}, span), { to: {
                            row: toRow > rows.length ? rows.length : toRow,
                            column: toColumn > cols.length ? cols.length : toColumn,
                        } });
                });
            }
            page.setMeta({
                cols: cols,
                rows: rows,
                merged: merged,
            });
            sheetData.forEach(function (lazyData, index) {
                if (!index || sheetData.length - 1 === index) {
                    _this._parseCells(lazyData, page, multilineClasses);
                }
                else {
                    setTimeout(function () { return _this._parseCells(lazyData, page, multilineClasses); }, 100);
                }
            });
        };
        var this_1 = this;
        for (var _f = 0, _g = preparedData.sheets; _f < _g.length; _f++) {
            var sheet = _g[_f];
            _loop_1(sheet);
        }
        this._grid.data.events.fire(ts_data_1.DataEvents.change);
        this._changeSheet(this._sheets.getId(this.config.multiSheets && !this.config.readonly ? 1 : 0));
        this._grid.paint();
        if (this.config && !this.config.readonly) {
            this.selection.setSelectedCell("A1", false);
        }
    };
    Spreadsheet.prototype._parseCells = function (data, page, multilineClasses) {
        var _a, _b, _d;
        if (multilineClasses === void 0) { multilineClasses = []; }
        var _e = this.config.formats, formats = _e === void 0 ? [] : _e;
        var _loop_2 = function (i) {
            var cell = i.cell, rest = __rest(i, ["cell"]);
            var item = __assign({}, rest);
            var _f = (0, main_1.getCellIds)(cell.toUpperCase(), this_2._grid), row = _f.row, col = _f.col;
            var value = void 0;
            var format = void 0;
            var css = item.css || "";
            var isCorrectFormat = item.format === "General"
                ? formats.find(function (i) { return i.id === "common"; })
                : formats.find(function (i) { return i.id === item.format || i.mask === item.format; });
            var detectedFormat = __assign({}, (0, format_1.detectFormat)(item.value));
            format = __assign({}, (isCorrectFormat ? isCorrectFormat : detectedFormat));
            if (!isCorrectFormat && item.format) {
                format = __assign({}, ((0, format_1.addNewFormat)((0, main_1.analyzeMSOFormat)(item.format), this_2.toolbar.data, formats) ||
                    detectedFormat));
            }
            item.format = format.mask;
            var clean = (0, core_1.isDefined)(item.value) ? (0, format_1.getCleanValue)(item.value, format) : "";
            if (typeof item.css === "object") {
                item.css = item.css.join(" ");
            }
            var styles = (0, main_1.getStylesObject)(item.css);
            var $toolbarAlign = !!styles["text-align"];
            var isNumber = (0, format_1.isNumeric)(clean);
            if (((_a = item.link) === null || _a === void 0 ? void 0 : _a.href) ||
                (!isNumber && "".concat(clean).startsWith("http") && "".concat(clean).split(" ").length === 1)) {
                item.css = "dhx_spreadsheet_link ".concat(css);
            }
            if (item.css instanceof Array) {
                item.css = item.css.join(" ");
            }
            if (isNumber && (format === null || format === void 0 ? void 0 : format.mask) !== "@") {
                value = clean;
                if (format.id === "common" && item.value !== value) {
                    format.$value = item.value;
                }
                if (!$toolbarAlign) {
                    styles["text-align"] = "right";
                    item.css = dhx.css.add((0, main_1.convertStyles)(styles));
                }
            }
            else {
                value = (0, core_1.isDefined)(item.value) ? item.value : ((_b = item.link) === null || _b === void 0 ? void 0 : _b.text) || ((_d = item.link) === null || _d === void 0 ? void 0 : _d.href) || "";
            }
            var formatId = format.id;
            if ((formatId.includes("date") || formatId.includes("time")) && value) {
                if ((0, format_1.isNumeric)(value)) {
                    value = +value;
                }
                else if (value instanceof Date) {
                    value = (0, date_1.getExcelDateFromJs)(value);
                }
                else {
                    value = (0, date_1.getExcelDateFromString)(value, format);
                }
            }
            // [FIXME] can be optimized (later)
            // instead of checking triggers for each cell
            // we can force recalck of all formulas after full data loading
            // so things like SUM(A1:A100) will be calculated once, not 100 times
            page.setValue(row, col, value, format.mask === "@" ? 1 : 0);
            var href = (0, main_1.doesContainUrl)(value);
            var link = item.link || (href ? { href: href } : null);
            if (link && !link.text && value) {
                link.text = value;
            }
            var cellClass = item.css;
            delete item.value;
            page.setCell(row, col, __assign(__assign({}, item), { format: __assign({}, format), css: cellClass, editor: item.editor, link: link, $toolbarAlign: $toolbarAlign }));
            if (multilineClasses.includes(cellClass)) {
                (0, actions_1.setAutoHeightToRow)(cell.toUpperCase(), this_2._grid, page, "wrap");
            }
        };
        var this_2 = this;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var i = data_1[_i];
            _loop_2(i);
        }
    };
    Spreadsheet.prototype.serialize = function () {
        var _this = this;
        var styles = {};
        var sheets = [];
        this._sheets.forEach(function (item) {
            if (item.id === "add-sheet") {
                return;
            }
            var sheet = item.value;
            var page = _this._dataStore.getPage(sheet);
            var _a = page.getMeta(), _b = _a.cols, cols = _b === void 0 ? [] : _b, _d = _a.rows, rows = _d === void 0 ? [] : _d, _e = _a.merged, merged = _e === void 0 ? [] : _e;
            var _f = _this._activePage.getSize(), pageRows = _f[0], pageCols = _f[1];
            var serializedData = page.serialize(true);
            var preparedItem = {
                name: sheet,
                id: item.id,
                data: [],
                cols: cols.slice(0, pageCols).map(function (c) { return ({ width: c.width }); }),
                rows: rows.slice(0, pageRows).map(function (r) { return ({ height: r.height }); }),
                merged: merged,
            };
            var _loop_3 = function (item_1) {
                var cell = (0, main_1.getCellNameById)(_this._grid, (item_1[0] + 1).toString(), (item_1[1] + 1).toString());
                var cellMeta = item_1[2];
                if (cellMeta) {
                    var value = cellMeta.value, css = cellMeta.css, format = cellMeta.format, editor = cellMeta.editor;
                    var cellObj_1 = {};
                    Object.keys(cellMeta).forEach(function (key) {
                        if (!key.startsWith("$") && (0, core_1.isDefined)(cellMeta[key]) && key !== "cell")
                            cellObj_1[key] = cellMeta[key];
                    });
                    cellObj_1.cell = cell;
                    if (css) {
                        cellObj_1.css = css;
                        var classes = css.split(" ");
                        for (var _g = 0, classes_1 = classes; _g < classes_1.length; _g++) {
                            var className = classes_1[_g];
                            var style = dhx.css.get(className);
                            if (style)
                                styles[className] = dhx.css.get(className);
                        }
                    }
                    if ((0, core_1.isDefined)(format)) {
                        var formatObj = (0, format_1.getFormat)((0, format_1.getDefaultFormatsMap)()[format.mask]);
                        cellObj_1.format = (formatObj === null || formatObj === void 0 ? void 0 : formatObj.id) || format.id;
                    }
                    if (value || typeof value === "number") {
                        cellObj_1.value = value;
                    }
                    if (cell && (cellObj_1.value || typeof cellObj_1.value === "number" || css || editor)) {
                        preparedItem.data.push(cellObj_1);
                    }
                }
            };
            for (var _i = 0, serializedData_1 = serializedData; _i < serializedData_1.length; _i++) {
                var item_1 = serializedData_1[_i];
                _loop_3(item_1);
            }
            sheets.push(preparedItem);
        });
        return {
            sheets: sheets,
            styles: styles,
            formats: this.config.formats,
        };
    };
    Spreadsheet.prototype.setValue = function (cell, value) {
        if (!cell) {
            return;
        }
        this._checkForMissedCells(cell);
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeValueChange, [cell, value])) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        var id = (0, main_1.getCellIds)(cleanCell, this._grid);
        this._callAction({
            row: id.row,
            col: id.col,
            cell: cell,
            val: value,
            action: types_1.Actions.setCellValue,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
        this._grid.paint();
    };
    Spreadsheet.prototype.getValue = function (cell) {
        var _this = this;
        if (!cell) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        if ((0, main_1.isRangeId)(cell)) {
            var values_1 = [];
            this.eachCell(function (_c) {
                var id = (0, main_1.getCellIds)(_c, _this._grid);
                values_1.push(page.getValue(id.row, id.col));
            }, cell);
            return values_1;
        }
        var id = (0, main_1.getCellIds)(cell, this._grid);
        var val = page.getValue(id.row, id.col);
        return val;
    };
    Spreadsheet.prototype.getCellIndex = function (cell) {
        return (0, main_1.getCellIds)(cell, this._grid);
    };
    Spreadsheet.prototype.getFormula = function (cell) {
        var _this = this;
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        if ((0, main_1.isRangeId)(cell)) {
            var formulas_1 = [];
            this.eachCell(function (_c) {
                formulas_1.push(_this._getMath(_c, page) || "");
            }, cell);
            return formulas_1;
        }
        var formula = this._getMath(cell, page);
        return formula ? formula.source : "";
    };
    Spreadsheet.prototype.getSheets = function () {
        var sheets = [];
        this._sheets.forEach(function (item) {
            if (item.id !== "add-sheet") {
                sheets.push({ name: item.value, id: item.id });
            }
        });
        return sheets;
    };
    Spreadsheet.prototype._getMath = function (cell, page) {
        if (page === void 0) { page = this._activePage; }
        if (!cell) {
            return;
        }
        var _a = (0, main_1.getCellIds)(cell, this._grid), row = _a.row, col = _a.col;
        var cellId = (0, muon_1.toId)(row, col, page.getID());
        return this._math.getMath(cellId) || null;
    };
    Spreadsheet.prototype.eachCell = function (cb, range) {
        range = range || this.selection.getSelectedCell();
        var cells = (0, main_1.getCellsArray)(range, this._grid);
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            var _a = (0, main_1.getCellIds)(cell, this._grid), row = _a.row, col = _a.col;
            var val = this._activePage.getValue(row, col);
            cb(cell, val);
        }
    };
    Spreadsheet.prototype.getStyle = function (cell, linkStyles) {
        var _this = this;
        if (linkStyles === void 0) { linkStyles = true; }
        if (!cell) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        if ((0, main_1.isRangeId)(cell)) {
            var styles_1 = [];
            this.eachCell(function (c) {
                var info = (0, main_1.getCellInfo)(c, page, _this._grid);
                var css = [];
                if (info.css) {
                    css =
                        typeof info.css === "string"
                            ? info.css.split(linkStyles ? " " : "dhx_spreadsheet_link")
                            : [info.css];
                }
                var customCssStyles = {};
                for (var _i = 0, css_2 = css; _i < css_2.length; _i++) {
                    var classnName = css_2[_i];
                    customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(classnName));
                }
                styles_1.push(customCssStyles);
            }, cell);
            return styles_1;
        }
        var info = (0, main_1.getCellInfo)(cell, this._activePage, this._grid);
        var css = [];
        if (info.css) {
            css =
                typeof info.css === "string"
                    ? info.css.split(linkStyles ? " " : "dhx_spreadsheet_link").map(function (i) { return i.trim(); })
                    : [info.css];
        }
        var customCssStyles = {};
        for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
            var styles = css_1[_i];
            customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(styles));
        }
        return customCssStyles;
    };
    Spreadsheet.prototype.setStyle = function (cell, style) {
        if (!cell || !style) {
            return;
        }
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeStyleChange, [cell, style])) {
            return;
        }
        var _a = (0, main_1.getCellIds)(cell, this._grid), row = _a.row, col = _a.col;
        if (!Object.keys(style).length) {
            this._callAction({
                row: row,
                col: col,
                cell: cell,
                action: types_1.Actions.removeCellStyles,
                groupAction: types_1.Actions.groupAction,
                dataStore: this._dataStore,
            });
            return;
        }
        this._callAction({
            val: style,
            row: row,
            col: col,
            cell: cell,
            action: types_1.Actions.setCellStyle,
            groupAction: types_1.Actions.groupAction,
        });
    };
    Spreadsheet.prototype.setFilter = function (cell, filter) {
        if (cell && (0, main_1.isRangeId)(cell) && cell.includes(",")) {
            return;
        }
        this._callAction({
            val: filter,
            cell: cell !== null && cell !== void 0 ? cell : "A1",
            action: types_1.Actions.filter,
        });
    };
    Spreadsheet.prototype.getFilter = function (id) {
        var sheet = this._getSheet(id) || this.getActiveSheet();
        var page = this._dataStore.getPage(sheet.name);
        if (!page)
            return;
        var filter = page.getMeta().filter;
        return filter;
    };
    Spreadsheet.prototype.getFormat = function (cell) {
        var _this = this;
        var _a;
        if (!cell) {
            return;
        }
        var _b = this._parseCell(cell), page = _b.page, cleanCell = _b.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        if ((0, main_1.isRangeId)(cell)) {
            var formats_1 = [];
            this.eachCell(function (c) {
                var _a;
                formats_1.push(((_a = (0, main_1.getCellInfo)(c, page, _this._grid).format) === null || _a === void 0 ? void 0 : _a.id) || "common");
            }, cell);
            return formats_1;
        }
        var formatMask = (_a = (0, main_1.getCellInfo)(cell, page, this._grid).format) === null || _a === void 0 ? void 0 : _a.mask;
        var formatAlias = (0, format_1.getDefaultFormatsMap)()[formatMask];
        return formatAlias || formatMask;
    };
    Spreadsheet.prototype.setFormat = function (cell, format) {
        if (!cell) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        this._callAction({
            val: format,
            cell: cell,
            action: types_1.Actions.setCellFormat,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
    };
    Spreadsheet.prototype.clearSheet = function (id) {
        var sheet = this._getSheet(id) || this.getActiveSheet();
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetClear, [sheet])) {
            return;
        }
        this._callAction({
            val: sheet.name,
            action: types_1.Actions.clearSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterSheetClear, [sheet]);
    };
    Spreadsheet.prototype.clear = function () {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeClear, [])) {
            return;
        }
        this._callAction({
            action: types_1.Actions.clear,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterClear, []);
    };
    Spreadsheet.prototype.isLocked = function (cell) {
        var _this = this;
        if (!cell) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        var id = (0, main_1.getCellIds)(cell, this._grid);
        if ("start" in id) {
            var locked_1 = false;
            this.eachCell(function (cellId) {
                if (!locked_1) {
                    var info = (0, main_1.getCellInfo)(cellId, page, _this._grid).locked;
                    locked_1 = info;
                }
            }, cell);
            return locked_1;
        }
        var isLocked = (0, main_1.getCellInfo)(cell, page, this._grid).locked;
        return !!isLocked;
    };
    Spreadsheet.prototype.lock = function (cell) {
        if (!cell) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        var id = (0, main_1.getCellIds)(cell, this._grid);
        this._callAction({
            row: id.row,
            col: id.col,
            val: true,
            cell: cell,
            action: types_1.Actions.lockCell,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
        this._grid.paint();
    };
    Spreadsheet.prototype.unlock = function (cell) {
        if (!cell) {
            return;
        }
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        var id = (0, main_1.getCellIds)(cell, this._grid);
        this._callAction({
            row: id.row,
            col: id.col,
            val: false,
            cell: cell,
            action: types_1.Actions.lockCell,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
        this._grid.paint();
    };
    Spreadsheet.prototype.addRow = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeRowAdd, [cell])) {
            return;
        }
        if ((0, main_1.isRangeId)(cell)) {
            cell = cell.split(":")[0];
        }
        this._callAction({
            cell: cell,
            action: types_1.Actions.addRow,
            groupAction: types_1.Actions.groupRowAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterRowAdd, [cell]);
    };
    Spreadsheet.prototype.deleteRow = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeRowDelete, [cell])) {
            return;
        }
        var id = (0, main_1.getCellIds)(cell, this._grid);
        this._callAction({
            row: id.row,
            col: id.col,
            cell: cell,
            action: types_1.Actions.deleteRow,
            groupAction: types_1.Actions.groupRowAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterRowDelete, [cell]);
    };
    Spreadsheet.prototype.addColumn = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeColumnAdd, [cell])) {
            return;
        }
        if ((0, main_1.isRangeId)(cell)) {
            cell = cell.split(":")[0];
        }
        this._callAction({
            cell: cell,
            action: types_1.Actions.addColumn,
            groupAction: types_1.Actions.groupColAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterColumnAdd, [cell]);
    };
    Spreadsheet.prototype.deleteColumn = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeColumnDelete, [cell])) {
            return;
        }
        this._callAction({
            cell: cell,
            action: types_1.Actions.deleteColumn,
            groupAction: types_1.Actions.groupColAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterColumnDelete, [cell]);
    };
    Spreadsheet.prototype.undo = function () {
        this._actionsManager.undo();
    };
    Spreadsheet.prototype.redo = function () {
        this._actionsManager.redo();
    };
    Spreadsheet.prototype.startEdit = function (cell, initialValue) {
        if (this.config.readonly || this._range.mode) {
            return;
        }
        if (this._editMode) {
            return this._editLine.setValueAtRedactor(initialValue);
        }
        var focused = this.selection.getFocusedCell();
        if (!cell) {
            cell = focused;
        }
        cell = cell.toUpperCase();
        this._checkForMissedCells(cell);
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeEditStart, [cell, initialValue])) {
            return;
        }
        if (this.isLocked(cell)) {
            return;
        }
        if (focused !== cell) {
            this.endEdit(true);
            this.selection.setSelectedCell(cell, false);
        }
        var _a = (0, main_1.getCellInfo)(cell, this._activePage, this._grid), edited = _a.edited, link = _a.link;
        if (!this.selection.getSelectedCell())
            this.selection.setSelectedCell(cell, false);
        if (link) {
            return this._showLinkPopup(cell);
        }
        if (!edited) {
            var _b = (0, main_1.getCellIds)(cell, this._grid), row = _b.row, col = _b.col;
            var cellId = (0, muon_1.toId)(row, col, this._activePage.getID());
            var math = this._math.getMath(cellId);
            var format = (0, main_1.getCellInfo)(cell, this._activePage, this._grid).format;
            if (math && !initialValue)
                initialValue = (0, format_1.getFormattedFormula)({ formula: "=" + math.source, format: format, store: this._math });
            this._activePage.setCell(row, col, {
                edited: true,
                nextValue: initialValue,
                editorValue: initialValue,
            });
            if (initialValue)
                this._editLine.setValue(initialValue);
            this.events.fire(types_1.SpreadsheetEvents.afterEditStart, [cell, initialValue]);
        }
    };
    Spreadsheet.prototype.endEdit = function (withoutSave) {
        var focused = this.selection.getFocusedCell();
        var _a = (0, main_1.getCellInfo)(focused, this._activePage, this._grid), edited = _a.edited, nextValue = _a.nextValue, format = _a.format, value = _a.value;
        if (edited) {
            if (!this.events.fire(types_1.SpreadsheetEvents.beforeEditEnd, [focused, nextValue])) {
                return;
            }
            if (nextValue) {
                this._activePage.setMeta({ inserted: true });
            }
            if (!withoutSave && nextValue !== undefined) {
                if ((format === null || format === void 0 ? void 0 : format.id.includes("time")) && (0, format_1.isNumeric)(value)) {
                    var nextDate = (0, date_1.timeStringToJS)(nextValue);
                    if (nextDate instanceof Date) {
                        var prevDate = (0, date_1.excelDateToJSDate)(value);
                        prevDate.setHours(nextDate.getHours(), nextDate.getMinutes(), nextDate.getSeconds());
                        nextValue = (0, date_1.getExcelDateFromJs)(prevDate);
                    }
                }
                var dateFormat = this.config.localization.dateFormat;
                if ((format === null || format === void 0 ? void 0 : format.id) === "date" && (0, format_1.isNumeric)(value) && (0, date_2.stringToDate)(nextValue, dateFormat, true)) {
                    var nextDate = (0, date_2.stringToDate)(nextValue, dateFormat);
                    var prevDate = (0, date_1.excelDateToJSDate)(value);
                    nextDate.setHours(prevDate.getHours(), prevDate.getMinutes(), prevDate.getSeconds());
                    nextValue = (0, date_1.getExcelDateFromJs)(nextDate);
                }
                this.setValue(focused, nextValue);
            }
            var _b = (0, main_1.getCellIds)(focused, this._grid), row = _b.row, col = _b.col;
            this._activePage.setCell(row, col, {
                nextValue: undefined,
                edited: false,
            });
            this._editLine.blur();
            this.events.fire(types_1.SpreadsheetEvents.afterEditEnd, [focused, nextValue]);
        }
    };
    Spreadsheet.prototype.addSheet = function (name) {
        if (!this.config.multiSheets)
            return;
        var newSheet = name;
        if (!newSheet) {
            newSheet = this._generateNewSheetName();
        }
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetAdd, [newSheet])) {
            return;
        }
        this._callAction({
            val: newSheet,
            action: types_1.Actions.addSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            sheets: this._sheets,
            prev: this._tabbar.getSelected()[0],
        });
        return this._sheets.find(function (item) { return item.value === newSheet; }).id;
    };
    Spreadsheet.prototype.removeSheet = function (id) {
        var item = this._getSheet(id);
        if (!item || !this.config.multiSheets || (this.config.multiSheets && this._sheets.getLength() === 2))
            return;
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetRemove, [item])) {
            return;
        }
        this._callAction({
            action: types_1.Actions.deleteSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            sheets: this._sheets,
            prev: item.id,
            val: item.name,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterSheetRemove, [item]);
    };
    Spreadsheet.prototype.getActiveSheet = function () {
        return this._activeSheetName;
    };
    Spreadsheet.prototype.setActiveSheet = function (id) {
        this.endEdit();
        this._changeSheet(id);
    };
    Spreadsheet.prototype.setValidation = function (cell, options) {
        var _a = this._parseCell(cell), page = _a.page, cleanCell = _a.cleanCell;
        if (!page)
            return;
        cell = cleanCell.toUpperCase();
        this._callAction({
            val: (0, main_1.isRangeId)(cell) ? [options] : options,
            cell: cell,
            action: types_1.Actions.setValidation,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
    };
    Spreadsheet.prototype.search = function (text, openSearch, sheetId) {
        if (text === void 0) { text = ""; }
        if (openSearch === void 0) { openSearch = false; }
        if (!this._searchForm) {
            this._searchForm = new SearchForm_1.SearchForm(this);
        }
        this.endEdit();
        var page = this._activePage;
        var item = this._getSheet(sheetId);
        if ((0, core_1.isDefined)(sheetId)) {
            if (!item)
                return;
            page = this._dataStore.getPage(item.name);
        }
        if (this._activePage !== page && item && openSearch) {
            this._changeSheet(item.id);
        }
        if (openSearch) {
            this._searchForm.show(page);
        }
        return this._searchForm.search(text, page);
    };
    Spreadsheet.prototype.hideSearch = function () {
        var _a;
        (_a = this._searchForm) === null || _a === void 0 ? void 0 : _a.hide();
    };
    Spreadsheet.prototype.insertLink = function (cell, link) {
        if (!cell)
            return;
        this._callAction({
            val: link,
            cell: cell,
            action: types_1.Actions.insertLink,
            dataStore: this._dataStore,
            page: this._activePage,
        });
    };
    Spreadsheet.prototype.fitColumn = function (cell) {
        this._callAction({
            cell: cell,
            action: types_1.Actions.fitColumn,
            dataStore: this._dataStore,
            page: this._activePage,
        });
    };
    Spreadsheet.prototype.sortCells = function (cell, dir) {
        if (dir === void 0) { dir = 1; }
        this._callAction({
            action: types_1.Actions.sortCells,
            groupAction: types_1.Actions.sortCells,
            dataStore: this._dataStore,
            cell: cell,
            dir: dir,
            page: this._activePage,
        });
    };
    Spreadsheet.prototype.mergeCells = function (cell, remove) {
        if (remove === void 0) { remove = false; }
        this._spanControl.doAction(cell, remove);
    };
    Spreadsheet.prototype._showLinkPopup = function (cell) {
        if (!cell || this._contextMenuVisible)
            return;
        this._linkForm.show(cell, (0, main_1.getCellInfo)(cell, this._activePage, this._grid));
    };
    Spreadsheet.prototype._showFilter = function (cell, e) {
        e.stopPropagation();
        var filter = this._activePage.getMeta().filter;
        this._filterForm.show(cell, e, filter, this._activePage);
    };
    Spreadsheet.prototype._checkValidation = function (cell) {
        var _a = (0, main_1.getCellInfo)(cell, this._activePage, this._grid), editor = _a.editor, value = _a.value;
        if (!editor)
            return true;
        var options = editor.options;
        if (typeof options === "string") {
            var _b = (0, main_1.getCellIds)(options, this._grid), start = _b.start, end = _b.end, row = _b.row, col = _b.col;
            options = row
                ? [this._activePage.getValue(row, col)]
                : this._activePage.getRange(start.row, start.col, end.row, end.col);
            options = options.map(function (v) { return "".concat(v); });
        }
        return (typeof value !== "number" && !value) || options.includes("".concat(value));
    };
    Spreadsheet.prototype._renameSheet = function (id, newName) {
        var item = this._sheets.getItem(id);
        if (!item || !newName || item.prevValue === newName)
            return;
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetRename, [
            { name: item.value, id: item.id },
            newName,
        ])) {
            return;
        }
        this._callAction({
            val: newName,
            action: types_1.Actions.renameSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            sheets: this._sheets,
            prev: id,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterSheetRename, [{ name: item.value, id: item.id }]);
    };
    Spreadsheet.prototype._getSheet = function (id) {
        var sheets = this.getSheets();
        return sheets.find(function (i) { return i.id === id; });
    };
    Spreadsheet.prototype._changeSheet = function (id) {
        var _this = this;
        var item = this._sheets.getItem(id);
        if (!item)
            return;
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetChange, [this._activeSheetName])) {
            return;
        }
        var prevPage = this._activePage;
        var scroll = this._grid.getScrollState();
        prevPage && prevPage.setMeta({ scroll: scroll });
        var prevSheet = this._activeSheetName ? this._activeSheetName.name : null;
        var pos = this._editLine.isCellExpected("A1", false, this._range.inline ? this._range.editor || null : null);
        var focusedCell = this.selection && this.selection.getFocusedCell();
        var info = (0, main_1.getCellInfo)(focusedCell, this._activePage, this._grid);
        if (info && info.edited && !pos) {
            this.endEdit();
        }
        this._activePage = this._dataStore.getPage(item.value);
        this._activeSheetName = { name: item.value, id: id };
        this._tabbar.select(id);
        var pageMeta = this._activePage.getMeta() && this._activePage.getMeta();
        if (this._activePage && !pageMeta.toolbarId) {
            this._activePage.setMeta({ toolbarId: id });
        }
        if ((pos && !this._editMode) || (pos && this._editMode.page !== this._activePage)) {
            this._activePage.setMeta({
                selectedCells: null,
                focusedCell: null,
            });
            this._editMode = this._editMode || {
                page: prevPage,
                cell: focusedCell,
                pageName: prevSheet,
            };
        }
        else if (pos && this._editMode && this._editMode.page === this._activePage) {
            var val_1 = this._editLine.getValue();
            this._editMode = null;
            this._editLine.setValue(val_1);
            this._awaitRedraw(function () {
                _this._editLine.focus();
                _this.events.fire(types_1.SpreadsheetEvents.editLineInput, [val_1]);
                _this._editLine.setCursor(pos);
            });
        }
        else {
            this._editLine.setCellMath();
            this._editMode = null;
        }
        if ((prevPage === null || prevPage === void 0 ? void 0 : prevPage.getMeta().filter) !== pageMeta.filter) {
            this._filterForm.applyFilter(this._activePage);
        }
        this.events.fire(types_1.SpreadsheetEvents.afterSheetChange, [this._activeSheetName]);
        this._grid.paint();
        this._awaitRedraw(function () {
            _this._updateGridSizes();
            _this._updateGridState();
            if (!_this.selection.getSelectedCell() && !_this._editMode) {
                _this.selection.setSelectedCell("A1", false);
            }
            FocusManager_1.focusManager.setFocusId(_this._uid);
        });
    };
    Spreadsheet.prototype._callAction = function (config) {
        var defaultConf = {
            dataStore: this._dataStore,
            page: this._activePage,
            cell: this.selection.getFocusedCell(),
        };
        if (!config || this.config.readonly) {
            return;
        }
        if (Array.isArray(config)) {
            this._actionsManager.execute(config);
            return;
        }
        var page = config.page || this._activePage;
        var cell = config.cell;
        if (cell === null || cell === void 0 ? void 0 : cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        config = __assign(__assign({}, config), { cell: cell, page: page });
        config.dataStore = this._dataStore;
        if ((0, main_1.isRangeId)(config.cell) && config.groupAction) {
            this._actionsManager.execute(config.groupAction, __assign(__assign({}, defaultConf), config));
            return;
        }
        this._actionsManager.execute(config.action, __assign(__assign({}, defaultConf), config));
    };
    Spreadsheet.prototype._initLayout = function () {
        this._grid = new ts_grid_1.Grid(null, {
            rowHeight: 32,
            headerRowHeight: 32,
            headerSort: false,
            tooltip: false,
            sortable: false,
            leftSplit: 1 + (this.config.leftSplit || 0),
            topSplit: this.config.topSplit || 0,
        });
        this.menu = new ts_menu_1.Menu(null, { navigationType: "click" });
        this.menu.data.parse((0, menu_1.getMenuStruct)(this.config));
        this.toolbar = new ts_toolbar_1.Toolbar();
        var toolbarStruct = (0, toolbar_1.getToolbarStruct)(this.config.toolbarBlocks, this.config);
        this.toolbar.data.parse(toolbarStruct);
        this.contextMenu = new ts_menu_1.ContextMenu();
        this.contextMenu.data.parse((0, context_1.getContextMenuStruct)());
        this.sheetContextMenu = new ts_menu_1.ContextMenu();
        this.sheetContextMenu.data.parse((0, context_1.getSheetsContextMenuStruct)(this.config.multiSheets));
        this._tabbar = new ts_toolbar_1.Toolbar(null, {
            css: "dhx-sheets-toolbar",
        });
        this._sheets = this._tabbar.data;
        this._sheets.parse([{ value: "sheet1" }]);
        this._dataStore = (0, math_1.initMathStore)(this._sheets);
        this._math = this._dataStore.getStore();
        this._editLine = new EditLine_1.EditLine(null, {
            events: this.events,
            grid: this._grid,
            store: this._activePage,
            spreadsheet: this,
            math: this._math,
        });
        this.config.multiSheets &&
            !this.config.readonly &&
            this._sheets.add({ icon: "dxi dxi-plus", id: "add-sheet" }, 0);
        var layout = (this._layout = new ts_layout_1.Layout(null, {
            height: "100%",
            rows: [
                { id: "menu", css: "menu_wrapper", height: "content" },
                { id: "toolbar", css: "toolbar_wrapper", height: "content" },
                { id: "editLine", css: "editLine_wrapper", height: "content" },
                { id: "grid", css: "dhx-spreadsheet-grid dhx_layout-cell--gravity" },
                { id: "tabbar", css: "sheetbar_wrapper", height: "content" },
            ],
        }));
        layout.getCell("menu").attach(this.menu, this);
        layout.getCell("toolbar").attach(this.toolbar, this);
        layout.getCell("grid").attach(this._grid, this);
        layout.getCell("editLine").attach(this._editLine, this);
        layout.getCell("tabbar").attach(this._tabbar, this);
        var initialSheetId = this.config.multiSheets && !this.config.readonly ? 1 : 0;
        var page = this._dataStore.getPage(this._sheets.getItem(this._sheets.getId(initialSheetId)).value);
        page.setMeta({ leftSplit: this.config.leftSplit });
        this._changeSheet(this._sheets.getId(initialSheetId));
        if (!this.config.editLine || this.config.readonly) {
            layout.getCell("editLine").hide();
        }
        if (!this.config.menu || this.config.readonly) {
            layout.getCell("menu").hide();
        }
        if (this.config.readonly || !toolbarStruct || !toolbarStruct.length) {
            layout.getCell("toolbar").hide();
        }
        if (!this.config.multiSheets) {
            layout.getCell("tabbar").hide();
        }
    };
    Spreadsheet.prototype._generateGridStruct = function (resetData) {
        var _this = this;
        if (resetData === void 0) { resetData = true; }
        var values = this.serialize();
        var _a = this.config, rowsCount = _a.rowsCount, colsCount = _a.colsCount;
        var rows = [];
        for (var i = 1; i <= rowsCount; i++) {
            var row = { id: "".concat(i), $index: i };
            for (var k = 1; k <= colsCount; k++) {
                row[k] = "";
            }
            rows.push(row);
        }
        var cols = [
            {
                id: "$index",
                width: 40,
                header: [{ text: "", css: "dxi dxi-select-all" }],
                htmlEnable: true,
                editable: false,
                align: "right",
                template: function (_val, row) { return (0, actions_1.getIndexRowCell)(row.$index); },
            },
        ];
        var inputVisible = false;
        var blurHandler = function (e) {
            requestAnimationFrame(function () {
                var _a;
                if (!inputVisible) {
                    return;
                }
                if ((_a = e.target) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-skip-restore-focus"))
                    return;
                setTimeout(function () {
                    _this._restoreFocus(e);
                });
            });
        };
        var inserted = function (node) {
            var input = node.el;
            _this._range.editor = input;
            _this._range.inline = 1;
            input.focus();
            input.setSelectionRange(input.value.length, input.value.length);
            _this._range.cursor = input.value.length;
            input.addEventListener("blur", function (e) {
                _this._range.cursor = input.selectionStart;
                blurHandler(e);
            });
            input.addEventListener("focus", function () {
                _this._range.inline = 1;
            });
            inputVisible = true;
        };
        var removed = function () {
            _this._range.editor = null;
            inputVisible = false;
        };
        var onInput = function (cell, e) {
            if (inputVisible) {
                _this.events.fire(types_1.SpreadsheetEvents.cellInput, [cell, e.target.value]);
            }
        };
        var selected;
        this.events.on(types_1.SpreadsheetEvents.gridRedraw, function () {
            selected = null;
        });
        var template = function (v, row, col) {
            var _a, _b;
            if (!selected) {
                selected = _this.selection.getFocusedCell();
            }
            var cell = col.$letter + row.$index;
            var cellId = (0, main_1.getCellIds)(cell, _this._grid);
            var meta = _this._activePage.getCell(cellId.row, cellId.col) || {};
            var filter = _this._activePage.getMeta().filter;
            var isFilterCell = false;
            var filtered = false;
            if (filter) {
                var filteredRange = filter.cell, rules = filter.rules;
                var _d = (0, main_1.getCellIds)(filteredRange, _this._grid), start = _d.start, end = _d.end;
                if (start.row === cellId.row && cellId.col >= start.col && cellId.col <= end.col) {
                    var lastCell = (0, main_1.getCellNameById)(_this._grid, start.row + 1, end.col + 1);
                    var cellsArr = (0, main_1.getCellsArray)("".concat(filteredRange.split(":")[0], ":").concat(lastCell), _this._grid);
                    isFilterCell = true;
                    var _e = rules[cellsArr.indexOf(cell)] || {}, condition = _e.condition, exclude = _e.exclude;
                    filtered = !!(condition || exclude);
                }
            }
            var _f = meta, locked = _f.locked, edited = _f.edited, nextValue = _f.nextValue, editor = _f.editor, css = _f.css, format = _f.format, link = _f.link;
            var val = _this._activePage.getValue(cellId.row, cellId.col, (format === null || format === void 0 ? void 0 : format.mask) === "@");
            var cellValue = edited && (0, core_1.isDefined)(nextValue) ? nextValue : val;
            if (selected && edited) {
                var formatId = format === null || format === void 0 ? void 0 : format.id;
                if ((formatId === null || formatId === void 0 ? void 0 : formatId.includes("date")) && !_this._editors[formatId]) {
                    _this._editors[formatId] = new DateEditor_1.DateEditor(_this.endEdit.bind(_this), (0, date_1.getDHXDateFormat)(format === null || format === void 0 ? void 0 : format.mask), _this.events);
                }
                if ((formatId === null || formatId === void 0 ? void 0 : formatId.includes("time")) && !_this._editors[formatId]) {
                    _this._editors[formatId] = new TimeEditor_1.TimeEditor(_this.endEdit.bind(_this), (0, date_1.getDHXDateFormat)(format === null || format === void 0 ? void 0 : format.mask), _this.events);
                }
                if ((editor === null || editor === void 0 ? void 0 : editor.type) === "select") {
                    if (!_this._editors.select) {
                        _this._editors.select = new SelectEditor_1.SelectEditor(_this.endEdit.bind(_this), _this.events);
                    }
                    var options = editor.options;
                    _this._editors.select.setValue(typeof options === "string" ? _this.getValue(options.replace(/=|\$/g, "")) : options);
                }
                var conf = {
                    oninput: [onInput, cell],
                    _hooks: {
                        didInsert: inserted.bind(_this),
                        didRemove: removed.bind(_this),
                    },
                    class: css,
                    _key: "selection_input",
                    "data-dhx-id": "cell_input",
                    value: nextValue === undefined || nextValue === null
                        ? format
                            ? (0, format_1.getFormattedValue)(cellValue, format)
                            : cellValue
                        : nextValue,
                };
                if (_this._editors[formatId]) {
                    return _this._editors[formatId].toHTML(__assign(__assign({}, conf), { format: format }));
                }
                if (((_a = meta.editor) === null || _a === void 0 ? void 0 : _a.type) === "select") {
                    return _this._editors.select.toHTML(conf);
                }
                return (0, dom_1.el)("input.dhx_cell_input", conf);
            }
            var typedCellValue = [];
            var isValid = !editor || _this._checkValidation(cell);
            if (link && !link.text) {
                var href_1 = link.href;
                var splited = "".concat(cellValue).split(" ");
                splited.forEach(function (text) {
                    if (text === href_1) {
                        typedCellValue.push((0, dom_1.el)("span", {
                            class: css || "",
                        }, [href_1]));
                        typedCellValue.push(" ");
                    }
                    else {
                        typedCellValue.push("".concat(text, " "));
                    }
                });
            }
            else if (link) {
                var text = link.text, href = link.href;
                var val_2 = text || href;
                typedCellValue.push((0, dom_1.el)("span.dhx_spreadsheet_link", {
                    class: css,
                }, [format ? (0, format_1.getFormattedValue)(val_2, format) : val_2]));
            }
            else {
                typedCellValue.push(format ? (0, format_1.getFormattedValue)(cellValue, format) : cellValue);
            }
            return (0, dom_1.el)(".dhx_spreadsheet_cell", {
                class: css,
            }, __spreadArray(__spreadArray([
                locked && (0, dom_1.el)(".dhx_lock_icon.dxi.dxi-key")
            ], typedCellValue, true), [
                ((_b = meta.editor) === null || _b === void 0 ? void 0 : _b.type) === "select"
                    ? [
                        (0, dom_1.el)(".dxi.dxi-menu-down.dhx_spreadsheet_cell_icon.drop-down", {
                            onclick: function () { return _this.startEdit(cell); },
                        }),
                        (0, dom_1.el)(".dhx_spreadsheet_cell-placeholder"),
                    ]
                    : null,
                isFilterCell && [
                    (0, dom_1.el)(".dxi.dxi-filter-variant.dhx_spreadsheet_cell_icon.filter".concat(filtered ? "-filtered" : ""), {
                        onclick: function (e) { return _this._showFilter(cell, e); },
                        ondblclick: function (e) { return _this._showFilter(cell, e); },
                    }),
                    (0, dom_1.el)(".dhx_spreadsheet_cell-placeholder"),
                ],
                !isValid && (0, dom_1.el)(".dhx_spreadsheet_cell-not_valid"),
            ], false));
        };
        for (var i = 1; i <= colsCount; i++) {
            var letter = (0, main_1.getLetterFromNumber)(i);
            cols.push({
                id: "".concat(i),
                width: 120,
                $letter: letter,
                type: "string",
                header: [
                    {
                        text: (0, actions_1.getHeaderCell)(letter, i, !this.config.readonly),
                        align: "center",
                    },
                ],
                htmlEnable: true,
                template: template,
            });
        }
        this._grid.setColumns(cols);
        this._grid.data.parse(rows);
        if (resetData) {
            this.parse(values);
        }
        this._sizes.rowsCount = this.config.rowsCount;
        this._sizes.colsCount = this.config.colsCount;
    };
    Spreadsheet.prototype._checkForMissedCells = function (cell) {
        if (cell.includes("!")) {
            cell = cell.split("!")[1];
        }
        var index = (0, main_1.isRangeId)(cell)
            ? (0, main_1.getRangeIndexes)(cell, this._grid).end
            : (0, main_1.getCellIndex)(cell, this._grid);
        if (index.row > this.config.rowsCount || index.col > this.config.colsCount) {
            this.config.rowsCount = Math.max(this.config.rowsCount, index.row + 1);
            this.config.colsCount = Math.max(this.config.colsCount, index.col);
            this._generateGridStruct(false);
        }
    };
    Spreadsheet.prototype._generateNewSheetName = function () {
        var sheetsArr = this._sheets.findAll(function (i) { return i.value && i.value.startsWith("sheet"); });
        if (!sheetsArr.length) {
            return "sheet1";
        }
        sheetsArr = sheetsArr.map(function (i) { return +i.value.split("sheet")[1]; }).filter(function (i) { return !!i; });
        return "sheet".concat(Math.max.apply(Math, sheetsArr) + 1);
    };
    Spreadsheet.prototype._updateGridSizes = function () {
        var _a = this._activePage.getSize(), pageRows = _a[0], pageCols = _a[1];
        var gridColumns = this._grid.config.columns;
        var gridRowsCount = this._grid.data.getLength();
        var _b = this._activePage.getMeta(), cols = _b.cols, rows = _b.rows;
        var defaultHeight = this._grid.config.rowHeight;
        var gridData = this._grid.data.getInitialData();
        if (pageCols === gridColumns.length &&
            cols.length === pageCols &&
            pageRows === gridRowsCount &&
            rows === gridRowsCount)
            return;
        while (rows.length < pageRows) {
            rows.push({ height: defaultHeight });
        }
        var newRows = [];
        for (var i = 0; i < rows.length; i++) {
            var row = __assign(__assign({}, gridData[i]), { id: "".concat(i + 1), $index: i + 1, height: rows[i].height || defaultHeight });
            for (var k = 0; k <= pageCols; k++) {
                row[k] = "";
            }
            newRows.push(row);
        }
        while (cols.length < pageCols) {
            cols.push({ width: 120 });
        }
        var firstCol = gridColumns[0];
        var newCols = [firstCol];
        var lastcol = gridColumns[gridColumns.length - 1];
        for (var i = 0; i < cols.length; i++) {
            var letter = (0, main_1.getLetterFromNumber)(newCols.length);
            newCols.push({
                id: "".concat(newCols.length),
                width: cols[i].width || 120,
                $letter: letter,
                type: "string",
                header: [
                    {
                        text: (0, actions_1.getHeaderCell)(letter, newCols.length, !this.config.readonly),
                        align: "center",
                    },
                ],
                htmlEnable: true,
                template: lastcol.template,
            });
        }
        this._grid.setColumns(newCols);
        this._grid.data.parse(newRows);
        var focused = this.selection.getFocusedCell();
        if (focused) {
            var _d = (0, main_1.getCellIds)(focused, this._grid), col = _d.col, row = _d.row;
            var rowErr = row > rows.length - 1;
            var colErr = col > cols.length - 1;
            if (colErr || rowErr) {
                var newCell = (0, main_1.getCellNameById)(this._grid, rowErr ? rows.length : row + 1, colErr ? cols.length : col + 1);
                this.selection.setSelectedCell(newCell, false);
            }
        }
    };
    Spreadsheet.prototype._updateGridState = function () {
        var _this = this;
        this._grid.config.spans = [];
        var _a = this._activePage.getMeta(), _b = _a.scroll, scroll = _b === void 0 ? { x: 0, y: 0 } : _b, cols = _a.cols, rows = _a.rows, _d = _a.merged, merged = _d === void 0 ? [] : _d;
        var gridColumns = this._grid.config.columns;
        var firstCol = gridColumns[0], dataCols = gridColumns.slice(1);
        var x = scroll.x, y = scroll.y;
        this._grid.scroll(x, y);
        dataCols.forEach(function (col, i) {
            col.width = cols[i] ? cols[i].width : col.width;
        });
        this._grid.setColumns(__spreadArray([firstCol], dataCols, true));
        this._grid.data.forEach(function (row, index) {
            if (!rows[index])
                return;
            var height = rows[index].height;
            if (row.height !== height) {
                _this._grid.data.update(row.id, { height: height });
            }
        });
        this._grid.config.spans = merged.map(function (span) {
            var from = span.from, to = span.to;
            var row = from.row, column = from.column;
            var rowspan = +to.row - +row + 1;
            var colspan = +to.column - +column + 1;
            return (0, Cells_1.normalizeSpan)({
                row: "".concat(+row + 1),
                column: "".concat(+column + 1),
                rowspan: rowspan > 1 ? rowspan : undefined,
                colspan: colspan > 1 ? colspan : undefined,
            }, __assign({}, _this._grid.config), _this._grid.data);
        });
        this.selection._removeHeadersCss();
        this.selection._setHeadersCss();
    };
    Spreadsheet.prototype._updateToolbar = function (cell) {
        if (cell === void 0) { cell = this.selection.getFocusedCell(); }
        if (cell !== this.selection.getFocusedCell()) {
            return;
        }
        (0, toolbar_2.updateToolbar)(this.toolbar, this.menu, this._activePage, this._grid);
    };
    Spreadsheet.prototype._setEventsHandlers = function () {
        var _this = this;
        this.events.on(types_1.SpreadsheetEvents.editLineInput, function (val) {
            FocusManager_1.focusManager.setFocusId(_this._uid);
            var cell = _this.selection.getFocusedCell();
            _this.events.fire(types_1.SpreadsheetEvents.cellInput, [cell, val]);
        });
        this.events.on(types_1.SpreadsheetEvents.editLineFocus, function () {
            var cell = _this.selection.getFocusedCell();
            _this.startEdit(cell);
            _this._range.inline = 0;
            requestAnimationFrame(function () {
                _this._editLine.focus();
            });
        });
        this.events.on(types_1.SpreadsheetEvents.cellInput, function (cell, val) {
            if (_this.isLocked(cell)) {
                return;
            }
            var _a = (0, main_1.getCellIds)(cell, _this._grid), row = _a.row, col = _a.col;
            _this._activePage.setCell(row, col, {
                nextValue: val,
            });
            _this._grid.paint();
        });
        this._grid.events.on(ts_grid_1.GridEvents.cellMouseDown, function () {
            _this.contextMenu._close();
            _this.sheetContextMenu._close();
        });
        this._grid.events.on(ts_grid_1.GridEvents.scroll, function () {
            _this._linkForm.hideInfo();
        });
        this.events.on(types_1.SpreadsheetEvents.afterPopupHide, function () {
            FocusManager_1.focusManager.setFocusId(_this._uid);
        });
        this.events.on(types_1.SpreadsheetEvents.afterAction, function (action, conf) {
            var _a;
            switch (action) {
                case types_1.Actions.resizeRow:
                    var gridRows = _this._grid.data.map(function (row) {
                        return {
                            height: row.$height || _this._grid.config.rowHeight,
                            changedByUser: row.changedByUser,
                        };
                    });
                    _this._activePage.setMeta({
                        rows: gridRows,
                    });
                    break;
                case types_1.Actions.resizeCol:
                    var page = _this._activePage;
                    var pageCols_1 = page.getMeta().cols;
                    var gridColumns = _this._grid.config.columns.slice(1).map(function (col, i) {
                        return __assign(__assign({}, pageCols_1[i]), { width: col.width });
                    });
                    page.setMeta({ cols: gridColumns });
                    var cell = (0, main_1.getCellsArray)(conf.cell, _this._grid)[0];
                    var col_1 = (0, main_1.getCellIds)(cell, _this._grid).col;
                    var wrappedRows = (pageCols_1[col_1] || {}).wrappedRows;
                    // if there was a wrapped cell in the column, we need to update its height
                    var changed_1 = false;
                    if (wrappedRows === null || wrappedRows === void 0 ? void 0 : wrappedRows.size) {
                        wrappedRows.forEach(function (row, i) {
                            var cellName = (0, main_1.getCellNameById)(_this._grid, row + 1, col_1 + 1);
                            var updated = !!(0, actions_1.setAutoHeightToRow)(cellName, _this._grid, _this._activePage, "wrap");
                            changed_1 = changed_1 || updated;
                        });
                    }
                    if (changed_1) {
                        _this._updateGridSizes();
                    }
                    break;
                case types_1.Actions.insertLink:
                    _this.selection.setFocusedCell(_this.selection.getFocusedCell(), false);
                    break;
                case types_1.Actions.filter:
                case types_1.Actions.merge:
                case types_1.Actions.unmerge:
                    _this._updateToolbar(_this.selection.getFocusedCell());
                    break;
                case types_1.Actions.sortCells:
                    var filter = _this._activePage.getMeta().filter;
                    if (filter) {
                        (_a = _this._filterForm) === null || _a === void 0 ? void 0 : _a.applyFilter(_this._activePage);
                    }
                    break;
                case types_1.Actions.setCellValue:
                case types_1.Actions.setCellFormat:
                    {
                        var cell_1 = conf.cell, page_1 = conf.page;
                        if (cell_1 && page_1) {
                            var _b = (0, main_1.getCellInfo)(cell_1, page_1, _this._grid), _d = _b.css, css = _d === void 0 ? "" : _d, $toolbarAlign = _b.$toolbarAlign, format = _b.format;
                            if (!$toolbarAlign) {
                                var _e = (0, main_1.getCellIds)(cell_1, _this._grid), row = _e.row, col_2 = _e.col;
                                var v = page_1.getValue(row, col_2);
                                var styles = dhx.css.get(css) || {};
                                css = dhx.css.add((0, main_1.convertStyles)(__assign(__assign({}, styles), { "text-align": typeof v === "number" && (format === null || format === void 0 ? void 0 : format.id) !== "text" ? "right" : "left" })));
                                page_1.setCell(row, col_2, {
                                    css: css,
                                });
                            }
                        }
                    }
                    break;
                case types_1.Actions.groupAction:
                    (0, dom_1.awaitRedraw)().then(function () {
                        _this._updateGridState();
                    });
                    break;
            }
            _this._syncEditLine();
        });
        this.events.on(types_1.SpreadsheetEvents.beforeAction, function (actionName, conf) {
            var scroll = _this._grid.getScrollState();
            _this._activePage.setMeta({ scroll: scroll });
            switch (actionName) {
                case types_1.Actions.sortCells:
                    return _this._spanControl.checkBeforeAction(conf.cell, _this._activePage, en_1.default.sort);
                case types_1.Actions.filter:
                    return _this._spanControl.checkBeforeAction(conf.cell, _this._activePage, en_1.default.filter);
                default:
                    return true;
            }
        });
        this.events.on(types_1.SpreadsheetEvents.beforeSelectionSet, function (cell) {
            var r = _this._range;
            if (r.mode)
                return true;
            var pos = _this._editLine.isCellExpected(cell, false, r.inline ? r.editor || null : null);
            if (pos > 0) {
                r.cursor = pos;
                r.cell = _this.selection.getFocusedCell();
                r.mode = 1;
                return true;
            }
            if (_this.config.readonly) {
                return false;
            }
            _this._linkForm.hide();
            _this._linkForm.hideInfo();
            !_this._editMode && _this.endEdit();
        });
        this.events.on(types_1.SpreadsheetEvents.afterSelectionSet, function (cell) {
            var _a;
            var r = _this._range;
            if (!r.mode && _this._editMode) {
                _this._editLine.setCellMath();
            }
            if (r.mode === 1) {
                r.mode = 2;
                !_this._editMode && _this.selection.setSelectedCell(r.cell, false);
                r.mode = 0;
                r.cursor = _this._editLine.isCellExpected(cell, true, r.inline ? r.editor : null, r.cell);
                r.cell = "";
            }
            _this._grid.paint();
            var _b = (0, main_1.getCellIds)(cell, _this._grid), row = _b.row, col = _b.col;
            var cellMeta = _this._activePage.getCell(row, col) || {};
            var link = cellMeta.link;
            if (link === null || link === void 0 ? void 0 : link.href) {
                _this._awaitRedraw(function () {
                    var _a;
                    if (!_this._contextMenuVisible && !((_a = _this._linkForm) === null || _a === void 0 ? void 0 : _a.isVisible())) {
                        _this._linkForm.showInfo(cell, cellMeta);
                    }
                });
            }
            if (!_this._checkValidation(cell)) {
                if ((0, main_1.isRangeId)(cell))
                    return;
                var _d = (0, main_1.getCellIds)(cell, _this._grid), row_1 = _d.row, col_3 = _d.col;
                var node = (_a = _this.getRootNode()) === null || _a === void 0 ? void 0 : _a.querySelector("[aria-rowindex = \"".concat(row_1 + 1, "\"].dhx_grid-row [aria-colindex = \"").concat(col_3 + 2, "\"]"));
                new ts_message_1.tooltip("Invalid value", {
                    node: node,
                    position: ts_message_1.Position.right,
                    force: true,
                    margin: 2,
                    css: "dhx_spreadsheet-invalid-tooltip",
                });
            }
        });
        this.events.on(types_1.SpreadsheetEvents.afterFocusSet, function (cell) {
            if (_this._range.mode || _this._editMode)
                return;
            _this._syncEditLine(cell);
        });
        this.events.on(types_1.SpreadsheetEvents.afterStyleChange, function (cell) {
            _this._updateToolbar(cell);
        });
        this.events.on(types_1.SpreadsheetEvents.afterFormatChange, function (cell) {
            _this._updateToolbar(cell);
        });
        this.events.on(types_1.SpreadsheetEvents.afterEditStart, function () {
            _this._grid.paint();
        });
        this.events.on(types_1.SpreadsheetEvents.afterEditEnd, function (cell) {
            var _a;
            _this._grid.paint();
            var format = (0, main_1.getCellInfo)(cell, _this._activePage, _this._grid).format;
            (_a = _this._editors[format === null || format === void 0 ? void 0 : format.id]) === null || _a === void 0 ? void 0 : _a.hidePopup();
        });
        this._tabbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            if (id === "add-sheet") {
                _this.addSheet();
            }
            else {
                _this._changeSheet(id);
            }
        });
        this.sheetContextMenu.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            if (id === "delete") {
                _this.removeSheet(_this._focusedSheet);
            }
            else {
                var item_2 = _this._tabbar.data.getItem(_this._focusedSheet);
                _this._tabbar.data.update(item_2.id, { type: "input" });
                _this._awaitRedraw(function () {
                    var input = _this._tabbar.getRootNode().querySelector("input");
                    input.focus();
                    input.onkeyup = function (e) {
                        if (e.key === "Enter") {
                            input.blur();
                        }
                        if (e.key === "Escape") {
                            _this._sheets.update(item_2.id, { type: "navItem", value: item_2.prevValue });
                        }
                    };
                });
            }
        });
        this.sheetContextMenu.events.on(ts_navbar_1.NavigationBarEvents.afterHide, function () {
            _this._focusedSheet = null;
        });
        this._tabbar.events.on(ts_navbar_1.NavigationBarEvents.inputFocus, function (id) {
            var item = _this._sheets.getItem(id);
            _this._sheets.update(id, { prevValue: item.value });
        });
        this._tabbar.events.on(ts_navbar_1.NavigationBarEvents.inputBlur, function (id) {
            var item = _this._sheets.getItem(id);
            var newVal = item.value;
            var isExist = _this._sheets.find(function (i) { return i.value === newVal && i.id !== item.id; });
            if (isExist) {
                _this._getErrorWindow();
                var _a = en_1.default.renameSheetAlert.split("$name"), firstPart = _a[0], lastPart = _a[1];
                _this._errorAlert.attachHTML("<p>".concat(firstPart, "<b>").concat(newVal, "</b>").concat(lastPart, "</p>"));
                _this._errorAlert.show();
                _this._errorAlert.footer.events.on(ts_navbar_1.NavigationBarEvents.click, function () { return _this._errorAlert.hide(); });
                _this._errorAlert.events.on(types_2.WindowEvents.afterHide, function () {
                    _this._sheets.update(item.id, { value: item.prevValue });
                    var input = _this._tabbar.getRootNode().querySelector("input");
                    input.focus();
                });
                return false;
            }
            _this._sheets.update(id, { type: "navItem", value: item.prevValue });
            _this._renameSheet(id, newVal);
        });
        this.toolbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
            if (id === "format" || id === "valign" || id === "halign" || id === "multiline")
                return;
            _this.endEdit();
            _this._handleAction(id, e);
        });
        this.contextMenu.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
            _this.endEdit();
            _this._handleAction(id, e);
        });
        this.contextMenu.events.on(ts_navbar_1.NavigationBarEvents.afterHide, function () {
            _this._contextMenuVisible = false;
            _this.contextMenu.hide("fit-col");
            _this.contextMenu.show("link");
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellClick, function (_col, e) {
            var sortIcon = e.target.className.includes("dhx_header_icon");
            if (sortIcon) {
                _this.contextMenu.hide("link");
                _this.contextMenu.show("fit-col");
                _this.contextMenu.showAt(e);
                return;
            }
        });
        this.menu.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
            if (id === "format" || id === "valign" || id === "halign")
                return;
            _this.endEdit();
            _this._handleAction(id, e);
        });
        this._colorpicker.events.on(ts_colorpicker_1.ColorpickerEvents.change, function (color) {
            var _a;
            _this._colorpickerPopup.hide();
            var selected = _this.selection.getSelectedCell();
            if (!_this._silencedColorChange)
                _this.setStyle(selected, (_a = {}, _a[_this._colorpickerTarget] = color, _a));
            _this._silencedColorChange = false;
            // restore widget focus
            requestAnimationFrame(function () {
                FocusManager_1.focusManager.setFocusId(_this._uid);
                if (_this._activeInput) {
                    _this._activeInput.focus();
                    _this._activeInput = null;
                }
            });
        });
        this.events.on(types_1.SpreadsheetEvents.editLineBlur, function (_val, e) {
            _this._restoreFocus(e);
        });
        this.events.on(types_1.SpreadsheetEvents.groupFill, function (focused, selected) {
            _this._fillCells(focused, selected);
        });
    };
    Spreadsheet.prototype._syncEditLine = function (cell) {
        if (cell === void 0) { cell = this.selection.getFocusedCell(); }
        var _a = (0, main_1.getCellIds)(cell, this._grid), row = _a.row, col = _a.col;
        var val = this._activePage.getValue(row, col, true);
        if (!(0, format_1.isNumeric)(val) && !val) {
            val = "";
        }
        var info = (0, main_1.getCellInfo)(cell, this._activePage, this._grid);
        (0, toolbar_2.updateToolbar)(this.toolbar, this.menu, this._activePage, this._grid);
        var format = info.format;
        this._editLine.setValue((val === null || val === void 0 ? void 0 : val.toString().startsWith("="))
            ? (0, format_1.getFormattedFormula)({ formula: "".concat(val), format: format, store: this._math })
            : (0, format_1.getFormattedValue)(val, format));
        if (info && info.locked) {
            this._editLine.lock();
        }
        this._grid.paint();
    };
    Spreadsheet.prototype._getErrorWindow = function () {
        if (!this._errorAlert) {
            this._errorAlert = new ts_window_1.Window({
                footer: true,
                modal: true,
                closable: true,
                width: 350,
                height: 240,
                title: en_1.default.alertTitle,
            });
            this._errorAlert.footer.data.parse([
                {
                    type: "button",
                    view: "flat",
                    size: "medium",
                    color: "primary",
                    value: en_1.default.ok,
                    id: "ok",
                },
            ]);
        }
        return this._errorAlert;
    };
    Spreadsheet.prototype._awaitRedraw = function (cb) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!_this.getRootView())
                return;
            cb();
        });
    };
    Spreadsheet.prototype._handleAction = function (action, e) {
        var _a;
        var selected = this.selection.getSelectedCell();
        var focused = this.selection.getFocusedCell();
        var format = "";
        var formatIndex = (0, core_1.findIndex)(this.config.formats, function (f) { return f.id === action; });
        if (formatIndex !== -1) {
            format = action;
            action = "format";
        }
        var align = "";
        var dir = "";
        var wrap = "";
        if ("".concat(action).includes("align")) {
            var split = "".concat(action).split("-");
            action = split[0];
            align = split[1];
        }
        if ("".concat(action).endsWith("sort")) {
            var split = "".concat(action).split("-");
            action = split[1];
            dir = split[0];
        }
        if ("".concat(action).includes("multiline")) {
            var split = "".concat(action).split("-");
            action = split[0];
            wrap = split[1];
        }
        switch (action) {
            case "undo":
                this._actionsManager.undo();
                break;
            case "redo":
                this._actionsManager.redo();
                break;
            case "color":
            case "background": {
                this._colorpickerTarget = action;
                var info = (0, main_1.getCellInfo)(selected, this._activePage, this._grid);
                var css = (0, main_1.getStylesObject)(info.css);
                var def = {
                    background: "#FFFFFF",
                    color: "#4C4C4C",
                };
                var color = css[action] || def[action];
                this._silencedColorChange = true;
                this._colorpicker.setValue(color === "white" ? "#FFFFFF" : (0, core_1.rgbToHex)(color));
                var btn = (0, html_1.locateNode)(e, "data-dhx-id");
                this._colorpickerPopup.show(btn);
                break;
            }
            case "halign":
                this.setStyle(selected, { "text-align": align });
                break;
            case "valign":
                this.setStyle(selected, { "vertical-align": align });
                break;
            case "multiline":
                this.setStyle(selected, { multiline: wrap });
                break;
            case "font-weight-bold":
            case "font-style-italic":
            case "text-decoration-line-through":
            case "text-decoration-underline": {
                if (!selected) {
                    return;
                }
                var idArr = action.includes("line-through")
                    ? ["text-decoration", "line-through"]
                    : action.split("-");
                var val = idArr.pop();
                var key = idArr.join("-");
                var cellArr = selected.split(",");
                for (var _i = 0, cellArr_1 = cellArr; _i < cellArr_1.length; _i++) {
                    var cell = cellArr_1[_i];
                    val = (0, toolbar_2.getToggledValue)(this._activePage, cell, key, val, this._grid);
                    this.setStyle(cell, (_a = {}, _a[key] = val, _a));
                }
                break;
            }
            case "clear-value":
                this.setValue(selected, "");
                break;
            case "clear-styles":
                this.setStyle(selected, {});
                break;
            case "clear-all":
                if (!selected) {
                    return;
                }
                this._callAction([
                    {
                        cell: selected,
                        action: types_1.Actions.setCellStyle,
                        groupAction: (0, main_1.isRangeId)(selected) ? types_1.Actions.groupAction : null,
                        val: "",
                        dataStore: this._dataStore,
                        page: this._activePage,
                    },
                    {
                        cell: selected,
                        action: types_1.Actions.setCellValue,
                        groupAction: (0, main_1.isRangeId)(selected) ? types_1.Actions.groupAction : null,
                        val: "",
                        page: this._activePage,
                        dataStore: this._dataStore,
                    },
                    {
                        cell: selected,
                        action: types_1.Actions.setValidation,
                        groupAction: (0, main_1.isRangeId)(selected) ? types_1.Actions.groupAction : null,
                        val: null,
                        page: this._activePage,
                        dataStore: this._dataStore,
                    },
                ]);
                break;
            case "lock":
                if (!selected) {
                    return;
                }
                var cellAr = selected.split(",");
                for (var _b = 0, cellAr_1 = cellAr; _b < cellAr_1.length; _b++) {
                    var cell = cellAr_1[_b];
                    if (this.isLocked(cell)) {
                        this.unlock(cell);
                    }
                    else {
                        this.lock(cell);
                    }
                }
                break;
            case "remove-row":
                this.deleteRow(focused);
                break;
            case "add-row":
                this.addRow(focused);
                break;
            case "remove-col":
                this.deleteColumn(focused);
                break;
            case "add-col":
                this.addColumn(focused);
                break;
            case "fit-col":
                this.fitColumn(selected.split(":")[0]);
                break;
            case "help":
                window.open("https://docs.dhtmlx.com/spreadsheet/user_guide.html");
                break;
            case "format":
                this.setFormat(selected, format);
                this.paint();
                break;
            case "export-xlsx":
                this.export.xlsx();
                break;
            case "import-xlsx":
                this.load("", "xlsx");
                break;
            case "validation":
                if (!this._validationForm) {
                    this._validationForm = new ValidationForm_1.ValidationForm(this.events, this.setValidation.bind(this), this._grid);
                }
                this._validationForm.show(selected, (0, main_1.getCellInfo)(selected, this._activePage, this._grid));
                break;
            case "sort":
                this.sortCells(selected, dir === "asc" ? 1 : -1);
                break;
            case "search":
                this.search("", true);
                break;
            case "link":
                this._contextMenuVisible = false;
                this._showLinkPopup(focused);
                break;
            case "filter":
                var filter = this._activePage.getMeta().filter;
                this.setFilter(selected, filter ? null : []);
                break;
            case "merge":
                this.mergeCells(selected, this.toolbar.data.getItem("merge").active);
                break;
            default:
                break;
        }
    };
    Spreadsheet.prototype._parseCell = function (cell) {
        var page = this._activePage;
        var cleanCell = cell;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cleanCell = parse[1];
            page = this._dataStore.getPage(parse[0]);
        }
        return { cleanCell: cleanCell, page: page };
    };
    Spreadsheet.prototype._fillCells = function (focused, selected) {
        var _this = this;
        var focusedCells = [focused];
        var selectedCells = [selected];
        if ((0, main_1.isRangeId)(focused)) {
            var largerByX = (0, selection_1.getCellsDiff)(focused.split(":")[1], selected.split(":")[1], this._grid)
                .isLargerByX;
            var dir = largerByX ? "row" : "col";
            var matrix = (0, main_1.getRangeMatrix)(focused, this._grid, dir);
            focusedCells = matrix.map(function (row) {
                return row.length > 1 ? row[0] + ":" + row[row.length - 1] : row[0];
            });
            selectedCells = (0, main_1.getRangeMatrix)(selected, this._grid, dir).map(function (row) {
                return row.length > 1 ? row[0] + ":" + row[row.length - 1] : row[0];
            });
        }
        var merged = this._activePage.getMeta().merged;
        var spans = [];
        var unmerge = [];
        var actions = focusedCells.reduce(function (acc, row, i) {
            var _a;
            var cells = selectedCells[i];
            var value;
            if ((0, main_1.isRangeId)(row)) {
                value = [];
                _this.eachCell(function (cell) {
                    var _a;
                    var _b = (0, main_1.getCellIds)(cell, _this._grid), row = _b.row, col = _b.col;
                    if ((_a = _this._grid) === null || _a === void 0 ? void 0 : _a.isRowHidden(row + 1))
                        return;
                    var meta = __assign({}, _this._activePage.getCell(row, col));
                    var cellVal = _this._activePage.getValue(row, col, true);
                    meta.value = !(0, core_1.isDefined)(cellVal) || (0, main_1.doesContainUrl)(cellVal) ? "" : cellVal;
                    var span = (0, main_1.isCellSpaned)(cell, merged);
                    if (span && span.from.row === row && span.from.column === col) {
                        meta.span = (0, main_1.isCellSpaned)(cell, merged);
                    }
                    value.push(meta);
                }, row);
            }
            else {
                var cell = row;
                var ids = (0, main_1.getCellIds)(cell, _this._grid);
                var meta = __assign({}, _this._activePage.getCell(ids.row, ids.col));
                var val = _this._activePage.getValue(ids.row, ids.col, true);
                meta.value = (0, date_1.getExcelDateFromString)(val, meta.format) || "";
                var format_2 = ((_a = meta.format) === null || _a === void 0 ? void 0 : _a.id) || (0, format_1.getDefaultFormats)()[0].id;
                var span = (0, main_1.isCellSpaned)(cell, merged);
                value =
                    format_2.includes("date") || format_2.includes("time") || span
                        ? [meta]
                        : (0, main_1.doesContainUrl)(val)
                            ? ""
                            : val;
                if (span && span.from.row === ids.row && span.from.column === ids.col) {
                    meta.span = (0, main_1.isCellSpaned)(cell, merged);
                }
            }
            if (Array.isArray(value)) {
                if (row === cells) {
                    return acc;
                }
                var filled = (0, selection_1.getAutoFilledCells)(value, row, cells, _this._math, _this._grid);
                (cells = filled.cells, value = filled.value);
                spans.push.apply(spans, filled.spans);
            }
            var styles = _this.getStyle(row, false);
            var format = _this.getFormat(row);
            var editors = [];
            var links = [];
            _this.eachCell(function (cell) {
                var _a = (0, main_1.getCellInfo)(cell, _this._activePage, _this._grid), editor = _a.editor, link = _a.link;
                editors.push(editor === null || editor === void 0 ? void 0 : editor.options);
                links.push(link || null);
            }, row);
            _this.eachCell(function (cell) {
                // unmerge cells
                unmerge.push({
                    cell: cell,
                    action: types_1.Actions.unmerge,
                    groupAction: types_1.Actions.unmerge,
                    page: _this._activePage,
                });
            }, cells);
            acc.push({
                cell: cells,
                action: types_1.Actions.setCellFormat,
                groupAction: (0, main_1.isRangeId)(cells) ? types_1.Actions.groupAction : null,
                val: format,
                page: _this._activePage,
            }, {
                cell: cells,
                action: types_1.Actions.setCellStyle,
                groupAction: (0, main_1.isRangeId)(cells) ? types_1.Actions.groupAction : null,
                val: styles,
                page: _this._activePage,
                replace: true,
            }, {
                cell: cells,
                action: types_1.Actions.setValidation,
                groupAction: types_1.Actions.groupAction,
                val: editors,
                page: _this._activePage,
            });
            if (typeof value === "string" && value.startsWith("=")) {
                var firstCell_1 = (0, main_1.getCellIds)(row, _this._grid);
                _this.eachCell(function (cell) {
                    var targetCell = (0, main_1.getCellIds)(cell, _this._grid);
                    var math = _this._math.transposeMath(value, targetCell.row - firstCell_1.row, targetCell.col - firstCell_1.col);
                    acc.push({
                        cell: cell,
                        action: types_1.Actions.setCellValue,
                        groupAction: null,
                        val: math,
                        page: _this._activePage,
                    });
                }, cells);
            }
            else {
                acc.push({
                    cell: cells,
                    action: types_1.Actions.setCellValue,
                    groupAction: (0, main_1.isRangeId)(cells) ? types_1.Actions.groupAction : null,
                    val: value,
                    page: _this._activePage,
                });
            }
            acc.push({
                cell: cells,
                action: types_1.Actions.insertLink,
                groupAction: types_1.Actions.groupAction,
                val: links,
                page: _this._activePage,
            });
            return acc;
        }, []);
        var merge = [];
        spans.forEach(function (c) {
            //merge cells
            merge.push({
                cell: c,
                action: types_1.Actions.merge,
                groupAction: types_1.Actions.merge,
                page: _this._activePage,
                $autofill: true,
            });
        });
        this._callAction(__spreadArray(__spreadArray(__spreadArray([], unmerge, true), actions, true), merge, true));
    };
    Spreadsheet.prototype._restoreFocus = function (e) {
        var _this = this;
        var _a, _b;
        var editLineRoot = this._editLine.getRootView().node;
        var editLineContainer = editLineRoot && editLineRoot.el;
        var focusedCell = this._range.cell || this.selection.getFocusedCell();
        var col = (0, main_1.getCellIds)(focusedCell, this._grid).col;
        var isFixed = col <= this.config.leftSplit;
        if (focusedCell && (!(0, main_1.getCellInfo)(focusedCell, this._activePage, this._grid).edited || isFixed)) {
            return;
        }
        var focusID = FocusManager_1.focusManager.getFocusId();
        if (focusID !== this._uid &&
            focusID !== this._grid._uid &&
            ((_a = this._editLine._suggest) === null || _a === void 0 ? void 0 : _a.isVisible()) &&
            focusID !== ((_b = this._editLine._suggest._list) === null || _b === void 0 ? void 0 : _b._uid) &&
            focusID !== this._tabbar._uid) {
            if (this._colorpickerTarget) {
                this._activeInput = e.target;
                return;
            }
            this.endEdit();
            return;
        }
        var target = e.target;
        var relatedTarget = e.relatedTarget;
        if (editLineContainer && editLineContainer.contains(relatedTarget)) {
            return;
        }
        if (editLineContainer &&
            editLineContainer.contains(target) &&
            relatedTarget &&
            relatedTarget.getAttribute("data-dhx-id") === "cell_input") {
            return;
        }
        if ((relatedTarget === null || relatedTarget === void 0 ? void 0 : relatedTarget.getAttribute("data-dhx-id")) === "cell_input" &&
            target.getAttribute("data-dhx-id") === "cell_input")
            return;
        var input = target;
        input.focus();
        // [dirty]
        setTimeout(function () {
            var cursor = _this._range.cursor || input.value.length;
            input.selectionStart > cursor && input.setSelectionRange(cursor, cursor);
        }, 100);
    };
    Spreadsheet.prototype._initHotkeys = function () {
        var _this = this;
        if (this.config.readonly)
            return;
        this.keyManager = new newKeyManager_1.KeyManager(function (e, focusId) {
            return focusId === _this._uid ||
                focusId === _this._grid._uid ||
                focusId === _this.toolbar._uid;
        });
        var handlers = (0, hotkeys_1.getKeysHandlers)(this, this._grid, this._buffer, this._editLine);
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    Spreadsheet.prototype._render = function () {
        return (0, dom_1.el)(".dhx_widget.dhx-spreadsheet", {
            dhx_widget_id: this._uid,
            _key: this._uid,
        }, [(0, dom_1.inject)(this._layout.getRootView())]);
    };
    return Spreadsheet;
}(view_1.View));
exports.Spreadsheet = Spreadsheet;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Colorpicker = void 0;
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var html_1 = __webpack_require__(4);
var view_1 = __webpack_require__(8);
var core_1 = __webpack_require__(0);
var color_1 = __webpack_require__(49);
var colors_1 = __webpack_require__(64);
var en_1 = __webpack_require__(50);
var types_1 = __webpack_require__(65);
// tslint:disable-next-line
var tooltip_1 = __webpack_require__(62);
// tslint:disable-next-line
var ts_message_1 = __webpack_require__(17);
var picker_1 = __webpack_require__(115);
var calculations_1 = __webpack_require__(116);
var KeyManager_1 = __webpack_require__(21);
var FocusManager_1 = __webpack_require__(19);
var core_2 = __webpack_require__(0);
var Colorpicker = /** @class */ (function (_super) {
    __extends(Colorpicker, _super);
    function Colorpicker(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._setPaletteGrip = function (e) {
            var paletteRect = _this.getRootView().refs.picker_palette.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
            var top = clientY - paletteRect.top;
            var left = clientX - paletteRect.left;
            var _a = (0, calculations_1.calculatePaletteGrip)(paletteRect, top, left), s = _a.s, v = _a.v;
            _this._pickerState.hsv.s = s;
            _this._pickerState.hsv.v = v;
            _this.paint();
        };
        _this._setRangeGrip = function (e) {
            var rangeRect = _this.getRootView().refs[_this._activeRange].el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var left = clientX - rangeRect.left;
            var _a = (0, calculations_1.calculateRangeGrip)(rangeRect, left), h = _a.h, alpha = _a.alpha, rangeLeft = _a.rangeLeft;
            switch (_this._activeRange) {
                case "hue_range":
                    _this._pickerState.hsv.h = h;
                    _this._pickerState.hueRangeLeft = rangeLeft;
                    break;
                case "alpha_range":
                    _this._pickerState.alpha = alpha;
                    _this._pickerState.alphaRangeLeft = rangeLeft;
                    break;
            }
            _this.paint();
        };
        _this._onColorClick = function (_e, node) {
            var color = node.data.color.toUpperCase();
            if (!_this.events.fire(types_1.ColorpickerEvents.beforeChange, [color]))
                return;
            _this._selected = color;
            _this._focusColor(color);
            _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
            _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
        };
        _this._container = container;
        _this.config = (0, core_1.extend)({
            css: "",
            grayShades: true,
            pickerOnly: false,
            paletteOnly: false,
            customColors: [],
            palette: colors_1.palette,
            width: "238px",
            mode: "palette",
            transparency: true,
        }, _this.config);
        if (!_this.config.palette) {
            _this.config.palette = colors_1.palette;
        }
        if (_this.config.customColors) {
            _this.config.customColors = _this.config.customColors.map(function (color) { return color.toUpperCase(); });
        }
        _this._pickerState = {
            hsv: { h: 0, s: 1, v: 1 },
            customHex: "",
            alpha: 1,
        };
        _this.events = new events_1.EventSystem(_this);
        _this._setHandlers();
        _this._keyManager = new KeyManager_1.KeyManager(function (e, focusId) { return focusId === _this._uid; });
        _this._initHotKey();
        var view = (0, dom_1.create)({ render: function () { return _this._getContent(); } });
        _this.mount(_this._container, view);
        return _this;
    }
    Colorpicker.prototype.destructor = function () {
        this._keyManager && this._keyManager.destructor();
        this.events && this.events.clear();
        this.config = this.events = this._selected = this._handlers = this._pickerState = this._inputTimeout = this._keyManager = null;
        this.unmount();
    };
    Colorpicker.prototype.clear = function () {
        if (!this.events.fire(types_1.ColorpickerEvents.beforeChange, [""]))
            return;
        this._selected = "";
        this.events.fire(types_1.ColorpickerEvents.change, [this._selected, "clear"]);
        this.paint();
    };
    Colorpicker.prototype.setValue = function (value) {
        value = !this.config.transparency && value.length === 9 ? value.slice(0, -2) : value;
        if (!this.events.fire(types_1.ColorpickerEvents.beforeChange, [value]))
            return;
        if (this._focusColor(value) || FocusManager_1.focusManager.getFocusId() === this._uid) {
            this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
            this.events.fire(types_1.ColorpickerEvents.colorChange, [this._selected]); // TODO: remove suite_7.0
        }
    };
    Colorpicker.prototype.setFocus = function (value) {
        if (this._focusColor(value)) {
            this.paint();
        }
    };
    Colorpicker.prototype.getValue = function () {
        return this._selected || "";
    };
    Colorpicker.prototype.getCustomColors = function () {
        return this.config.customColors;
    };
    Colorpicker.prototype.setCustomColors = function (customColors) {
        this.config.customColors = customColors.map(function (color) { return color.toUpperCase(); });
        this.paint();
    };
    Colorpicker.prototype.setCurrentMode = function (mode) {
        if (mode === "palette" || mode === "picker") {
            this.config.mode = mode;
            this.events.fire(types_1.ColorpickerEvents.modeChange, [mode]);
            this.events.fire(types_1.ColorpickerEvents.viewChange, [mode]); // TODO: remove suite_7.0
            this.paint();
        }
    };
    Colorpicker.prototype.getCurrentMode = function () {
        return this.config.mode;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.getView = function () {
        return this.getCurrentMode();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.setView = function (mode) {
        this.setCurrentMode(mode);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.focusValue = function (value) {
        this.setFocus(value);
    };
    Colorpicker.prototype._setHandlers = function () {
        var _this = this;
        this._handlers = {
            click: {
                ".dhx_palette__cell": this._onColorClick,
            },
            mousedown: function (e) {
                _this._pickerMove(e);
            },
            touchstart: function (e) {
                _this._pickerMove(e);
            },
            buttonsClick: function (button) {
                _this.setCurrentMode("palette");
                if (button === "cancel") {
                    _this.events.fire(types_1.ColorpickerEvents.cancelClick, []);
                    return;
                }
                var alpha = _this._pickerState.alpha;
                var hexAlpha = alpha !== 1 ? (0, color_1.alphaToHex)(alpha) : "";
                var color = _this._pickerState.background + hexAlpha;
                if (button === "apply" && !_this.config.customColors.includes(color)) {
                    _this.setValue(color);
                    _this.events.fire(types_1.ColorpickerEvents.apply, []);
                    _this.events.fire(types_1.ColorpickerEvents.selectClick, []); // TODO: remove suite_7.0
                }
            },
            customColorClick: function () {
                _this.setView("picker");
            },
            oninput: function (e) {
                var name = (0, html_1.locate)(e);
                if (_this._inputTimeout) {
                    clearTimeout(_this._inputTimeout);
                }
                switch (name) {
                    case "hex_input": {
                        _this._inputTimeout = setTimeout(function () {
                            var val = e.target.value;
                            if (val.indexOf("#") === -1) {
                                val = "#".concat(val);
                            }
                            _this._pickerState.customHex = val;
                            if ((0, color_1.isHex)(val)) {
                                _this._pickerState.hsv = (0, color_1.HexToHSV)(val);
                                _this._pickerState.alpha = (0, color_1.getAlpha)(val);
                                _this.paint();
                            }
                        }, 100);
                        break;
                    }
                    case "alpha_input": {
                        _this._pickerState.customHex = "";
                        var val = parseInt(e.target.value);
                        if (val > 100) {
                            val = Math.trunc(val / 10);
                        }
                        if (val >= 0) {
                            _this._pickerState.alpha = val / 100;
                            _this.paint();
                        }
                        break;
                    }
                }
            },
            contextmenu: {
                ".dhx_palette__cell": function (e, node) {
                    e.preventDefault();
                    var index = _this.config.customColors.indexOf(node.data.color);
                    if (index !== -1) {
                        _this._removeCustomColor(index);
                    }
                    _this.paint();
                    return;
                },
            },
            mouseover: {
                ".dhx_palette__cell": function (e) {
                    if (e.target) {
                        (0, tooltip_1.tooltip)(en_1.default.rightClickToDelete, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
                ".dhx_colorpicker-custom-colors__picker": function (e) {
                    if (e.target) {
                        (0, tooltip_1.tooltip)(en_1.default.addNewColor, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
            },
        };
        this.events.on(types_1.ColorpickerEvents.change, function () {
            _this.paint();
        });
        // TODO: remove suite_7.0
        this.events.on(types_1.ColorpickerEvents.colorChange, function () {
            _this.paint();
        });
    };
    Colorpicker.prototype._pickerMove = function (e) {
        var _this = this;
        var name = (0, html_1.locate)(e);
        this._pickerState.customHex = "";
        if (name === "picker_palette") {
            this._setPaletteGrip(e);
        }
        else {
            this._activeRange = name;
            this._setRangeGrip(e);
        }
        var handler = name === "picker_palette" ? this._setPaletteGrip : this._setRangeGrip;
        var move = e.targetTouches ? "touchmove" : "mousemove";
        var up = e.targetTouches ? "touchend" : "mouseup";
        document.addEventListener(move, handler);
        document.addEventListener(up, function () {
            document.removeEventListener(move, handler);
            _this._activeRange = null;
        });
        this.paint();
    };
    Colorpicker.prototype._focusColor = function (value) {
        if (value === undefined || value.length < 4) {
            return false;
        }
        var hex = value.toUpperCase();
        if (!(0, color_1.isHex)(hex)) {
            return false;
        }
        var isInPalette = this.config.palette.reduce(function (state, col) {
            if (state) {
                return state;
            }
            col.forEach(function (color) {
                if (color.toUpperCase() === hex) {
                    state = true;
                    return;
                }
            });
            return state;
        }, false);
        var isInGrayShades = colors_1.grayShades.includes(hex);
        if (!isInPalette && !isInGrayShades) {
            var colors = this.getCustomColors();
            if (!colors.includes(hex.toUpperCase())) {
                colors.push(hex.toUpperCase());
            }
        }
        this._selected = hex || null;
        this._pickerState.hsv = (0, color_1.HexToHSV)(hex);
        this._pickerState.alpha = (0, color_1.getAlpha)(hex);
        return true;
    };
    Colorpicker.prototype._removeCustomColor = function (index) {
        this.config.customColors.splice(index, 1);
    };
    Colorpicker.prototype._getCells = function (colors, cellClass) {
        var _this = this;
        if (cellClass === void 0) { cellClass = ""; }
        return colors.reduce(function (cells, color) {
            var selected = (_this._selected || "").toUpperCase() === color.toUpperCase()
                ? "dhx_palette__cell--selected"
                : "";
            cells.push((0, dom_1.el)(".dhx_palette__cell", {
                class: "".concat(selected, " ").concat(cellClass),
                _data: { color: color },
                style: "background:".concat(color),
                tabindex: 0,
            }));
            return cells;
        }, []);
    };
    Colorpicker.prototype._getGrayShades = function () {
        return (0, dom_1.el)(".dhx_palette__row", this._getCells(colors_1.grayShades));
    };
    Colorpicker.prototype._getPalette = function () {
        var _this = this;
        return this.config.palette.reduce(function (total, row) {
            total.push((0, dom_1.el)(".dhx_palette__col", _this._getCells(row)));
            return total;
        }, []);
    };
    Colorpicker.prototype._getContent = function () {
        var view;
        if (this.config.pickerOnly) {
            view = [(0, picker_1.getPicker)(this, this._pickerState, this._handlers)];
        }
        else {
            view =
                this.config.mode === "palette"
                    ? __spreadArray(__spreadArray([
                        this.config.grayShades && this._getGrayShades()
                    ], this._getPalette(), true), [
                        !this.config.paletteOnly &&
                            (0, dom_1.el)(".dhx_colorpicker-custom-colors", {
                                onmouseover: this._handlers.mouseover,
                            }, [
                                (0, dom_1.el)(".dhx_colorpicker-custom-colors__header", [en_1.default.customColors]),
                                (0, dom_1.el)(".dhx_palette--custom.dhx_palette__row", __spreadArray(__spreadArray([], this._getCells(this.config.customColors, "dhx_custom-color__cell"), true), [
                                    (0, dom_1.el)(".dhx_colorpicker-custom-colors__picker", {
                                        class: "dxi dxi-plus",
                                        onclick: this._handlers.customColorClick,
                                        onmouseover: this._handlers.mouseover,
                                        tabindex: 0,
                                    }),
                                ], false)),
                            ]),
                    ], false) : [(0, picker_1.getPicker)(this, this._pickerState, this._handlers)];
        }
        return (0, dom_1.el)(".dhx_widget.dhx_colorpicker", {
            class: this.config.css,
            style: { width: this.config.width },
            "data-dhx-widget-id": this._uid,
        }, [
            (0, dom_1.el)(".dhx_palette", {
                onclick: this._handlers.click,
                oncontextmenu: this._handlers.contextmenu,
            }, view),
        ]);
    };
    Colorpicker.prototype._initHotKey = function () {
        var _this = this;
        var handlers = {
            enter: function (e) {
                if ((0, html_1.locateNodeByClassName)(e, "dhx_palette__cell")) {
                    var color = (0, core_2.rgbToHex)(e.target.style.background);
                    if (!_this.events.fire(types_1.ColorpickerEvents.beforeChange, [color]))
                        return;
                    _this._selected = color;
                    _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
                    _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
                }
                if ((0, html_1.locateNodeByClassName)(e, "dhx_colorpicker-custom-colors__picker")) {
                    _this.setCurrentMode("picker");
                }
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    return Colorpicker;
}(view_1.View));
exports.Colorpicker = Colorpicker;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.calculatePaletteGrip = exports.getPicker = void 0;
var color_1 = __webpack_require__(49);
var dom_1 = __webpack_require__(1);
var en_1 = __webpack_require__(50);
function getPicker(colorpicker, pickerState, handlers) {
    var rgb = (0, color_1.HSVtoRGB)(pickerState.hsv);
    pickerState.background = (0, color_1.RGBToHex)(rgb);
    var background = pickerState.background, hsv = pickerState.hsv, customHex = pickerState.customHex, alpha = pickerState.alpha;
    var currentBackground = (0, color_1.RGBToHex)((0, color_1.HSVtoRGB)({ h: hsv.h, s: 1, v: 1 }));
    var root = colorpicker.getRootView();
    var box = root.refs
        ? root.refs.picker_palette.el.getBoundingClientRect()
        : { height: 200, width: 218, x: 0, y: 0 };
    var height = box.height - 2;
    var width = box.width - 2;
    var gripTop = height - hsv.v * height - 4;
    var gripLeft = hsv.s * width - 4;
    var rangeWidth = box.width - 6;
    var hueRangeGripLeft = rangeWidth - ((360 - hsv.h) / 360) * rangeWidth;
    var alphaRangeGripLeft = alpha * rangeWidth;
    var hexAlpha = alpha !== 1 ? (0, color_1.alphaToHex)(alpha) : "";
    var hexInputValue = (0, color_1.isHex)(customHex)
        ? customHex.replace("#", "")
        : background.replace("#", "") + hexAlpha;
    var alphaInputValue = Math.round(alpha * 100);
    var isTransparency = colorpicker.config.transparency;
    return (0, dom_1.el)(".dhx_colorpicker-picker", {}, [
        (0, dom_1.el)(".dhx_colorpicker-picker__palette", {
            style: {
                height: 132,
                background: currentBackground,
            },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            "data-dhx-id": "picker_palette",
            _ref: "picker_palette",
        }, [
            (0, dom_1.el)(".dhx_palette_grip", {
                style: {
                    top: gripTop,
                    left: gripLeft,
                },
                tabindex: 0,
            }),
        ]),
        (0, dom_1.el)(".dhx_colorpicker-range.dhx_colorpicker-range--hue", {
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            "data-dhx-id": "hue_range",
            _key: "hue_range",
            _ref: "hue_range",
        }, [
            (0, dom_1.el)(".dhx_colorpicker-range__grip.dhx_colorpicker-range__grip--hue", {
                style: { left: hueRangeGripLeft },
                tabindex: 0,
            }),
        ]),
        isTransparency
            ? (0, dom_1.el)(".dhx_colorpicker-range.dhx_colorpicker-range--alpha", {
                onmousedown: handlers.mousedown,
                ontouchstart: handlers.touchstart,
                "data-dhx-id": "alpha_range",
                _key: "alpha_range",
                _ref: "alpha_range",
            }, [
                (0, dom_1.el)(".dhx_colorpicker-range__substrate"),
                (0, dom_1.el)(".dhx_colorpicker-range__background", {
                    style: {
                        backgroundImage: "linear-gradient(to right, transparent, ".concat(background, ")"),
                    },
                }),
                (0, dom_1.el)(".dhx_colorpicker-range__grip.dhx_colorpicker-range__grip--alpha", {
                    style: { left: alpha !== 1 ? alphaRangeGripLeft : null },
                    tabindex: 0,
                }),
            ])
            : null,
        (0, dom_1.el)(".dhx_colorpicker-value", [
            (0, dom_1.el)(".dhx_colorpicker-value__color", {
                style: { background: background + (0, color_1.alphaToHex)(alpha) },
            }),
            (0, dom_1.el)(".dhx_colorpicker-value__input-wrapper.dhx_colorpicker-value__input-wrapper--hex", [
                (0, dom_1.el)("input", {
                    class: "dhx_colorpicker-value__input dhx_colorpicker-value__input--hex",
                    style: { width: isTransparency ? 112 : 100 },
                    value: hexInputValue,
                    oninput: handlers.oninput,
                    maxlength: isTransparency ? "9" : "7",
                    _key: "hex_input",
                    "data-dhx-id": "hex_input",
                    "aria-label": "type color in HEX format",
                }),
            ]),
            isTransparency
                ? (0, dom_1.el)(".dhx_colorpicker-value__input-wrapper.dhx_colorpicker-value__input-wrapper--alpha", [
                    (0, dom_1.el)("input", {
                        class: "dhx_colorpicker-value__input dhx_colorpicker-value__input--alpha",
                        value: alphaInputValue,
                        oninput: handlers.oninput,
                        maxlength: "3",
                        _key: "alpha_input",
                        "data-dhx-id": "alpha_input",
                        "aria-label": "type opacity in percent",
                    }),
                ])
                : null,
        ]),
        (0, dom_1.el)(".dhx_colorpicker-picker__buttons", [
            !colorpicker.config.pickerOnly &&
                (0, dom_1.el)("button", {
                    class: "dhx_button dhx_button--size_medium dhx_button--view_link dhx_button--color_primary",
                    onclick: [handlers.buttonsClick, "cancel"],
                }, en_1.default.cancel),
            (0, dom_1.el)("button", {
                class: "dhx_button dhx_button--size_medium dhx_button--view_flat dhx_button--color_primary",
                onclick: [handlers.buttonsClick, "apply"],
            }, en_1.default.select),
        ]),
    ]);
}
exports.getPicker = getPicker;
function calculatePaletteGrip(rootView, top, left) {
    var paletteRect = rootView.refs.picker_palette.el.getBoundingClientRect();
    var bottom = paletteRect.height;
    var right = paletteRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    this._pickerState.hsv.s = pLeft / 100;
    this._pickerState.hsv.v = pTop / 100;
}
exports.calculatePaletteGrip = calculatePaletteGrip;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateRangeGrip = exports.calculatePaletteGrip = void 0;
function calculatePaletteGrip(clientRect, top, left) {
    var bottom = clientRect.height;
    var right = clientRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    return {
        s: pLeft / 100,
        v: pTop / 100,
    };
}
exports.calculatePaletteGrip = calculatePaletteGrip;
function calculateRangeGrip(clientRect, left) {
    var right = clientRect.width;
    left = left < 0 ? 0 : left > right ? right : left;
    return {
        h: Math.round(360 * (left / right)),
        alpha: Number((left / right).toFixed(2)),
        rangeLeft: left,
    };
}
exports.calculateRangeGrip = calculateRangeGrip;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loader = void 0;
var core_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(27);
var types_1 = __webpack_require__(26);
var core_2 = __webpack_require__(0);
var Loader = /** @class */ (function () {
    function Loader(parent, changes) {
        this._parent = parent;
        this._changes = changes; // todo: [dirty] mutation
    }
    Loader.prototype.load = function (url, driver) {
        var _this = this;
        // TODO: change way for checking lazyLoad
        if (url.config && !this._parent.events.fire(types_1.DataEvents.beforeLazyLoad, [])) {
            return;
        }
        return (this._parent.loadData = url
            .load()
            .then(function (data) {
            if (data) {
                return _this.parse(data, driver);
            }
            else {
                return [];
            }
        })
            .catch(function (error) {
            _this._parent.events.fire(types_1.DataEvents.loadError, [error]);
        }));
    };
    Loader.prototype.parse = function (data, driver) {
        var _this = this;
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        if (driver === "json" && !(0, helpers_1.hasJsonOrArrayStructure)(data)) {
            this._parent.events.fire(types_1.DataEvents.loadError, ["Uncaught SyntaxError: Unexpected end of input"]);
        }
        driver = (0, helpers_1.toDataDriver)(driver);
        data = driver.toJsonArray(data);
        if (!(data instanceof Array)) {
            var totalCount = data.total_count - 1;
            var from_1 = data.from;
            data = data.data;
            if (this._parent.getLength() === 0) {
                var newData = [];
                for (var i = 0, j = 0; i <= totalCount; i++) {
                    if (i >= from_1 && i <= from_1 + data.length - 1) {
                        newData.push(data[j]);
                        j++;
                    }
                    else {
                        newData.push({ $empty: true });
                    }
                }
                data = newData;
            }
            else {
                data.forEach(function (newItem, i) {
                    var index = from_1 + i;
                    var oldId = _this._parent.getId(index);
                    if ((0, core_1.isId)(oldId)) {
                        var emptyItem = _this._parent.getItem(oldId);
                        if (emptyItem && emptyItem.$empty) {
                            var id = newItem.id || emptyItem.id;
                            if ((0, core_2.isDefined)(newItem.id)) {
                                _this._parent.changeId(oldId, id, true);
                            }
                            _this._parent.update(id, __assign(__assign({}, newItem), { $empty: undefined }), true);
                        }
                    }
                    else {
                        (0, helpers_1.dhxWarning)("item not found");
                    }
                });
                this._parent.events.fire(types_1.DataEvents.afterLazyLoad, [from_1, data.length]);
                this._parent.events.fire(types_1.DataEvents.change);
                return data;
            }
        }
        if (this._parent.getInitialData()) {
            this._parent.removeAll();
        }
        this._parent.$parse(data);
        return data;
    };
    Loader.prototype.save = function (url) {
        var _this = this;
        var uniqueChanges = this._getUniqueOrder();
        var _loop_1 = function (el) {
            if (el.saving || el.pending) {
                (0, helpers_1.dhxWarning)("item is saving");
            }
            else {
                var prevEl_1 = this_1._findPrevState(el.id);
                if (prevEl_1 && prevEl_1.saving) {
                    var pending = new Promise(function (res, rej) {
                        prevEl_1.promise
                            .then(function () {
                            el.pending = false;
                            res(_this._setPromise(el, url));
                        })
                            .catch(function (err) {
                            _this._removeFromOrder(prevEl_1);
                            _this._setPromise(el, url);
                            (0, helpers_1.dhxWarning)(err);
                            rej(err);
                        });
                    });
                    this_1._addToChain(pending);
                    el.pending = true;
                }
                else {
                    this_1._setPromise(el, url);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, uniqueChanges_1 = uniqueChanges; _i < uniqueChanges_1.length; _i++) {
            var el = uniqueChanges_1[_i];
            _loop_1(el);
        }
        if (uniqueChanges.length) {
            this._parent.saveData.then(function () {
                _this._saving = false;
            });
        }
    };
    Loader.prototype.updateChanges = function (changes) {
        this._changes = changes;
    };
    Loader.prototype._setPromise = function (el, url) {
        var _this = this;
        var status;
        switch (el.status) {
            case "remove":
                status = "delete";
                break;
            case "add":
                status = "insert";
                break;
            default:
                status = el.status;
                break;
        }
        el.promise = url.save(el.obj, status);
        el.promise
            .then(function () {
            _this._removeFromOrder(el);
        })
            .catch(function (err) {
            el.saving = false;
            el.error = true;
            (0, helpers_1.dhxError)(err);
        });
        el.saving = true;
        this._saving = true;
        this._addToChain(el.promise);
        return el.promise;
    };
    Loader.prototype._addToChain = function (promise) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        if (this._parent.saveData && this._saving) {
            this._parent.saveData = this._parent.saveData.then(function () { return promise; });
        }
        else {
            this._parent.saveData = promise;
        }
    };
    Loader.prototype._findPrevState = function (id) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            if (el.id === id) {
                return el;
            }
        }
        return null;
    };
    Loader.prototype._removeFromOrder = function (el) {
        this._changes.order = this._changes.order.filter(function (item) { return !(0, helpers_1.isEqualObj)(item, el); });
    };
    Loader.prototype._getUniqueOrder = function () {
        return this._changes.order.reduce(function (unique, el) {
            var ind = unique.findIndex(function (item) { return item.id === el.id; });
            var involvedElem = ind > -1 ? unique[ind] : null;
            if (involvedElem && involvedElem.saving === false && involvedElem.status === "add") {
                if (el.status === "remove") {
                    unique.splice(ind, 1);
                }
                else {
                    involvedElem.obj = el.obj;
                }
            }
            else if (involvedElem && involvedElem.saving === false && involvedElem.status === "update") {
                unique.splice(ind, 1, el);
            }
            else {
                unique.push(el);
            }
            return unique;
        }, []);
    };
    return Loader;
}());
exports.Loader = Loader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.XMLDriver = void 0;
var xml_1 = __webpack_require__(119);
var ARRAY_NAME = "items";
var ITEM_NAME = "item";
// convert xml tag to js object, all subtags and attributes are mapped to the properties of result object
function tagToObject(tag, initialObj) {
    initialObj = initialObj || {};
    // map attributes
    var a = tag.attributes;
    if (a && a.length) {
        for (var i = 0; i < a.length; i++) {
            initialObj[a[i].name] = a[i].value;
        }
    }
    // map subtags
    var b = tag.childNodes;
    for (var i = 0; i < b.length; i++) {
        if (b[i].nodeType === 1) {
            var name_1 = b[i].tagName;
            if (initialObj[name_1]) {
                if (typeof initialObj[name_1].push !== "function") {
                    initialObj[name_1] = [initialObj[name_1]];
                }
                initialObj[name_1].push(tagToObject(b[i], {}));
            }
            else {
                initialObj[name_1] = tagToObject(b[i], {}); // sub-object for complex subtags
            }
        }
    }
    return initialObj;
}
var XMLDriver = /** @class */ (function () {
    function XMLDriver() {
    }
    XMLDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    XMLDriver.prototype.toJsonObject = function (data) {
        var doc;
        if (typeof data === "string") {
            doc = this._fromString(data);
        }
        return tagToObject(doc);
    };
    XMLDriver.prototype.serialize = function (data) {
        return (0, xml_1.jsonToXML)(data);
    };
    XMLDriver.prototype.getFields = function (row) {
        return row;
    };
    XMLDriver.prototype.getRows = function (data) {
        if (typeof data === "string") {
            data = this._fromString(data);
        }
        if (data) {
            var childNodes = data.childNodes && data.childNodes[0] && data.childNodes[0].childNodes;
            if (!childNodes || !childNodes.length) {
                return null;
            }
            return this._getRows(childNodes);
        }
        return [];
    };
    XMLDriver.prototype._getRows = function (nodes) {
        var result = [];
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].tagName === ITEM_NAME) {
                result.push(this._nodeToJS(nodes[i]));
            }
        }
        return result;
    };
    XMLDriver.prototype._fromString = function (data) {
        try {
            return new DOMParser().parseFromString(data, "text/xml");
        }
        catch (_a) {
            return null;
        }
    };
    XMLDriver.prototype._nodeToJS = function (node) {
        var result = {};
        if (this._haveAttrs(node)) {
            var attrs = node.attributes;
            for (var i = 0; i < attrs.length; i++) {
                var _a = attrs[i], name_2 = _a.name, value = _a.value;
                result[name_2] = this._toType(value);
            }
        }
        if (node.nodeType === 3) {
            result.value = result.value || this._toType(node.textContent);
            return result;
        }
        var childNodes = node.childNodes;
        if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
                var subNode = childNodes[i];
                var tag = subNode.tagName;
                if (!tag) {
                    continue;
                }
                if (tag === ARRAY_NAME && subNode.childNodes) {
                    result[tag] = this._getRows(subNode.childNodes);
                }
                else {
                    if (this._haveAttrs(subNode)) {
                        result[tag] = this._nodeToJS(subNode);
                    }
                    else {
                        result[tag] = this._toType(subNode.textContent);
                    }
                }
            }
        }
        return result;
    };
    XMLDriver.prototype._toType = function (val) {
        if (val === "false" || val === "true") {
            return val === "true";
        }
        return val;
    };
    XMLDriver.prototype._haveAttrs = function (node) {
        return node.attributes && node.attributes.length;
    };
    return XMLDriver;
}());
exports.XMLDriver = XMLDriver;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonToXML = void 0;
var INDENT_STEP = 4;
function ws(count) {
    return " ".repeat(count);
}
function itemToXML(item, indent) {
    if (indent === void 0) { indent = INDENT_STEP; }
    var result = ws(indent) + "<item>\n";
    for (var key in item) {
        if (Array.isArray(item[key])) {
            result += ws(indent + INDENT_STEP) + "<".concat(key, ">\n");
            result +=
                item[key].map(function (subItem) { return itemToXML(subItem, indent + INDENT_STEP * 2); }).join("\n") +
                    "\n";
            result += ws(indent + INDENT_STEP) + "</".concat(key, ">\n");
        }
        else {
            result += ws(indent + INDENT_STEP) + "<".concat(key, ">").concat(item[key], "</").concat(key, ">\n");
        }
    }
    result += ws(indent) + "</item>";
    return result;
}
function jsonToXML(data, root) {
    if (root === void 0) { root = "root"; }
    var result = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<".concat(root, ">");
    for (var i = 0; i < data.length; i++) {
        result += "\n" + itemToXML(data[i]);
    }
    return result + "\n</".concat(root, ">");
}
exports.jsonToXML = jsonToXML;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Sort = void 0;
var helpers_1 = __webpack_require__(27);
var Sort = /** @class */ (function () {
    function Sort() {
    }
    Sort.prototype.sort = function (array, by, perm) {
        this._createSorter(by);
        if (perm === by)
            by = null;
        if (perm || by)
            this._sort(array, perm, by);
    };
    Sort.prototype._createSorter = function (by) {
        var _this = this;
        if (by && !by.rule) {
            by.rule = function (a, b) {
                var _a, _b;
                var aa = (_a = _this._checkVal(by.as, a[by.by])) !== null && _a !== void 0 ? _a : "";
                var bb = (_b = _this._checkVal(by.as, b[by.by])) !== null && _b !== void 0 ? _b : "";
                // [TODO] why we need naturalCompare
                return (0, helpers_1.naturalCompare)(aa.toString(), bb.toString());
            };
        }
    };
    Sort.prototype._checkVal = function (method, val) {
        return method ? method.call(this, val) : val;
    };
    Sort.prototype._sort = function (arr, conf, conf2) {
        var _this = this;
        var dir = {
            asc: 1,
            desc: -1,
        };
        return arr.sort(function (a, b) {
            var t = 0;
            if (conf)
                t = conf.rule.call(_this, a, b) * (dir[conf.dir] || dir.asc);
            if (t === 0 && conf2)
                t = conf2.rule.call(_this, a, b) * (dir[conf2.dir] || dir.asc);
            return t;
        });
    };
    return Sort;
}());
exports.Sort = Sort;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeCollection = void 0;
var core_1 = __webpack_require__(0);
var datacollection_1 = __webpack_require__(66);
var dataproxy_1 = __webpack_require__(34);
var helpers_1 = __webpack_require__(27);
var types_1 = __webpack_require__(26);
function addToOrder(store, obj, parent, index) {
    if (index !== undefined && index !== -1 && store[parent] && store[parent][index]) {
        store[parent].splice(index, 0, obj);
    }
    else {
        if (!store[parent]) {
            store[parent] = [];
        }
        store[parent].push(obj);
    }
}
var TreeCollection = /** @class */ (function (_super) {
    __extends(TreeCollection, _super);
    function TreeCollection(config, events) {
        var _a;
        var _this = _super.call(this, config, events) || this;
        _this._childs = {};
        var root = (_this._root = (config && config.rootId) || "_ROOT_" + (0, core_1.uid)());
        _this._childs = (_a = {}, _a[root] = [], _a);
        _this._initChilds = null;
        return _this;
    }
    TreeCollection.prototype.add = function (newItem, index, parent) {
        var _this = this;
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [newItem])) {
            return;
        }
        if (typeof newItem !== "object") {
            newItem = {
                value: newItem,
            };
        }
        var out;
        if (Array.isArray(newItem)) {
            out = newItem.map(function (element, key) {
                return _this._add(element, index, parent, key);
            });
        }
        else {
            out = this._add(newItem, index, parent);
        }
        this._reapplyFilters(false);
        return out;
    };
    TreeCollection.prototype.getRoot = function () {
        return this._root;
    };
    TreeCollection.prototype.getParent = function (id, asObj) {
        if (asObj === void 0) { asObj = false; }
        if (!this._pull[id]) {
            return null;
        }
        var parent = this._pull[id].parent;
        return asObj ? this._pull[parent] : parent;
    };
    TreeCollection.prototype.getItems = function (id) {
        if (this._childs && this._childs[id]) {
            return this._childs[id];
        }
        return [];
    };
    TreeCollection.prototype.getLength = function (id) {
        if (id === void 0) { id = this._root; }
        if (!this._childs[id]) {
            return null;
        }
        return this._childs[id].length;
    };
    TreeCollection.prototype.removeAll = function (id) {
        var _a;
        if (!(0, core_1.isId)(id)) {
            _super.prototype.removeAll.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
        else if (this._childs[id]) {
            var childs = __spreadArray([], this._childs[id], true);
            for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
                var child = childs_1[_i];
                this.remove(child.id);
            }
        }
    };
    TreeCollection.prototype.getIndex = function (id) {
        var parent = this.getParent(id);
        if (!parent || !this._childs[parent]) {
            return -1;
        }
        return this._childs[parent].findIndex(function (i) { return (i === null || i === void 0 ? void 0 : i.id) == id; });
    };
    TreeCollection.prototype.sort = function (rule) {
        var _this = this;
        if (!rule) {
            this._childs = {};
            // [dirty]
            this._parse_data(Object.keys(this._pull).map(function (key) { return _this._pull[key]; }));
            this._reapplyFilters(false);
        }
        else {
            for (var key in this._childs) {
                this._sort.sort(this._childs[key], rule);
            }
            if (this._initChilds && Object.keys(this._initChilds).length) {
                for (var key in this._initChilds) {
                    this._sort.sort(this._initChilds[key], rule);
                }
            }
        }
        this.events.fire(types_1.DataEvents.change, [undefined, "sort", rule]);
    };
    TreeCollection.prototype.filter = function (rule, config, silent) {
        if (config === null || config === void 0 ? void 0 : config.$restore) {
            rule = this._normalizeFilters(rule || this._filters);
        }
        if (!rule || !(config === null || config === void 0 ? void 0 : config.add)) {
            this.restoreOrder();
            if (!(config === null || config === void 0 ? void 0 : config.$restore)) {
                for (var key in this._filters) {
                    var _a = this._filters[key], rule_1 = _a.rule, conf = _a.config;
                    if (conf === null || conf === void 0 ? void 0 : conf.permanent) {
                        this._applyFilter(rule_1, conf);
                    }
                    else {
                        delete this._filters[key];
                    }
                }
            }
        }
        var id;
        if (rule && !(config === null || config === void 0 ? void 0 : config.$restore)) {
            id = (config === null || config === void 0 ? void 0 : config.id) || (0, core_1.uid)();
            if (!config)
                config = {};
            config.type = config.type || types_1.TreeFilterType.all;
            this._filters[id] = { rule: rule, config: config };
            this._applyFilter(rule, config);
        }
        else {
            for (var key in rule) {
                this._applyFilter(rule[key], this._filters[key].config);
            }
        }
        if (!silent) {
            var filters = this._getPureFilters(this._filters);
            this.events.fire(types_1.DataEvents.filter, [(0, core_1.isEmptyObj)(filters) ? null : filters]);
        }
        return id;
    };
    TreeCollection.prototype.restoreOrder = function () {
        if (this._initChilds) {
            this._childs = this._initChilds;
            this._initChilds = null;
        }
    };
    TreeCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.forEach = function (callback, parent, level) {
        if (parent === void 0) { parent = this._root; }
        if (level === void 0) { level = Infinity; }
        if (!this.haveItems(parent) || level < 1) {
            return;
        }
        var array = this._childs[parent];
        for (var i = 0; i < array.length; i++) {
            callback.call(this, array[i], i, array);
            if (this.haveItems(array[i].id)) {
                this.forEach(callback, array[i].id, --level);
            }
        }
    };
    TreeCollection.prototype.eachChild = function (id, callback, direct, checkItem) {
        if (direct === void 0) { direct = true; }
        if (checkItem === void 0) { checkItem = function () { return true; }; }
        if (!this.haveItems(id)) {
            return;
        }
        for (var i = 0; i < this._childs[id].length; i++) {
            callback.call(this, this._childs[id][i], i);
            if (direct && checkItem(this._childs[id][i])) {
                this.eachChild(this._childs[id][i].id, callback, direct, checkItem);
            }
        }
    };
    TreeCollection.prototype.getNearId = function (id) {
        return id; // for selection
    };
    TreeCollection.prototype.loadItems = function (id, driver) {
        var _this = this;
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        if (!this.events.fire(types_1.DataEvents.beforeItemLoad, [id])) {
            return;
        }
        var urlPart = this.config.autoload.toString();
        var url = urlPart + (urlPart.includes("?") ? "&id=".concat(id) : "?id=".concat(id));
        var proxy = new dataproxy_1.DataProxy(url);
        proxy
            .load()
            .then(function (data) {
            driver = (0, helpers_1.toDataDriver)(driver);
            data = driver.toJsonArray(data);
            _this._parse_data(data, id);
            _this.events.fire(types_1.DataEvents.change);
            _this.events.fire(types_1.DataEvents.afterItemLoad, [id]);
        })
            .catch(function (error) {
            _this.events.fire(types_1.DataEvents.loadError, [error]);
        });
    };
    TreeCollection.prototype.refreshItems = function (id, driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        this.removeAll(id);
        this.loadItems(id, driver);
    };
    TreeCollection.prototype.eachParent = function (id, callback, self) {
        if (self === void 0) { self = false; }
        var item = this.getItem(id);
        if (!item) {
            return;
        }
        if (self) {
            callback.call(this, item);
        }
        if (item.parent === this._root) {
            return;
        }
        var parent = this.getItem(item.parent);
        callback.call(this, parent);
        this.eachParent(item.parent, callback);
    };
    TreeCollection.prototype.haveItems = function (id) {
        return id in this._childs;
    };
    TreeCollection.prototype.canCopy = function (id, target) {
        if (id === target) {
            return false;
        }
        var canCopy = true;
        this.eachParent(target, function (item) { return (item.id === id ? (canCopy = false) : null); }); // locate return string
        return canCopy;
    };
    TreeCollection.prototype.serialize = function (driver, checkItem) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        var data = this._serialize(this._root, checkItem);
        var dataDriver = (0, helpers_1.toDataDriver)(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    TreeCollection.prototype.getId = function (index, parent) {
        if (parent === void 0) { parent = this._root; }
        if (!this._childs[parent] || !this._childs[parent][index]) {
            return;
        }
        return this._childs[parent][index].id;
    };
    // Non public API from suite_6.4
    TreeCollection.prototype.map = function (callback, parent, direct) {
        if (parent === void 0) { parent = this._root; }
        if (direct === void 0) { direct = true; }
        var result = [];
        if (!this.haveItems(parent)) {
            return result;
        }
        for (var i = 0; i < this._childs[parent].length; i++) {
            result.push(callback.call(this, this._childs[parent][i], i, this._childs));
            if (direct) {
                var childResult = this.map(callback, this._childs[parent][i].id, direct);
                result = result.concat(childResult);
            }
        }
        return result;
    };
    TreeCollection.prototype.getRawData = function (from, to, order, mode, parent) {
        parent = parent !== null && parent !== void 0 ? parent : this._root;
        var out;
        if (!this._childs[parent])
            return [];
        if (parent === this._root)
            out = _super.prototype.getRawData.call(this, from, to, this._childs[parent]);
        else
            out = this._childs[parent];
        if (mode === 2) {
            return this.flatten(out);
        }
        return out;
    };
    TreeCollection.prototype.flatten = function (input) {
        var _this = this;
        var out = [];
        input.forEach(function (a) {
            out.push(a);
            var kids = _this._childs[a.id];
            if (kids && a.$opened) {
                out = out.concat(_this.flatten(kids));
            }
        });
        return out;
    };
    TreeCollection.prototype._add = function (newItem, index, parent, key) {
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        this._setParent(newItem, parent);
        if (key > 0 && index !== -1) {
            index = index + 1;
        }
        var id = _super.prototype._add.call(this, newItem, index);
        if (Array.isArray(newItem.items)) {
            for (var _i = 0, _a = newItem.items; _i < _a.length; _i++) {
                var item = _a[_i];
                this.add(item, -1, newItem.id);
            }
        }
        return id;
    };
    TreeCollection.prototype._setParent = function (item, parent) {
        item.parent = item.parent ? item.parent.toString() : parent;
        var parentItem = this._pull[item.parent];
        if (parentItem && !parentItem.items) {
            parentItem.items = [];
        }
    };
    TreeCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        var currentChilds = this._childs[id];
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target === this && !this.canCopy(id, targetId)) {
            return null;
        }
        var itemCopy = (0, helpers_1.copyWithoutInner)(this.getItem(id), { items: true });
        if (target.exists(id)) {
            itemCopy.id = (0, core_1.uid)();
        }
        if (!(0, helpers_1.isTreeCollection)(target)) {
            target.add(itemCopy, index);
            return;
        }
        if (this.exists(id)) {
            itemCopy.parent = targetId;
            if (target !== this && targetId === this._root) {
                itemCopy.parent = target.getRoot();
            }
            target.add(itemCopy, index);
            id = itemCopy.id;
        }
        if (currentChilds) {
            for (var _i = 0, currentChilds_1 = currentChilds; _i < currentChilds_1.length; _i++) {
                var child = currentChilds_1[_i];
                var childId = child.id;
                var childIndex = this.getIndex(childId);
                if (typeof id === "string") {
                    this.copy(childId, childIndex, target, id);
                }
            }
        }
        return id;
    };
    TreeCollection.prototype._move = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target !== this) {
            if (!(0, helpers_1.isTreeCollection)(target)) {
                // move to datacollection
                target.add((0, helpers_1.copyWithoutInner)(this.getItem(id)), index);
                this.remove(id);
                return;
            }
            var returnId = this.copy(id, index, target, targetId);
            this.remove(id);
            return returnId;
        }
        // move inside
        if (!this.canCopy(id, targetId)) {
            return null;
        }
        var parent = this.getParent(id);
        var parentIndex = this.getIndex(id);
        // get item from parent array and move to target array
        var spliced = this._childs[parent].splice(parentIndex, 1)[0];
        spliced.parent = targetId; // need for next moving, ... not best solution, may be full method for get item
        if (!this._childs[parent].length) {
            delete this._childs[parent];
        }
        if (!this.haveItems(targetId)) {
            this._childs[targetId] = [];
        }
        if (index === -1) {
            index = this._childs[targetId].push(spliced);
        }
        else {
            this._childs[targetId].splice(index, 0, spliced);
        }
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    TreeCollection.prototype._reset = function (id) {
        var _a;
        if ((0, core_1.isId)(id)) {
            var childs = __spreadArray([], this._childs[id], true);
            for (var _i = 0, childs_2 = childs; _i < childs_2.length; _i++) {
                var child = childs_2[_i];
                this.remove(child.id);
            }
        }
        else {
            _super.prototype._reset.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
    };
    TreeCollection.prototype._removeCore = function (id) {
        if (this._pull[id]) {
            var parent_1 = this.getParent(id);
            this._childs[parent_1] = this._childs[parent_1].filter(function (item) { return item.id !== id; });
            if (parent_1 !== this._root && !this._childs[parent_1].length) {
                delete this._childs[parent_1];
            }
            if (this._initChilds && this._initChilds[parent_1]) {
                this._initChilds[parent_1] = this._initChilds[parent_1].filter(function (item) { return item.id !== id; });
                if (parent_1 !== this._root && !this._initChilds[parent_1].length) {
                    delete this._initChilds[parent_1];
                }
            }
            if (this._initOrder && this._initOrder.length) {
                this._initOrder = this._initOrder.filter(function (el) { return el.id !== id; });
            }
            this._fastDeleteChilds(this._childs, id);
            if (this._initChilds) {
                this._fastDeleteChilds(this._initChilds, id);
            }
        }
    };
    TreeCollection.prototype._addToOrder = function (_order, obj, index) {
        var childs = this._childs;
        var initChilds = this._initChilds;
        var parent = obj.parent;
        this._pull[obj.id] = obj;
        if (obj.parent &&
            this._pull[obj.parent] &&
            this._pull[obj.parent].items &&
            !this._pull[obj.parent].items.find(function (item) { return item.id === obj.id; })) {
            this._pull[obj.parent].items.push(obj);
        }
        _super.prototype._addToOrder.call(this, _order, obj, index);
        addToOrder(childs, obj, parent, index);
        if (initChilds) {
            addToOrder(initChilds, obj, parent, index);
        }
    };
    TreeCollection.prototype._parse_data = function (data, parent) {
        var _a;
        if (parent === void 0) { parent = this._root; }
        var index = this._order.length;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (this.config.init) {
                obj = this.config.init(obj);
            }
            if (obj && typeof obj !== "object") {
                obj = {
                    value: obj,
                };
            }
            obj.id = (_a = obj.id) !== null && _a !== void 0 ? _a : (0, core_1.uid)();
            obj.parent =
                typeof obj.parent === "undefined" || obj.parent === null || (obj.parent && obj.$items)
                    ? parent
                    : obj.parent;
            if (this._pull[obj.id]) {
                (0, helpers_1.dhxError)("Item ".concat(obj.id, " already exist"));
            }
            this._pull[obj.id] = obj;
            this._order[index++] = obj;
            if (!this._childs[obj.parent]) {
                this._childs[obj.parent] = [];
            }
            this._childs[obj.parent].push(obj);
            if (obj.items && obj.items instanceof Object) {
                this._parse_data(obj.items, obj.id);
            }
        }
    };
    TreeCollection.prototype._fastDeleteChilds = function (target, id) {
        if (this._pull[id]) {
            delete this._pull[id];
        }
        if (!target[id]) {
            return;
        }
        for (var i = 0; i < target[id].length; i++) {
            this._fastDeleteChilds(target, target[id][i].id);
        }
        delete target[id];
    };
    TreeCollection.prototype._recursiveFilter = function (rule, config, current, level, newChilds) {
        var _this = this;
        var childs = this._childs[current];
        if (!childs) {
            return;
        }
        var condition = function (item) {
            switch (config.type) {
                case types_1.TreeFilterType.all: {
                    return true;
                }
                case types_1.TreeFilterType.level: {
                    return level === config.level;
                }
                case types_1.TreeFilterType.leafs: {
                    return !_this.haveItems(item.id);
                }
            }
        };
        if (typeof rule === "function") {
            var customRule = function (item) { return condition(item) && rule(item); };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
            else if (current === this._root) {
                newChilds[current] = [];
            }
        }
        else {
            var customRule = function (item) {
                var _a;
                var responseOfRule = true;
                for (var compare in rule) {
                    if (rule[compare].by && rule[compare].match !== "") {
                        responseOfRule = rule[compare].compare
                            ? rule[compare].compare(item[rule[compare].by], rule[compare].match, item)
                            : ((_a = item[rule[compare].by]) === null || _a === void 0 ? void 0 : _a.toString().toLocaleLowerCase().indexOf(rule[compare].match.toString().toLowerCase())) !== -1;
                    }
                    if (!responseOfRule)
                        break;
                }
                return condition(item) && responseOfRule;
            };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
            else if (current === this._root) {
                newChilds[current] = [];
            }
        }
        for (var _i = 0, childs_3 = childs; _i < childs_3.length; _i++) {
            var child = childs_3[_i];
            this._recursiveFilter(rule, config, child.id, level + 1, newChilds);
        }
    };
    TreeCollection.prototype._serialize = function (parent, fn) {
        var _this = this;
        if (parent === void 0) { parent = this._root; }
        return this.map(function (item) {
            var itemCopy = {};
            for (var key in item) {
                if (key === "parent" || key === "items" || key.startsWith("$")) {
                    continue;
                }
                itemCopy[key] = item[key];
            }
            if (fn) {
                itemCopy = fn(itemCopy);
            }
            if (_this.haveItems(item.id)) {
                itemCopy.items = _this._serialize(item.id, fn);
            }
            return itemCopy;
        }, parent, false);
    };
    TreeCollection.prototype._applyFilter = function (rule, config) {
        var _this = this;
        if (!rule || (typeof rule !== "function" && (0, core_1.isEmptyObj)(rule)))
            return;
        if (!this._initOrder) {
            this._initOrder = this._order;
        }
        if (!this._initChilds) {
            this._initChilds = this._childs;
        }
        var filter;
        var newChilds = {};
        if (typeof rule !== "function") {
            filter = {};
            if ((0, core_1.isDefined)(rule.by)) {
                filter[rule.by] = rule;
            }
            else {
                for (var key in rule) {
                    filter[key] = rule[key];
                }
            }
        }
        else {
            filter = rule;
        }
        this._recursiveFilter(filter, config, this._root, 0, newChilds);
        Object.keys(newChilds).forEach(function (key) {
            var parentId = _this.getParent(key);
            var current = _this.getItem(key);
            while (parentId) {
                if (!newChilds[parentId]) {
                    newChilds[parentId] = [];
                }
                if (current && !newChilds[parentId].find(function (x) { return x.id === current.id; })) {
                    newChilds[parentId].push(current);
                }
                current = _this.getItem(parentId);
                parentId = _this.getParent(parentId);
            }
        });
        this._childs = newChilds;
    };
    TreeCollection.prototype._normalizeFilters = function (filters) {
        var rules = {};
        for (var key in filters) {
            rules[key] = filters[key].rule;
        }
        return rules;
    };
    return TreeCollection;
}(datacollection_1.DataCollection));
exports.TreeCollection = TreeCollection;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dragManager = void 0;
var html_1 = __webpack_require__(4);
var ts_grid_1 = __webpack_require__(52);
var CollectionStore_1 = __webpack_require__(155);
var types_1 = __webpack_require__(26);
var helpers_1 = __webpack_require__(27);
var core_1 = __webpack_require__(0);
function getElementFromPoint(e) {
    var clientX = e.targetTouches
        ? e.targetTouches[0].clientX
        : e.clientX;
    var clientY = e.targetTouches
        ? e.targetTouches[0].clientY
        : e.clientY;
    var el = document.elementFromPoint(clientX, clientY);
    return (el === null || el === void 0 ? void 0 : el.shadowRoot) ? el.shadowRoot.elementFromPoint(clientX, clientY) : el;
}
function getPosition(e) {
    var y = e.targetTouches
        ? e.targetTouches[0].clientY
        : e.clientY;
    var element = (0, html_1.locateNode)(getElementFromPoint(e));
    if (!element) {
        return null;
    }
    var treeLine = element.childNodes[0];
    if (treeLine) {
        var _a = treeLine.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
        return (y - top_1) / height;
    }
}
function dragEventContent(element, elements, exhaustiveList) {
    if (exhaustiveList === void 0) { exhaustiveList = false; }
    var rect = element.getBoundingClientRect();
    var ghost = document.createElement("div");
    var clone = element.cloneNode(true);
    var fontSize = window.getComputedStyle(element.parentElement).fontSize;
    clone.style.width = rect.width + "px";
    clone.style.height = rect.height + "px";
    clone.style.maxHeight = rect.height + "px";
    clone.style.opacity = "0.8";
    clone.style.fontSize = fontSize;
    if (!exhaustiveList || !elements || !elements.length) {
        ghost.appendChild(clone);
    }
    if (elements && elements.length) {
        elements.forEach(function (node, key) {
            var nodeClone = node.cloneNode(true);
            nodeClone.style.width = rect.width + "px";
            nodeClone.style.height = rect.height + "px";
            nodeClone.style.maxHeight = rect.height + "px";
            nodeClone.style.top = (key + 1) * 12 - rect.height - rect.height * key + "px";
            nodeClone.style.left = (key + 1) * 12 + "px";
            nodeClone.style.opacity = "0.6";
            nodeClone.style.zIndex = "".concat(-key - 1);
            if (!exhaustiveList) {
                nodeClone.style.fontSize = fontSize;
                nodeClone.style.overflow = "hidden";
            }
            ghost.appendChild(nodeClone);
        });
    }
    ghost.className = "dhx_drag-ghost";
    return ghost;
}
var DragManager = /** @class */ (function () {
    function DragManager() {
        var _this = this;
        this._transferData = {};
        this._canMove = true;
        this._isDrag = false;
        this._onMouseMove = function (e) {
            if (!_this._transferData.start) {
                return;
            }
            var pageX = e.targetTouches ? e.targetTouches[0].pageX : e.pageX;
            var pageY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
            var _a = _this._transferData, x = _a.x, y = _a.y, start = _a.start, componentId = _a.componentId;
            if (!_this._transferData.ghost) {
                if (Math.abs(x - pageX) < 3 && Math.abs(y - pageY) < 3) {
                    return;
                }
                else {
                    var ghost = _this._onDragStart(start, componentId, e);
                    if (!ghost) {
                        _this._endDrop(e);
                        return;
                    }
                    else {
                        _this._transferData.ghost = ghost;
                        document.body.appendChild(_this._transferData.ghost);
                    }
                }
            }
            _this._moveGhost(pageX, pageY);
            _this._onDrag(e);
        };
        this._onMouseUp = function (e) {
            if (!_this._transferData.x) {
                return;
            }
            if (_this._transferData.ghost) {
                _this._removeGhost();
                _this._onDrop(e);
            }
            else {
                _this._endDrop(e);
            }
            if (!e.targetTouches) {
                document.removeEventListener("mousemove", _this._onMouseMove);
                document.removeEventListener("mouseup", _this._onMouseUp);
            }
            else {
                document.removeEventListener("touchmove", _this._onMouseMove);
                document.removeEventListener("touchend", _this._onMouseUp);
            }
        };
    }
    DragManager.prototype.setItem = function (id, item) {
        CollectionStore_1.collectionStore.setItem(id, item);
    };
    DragManager.prototype.onMouseDown = function (event, source, itemsForGhost) {
        // onmousedown only for target objects
        if (event.which !== 1 && !event.targetTouches) {
            return;
        }
        if (!event.targetTouches) {
            document.addEventListener("mousemove", this._onMouseMove);
            document.addEventListener("mouseup", this._onMouseUp);
        }
        else {
            document.addEventListener("touchmove", this._onMouseMove, false);
            document.addEventListener("touchend", this._onMouseUp, false);
        }
        var element = getElementFromPoint(event);
        var item = (0, html_1.locateNode)(element, "data-dhx-id");
        var id = item && item.getAttribute("data-dhx-id");
        var componentId = (0, html_1.locate)(element, "data-dhx-widget-id");
        if (Array.isArray(source) && source.includes(id)) {
            this._transferData.source = __spreadArray([], source, true);
            this._itemsForGhost = itemsForGhost;
        }
        else {
            this._transferData.source = [id];
            this._itemsForGhost = null;
        }
        if (id && componentId) {
            var _a = (0, html_1.getBox)(item), left = _a.left, top_2 = _a.top;
            var pageX = event.targetTouches
                ? event.targetTouches[0].pageX
                : event.pageX;
            var pageY = event.targetTouches
                ? event.targetTouches[0].pageY
                : event.pageY;
            this._transferData.initXOffset = pageX - left;
            this._transferData.initYOffset = pageY - top_2;
            this._transferData.x = pageX;
            this._transferData.y = pageY;
            this._transferData.componentId = componentId;
            this._transferData.start = id;
            this._transferData.item = item;
        }
    };
    DragManager.prototype.isDrag = function () {
        return this._isDrag;
    };
    DragManager.prototype.cancelCanDrop = function (event) {
        this._canMove = false;
        this._isDrag = false;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        var collection = CollectionStore_1.collectionStore.getItem(dropComponentId);
        if (collection && target) {
            collection.events.fire(types_1.DragEvents.cancelDrop, [data, event]);
        }
        this._transferData.dropComponentId = null;
        this._transferData.target = null;
    };
    DragManager.prototype._moveGhost = function (x, y) {
        if (this._transferData.ghost) {
            this._transferData.ghost.style.left = x - this._transferData.initXOffset + "px";
            this._transferData.ghost.style.top = y - this._transferData.initYOffset + "px";
        }
    };
    DragManager.prototype._removeGhost = function () {
        document.body.removeChild(this._transferData.ghost);
    };
    DragManager.prototype._onDrop = function (e) {
        if (!this._canMove) {
            this._endDrop(e);
            return;
        }
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId, dropPosition = _a.dropPosition;
        var data = { start: start, source: source, target: target, dropPosition: dropPosition };
        var component = CollectionStore_1.collectionStore.getItem(dropComponentId);
        var config = component && component.config;
        if (!component || config.dragMode === "source") {
            this._endDrop(e);
            return;
        }
        if (component.events.fire(types_1.DragEvents.beforeDrop, [data, e])) {
            var to = {
                id: target,
                component: component,
            };
            var from = {
                id: start,
                component: this._transferData.component,
                newId: null,
            };
            this._move(from, to);
            if (from.newId && from.component !== to.component)
                data.start = from.newId;
            to.component.events.fire(types_1.DragEvents.afterDrop, [data, e]);
        }
        this._endDrop(e);
    };
    DragManager.prototype._onDragStart = function (id, componentId, e) {
        var component = CollectionStore_1.collectionStore.getItem(componentId);
        var config = component.config;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        if (config.dragMode === "target" || component._pregroupData) {
            return null;
        }
        var ghost = dragEventContent(this._transferData.item, this._itemsForGhost, config.dragItem === "row" || config.dragItem === "column" || config.dragItem === "both");
        var ans = component.events.fire(types_1.DragEvents.beforeDrag, [data, e, ghost]);
        if (!ans || !(0, core_1.isId)(id)) {
            return null;
        }
        component.events.fire(types_1.DragEvents.dragStart, [data, e]);
        this._isDrag = true;
        this._toggleTextSelection(true);
        this._transferData.component = component;
        this._transferData.dragConfig = config;
        return ghost;
    };
    DragManager.prototype._onDrag = function (e) {
        var element = getElementFromPoint(e);
        var collectionId = (0, html_1.locate)(element, "data-dhx-widget-id");
        var component = CollectionStore_1.collectionStore.getItem(collectionId);
        if (!component) {
            if (this._canMove) {
                this.cancelCanDrop(e);
            }
            return;
        }
        var isTreeHeaderOrFooter = !!(0, html_1.locateNodeByClassName)(element, "dhx_grid-header") ||
            !!(0, html_1.locateNodeByClassName)(element, "dhx_grid-footer");
        var gridConfig = component.config.columns
            ? component.config
            : undefined;
        var isColumnDrag = gridConfig && (gridConfig.dragItem === "both" || gridConfig.dragItem === "column");
        if (isTreeHeaderOrFooter && !isColumnDrag) {
            if (this._canMove) {
                this.cancelCanDrop(e);
            }
            return;
        }
        var id = (0, html_1.locate)(element, "data-dhx-id");
        var rootId = (0, html_1.locate)(element, "data-dhx-root-id");
        if (!id && !rootId) {
            this.cancelCanDrop(e);
            this._transferData.dropComponentId = collectionId;
            this._transferData.target = null;
            this._canDrop(e);
            return;
        }
        var _a = this._transferData, dropComponentId = _a.dropComponentId, start = _a.start, source = _a.source, target = _a.target, componentId = _a.componentId, dropPosition = _a.dropPosition;
        if (component.config.dropBehaviour === "complex") {
            var pos = getPosition(e);
            if (pos <= 0.25) {
                this._transferData.dropPosition = "top";
            }
            else if (pos >= 0.75) {
                this._transferData.dropPosition = "bottom";
            }
            else {
                this._transferData.dropPosition = "in";
            }
        }
        else if ((target === id || (!id && target === rootId)) && dropComponentId === collectionId) {
            return;
        }
        var from = {
            id: start,
            component: this._transferData.component,
        };
        if (component.config.dragMode === "source") {
            return;
        }
        from.component.events.fire(types_1.DragEvents.dragOut, [
            {
                start: start,
                source: source,
                target: target,
            },
            e,
        ]);
        if (collectionId !== componentId ||
            !(0, helpers_1.isTreeCollection)(from.component.data) ||
            ((0, helpers_1.isTreeCollection)(from.component.data) && from.component.data.canCopy(from.id, id))) {
            this.cancelCanDrop(e); // clear last
            this._transferData.target = id || rootId;
            this._transferData.dropComponentId = collectionId;
            var canMove = from.component.events.fire(types_1.DragEvents.dragIn, [
                {
                    start: start,
                    source: source,
                    target: target,
                    dropPosition: dropPosition,
                },
                e,
            ]);
            if (canMove) {
                this._canDrop(e);
            }
        }
        else {
            this.cancelCanDrop(e);
        }
    };
    DragManager.prototype._move = function (from, to) {
        var grid = from.component;
        var nextGrid = to.component;
        var fromData = from.component.data;
        var toData = to.component.data;
        var index = 0;
        var componentId = to.id;
        var behaviour = (0, helpers_1.isTreeCollection)(toData) ? to.component.config.dropBehaviour : undefined;
        var gridConfig = from.component.config.columns
            ? from.component.config
            : undefined;
        var isColumnDrag = gridConfig &&
            (gridConfig.dragItem === "both" || gridConfig.dragItem === "column") &&
            gridConfig.columns.map(function (c) { return c.id; }).filter(function (id) { return id === from.id || id === to.id; }).length;
        if (isColumnDrag && from.component === to.component) {
            if (from.id === to.id)
                return;
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var componentIndex = currentCols.findIndex(function (c) { return c.id === to.id; });
            if (componentIndex === -1)
                return;
            currentCols.splice(componentIndex, 0, currentCols.splice(sourceIndex, 1)[0]);
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        else if (isColumnDrag && from.component instanceof ts_grid_1.ProGrid && to.component instanceof ts_grid_1.ProGrid) {
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var nextGridCols = nextGrid.config.columns.map(function (c) { return (__assign({}, c)); });
            var nextGridLength = nextGrid.data.getLength();
            var componentIndex = nextGridCols.findIndex(function (c) { return c.id === to.id; });
            var currentColumnData_1 = [];
            var currentColumnId_1 = from.id;
            grid.data.forEach(function (item) {
                var _a;
                currentColumnData_1.push((_a = { id: item.id }, _a[currentColumnId_1] = item[from.id], _a));
            });
            if (nextGridLength) {
                grid.data.forEach(function (item, index) {
                    var nextGridItem = nextGrid.data.getItem(item.id);
                    if (nextGridItem) {
                        nextGrid.data.update(nextGridItem.id, __assign(__assign({}, nextGridItem), currentColumnData_1[index]));
                    }
                    else {
                        nextGrid.data.add(currentColumnData_1[index]);
                    }
                });
            }
            else {
                nextGrid.data.parse(currentColumnData_1);
            }
            var col = currentCols.splice(sourceIndex, 1)[0];
            nextGridCols.find(function (c) { return c.id === currentColumnId_1; }) || nextGridCols.splice(componentIndex, 0, col);
            nextGrid.setColumns(nextGridCols);
            nextGrid.paint();
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        var isRootParent = to.id === nextGrid.config.rootParent;
        switch (behaviour) {
            case "child":
                break;
            case "sibling":
                componentId = toData.getParent(componentId);
                index = toData.getIndex(to.id) + 1;
                break;
            case "complex": {
                var dropPosition = this._transferData.dropPosition;
                if (isRootParent) {
                    componentId = to.id;
                    index = toData.getLength();
                }
                else {
                    if (dropPosition === "top") {
                        componentId = toData.getParent(componentId);
                        index = toData.getIndex(to.id);
                    }
                    else if (dropPosition === "bottom") {
                        componentId = toData.getParent(componentId);
                        index = toData.getIndex(to.id) + 1;
                    }
                }
                break;
            }
            default:
                // list move
                if (!(0, core_1.isId)(to.id)) {
                    index = -1;
                }
                else if (from.component === to.component &&
                    toData.getIndex(from.id) < toData.getIndex(to.id)) {
                    index = toData.getIndex(to.id) - 1;
                }
                else {
                    if (toData.getIndex(from.id) > -1)
                        from.newId = (0, core_1.uid)();
                    index = toData.getIndex(to.id);
                }
        }
        if (this._transferData.dragConfig.dragCopy) {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.copy(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.copy(from.id, index, toData, componentId);
            }
        }
        else {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                fromData.move(this._transferData.source, index, toData, componentId);
            }
            else {
                if (nextGrid instanceof ts_grid_1.Grid && !nextGrid.config.columns.length) {
                    var gridItem = grid.data.getItem(from.id);
                    nextGrid.data.parse([__assign({}, gridItem)]);
                    nextGrid.setColumns(__spreadArray([], grid.config.columns, true));
                    nextGrid.paint();
                    grid.data.remove(from.id);
                    grid.paint();
                }
                else {
                    fromData.move(from.id, index, toData, componentId, from.newId);
                }
            }
        }
    };
    DragManager.prototype._endDrop = function (e) {
        this._toggleTextSelection(false);
        if (this._transferData.component) {
            var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
            var data = { start: start, source: source, target: target };
            this._transferData.component.events.fire(types_1.DragEvents.afterDrag, [data, e]);
        }
        this.cancelCanDrop(e);
        this._canMove = true;
        this._transferData = {};
        this._transferData.target = null;
        this._transferData.dropComponentId = null;
    };
    DragManager.prototype._canDrop = function (e) {
        this._canMove = true;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropPosition = _a.dropPosition;
        var data = {
            start: start,
            source: source,
            target: target,
            dropPosition: dropPosition,
        };
        var component = CollectionStore_1.collectionStore.getItem(this._transferData.dropComponentId);
        if (component && this._transferData.target) {
            if (component instanceof ts_grid_1.Grid) {
                data.dragItem = this._transferData.item.classList.contains("dhx_grid-row")
                    ? "row"
                    : "column";
            }
            component.events.fire(types_1.DragEvents.canDrop, [data, e]);
        }
    };
    DragManager.prototype._toggleTextSelection = function (add) {
        if (add) {
            document.body.classList.add("dhx_no-select");
        }
        else {
            document.body.classList.remove("dhx_no-select");
        }
    };
    return DragManager;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.dragManager = dhx.dragManager || new DragManager();
exports.dragManager = dhx.dragManager;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exporter = void 0;
var main_1 = __webpack_require__(20);
var ts_data_1 = __webpack_require__(13);
var core_1 = __webpack_require__(0);
var date_1 = __webpack_require__(18);
var html_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(1);
function fillArray(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        arr[i] = value;
    }
    return arr;
}
var Exporter = /** @class */ (function () {
    function Exporter(_name, _version, _view) {
        this._name = _name;
        this._version = _version;
        this._view = _view;
    }
    Exporter.prototype.pdf = function (config) {
        this._rawExport(config, "pdf", this._view);
    };
    Exporter.prototype.png = function (config) {
        this._rawExport(config, "png", this._view);
    };
    Exporter.prototype.xlsx = function (config) {
        return this._export(config);
    };
    Exporter.prototype.csv = function (config) {
        if (config === void 0) { config = {}; }
        config = __assign({
            asFile: true,
            rowDelimiter: "\n",
            columnDelimiter: ",",
            skipHeader: 0,
        }, config);
        var csv;
        if ("getRoot" in this._view.data && config.flat) {
            csv = this.getFlatCSV(config);
        }
        else {
            csv = this._getCSV(config);
        }
        var name = config.name || "grid_export";
        if (config.asFile) {
            (0, core_1.downloadFile)(csv, "".concat(name, ".csv"), "text/csv");
        }
        return csv;
    };
    Exporter.prototype._export = function (config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        var configCols = this._view.config.columns.filter(function (i) { return !i.hidden; });
        var rowsIndexMap = {};
        var headers = (0, main_1.transpose)(configCols.map(function (col) { return col.header.map(function (level) { return level.text || " "; }); }));
        var columns = [];
        var uniqStyles = {
            default: {
                color: "#000000",
                background: "#FFFFFF",
                fontSize: 14,
                bold: false,
            },
        };
        var cells = [];
        var columnsIndexMap = {};
        var rowCss = {};
        var data = this._view.data.serialize().map(function (row, i) {
            var item = _this._view.data.getItem(row.id);
            if (item.$css) {
                rowCss[item.id] = item.$css;
            }
            rowsIndexMap[row.id] = i;
            var rowData = configCols.map(function (col, k) {
                columnsIndexMap[col.id] = k;
                if (row[col.id] instanceof Date) {
                    var format = col.format || "%M %d %Y";
                    if (typeof row[col.id] === "string") {
                        row[col.id] = (0, date_1.getFormattedDate)(format, (0, date_1.stringToDate)(row[col.id], format));
                    }
                    else if (typeof row[col.id] === "object") {
                        row[col.id] = (0, date_1.getFormattedDate)(format, row[col.id]);
                    }
                }
                return !row[col.id] && !k && row["$groupName"]
                    ? "^ ".concat(row["$groupName"])
                    : (0, main_1.removeHTMLTags)(row[col.id]);
            });
            return rowData;
        });
        var footer = [];
        var content = this._view.content;
        var _loop_1 = function (col) {
            if (col.footer) {
                var id_1 = col.id;
                var columnData = this_1._view.data.serialize().reduce(function (items, item) {
                    if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                        items.push(parseFloat(item[id_1]));
                    }
                    return items;
                }, []);
                var roots = columnData;
                if (this_1._view.config.type === "tree") {
                    var datacollection_1 = this_1._view.data;
                    var data_1 = datacollection_1.serialize();
                    roots = data_1.reduce(function (total, item) {
                        if (item.$level === 0) {
                            if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                                total.push(parseFloat(item[id_1]) || 0);
                            }
                            else {
                                var value_1 = 0;
                                datacollection_1.eachChild(item.id, function (cell) {
                                    if (!datacollection_1.haveItems(cell.id)) {
                                        value_1 += parseFloat(cell[id_1]);
                                    }
                                });
                                total.push(value_1);
                            }
                        }
                        return total;
                    }, []);
                }
                if (col.footer[0].content) {
                    var val = content[col.footer[0].content].calculate(columnData, roots);
                    footer.push((val === null || val === void 0 ? void 0 : val.toString()) || " ");
                }
                else {
                    footer.push(col.footer[0].css || col.footer[0].text || " ");
                }
            }
            var align = col.type === "number" || col.type === "percent" ? "right" : col.align;
            columns.push({ width: col.$width, align: align });
            for (var key in col.$cellCss) {
                var colStyle = "dhx_grid-cell ".concat(col.$cellCss[key].trim());
                var colStyleHash = this_1._getHash(colStyle);
                var rowStyles = "dhx_grid-row";
                if (rowCss[key]) {
                    rowStyles += " ".concat(rowCss[key].trim());
                }
                if (!uniqStyles[colStyleHash]) {
                    var css = (0, main_1.getStyleByClass)(colStyle, rowStyles, uniqStyles.default);
                    if (css) {
                        uniqStyles[colStyleHash] = css;
                    }
                }
                if (uniqStyles[colStyleHash]) {
                    cells.push([rowsIndexMap[key], configCols.indexOf(col), colStyleHash]);
                }
            }
            for (var key in rowCss) {
                if (col.$cellCss[key])
                    continue;
                var rowStyleHash = this_1._getHash(rowCss[key]);
                var rowStyles = "dhx_grid-row ".concat(rowCss[key].trim());
                if (!uniqStyles[rowStyleHash]) {
                    var css = (0, main_1.getStyleByClass)("dhx_grid-cell", rowStyles, uniqStyles.default);
                    if (css) {
                        uniqStyles[rowStyleHash] = css;
                    }
                }
                if (uniqStyles[rowStyleHash]) {
                    cells.push([rowsIndexMap[key], configCols.indexOf(col), rowStyleHash]);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, configCols_1 = configCols; _i < configCols_1.length; _i++) {
            var col = configCols_1[_i];
            _loop_1(col);
        }
        if (footer.length) {
            data.push(footer);
        }
        var exportData = {
            name: config.name || "data",
            columns: columns,
            header: headers,
            data: data,
            styles: {
                cells: cells,
                css: uniqStyles,
            },
        };
        if (config.url) {
            var form_1 = document.createElement("form");
            form_1.setAttribute("target", "_blank");
            form_1.setAttribute("action", config.url);
            form_1.setAttribute("method", "POST");
            form_1.style.visibility = "hidden";
            var input = document.createElement("textarea");
            input.setAttribute("name", "data");
            input.value = JSON.stringify(exportData);
            form_1.appendChild(input);
            document.body.appendChild(form_1);
            form_1.submit();
            setTimeout(function () {
                form_1.parentNode.removeChild(form_1);
            }, 100);
        }
        return exportData;
    };
    Exporter.prototype.getFlatCSV = function (config) {
        var treeData = this._view.data;
        var root = treeData.getRoot();
        var firstCol = this._view.config.columns[0];
        var maxLevel = treeData.getMaxLevel();
        var getParentsChain = function (item, data) {
            var parents = [];
            for (var i = 0; i <= maxLevel; i++) {
                if (item && item[firstCol.id]) {
                    parents[item.$level] = item[firstCol.id];
                    var parent_1 = data.getParent(item.id, true);
                    if (parent_1 && parent_1.id) {
                        item = parent_1;
                    }
                    else {
                        item = null;
                    }
                }
                else {
                    parents[i] = "";
                }
            }
            return parents;
        };
        var total = "";
        treeData.eachChild(root, function (item) {
            var parents = getParentsChain(item, treeData).join(config.columnDelimiter);
            total +=
                parents +
                    Object.keys(item).reduce(function (values, key, i) {
                        if (key !== "id" && key !== "parent" && !key.startsWith("$") && i !== 0) {
                            return values + config.columnDelimiter + (item[key] === null ? "" : item[key]);
                        }
                        return values;
                    }, "");
            total += config.rowDelimiter;
        });
        var exportData = this._export(config);
        // [dirty]
        var emptyHeaders = fillArray(new Array(maxLevel + 1), "");
        var headers = exportData.header.map(function (header) {
            header.splice.apply(header, __spreadArray([0, 1], emptyHeaders, false));
            return header;
        });
        var head = new ts_data_1.CsvDriver(config).serialize(headers, true) + config.rowDelimiter;
        return head + total;
    };
    Exporter.prototype._getCSV = function (config) {
        var exportData = this._export(config);
        var headers = exportData.header;
        var driver = new ts_data_1.CsvDriver(config);
        var head = driver.serialize(headers, true);
        var readyData = driver.serialize(exportData.data, true);
        return head + "\n" + readyData;
    };
    Exporter.prototype._rawExport = function (config, mode, view) {
        var _a;
        if (config === void 0) { config = {}; }
        var viewContainer = document.createElement("div");
        viewContainer.setAttribute("style", "display: none;");
        var _b = view.config, _c = _b.$headerHeight, $headerHeight = _c === void 0 ? 0 : _c, _d = _b.$footerHeight, $footerHeight = _d === void 0 ? 0 : _d, _e = _b.$totalHeight, $totalHeight = _e === void 0 ? 0 : _e, $footer = _b.$footer, columns = _b.columns;
        var styles = "";
        var exportStyles = view.config.exportStyles;
        if (typeof config.exportStyles === "boolean" || Array.isArray(config.exportStyles)) {
            exportStyles = config.exportStyles;
        }
        config.url =
            config.url || "https://export.dhtmlx.com/" + this._name + "/" + mode + "/" + this._version;
        if (mode === "pdf") {
            var pdf = config.pdf;
            config.pdf = __assign(__assign({}, pdf), { printBackground: false, format: (_a = pdf === null || pdf === void 0 ? void 0 : pdf.format) !== null && _a !== void 0 ? _a : "A4" });
        }
        var width = view.config.$totalWidth;
        var height = $totalHeight + $headerHeight;
        if ($footer)
            height += $footerHeight;
        var viewColumns = [];
        for (var index = 0; index < columns.length; index++) {
            var col = columns[index];
            viewColumns.push(__assign(__assign({}, col), { width: col.$width }));
        }
        var viewConfig = __assign(__assign({}, view.config), { width: width, height: height, columns: viewColumns, data: view.data.getRawData(0, -1, null, 2), keyNavigation: false, selection: false, resizable: false });
        var $view = new view.constructor(viewContainer, (0, core_1.getCloneObject)(viewConfig));
        (0, dom_1.awaitRedraw)()
            .then(function () {
            if (exportStyles === true) {
                styles = "".concat((0, html_1.getPageLinksCss)(), "<style>").concat((0, html_1.getPageInlineCss)(), "</style>");
            }
            else if (Array.isArray(exportStyles) && exportStyles.length) {
                styles = "".concat((0, html_1.getPageLinksCss)(exportStyles));
            }
            var child = viewContainer.children[0];
            child === null || child === void 0 ? void 0 : child.setAttribute("data-dhx-theme", config.theme || "light");
            if (mode === "png") {
                child === null || child === void 0 ? void 0 : child.setAttribute("style", "width: ".concat(width, "px;"));
            }
            var html = "\n\t\t\t\t\t".concat(styles, "\n\t\t\t\t\t").concat(viewContainer.innerHTML, "\n\t\t\t\t");
            var form = document.createElement("form");
            form.setAttribute("method", "POST");
            form.setAttribute("action", config.url);
            form.innerHTML = "<input type=\"hidden\" name=\"raw\"><input type=\"hidden\" name=\"config\">";
            form.childNodes[0].value = html;
            form.childNodes[1].value = JSON.stringify(config);
            document.body.appendChild(form);
            form.submit();
            setTimeout(function () {
                var _a, _b;
                $view.destructor();
                (_a = viewContainer.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(viewContainer);
                (_b = form.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(form);
            }, 100);
        })
            .catch(function () {
            var _a;
            $view.destructor();
            (_a = viewContainer.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(viewContainer);
        });
    };
    Exporter.prototype._getHash = function (str) {
        return str
            .split("")
            .reduce(function (h, letter) {
            var hh = (h << 5) - h + letter.charCodeAt(0);
            return Math.abs(hh & hh);
        }, 0)
            .toString();
    };
    return Exporter;
}());
exports.Exporter = Exporter;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Selection = void 0;
var dom_1 = __webpack_require__(1);
var ts_data_1 = __webpack_require__(13);
var core_1 = __webpack_require__(0);
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(9);
var FocusManager_1 = __webpack_require__(19);
var render_1 = __webpack_require__(24);
var render_2 = __webpack_require__(24);
var main_1 = __webpack_require__(20);
var cells_1 = __webpack_require__(30);
var Selection = /** @class */ (function () {
    function Selection(grid, config, events, gridId) {
        var types = ["cell", "row", "complex"];
        this._grid = grid;
        this.config = config;
        this._gridId = gridId;
        this._selectedCell;
        this._selectedCells = [];
        this._type =
            (types.includes(this._grid.config.selection) && this._grid.config.selection) ||
                "complex";
        this._multiselection = !!grid.config.multiselection;
        this.events = events || new events_1.EventSystem(this);
        this._init();
    }
    Selection.prototype.setCell = function (row, col, ctrlUp, shiftUp) {
        var _a, _b;
        var _this = this;
        var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        if (ctrlUp === void 0) { ctrlUp = false; }
        if (shiftUp === void 0) { shiftUp = false; }
        var isTree = this._grid.config.type === "tree";
        if (this._gridId && FocusManager_1.focusManager.getFocusId() !== this._gridId) {
            FocusManager_1.focusManager.setFocusId(this._gridId);
        }
        if ((this._type === "row" && ((_c = this._selectedCells[0]) === null || _c === void 0 ? void 0 : _c.row.id) === ((row === null || row === void 0 ? void 0 : row.id) || row)) ||
            (this._type !== "row" &&
                ((_d = this._selectedCells[0]) === null || _d === void 0 ? void 0 : _d.row.id) === ((row === null || row === void 0 ? void 0 : row.id) || row) &&
                ((_e = this._selectedCells[0]) === null || _e === void 0 ? void 0 : _e.column.id) === ((col === null || col === void 0 ? void 0 : col.id) || col))) {
            if (ctrlUp) {
                this._removeCell((_f = this._selectedCells[0]) === null || _f === void 0 ? void 0 : _f.row, (_g = this._selectedCells[0]) === null || _g === void 0 ? void 0 : _g.column);
                (0, dom_1.awaitRedraw)().then(function () {
                    _this._grid.paint();
                    _this._setBrowserFocus();
                });
            }
            return;
        }
        if (this.config.disabled ||
            this._grid.config.$editable ||
            (!this._multiselection &&
                this._selectedCells.length &&
                !this._removeCell((_h = this._selectedCell) === null || _h === void 0 ? void 0 : _h.row, (_j = this._selectedCell) === null || _j === void 0 ? void 0 : _j.column))) {
            return;
        }
        if (this._multiselection) {
            if (!ctrlUp && !shiftUp)
                this._removeCells();
            if (this._selectedCells.find(function (item) {
                if (_this._type === "row") {
                    return item.row.id === ((row === null || row === void 0 ? void 0 : row.id) || row);
                }
                return (item.row.id === ((row === null || row === void 0 ? void 0 : row.id) || row) &&
                    item.column.id === ((col === null || col === void 0 ? void 0 : col.id) || col));
            })) {
                this.removeCell((row === null || row === void 0 ? void 0 : row.id) || row, (col === null || col === void 0 ? void 0 : col.id) || col);
                return;
            }
            if (shiftUp && this._selectedCells.length > 1 && !isTree) {
                __spreadArray([], this._selectedCells, true).forEach(function (_a, index) {
                    var row = _a.row, column = _a.column;
                    if (index > 0)
                        _this.removeCell(row.id, column.id);
                });
            }
        }
        row = this._grid.data.getItem((row && row.id) || row);
        var columns = (_l = (_k = this._grid.config) === null || _k === void 0 ? void 0 : _k.columns) === null || _l === void 0 ? void 0 : _l.filter(function (col) { return !col.hidden; });
        if (!col)
            col = columns === null || columns === void 0 ? void 0 : columns[0];
        col = this._grid.getColumn(col.id || col);
        if (!col || !row) {
            return;
        }
        if (this._multiselection && shiftUp && this._selectedCells.length && !isTree) {
            var startCell = (_m = this._selectedCells) === null || _m === void 0 ? void 0 : _m[0];
            var startRowIndex = this._grid.data.getIndex(startCell.row.id);
            var endRowIndex = this._grid.data.getIndex(row.id);
            if (startRowIndex > endRowIndex) {
                _a = [endRowIndex, startRowIndex], startRowIndex = _a[0], endRowIndex = _a[1];
            }
            if (this._type === "cell" || this._type === "complex") {
                var columnsIds = columns.map(function (e) { return e.id; });
                var startColIndex = columnsIds.indexOf(startCell.column.id);
                var endColIndex = columnsIds.indexOf(col.id);
                if (startColIndex !== -1 && endColIndex !== -1) {
                    if (startColIndex > endColIndex) {
                        _b = [endColIndex, startColIndex], startColIndex = _b[0], endColIndex = _b[1];
                    }
                    var cols_1 = columns.slice(startColIndex, endColIndex + 1);
                    this._grid.data.mapRange(startRowIndex, endRowIndex, function (row) {
                        cols_1.forEach(function (column) {
                            if (_this._findIndex({ row: row, column: column }) === -1) {
                                _this._setCell(row, column);
                            }
                        });
                    });
                }
            }
            else {
                this._grid.data.mapRange(startRowIndex, endRowIndex, function (row) {
                    if (_this._findIndex({ row: row, column: col }) === -1) {
                        _this._setCell(row, col);
                    }
                });
            }
        }
        else {
            this._setCell(row, col);
        }
        (0, dom_1.awaitRedraw)().then(function () {
            _this._grid.paint();
            _this._setBrowserFocus();
        });
    };
    Selection.prototype.removeCell = function (rowId, colId) {
        var _this = this;
        if (rowId && colId && (this._type === "cell" || this._type === "complex")) {
            var cell = this._selectedCells.find(function (_a) {
                var row = _a.row, column = _a.column;
                return row.id == rowId && column.id == colId;
            });
            cell && this._removeCell(cell.row, cell.column);
        }
        else if (rowId) {
            var cells = this._selectedCells.filter(function (_a) {
                var row = _a.row;
                return row.id == rowId;
            });
            cells.forEach(function (_a) {
                var row = _a.row, column = _a.column;
                _this._removeCell(row, column);
            });
        }
        else {
            this._removeCells();
        }
        (0, dom_1.awaitRedraw)().then(function () {
            _this._grid.paint();
        });
    };
    Selection.prototype.getCell = function () {
        return this._selectedCell;
    };
    Selection.prototype.getCells = function () {
        return this._selectedCells;
    };
    Selection.prototype.disable = function () {
        this.removeCell();
        this.config.disabled = true;
        this._grid.paint();
    };
    Selection.prototype.enable = function () {
        this.config.disabled = false;
        this._grid.paint();
    };
    Selection.prototype.toHTML = function () {
        var _this = this;
        if (this._isUnselected()) {
            return;
        }
        if (this._multiselection) {
            var selection_1 = [];
            var selectedRows_1 = {};
            this._selectedCells.forEach(function (cell, index, array) {
                var nCell = (0, cells_1.normalizeCell)(cell, _this._grid);
                selection_1.push(_this._toHTML(nCell.row, nCell.column, index === array.length - 1 || _this._type === "cell" || _this._type === "complex", selectedRows_1[cell.row.id]));
                selectedRows_1[cell.row.id] = true;
            });
            return selection_1;
        }
        else {
            var nCell = (0, cells_1.normalizeCell)(this._selectedCell, this._grid);
            return this._toHTML(nCell.row, nCell.column, true);
        }
    };
    Selection.prototype._setCell = function (row, column) {
        if (!row || !column || !(0, core_1.isDefined)(row.id) || !(0, core_1.isDefined)(column.id))
            return;
        if (!this.events.fire(types_1.GridSelectionEvents.beforeSelect, [row, column])) {
            return;
        }
        this._selectedCell = { row: row, column: column };
        if (this._multiselection) {
            this._selectedCells.push(this._selectedCell);
        }
        else {
            this._selectedCells = [this._selectedCell];
        }
        this.events.fire(types_1.GridSelectionEvents.afterSelect, [row, column]);
    };
    Selection.prototype._removeCell = function (row, col, silent) {
        var _a, _b;
        if (silent === void 0) { silent = false; }
        if (!row || !col || !(0, core_1.isDefined)(row.id) || !(0, core_1.isDefined)(col.id))
            return false;
        if (!silent && !this.events.fire(types_1.GridSelectionEvents.beforeUnSelect, [row, col])) {
            return false;
        }
        var index = this._selectedCells.findIndex(function (item) { return item.row.id === row.id && item.column.id === col.id; });
        this._selectedCells.splice(index, 1);
        if (this._selectedCell &&
            col.id === this._selectedCell.column.id &&
            row.id === this._selectedCell.row.id) {
            this._selectedCell = (_a = this._selectedCells) === null || _a === void 0 ? void 0 : _a[((_b = this._selectedCells) === null || _b === void 0 ? void 0 : _b.length) - 1];
        }
        !silent && this.events.fire(types_1.GridSelectionEvents.afterUnSelect, [row, col]);
        return true;
    };
    Selection.prototype._removeCells = function (silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        __spreadArray([], this._selectedCells, true).forEach(function (item) {
            _this._removeCell(item === null || item === void 0 ? void 0 : item.row, item === null || item === void 0 ? void 0 : item.column, silent);
        });
    };
    Selection.prototype._init = function () {
        var _this = this;
        this._grid.events.on(types_1.GridEvents.cellClick, function (row, col, e) {
            _this.setCell(row, col, e.ctrlKey || e.metaKey, e.shiftKey);
        });
        this._grid.data.events.on(ts_data_1.DataEvents.beforeRemove, function (item) {
            var _a, _b;
            if (item &&
                _this._selectedCell &&
                _this._selectedCell.row &&
                _this._selectedCell.row.id === item.id) {
                var id = void 0;
                var index = _this._grid.data.getIndex(item.id);
                if (_this._grid.data instanceof ts_data_1.TreeCollection) {
                    var child = _this._grid.data.getItems(item.parent);
                    id = ((_a = child[index + 1]) === null || _a === void 0 ? void 0 : _a.id) || ((_b = child[index - 1]) === null || _b === void 0 ? void 0 : _b.id) || item.parent;
                }
                else {
                    id = _this._grid.data.getId(index + 1) || _this._grid.data.getId(index - 1);
                }
                if ((0, core_1.isId)(id)) {
                    _this.setCell(id);
                    _this._grid.paint();
                }
            }
        });
        this._grid.data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this._removeCells();
        });
        this._grid.data.events.on(ts_data_1.DataEvents.load, function () {
            _this._removeCells(true);
        });
    };
    Selection.prototype._toHTML = function (row, column, last, skipRow) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (last === void 0) { last = false; }
        if (skipRow === void 0) { skipRow = false; }
        var rows = this._grid.data.getRawData(0, -1, null, 2);
        var rowInd = (0, core_1.findIndex)(rows, function (obj) { return obj.id == row.id; });
        if (rowInd === -1)
            return null;
        var _p = this._grid.config, topSplit = _p.topSplit, bottomSplit = _p.bottomSplit, $totalWidth = _p.$totalWidth, $totalHeight = _p.$totalHeight, configColumns = _p.columns;
        var columns = configColumns === null || configColumns === void 0 ? void 0 : configColumns.filter(function (col) { return !col.hidden; });
        var fixedCols = {
            left: (0, render_1.getCurrFixedCols)(this._grid.config, types_1.Split.left),
            right: (0, render_1.getCurrFixedCols)(this._grid.config, types_1.Split.right),
        };
        var dataLength = this._grid.data.getLength();
        var fixedRows = {
            top: topSplit ? this._grid.data.getRawData(0, topSplit) : [],
            bottom: bottomSplit ? this._grid.data.getRawData(dataLength - bottomSplit, dataLength) : [],
        };
        var fixedColsIds = {
            left: (_a = fixedCols === null || fixedCols === void 0 ? void 0 : fixedCols.left) === null || _a === void 0 ? void 0 : _a.map(function (col) { return col.id; }),
            right: (_b = fixedCols === null || fixedCols === void 0 ? void 0 : fixedCols.right) === null || _b === void 0 ? void 0 : _b.map(function (col) { return col.id; }),
        };
        var fixedRowsIds = {
            top: fixedRows.top.map(function (row) { return row.id; }),
            bottom: fixedRows.bottom.map(function (row) { return row.id; }),
        };
        var fixedColsWidth = {
            left: (_c = fixedCols === null || fixedCols === void 0 ? void 0 : fixedCols.left) === null || _c === void 0 ? void 0 : _c.reduce(function (total, coll) { return (total += coll.$width || 0); }, 0),
            right: (_d = fixedCols === null || fixedCols === void 0 ? void 0 : fixedCols.right) === null || _d === void 0 ? void 0 : _d.reduce(function (total, coll) { return (total += coll.$width || 0); }, 0),
        };
        var fixedRowsHeight = {
            top: fixedRows.top.reduce(function (total, row) { return (total += row.$height); }, 0),
            bottom: fixedRows.bottom.reduce(function (total, row) { return (total += row.$height); }, 0),
        };
        var cellRect = this._grid.getCellRect(row.id, column.id);
        var scrollState = this._grid.getScrollState();
        var top = cellRect.y;
        var isTopFixedRow = (_e = fixedRowsIds.top) === null || _e === void 0 ? void 0 : _e.includes(row.id);
        var isLeftFixedCol = (_f = fixedColsIds.left) === null || _f === void 0 ? void 0 : _f.includes(column.id);
        var isBehindLeftFixedCols = fixedCols.left.length && fixedColsWidth.left > cellRect.x - scrollState.x;
        var isBehindTopFixedRows = fixedRows.top.length && fixedRowsHeight.top > cellRect.y - scrollState.y;
        var width = cellRect.width;
        var height = cellRect.height - 1;
        var minHeight = null;
        var minWidth = null;
        var left = isBehindLeftFixedCols ? fixedColsWidth.left + scrollState.x : cellRect.x;
        if (isBehindLeftFixedCols) {
            width -=
                (isLeftFixedCol
                    ? (0, main_1.getTotalWidth)(fixedCols.left.slice(0, columns.indexOf(column)))
                    : fixedColsWidth.left) -
                    (cellRect.x - scrollState.x);
        }
        if (isBehindTopFixedRows) {
            height -=
                (isTopFixedRow
                    ? (0, main_1.getTotalHeight)(fixedRows.top.slice(0, rows.indexOf(row)))
                    : fixedRowsHeight.top) -
                    (cellRect.y - scrollState.y) -
                    1;
            top += cellRect.height - height;
        }
        if (isTopFixedRow) {
            top = cellRect.y + scrollState.y;
            var span = this._grid.getSpan(row.id, column.id);
            if (span && span.rowspan > 1) {
                var i = rows.indexOf(row);
                minHeight = (0, main_1.getTotalHeight)(fixedRows.top.slice(i, i + span.rowspan));
            }
            else {
                height =
                    topSplit === fixedRowsIds.top.indexOf(row.id) + 1 ? cellRect.height - 1 : cellRect.height;
            }
        }
        if (isLeftFixedCol) {
            left = cellRect.x + scrollState.x;
            var span = this._grid.getSpan(row.id, column.id);
            if (span && span.colspan > 1) {
                var i = columns === null || columns === void 0 ? void 0 : columns.indexOf(column);
                minWidth = (0, main_1.getTotalWidth)(fixedCols.left.slice(i, i + span.colspan));
            }
            else {
                width =
                    fixedCols.left.length === fixedColsIds.left.indexOf(column.id) + 1
                        ? cellRect.width - 1
                        : cellRect.width;
            }
        }
        var isRightFixedCol, isBehindRightFixedCols, isBottomFixedRow, isBehindBottomFixedRows;
        if (((_g = fixedCols.right) === null || _g === void 0 ? void 0 : _g.length) || bottomSplit) {
            var span = this._grid.getSpan(row.id, column.id);
            var reverseScrollState = this._getReverseScrollState(scrollState);
            if ((_h = fixedCols.right) === null || _h === void 0 ? void 0 : _h.length) {
                isRightFixedCol =
                    ((_j = fixedColsIds.right) === null || _j === void 0 ? void 0 : _j.includes(column.id)) ||
                        (span &&
                            columns.indexOf(column) + (span.colspan || 1) >
                                columns.length - fixedCols.right.length);
                isBehindRightFixedCols =
                    $totalWidth - fixedColsWidth.right < reverseScrollState.x + cellRect.x + cellRect.width;
                if (isBehindRightFixedCols && !isRightFixedCol) {
                    width -=
                        reverseScrollState.x +
                            cellRect.x +
                            cellRect.width -
                            $totalWidth +
                            fixedColsWidth.right;
                }
                if (isRightFixedCol) {
                    if (span && !((_k = fixedColsIds.right) === null || _k === void 0 ? void 0 : _k.includes(span.column))) {
                        var i = columns.length - columns.indexOf(column) - (span.colspan || 1);
                        var xSplit = $totalWidth - fixedColsWidth.right;
                        left =
                            cellRect.x + reverseScrollState.x < xSplit + 1
                                ? cellRect.x
                                : xSplit - reverseScrollState.x + 1;
                        minWidth = (0, main_1.getTotalWidth)(i ? fixedCols.right.slice(0, -i) : fixedCols.right) - 1;
                        width = cellRect.width - reverseScrollState.x;
                    }
                    else {
                        var gap = ((_l = fixedColsIds.right) === null || _l === void 0 ? void 0 : _l.indexOf(column.id)) ? 0 : 1;
                        left = cellRect.x - reverseScrollState.x + gap;
                        width = cellRect.width - gap;
                    }
                }
            }
            if (bottomSplit) {
                isBottomFixedRow =
                    fixedRowsIds.bottom.includes(row.id) ||
                        (span && rows.indexOf(row) + (span.rowspan || 1) > rows.length - bottomSplit);
                isBehindBottomFixedRows =
                    $totalHeight - fixedRowsHeight.bottom <
                        reverseScrollState.y + cellRect.y + cellRect.height;
                if (isBehindBottomFixedRows && !isBottomFixedRow) {
                    height -=
                        reverseScrollState.y +
                            cellRect.y +
                            cellRect.height -
                            $totalHeight +
                            fixedRowsHeight.bottom;
                }
                if (isBottomFixedRow) {
                    if (span && !fixedRowsIds.bottom.includes(span.row)) {
                        var i = rows.length - rows.indexOf(row) - (span.rowspan || 1);
                        var ySplit = $totalHeight - fixedRowsHeight.bottom;
                        var gap = i ? 0 : 1;
                        top =
                            cellRect.y + reverseScrollState.y < ySplit
                                ? cellRect.y
                                : ySplit - reverseScrollState.y;
                        minHeight =
                            (0, main_1.getTotalHeight)(i ? fixedRows.bottom.slice(0, -i) : fixedRows.bottom) - gap;
                        height = cellRect.height - reverseScrollState.y - gap;
                    }
                    else {
                        top = cellRect.y - reverseScrollState.y;
                        height =
                            cellRect.height -
                                (bottomSplit === fixedRowsIds.bottom.indexOf(row.id) + 1 ? 1 : 0);
                    }
                }
            }
        }
        var selectedRowElement = null;
        if ((this._type === "row" || this._type === "complex") && !skipRow) {
            selectedRowElement = (0, dom_1.el)(".dhx_grid-selected-row", {
                style: {
                    width: ((_m = fixedCols.left) === null || _m === void 0 ? void 0 : _m.length) ? $totalWidth - scrollState.x : $totalWidth,
                    height: height,
                    minHeight: minHeight,
                    minWidth: minWidth,
                    display: height < 0 && !minHeight ? "none" : "flex",
                    top: top,
                    left: ((_o = fixedCols.left) === null || _o === void 0 ? void 0 : _o.length) ? scrollState.x : 0,
                    position: "absolute",
                },
            });
        }
        var selectedCellElement = null;
        if ((this._type === "cell" || this._type === "complex") && last) {
            selectedCellElement = (0, dom_1.el)(".dhx_grid-selected-cell", {
                style: {
                    width: width,
                    height: height,
                    top: top,
                    minHeight: minHeight,
                    minWidth: minWidth,
                    left: left,
                    position: "absolute",
                    display: (width < 0 && !minWidth) || (height < 0 && !minHeight) ? "none" : "flex",
                    borderLeft: isBehindLeftFixedCols && !isLeftFixedCol ? "none" : null,
                    borderRight: isBehindRightFixedCols && !isRightFixedCol ? "none" : null,
                    borderTop: isBehindTopFixedRows && !isTopFixedRow ? "none" : null,
                    borderBottom: isBehindBottomFixedRows && !isBottomFixedRow ? "none" : null,
                },
            });
        }
        return (0, dom_1.el)(".dhx_grid-selection", {
            style: {
                zIndex: 20,
            },
        }, [selectedRowElement, selectedCellElement]);
    };
    Selection.prototype._isUnselected = function () {
        return (!this._selectedCell ||
            !this._selectedCell.row ||
            !this._selectedCell.column ||
            this._selectedCells.length === 0);
    };
    Selection.prototype._findIndex = function (cell) {
        var _this = this;
        if (cell === void 0) { cell = this._selectedCell; }
        var cellIndex = -1;
        this._selectedCells.some(function (element, index) {
            if (_this._type === "cell" || _this._type === "complex") {
                if ((0, core_1.compare)(element.row, cell.row) && (0, core_1.compare)(element.column, cell.column)) {
                    cellIndex = index;
                    return true;
                }
            }
            else if (_this._type === "row") {
                if ((0, core_1.compare)(element.row, cell.row)) {
                    cellIndex = index;
                    return true;
                }
            }
        });
        return cellIndex;
    };
    Selection.prototype._setBrowserFocus = function () {
        var gridContainer = this._grid.getRootView().data.getRootNode();
        if (gridContainer) {
            var gridDataContainer = gridContainer.querySelector(".dhx_grid_data");
            if (gridDataContainer &&
                this._selectedCell &&
                this._selectedCell.row &&
                this._selectedCell.column) {
                var $row = gridDataContainer.querySelector("[data-dhx-id=\"".concat(this._selectedCell.row.id, "\"]"));
                var span = this._grid.getSpan(this._selectedCell.row.id, this._selectedCell.column.id);
                if ($row) {
                    var gridSpansContainer = span ? gridContainer.querySelector(".dhx_span-spans") : null;
                    var $focusedCell = gridSpansContainer
                        ? gridSpansContainer.querySelector("[data-dhx-col-id=\"".concat(span.column, "\"][data-dhx-id=\"").concat(span.row, "\"]"))
                        : $row.querySelector("[data-dhx-col-id=\"".concat(this._selectedCell.column.id, "\"]"));
                    if ($focusedCell) {
                        $focusedCell.tabIndex = 0;
                        $focusedCell.focus({ preventScroll: true });
                    }
                }
            }
        }
    };
    Selection.prototype._getReverseScrollState = function (scrollState) {
        var _a;
        var scrollBarWidth = (0, render_2.calcScrollBarWidth)(this._grid.config, !!((_a = this._grid.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable));
        var totalScrollX = this._grid.config.$totalWidth - this._grid.config.$width + render_1.BORDERS + scrollBarWidth.y;
        var totalScrollY = this._grid.config.$totalHeight -
            this._grid.config.$height +
            this._grid.config.$headerHeight +
            this._grid.config.$footerHeight +
            render_1.BORDERS +
            scrollBarWidth.x;
        return {
            x: totalScrollX > 0 ? totalScrollX - scrollState.x : 0,
            y: totalScrollY > 0 ? totalScrollY - scrollState.y : 0,
        };
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getEditor = void 0;
var types_1 = __webpack_require__(9);
var InputEditor_1 = __webpack_require__(126);
var SelectEditor_1 = __webpack_require__(127);
var DateEditor_1 = __webpack_require__(128);
var CheckboxEditor_1 = __webpack_require__(139);
var ComboboxEditor_1 = __webpack_require__(140);
var TextAreaEditor_1 = __webpack_require__(147);
var lastEditor = {
    cell: {
        row: null,
        col: null,
    },
    editor: null,
    gridId: null,
};
var editHandler;
function getEditor(row, col, conf) {
    var type = col.type === "boolean" ? "checkbox" : conf.$editable.editorType;
    if (typeof type === "undefined")
        type = conf.autoHeight ? "textarea" : "input";
    if (lastEditor.cell.row === row.id &&
        lastEditor.cell.col === col.id &&
        lastEditor.gridId === conf.gridId &&
        conf.$editable.editor) {
        return lastEditor.editor;
    }
    if (type !== "checkbox") {
        lastEditor = {
            cell: {
                row: row.id,
                col: col.id,
            },
            editor: lastEditor.editor,
            gridId: conf.gridId,
        };
    }
    if (!editHandler) {
        editHandler = function () {
            lastEditor = {
                cell: {
                    row: null,
                    col: null,
                },
                editor: null,
                gridId: null,
            };
        };
        conf.events.on(types_1.GridEvents.afterEditEnd, editHandler);
    }
    switch (type) {
        case "input":
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
        case "textarea":
            return (lastEditor.editor = new TextAreaEditor_1.TextAreaEditor(row, col, conf));
        case "select":
            return (lastEditor.editor = new SelectEditor_1.SelectEditor(row, col, conf));
        case "datePicker":
            return (lastEditor.editor = new DateEditor_1.DateEditor(row, col, conf));
        case "checkbox":
            return new CheckboxEditor_1.CheckboxEditor(row, col, conf);
        case "multiselect":
        case "combobox":
            return (lastEditor.editor = new ComboboxEditor_1.ComboboxEditor(row, col, conf));
        default:
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
    }
}
exports.getEditor = getEditor;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InputEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var core_1 = __webpack_require__(0);
var InputEditor = /** @class */ (function () {
    function InputEditor(row, col, config) {
        this.prevValue = "";
        this._config = config;
        this._cell = { row: row, col: col };
        this.type = col.type;
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function (withoutSave) {
        if (!this._config.$editable)
            return;
        var value;
        if (!withoutSave) {
            value = this._input.value;
            if (this.type === "number") {
                value = parseFloat(value);
                if (Number.isNaN(value)) {
                    value = "";
                }
                else {
                    var config = this._cell.col.editorConfig;
                    var min = parseFloat(config === null || config === void 0 ? void 0 : config.min);
                    var max = parseFloat(config === null || config === void 0 ? void 0 : config.max);
                    if ((0, core_1.isDefined)(config === null || config === void 0 ? void 0 : config.min) && value < min)
                        value = min;
                    if ((0, core_1.isDefined)(config === null || config === void 0 ? void 0 : config.max) && value > max)
                        value = max;
                }
            }
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.$editable = null;
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    InputEditor.prototype.toHTML = function (value) {
        if ((0, core_1.isDefined)(value)) {
            this.type = "string";
        }
        value = value !== null && value !== void 0 ? value : this._cell.row[this._cell.col.id];
        if (this._input) {
            value = this._input.value;
        }
        this._config.$editable.editor = this;
        return (0, dom_1.el)("input.dhx_cell-editor.dhx_cell-editor__input", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            "data-dhx-id": "cell_editor",
            onblur: this._handlers.onBlur,
            oninput: this._handlers.onInput,
            value: value,
        });
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onInput: function () {
                if (_this.type === "number") {
                    var value = _this._input.value;
                    if (_this.isValidWord(value)) {
                        _this.prevValue = value;
                    }
                    else {
                        _this._input.value = _this.prevValue;
                    }
                    if (!_this.prevValue.length ||
                        _this.prevValue === "-" ||
                        _this.isCorrectRange(parseFloat(_this.prevValue))) {
                        _this._input.classList.remove("dhx_cell-editor__input--not-valid");
                    }
                    else {
                        _this._input.classList.add("dhx_cell-editor__input--not-valid");
                    }
                }
            },
            didInsert: function (node) {
                _this._input = node.el;
                _this._input.focus();
            },
        };
    };
    InputEditor.prototype.isValidWord = function (word) {
        var _a;
        var lastWord = (_a = word[word.length - 1]) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase();
        var countChar = function (string, char) {
            return string.toLocaleLowerCase().split(char.toLocaleLowerCase()).length - 1;
        };
        return (!word.length ||
            word === "-" ||
            (!isNaN(Number(word)) && word.trim().length === word.length) ||
            (word.replace("-", "").length > 1 && lastWord === "e" && !countChar(this.prevValue, "e")) ||
            (word.replace("-", "").length > 1 && lastWord === "e" && countChar(word, "e") === 1));
    };
    InputEditor.prototype.isCorrectRange = function (num) {
        var check = true;
        var config = this._cell.col.editorConfig;
        var min = parseFloat(config === null || config === void 0 ? void 0 : config.min);
        var max = parseFloat(config === null || config === void 0 ? void 0 : config.max);
        if ((0, core_1.isDefined)(config === null || config === void 0 ? void 0 : config.min) && (0, core_1.isDefined)(config === null || config === void 0 ? void 0 : config.max)) {
            check = num >= min && num <= max;
        }
        else if ((0, core_1.isDefined)(config === null || config === void 0 ? void 0 : config.min)) {
            check = num > min;
        }
        else if ((0, core_1.isDefined)(config === null || config === void 0 ? void 0 : config.max)) {
            check = num < max;
        }
        return check;
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var data_1 = __webpack_require__(22);
var SelectEditor = /** @class */ (function () {
    function SelectEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    SelectEditor.prototype.endEdit = function (withoutSave) {
        if (!this._config.$editable)
            return;
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._input.removeEventListener("keydown", this._handlers.onkeydown);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.$editable = null;
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    SelectEditor.prototype.toHTML = function () {
        var rawOptions = (0, data_1.getEditorOptions)(this._cell.col, this._cell.row);
        var content = rawOptions.map(function (item) {
            return typeof item === "string" ? { id: "".concat(item), value: item } : item;
        }) || [];
        var selected = this._cell.row[this._cell.col.id];
        if (this._input) {
            selected = this._input.options[this._input.selectedIndex].value;
        }
        var options = content.map(function (item) {
            return (0, dom_1.el)("option", {
                selected: item.id.toString() === (selected === null || selected === void 0 ? void 0 : selected.toString()),
                value: item.id,
            }, item.value);
        });
        this._config.$editable.editor = this;
        return (0, dom_1.el)("select.dhx_cell-editor.dhx_cell-editor__select", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            "data-dhx-id": "cell_editor",
        }, options);
    };
    SelectEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onkeydown: function (e) {
                if (e.key === "Escape") {
                    _this.endEdit();
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.addEventListener("blur", _this._handlers.onBlur);
                input.addEventListener("keydown", _this._handlers.onkeydown);
            },
        };
    };
    return SelectEditor;
}());
exports.SelectEditor = SelectEditor;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var ts_calendar_1 = __webpack_require__(38);
var date_1 = __webpack_require__(18);
var ts_popup_1 = __webpack_require__(10);
var DateEditor = /** @class */ (function () {
    function DateEditor(row, col, config) {
        var _this = this;
        this._config = config;
        this._cell = { row: row, col: col };
        this._calendar = new ts_calendar_1.Calendar(null, this._cleanConfig(col));
        var value = this._cell.row[this._cell.col.id];
        var format = this._calendar.config.dateFormat;
        if ((0, date_1.stringToDate)(value, format, true) || value instanceof Date) {
            this._calendar.setValue(value);
            this._value = this._calendar.getValue();
            this._cell.row[this._cell.col.id] = this._value;
        }
        this._popup = new ts_popup_1.Popup();
        this._popup.attach(this._calendar);
        this._calendar.events.on(ts_calendar_1.CalendarEvents.change, function () {
            _this.endEdit(false, true);
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            _this.endEdit();
        });
        this._initHandlers();
    }
    DateEditor.prototype.endEdit = function (withoutSave, calendarChange) {
        var _this = this;
        if (!this._handlers || !this._config.$editable) {
            return;
        }
        var format = this._calendar.config.dateFormat;
        var value = this._cell.row[this._cell.col.id];
        var inputVal = this._input.value;
        if (!withoutSave) {
            if (value instanceof Date || calendarChange) {
                this._value = this._calendar.getValue();
                this._input.value = this._value;
                this._popup.hide();
                return;
            }
            else if (((0, date_1.stringToDate)(inputVal, format, true) || !inputVal) &&
                ((value && inputVal.length === value.length) || !value || !inputVal)) {
                this._value = inputVal;
            }
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [this._value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("focus", this._handlers.onFocus);
            this._input.removeEventListener("change", this._handlers.onChange);
            document.removeEventListener("mousedown", this._handlers.onOuterClick);
            (0, dom_1.awaitRedraw)().then(function () {
                _this._popup.destructor();
                _this._calendar.destructor();
            });
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.$editable = null;
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [this._value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    DateEditor.prototype.toHTML = function () {
        var value = this._cell.row[this._cell.col.id];
        this._config.$editable.editor = this;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return (0, dom_1.el)("input.dhx_cell-editor.dhx_cell-editor__input.dhx_cell-editor__datepicker", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            "data-dhx-id": "cell_editor",
            value: value,
        });
    };
    DateEditor.prototype._cleanConfig = function (col) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var _a = col.editorConfig || {}, value = _a.value, range = _a.range, dateFormat = _a.dateFormat, calendarConfig = __rest(_a, ["value", "range", "dateFormat"]);
        calendarConfig.dateFormat = col.format;
        return calendarConfig;
    };
    DateEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                (0, dom_1.awaitRedraw)().then(function () {
                    _this._popup.show(_this._input, {
                        centering: true,
                        mode: "bottom",
                        theme: _this._input,
                    });
                });
            },
            onChange: function () {
                _this.endEdit();
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._input.addEventListener("change", _this._handlers.onChange);
                input.focus();
                input.setSelectionRange(input.value.length, input.value.length);
            },
        };
    };
    return DateEditor;
}());
exports.DateEditor = DateEditor;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Calendar = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var view_1 = __webpack_require__(8);
var ts_timepicker_1 = __webpack_require__(53);
var helper_1 = __webpack_require__(138);
var date_1 = __webpack_require__(18);
var types_1 = __webpack_require__(76);
var html_1 = __webpack_require__(4);
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, (0, core_1.extend)({
            weekStart: "sunday",
            thisMonthOnly: false,
            dateFormat: window && window.dhx && window.dhx.dateFormat,
            width: "250px",
        }, config)) || this;
        _this._selected = [];
        _this.events = new events_1.EventSystem();
        _this.config.disabledDates = _this.config.disabledDates || _this.config.block; // TODO: remove suite_7.0
        _this.config.mode = _this.config.mode || _this.config.view; // TODO: remove suite_7.0
        if (!_this.config.dateFormat) {
            if (_this.config.timePicker) {
                if (_this.config.timeFormat === 12) {
                    _this.config.dateFormat = "%d/%m/%y %h:%i %A";
                }
                else {
                    _this.config.dateFormat = "%d/%m/%y %H:%i";
                }
            }
            else {
                _this.config.dateFormat = "%d/%m/%y";
            }
        }
        if (_this.config.value) {
            _this._setSelected(_this.config.value);
        }
        if (_this.config.date) {
            _this._currentDate = date_1.DateHelper.toDateObject(_this.config.date, _this.config.dateFormat);
        }
        else if (_this._getSelected()) {
            _this._currentDate = date_1.DateHelper.copy(_this._getSelected());
        }
        else {
            _this._currentDate = new Date();
        }
        switch (_this.config.mode) {
            case "month":
                _this._currentViewMode = "month";
                break;
            case "year":
                _this._currentViewMode = "year";
                break;
            case "timepicker":
                _this._currentViewMode = _this.config.timePicker ? "timepicker" : "calendar";
                break;
            default:
                _this._currentViewMode = "calendar";
        }
        _this._initHandlers();
        if (_this.config.timePicker) {
            _this._timepicker = new ts_timepicker_1.Timepicker(null, {
                timeFormat: _this.config.timeFormat,
                controls: true,
            });
            var initTime = _this._getSelected() || new Date();
            _this._timepicker.setValue(initTime);
            _this._time = _this._timepicker.getValue();
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterClose, function () {
                _this._timepicker.setValue(_this._time);
                _this.showDate(null, "calendar");
            });
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterApply, function () {
                var _a = _this._timepicker.getValue(true), hour = _a.hour, minute = _a.minute, AM = _a.AM;
                var oldDate = _this._getSelected();
                var newDate = date_1.DateHelper.withHoursAndMinutes(_this._getSelected() || new Date(), hour, minute, AM);
                if (_this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                    _this._selected[_this._selected.length - 1] = newDate;
                    _this.events.fire(types_1.CalendarEvents.change, [newDate, oldDate, true]);
                }
                _this._time = _this._timepicker.getValue();
                _this.showDate(null, "calendar");
            });
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Calendar.prototype.setValue = function (value) {
        if (!value || (value instanceof Array && value.length === 0)) {
            return false;
        }
        var currentDate = value instanceof Array ? value[0] : value;
        var date = date_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        var oldDate = date_1.DateHelper.copy(this._getSelected());
        if (!this.events.fire(types_1.CalendarEvents.beforeChange, [date, oldDate, false])) {
            return false;
        }
        this._selected = [];
        this._setSelected(value);
        if (this._timepicker) {
            this._timepicker.setValue(date);
            this._time = this._timepicker.getValue();
        }
        this.showDate(this._getSelected());
        this.events.fire(types_1.CalendarEvents.change, [date, oldDate, false]);
        this.paint();
        return true;
    };
    Calendar.prototype.getValue = function (asDateObject) {
        var _this = this;
        if (asDateObject === void 0) { asDateObject = false; }
        if (!this._selected[0]) {
            return "";
        }
        if (this.config.range) {
            return asDateObject
                ? this._selected.map(function (date) { return date_1.DateHelper.copy(date); })
                : this._selected.map(function (date) { return (0, date_1.getFormattedDate)(_this.config.dateFormat, date); });
        }
        return asDateObject
            ? date_1.DateHelper.copy(this._selected[0])
            : (0, date_1.getFormattedDate)(this.config.dateFormat, this._selected[0]);
    };
    Calendar.prototype.getCurrentMode = function () {
        return this._currentViewMode;
    };
    Calendar.prototype.showDate = function (date, mode) {
        if (date) {
            this._currentDate = date_1.DateHelper.copy(date);
        }
        if (mode) {
            this._currentViewMode = mode;
        }
        this.paint();
    };
    Calendar.prototype.destructor = function () {
        this._linkedCalendar && this._unlink();
        this._timepicker && this._timepicker.destructor();
        this.events && this.events.clear();
        this.config = this.events = null;
        this._uid = this._selected = this._currentDate = this._currentViewMode = this._handlers = this._timepicker = this._time = null;
        this.unmount();
    };
    Calendar.prototype.clear = function () {
        var oldDate = this.getValue(true);
        if (!this.events.fire(types_1.CalendarEvents.beforeChange, ["", oldDate, false]))
            return;
        if (this.config.timePicker) {
            this._timepicker.clear();
            this._time = this._timepicker.getValue();
        }
        this._selected = [];
        this.showDate(null, this.config.mode);
        this.events.fire(types_1.CalendarEvents.change, [this.getValue(true), oldDate, false, "clear"]);
    };
    Calendar.prototype.link = function (targetCalendar) {
        var _this = this;
        if (this._linkedCalendar) {
            this._unlink();
        }
        this._linkedCalendar = targetCalendar;
        var rawLowerDate = this.getValue(true);
        var rawUpperDate = targetCalendar.getValue(true);
        var lowerDate = rawLowerDate && date_1.DateHelper.dayStart(rawLowerDate);
        var upperDate = rawUpperDate && date_1.DateHelper.dayStart(rawUpperDate);
        var getRangeClass = function (date) {
            if (date_1.DateHelper.isSameDay(upperDate, lowerDate)) {
                return null;
            }
            var positionInRange = "dhx_calendar-day--in-range";
            if (date_1.DateHelper.isSameDay(date, lowerDate)) {
                positionInRange += " dhx_calendar-day--first-date";
            }
            if (date_1.DateHelper.isSameDay(date, upperDate)) {
                positionInRange += " dhx_calendar-day--last-date";
            }
            return positionInRange;
        };
        var rangeMark = function (date) {
            if (lowerDate && upperDate) {
                return date >= lowerDate && date <= upperDate && getRangeClass(date);
            }
        };
        if (!this.config.$rangeMark || !this._linkedCalendar.config.$rangeMark) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = rangeMark;
        }
        if (!this.config.disabledDates || !this._linkedCalendar.config.disabledDates) {
            this.config.disabledDates = function (date) {
                if (upperDate) {
                    return date > upperDate;
                }
            };
            this._linkedCalendar.config.disabledDates = function (date) {
                if (lowerDate) {
                    return date < lowerDate;
                }
            };
        }
        this.config.thisMonthOnly = true;
        targetCalendar.config.thisMonthOnly = true;
        this.events.on(types_1.CalendarEvents.change, function (date) {
            lowerDate = date ? date_1.DateHelper.dayStart(date) : null;
            _this._linkedCalendar.paint();
        }, "link");
        this._linkedCalendar.events.on(types_1.CalendarEvents.change, function (date) {
            upperDate = date ? date_1.DateHelper.dayStart(date) : null;
            _this.paint();
        }, "link");
        this._linkedCalendar.paint();
        this.paint();
    };
    Calendar.prototype._unlink = function () {
        if (this._linkedCalendar) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = null;
            this.config.disabledDates = this._linkedCalendar.config.disabledDates = null;
            this.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.paint();
            this._linkedCalendar = null;
        }
    };
    Calendar.prototype._setSelected = function (value) {
        var _this = this;
        var currentDate = value instanceof Array ? value[0] : value;
        var date = date_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        if (value instanceof Array && this.config.range) {
            var filterDate_1 = [];
            value.forEach(function (element, index) {
                if (index < 2) {
                    filterDate_1.push(date_1.DateHelper.toDateObject(element, _this.config.dateFormat));
                }
            });
            if (filterDate_1.length === 2 && filterDate_1[0] < filterDate_1[1]) {
                filterDate_1.forEach(function (element) { return _this._selected.push(element); });
            }
            else {
                this._selected[0] = filterDate_1[0];
            }
        }
        else {
            this._selected[0] = date;
        }
    };
    Calendar.prototype._getSelected = function () {
        return this._selected[this._selected.length - 1];
    };
    Calendar.prototype._draw = function () {
        switch (this._currentViewMode) {
            case "calendar":
                this.events.fire(types_1.CalendarEvents.modeChange, ["calendar"]);
                return this._drawCalendar();
            case "month":
                this.events.fire(types_1.CalendarEvents.modeChange, ["month"]);
                return this._drawMonthSelector();
            case "year":
                this.events.fire(types_1.CalendarEvents.modeChange, ["year"]);
                return this._drawYearSelector();
            case "timepicker":
                this.events.fire(types_1.CalendarEvents.modeChange, ["timepicker"]);
                return this._drawTimepicker();
        }
    };
    Calendar.prototype._initHandlers = function () {
        var _this = this;
        var ie_key_map = {
            Up: "ArrowUp",
            Down: "ArrowDown",
            Right: "ArrowRight",
            Left: "ArrowLeft",
            Esc: "Escape",
            Spacebar: "Space",
        };
        var getKey = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = (0, html_1.isIE)() ? ie_key_map[keyName] || keyName : keyName;
            }
            return key;
        };
        var getVerticalRange = function (decrease) {
            if (decrease === void 0) { decrease = false; }
            var range = 0;
            switch (_this._currentViewMode) {
                case "calendar":
                    range = decrease ? -7 : 7;
                    break;
                case "month":
                    range = decrease ? -4 : 4;
                    break;
                case "year":
                    range = decrease ? -4 : 4;
            }
            return range;
        };
        this._handlers = {
            onkeydown: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    switch (getKey(_e)) {
                        case "Enter":
                            _this._selectDate(_e, vn);
                            break;
                        case "ArrowLeft":
                            _this._moveBrowseFocus(_e, vn, -1);
                            break;
                        case "ArrowRight":
                            _this._moveBrowseFocus(_e, vn, 1);
                            break;
                        case "ArrowUp":
                            _this._moveBrowseFocus(_e, vn, getVerticalRange(true));
                            break;
                        case "ArrowDown":
                            _this._moveBrowseFocus(_e, vn, getVerticalRange());
                            break;
                    }
                },
            },
            onclick: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    _this._selectDate(_e, vn);
                },
                ".dhx_calendar-action__cancel": function () {
                    _this.showDate(_this._getSelected(), "calendar");
                    _this.events.fire(types_1.CalendarEvents.cancelClick, []);
                },
                ".dhx_calendar-action__show-month": function () { return _this.showDate(null, "month"); },
                ".dhx_calendar-action__show-year": function () { return _this.showDate(null, "year"); },
                ".dhx_calendar-action__next": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = date_1.DateHelper.addMonth(_this._currentDate, 1);
                            break;
                        case "month":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, 1);
                            break;
                        case "year":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, 12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__prev": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = date_1.DateHelper.addMonth(_this._currentDate, -1);
                            break;
                        case "month":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, -1);
                            break;
                        case "year":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, -12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__show-timepicker": function () {
                    _this._currentViewMode = "timepicker";
                    _this.paint();
                },
            },
            onmouseover: {
                ".dhx_calendar-day": function (event, node) {
                    _this.events.fire(types_1.CalendarEvents.dateMouseOver, [new Date(node.attrs._date), event]);
                    _this.events.fire(types_1.CalendarEvents.dateHover, [new Date(node.attrs._date), event]); // TODO: remove suite_7.0
                },
            },
        };
    };
    Calendar.prototype._getData = function (date) {
        var _this = this;
        this._isSelectedInCurrentRange = false;
        var firstDay;
        switch (this.config.weekStart) {
            case "saturday":
                firstDay = -1;
                break;
            case "monday":
                firstDay = 1;
                break;
            default:
                firstDay = 0;
        }
        var first = date_1.DateHelper.weekStart(date_1.DateHelper.monthStart(date), firstDay);
        var data = [];
        var weeksCount = 6;
        var currentDate = first;
        while (weeksCount--) {
            var currentWeek = date_1.DateHelper.getWeekNumber(currentDate);
            var disabledDays = 0;
            var daysCount = 7;
            var days = [];
            var _loop_1 = function () {
                var isDateWeekEnd = date_1.DateHelper.isWeekEnd(currentDate);
                var isCurrentMonth = date.getMonth() === currentDate.getMonth();
                var isBlocked = this_1.config.disabledDates && this_1.config.disabledDates(currentDate);
                var css = [];
                if (this_1.config.range && this_1._selected[0] && this_1._selected[1]) {
                    var getRangeClass_1 = function () {
                        if (date_1.DateHelper.isSameDay(_this._selected[0], _this._selected[1])) {
                            return null;
                        }
                        return "dhx_calendar-day--in-range";
                    };
                    var rangeMark = function () {
                        if (_this._selected[0] && _this._selected[1]) {
                            var firstDate = date_1.DateHelper.dayStart(_this._selected[0]);
                            var lastDate = date_1.DateHelper.dayStart(_this._selected[1]);
                            return currentDate >= firstDate && currentDate <= lastDate && getRangeClass_1();
                        }
                    };
                    this_1.config.$rangeMark = rangeMark;
                }
                if (isDateWeekEnd) {
                    css.push("dhx_calendar-day--weekend");
                }
                if (!isCurrentMonth) {
                    if (this_1.config.thisMonthOnly) {
                        disabledDays++;
                        css.push("dhx_calendar-day--hidden");
                    }
                    else {
                        css.push("dhx_calendar-day--muffled");
                    }
                }
                if (this_1.config.mark) {
                    var markedCss = this_1.config.mark(currentDate);
                    if (markedCss) {
                        css.push(markedCss);
                    }
                }
                if (this_1.config.$rangeMark) {
                    var rangeMark = this_1.config.$rangeMark(currentDate);
                    if (rangeMark) {
                        css.push(rangeMark);
                    }
                }
                if (isBlocked) {
                    if (isDateWeekEnd) {
                        css.push("dhx_calendar-day--weekend-disabled");
                    }
                    else {
                        css.push("dhx_calendar-day--disabled");
                    }
                }
                this_1._selected.forEach(function (selected, index) {
                    if (selected && date_1.DateHelper.isSameDay(selected, currentDate)) {
                        _this._isSelectedInCurrentRange = true;
                        var dayCss = "dhx_calendar-day--selected";
                        if (_this.config.range) {
                            dayCss += " dhx_calendar-day--selected-".concat(index === 0 ? "first " : "last");
                        }
                        css.push(dayCss);
                    }
                });
                days.push({
                    date: currentDate,
                    day: currentDate.getDate(),
                    css: css.join(" "),
                });
                currentDate = date_1.DateHelper.addDay(currentDate);
            };
            var this_1 = this;
            while (daysCount--) {
                _loop_1();
            }
            data.push({
                weekNumber: currentWeek,
                days: days,
                disabledWeekNumber: disabledDays === 7,
            });
        }
        return data;
    };
    Calendar.prototype._drawCalendar = function () {
        var _this = this;
        var date = this._currentDate;
        var _a = this.config, weekStart = _a.weekStart, thisMonthOnly = _a.thisMonthOnly, css = _a.css, timePicker = _a.timePicker, width = _a.width;
        var weekDays;
        switch (weekStart) {
            case "saturday":
                weekDays = __spreadArray([date_1.locale.daysShort[6]], date_1.locale.daysShort.slice(0, -1), true);
                break;
            case "monday":
                weekDays = __spreadArray(__spreadArray([], date_1.locale.daysShort.slice(1), true), [date_1.locale.daysShort[0]], false);
                break;
            default:
                weekDays = date_1.locale.daysShort;
        }
        var weekDaysHeader = weekDays.map(function (day) { return (0, dom_1.el)(".dhx_calendar-weekday", day); });
        var data = this._getData(date);
        var isFirstItem = true;
        var selectedDate = this._getSelected();
        var isDateSelected = function (date) {
            return date && selectedDate && date.getTime() === selectedDate.getTime();
        };
        var getCellAriaAttrs = function (item) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (_this._isSelectedInCurrentRange) {
                    // it is correct that conditions are separated
                    if (isDateSelected(item.date)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        var content = [];
        var weekNumbers = [];
        var weekNumbersWrapper;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var week = data_1[_i];
            var weekRow = week.days.map(function (item) {
                return (0, dom_1.el)("div.dhx_calendar-day", __assign({ class: item.css, _date: item.date }, getCellAriaAttrs(item)), item.day);
            });
            if (this.config.weekNumbers && !(week.disabledWeekNumber && thisMonthOnly)) {
                weekNumbers.push((0, dom_1.el)("div", {
                    class: "dhx_calendar-week-number",
                }, week.weekNumber));
            }
            content = content.concat(weekRow);
        }
        if (this.config.weekNumbers) {
            weekNumbersWrapper = (0, dom_1.el)(".dhx_calendar__week-numbers", weekNumbers);
        }
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (this.config.weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        return (0, dom_1.el)("div", __assign({ class: widgetClass, style: {
                width: this.config.weekNumbers ? parseInt(width.toString()) + 48 + "px" : width,
            } }, this._handlers), [
            (0, dom_1.el)(".dhx_calendar__wrapper", [
                this._drawHeader((0, dom_1.el)("button.dhx_calendar-action__show-month.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, date_1.locale.months[date.getMonth()] + " " + date.getFullYear())),
                this.config.weekNumbers &&
                    (0, dom_1.el)(".dhx_calendar__dates-wrapper", [
                        (0, dom_1.el)(".dhx_calendar__weekdays", weekDaysHeader),
                        (0, dom_1.el)(".dhx_calendar__days", content),
                        weekNumbersWrapper,
                    ]),
                !this.config.weekNumbers && (0, dom_1.el)(".dhx_calendar__weekdays", weekDaysHeader),
                !this.config.weekNumbers && (0, dom_1.el)(".dhx_calendar__days", content),
                timePicker
                    ? (0, dom_1.el)(".dhx_timepicker__actions", [
                        (0, dom_1.el)("button.dhx_calendar__timepicker-button." +
                            "dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__show-timepicker", { type: "button" }, [
                            (0, dom_1.el)("span.dhx_button__icon.dxi.dxi-clock-outline"),
                            (0, dom_1.el)("span.dhx_button__text", this._time),
                        ]),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawMonthSelector = function () {
        var date = this._currentDate;
        var currentMonth = date.getMonth();
        var currentYear = this._getSelected() ? this._getSelected().getFullYear() : null;
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        var isFirstItem = true;
        var isCurrentYear = currentYear === date.getFullYear();
        var isMonthSelected = function (i) { return isCurrentYear && currentMonth === i; };
        var getCellAriaAttrs = function (item, i) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (isCurrentYear) {
                    // it is correct that conditions are separated
                    if (isMonthSelected(i)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        return (0, dom_1.el)("div", __assign({ class: widgetClass, style: {
                width: weekNumbers ? parseInt(width.toString()) + 48 + "px" : width,
            } }, this._handlers), [
            (0, dom_1.el)(".dhx_calendar__wrapper", [
                this._drawHeader((0, dom_1.el)("button.dhx_calendar-action__show-year.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, date.getFullYear())),
                (0, dom_1.el)(".dhx_calendar__months", date_1.locale.monthsShort.map(function (item, i) {
                    return (0, dom_1.el)("div", __assign(__assign({ class: "dhx_calendar-month" +
                            (isMonthSelected(i) ? " dhx_calendar-month--selected" : "") }, getCellAriaAttrs(item, i)), { _date: i }), item);
                })),
                mode !== "month"
                    ? (0, dom_1.el)(".dhx_calendar__actions", [
                        (0, dom_1.el)("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", { type: "button" }, date_1.locale.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawYearSelector = function () {
        var _this = this;
        var date = this._currentDate;
        var yearsDiapason = date_1.DateHelper.getTwelweYears(date);
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        var isFirstItem = true;
        var isSelectedYearInRange = this._getSelected() && yearsDiapason.includes(this._getSelected().getFullYear());
        var isYearSelected = function (item) { return _this._getSelected() && item === _this._getSelected().getFullYear(); };
        var getCellAriaAttrs = function (item) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (isSelectedYearInRange) {
                    // it is correct that conditions are separated
                    if (isYearSelected(item)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        return (0, dom_1.el)("div", __assign({ class: widgetClass, style: {
                width: weekNumbers ? parseInt(width.toString()) + 48 + "px" : width,
            } }, this._handlers), [
            (0, dom_1.el)(".dhx_calendar__wrapper", [
                this._drawHeader((0, dom_1.el)("button.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, yearsDiapason[0] + "-" + yearsDiapason[yearsDiapason.length - 1])),
                (0, dom_1.el)(".dhx_calendar__years", yearsDiapason.map(function (item) {
                    return (0, dom_1.el)("div", __assign({ class: "dhx_calendar-year" +
                            (isYearSelected(item) ? " dhx_calendar-year--selected" : ""), _date: item }, getCellAriaAttrs(item)), item);
                })),
                mode !== "year" && mode !== "month"
                    ? (0, dom_1.el)(".dhx_calendar__actions", [
                        (0, dom_1.el)("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", { type: "button" }, date_1.locale.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawHeader = function (actionContent) {
        return (0, dom_1.el)(".dhx_calendar__navigation", [
            (0, dom_1.el)("button.dhx_calendar-navigation__button.dhx_calendar-action__prev" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", {
                "aria-label": "prev",
                type: "button",
            }, [(0, dom_1.el)(".dhx_button__icon.dxi.dxi-chevron-left")]),
            actionContent,
            (0, dom_1.el)("button.dhx_calendar-navigation__button.dhx_calendar-action__next" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", {
                "aria-label": "next",
                type: "button",
            }, [(0, dom_1.el)(".dhx_button__icon.dxi.dxi-chevron-right")]),
        ]);
    };
    Calendar.prototype._drawTimepicker = function () {
        var _a = this.config, css = _a.css, weekNumbers = _a.weekNumbers, width = _a.width;
        return (0, dom_1.el)(".dhx_widget.dhx-calendar", {
            class: css ? " " + css : "",
            style: {
                width: weekNumbers ? parseInt(width.toString()) + 48 + "px" : width,
            },
        }, [(0, dom_1.inject)(this._timepicker.getRootView())]);
    };
    Calendar.prototype._selectDate = function (_e, vn) {
        var date = vn.attrs._date;
        var oldDate = date_1.DateHelper.copy(this._getSelected());
        switch (this._currentViewMode) {
            case "calendar": {
                var mergedDate = this.config.timePicker
                    ? date_1.DateHelper.mergeHoursAndMinutes(date, this._getSelected() || this._currentDate)
                    : date;
                if (!this.events.fire(types_1.CalendarEvents.beforeChange, [mergedDate, oldDate, true])) {
                    return;
                }
                if (this.config.range && this._selected.length === 1 && this._selected[0] < mergedDate) {
                    this._selected.push(mergedDate);
                }
                else {
                    this._selected = [];
                    this._selected[0] = mergedDate;
                }
                vn.el.blur();
                this.showDate(this._getSelected());
                this.events.fire(types_1.CalendarEvents.change, [date, oldDate, true]);
                break;
            }
            case "month":
                if (this.config.mode !== "month") {
                    date_1.DateHelper.setMonth(this._currentDate, date);
                    this.showDate(null, "calendar");
                    this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                }
                else {
                    var newDate = date_1.DateHelper.fromYearAndMonth(this._currentDate.getFullYear() || this._getSelected().getFullYear(), date);
                    if (!this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                        return;
                    }
                    this._currentDate = newDate;
                    this._selected[0] = newDate;
                    this.events.fire(types_1.CalendarEvents.change, [this._getSelected(), oldDate, true]);
                    this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                    this.paint();
                }
                break;
            case "year":
                if (this.config.mode !== "year") {
                    date_1.DateHelper.setYear(this._currentDate, date);
                    this.showDate(null, "month");
                    this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                }
                else {
                    var newDate = date_1.DateHelper.fromYear(date);
                    if (!this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                        return;
                    }
                    this._currentDate = newDate;
                    this._selected[0] = newDate;
                    this.events.fire(types_1.CalendarEvents.change, [this._getSelected(), oldDate, true]);
                    this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                    this.paint();
                }
        }
    };
    Calendar.prototype._moveBrowseFocus = function (e, node, range) {
        if (node) {
            var nextNode = node.parent.body[node.idx + range];
            if (nextNode) {
                var $nextNode = nextNode.el;
                if ($nextNode) {
                    e.target.tabIndex = -1;
                    $nextNode.tabIndex = 0;
                    $nextNode.focus({ preventScroll: true });
                }
            }
        }
    };
    return Calendar;
}(view_1.View));
exports.Calendar = Calendar;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timepicker = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var view_1 = __webpack_require__(8);
var ts_layout_1 = __webpack_require__(16);
var ts_slider_1 = __webpack_require__(72);
var en_1 = __webpack_require__(136);
var helper_1 = __webpack_require__(137);
var types_1 = __webpack_require__(75);
var html_1 = __webpack_require__(4);
function validate(value, max) {
    if (isNaN(value)) {
        return 0;
    }
    return Math.min(max, Math.max(0, value));
}
var Timepicker = /** @class */ (function (_super) {
    __extends(Timepicker, _super);
    function Timepicker(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, (0, core_1.extend)({
            timeFormat: 24,
            controls: false,
            valueFormat: "string",
            actions: false, // TODO: remove suite_7.0
        }, config)) || this;
        _this.events = new events_1.EventSystem(_this);
        _this._time = {
            hour: 0,
            minute: 0,
            AM: true,
        };
        if (_this.config.timeFormat === 12) {
            _this._time.hour = 12;
        }
        _this.config.controls = _this.config.controls || _this.config.actions; // TODO: remove suite_7.0
        _this.config.value && _this._setValue(_this.config.value);
        _this._initUI(container);
        _this._initHandlers();
        _this._initEvents();
        return _this;
    }
    Timepicker.prototype.getValue = function (asObject) {
        if (this.config.timeFormat === 12)
            this._time.hour = this._time.hour % 12 || 12;
        return this._getValue(this._time, asObject);
    };
    Timepicker.prototype.setValue = function (value) {
        this._setValue(value);
        this._hoursSlider.setValue(this._time.hour);
        this._minutesSlider.setValue(this._time.minute);
        this._inputsView.paint();
    };
    Timepicker.prototype.clear = function () {
        if (this.config.timeFormat === 24) {
            this.setValue("00:00");
        }
        else {
            this.setValue("12:00AM");
        }
    };
    Timepicker.prototype.destructor = function () {
        this._minutesSlider && this._minutesSlider.destructor();
        this._hoursSlider && this._hoursSlider.destructor();
        this.events && this.events.clear();
        this.layout && this.layout.destructor();
        this.config = this.events = null;
        this._handlers = this._time = this._inputsView = this._minutesSlider = this._hoursSlider = null;
        this.unmount();
    };
    Timepicker.prototype.getRootView = function () {
        return this.layout.getRootView();
    };
    Timepicker.prototype._getValue = function (timeObj, asObj) {
        var hour = timeObj.hour, minute = timeObj.minute, AM = timeObj.AM;
        if (asObj) {
            var obj = { hour: hour, minute: minute };
            if (this.config.timeFormat === 12)
                obj.AM = AM;
            return obj;
        }
        return ((hour < 10 ? "0" + hour : hour) +
            ":" +
            (minute < 10 ? "0" + minute : minute) +
            (this.config.timeFormat === 12 ? (AM ? "AM" : "PM") : ""));
    };
    Timepicker.prototype._setValue = function (value) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var m = 0;
        var h = 0;
        var isPM;
        if (typeof value === "number") {
            value = new Date(value);
        }
        if (value instanceof Date) {
            m = value.getMinutes();
            h = value.getHours();
        }
        else if (Array.isArray(value)) {
            h = validate(value[0], 23);
            m = validate(value[1], 59);
            if (value[2] && value[2].toLowerCase() === "pm") {
                isPM = true;
            }
        }
        else if (typeof value === "string") {
            var matches = value.match(/\d+/g);
            h = validate(+matches[0], 23);
            m = validate(+matches[1], 59);
            if (value.toLowerCase().includes("pm")) {
                isPM = true;
            }
        }
        else if (typeof value === "object" &&
            value.hasOwnProperty("hour") &&
            value.hasOwnProperty("minute")) {
            h = value.hour;
            m = value.minute;
            isPM = !value.AM;
        }
        if (isPM && h < 12) {
            h += 12;
        }
        if (this.config.timeFormat === 12 && !(0, helper_1.isTimeCheck)(value) && h >= 12)
            isPM = true;
        return (this._time = {
            hour: h,
            minute: m,
            AM: !isPM,
        });
    };
    Timepicker.prototype._initUI = function (container) {
        var _this = this;
        var layoutConfig = {
            gravity: false,
            css: "dhx_widget dhx_timepicker " +
                (this.config.css ? this.config.css : "") +
                (this.config.controls ? " dhx_timepicker--with-controls" : ""),
            rows: [
                {
                    id: "timepicker",
                    css: "dhx_timepicker__inputs",
                },
                {
                    id: "hour-slider",
                    css: "dhx_timepicker__hour",
                },
                {
                    id: "minute-slider",
                    css: "dhx_timepicker__minute",
                },
            ],
        };
        if (this.config.controls) {
            layoutConfig.rows.unshift({
                id: "close-action",
                css: "dhx_timepicker__close",
            });
            layoutConfig.rows.push({
                id: "save-action",
                css: "dhx_timepicker__save",
            });
        }
        var layout = (this.layout = new ts_layout_1.Layout(container, layoutConfig));
        var timepicker = (0, dom_1.create)({
            render: function () { return _this._draw(); },
        });
        var inputsView = (this._inputsView = (0, view_1.toViewLike)(timepicker));
        var mSlider = (this._minutesSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 59,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.minutes,
            value: this.config.value ? this._time.minute : 0,
        }));
        var hSlider = (this._hoursSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 23,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.hours,
            value: this.config.value ? (this._time.hour === 12 && this._time.AM ? 0 : this._time.hour) : 0,
        }));
        layout.getCell("timepicker").attach(inputsView);
        layout.getCell("hour-slider").attach(hSlider);
        layout.getCell("minute-slider").attach(mSlider);
        if (this.config.controls) {
            var save = function () {
                return (0, dom_1.el)("button.dhx_timepicker__button-save.dhx_button.dhx_button--view_flat.dhx_button--color_primary.dhx_button--size_small.dhx_button--circle.dhx_button--width_full", {
                    onclick: _this._outerHandlers.save,
                    type: "button",
                }, en_1.default.save);
            };
            var close_1 = function () {
                return (0, dom_1.el)("button.dhx_timepicker__button-close.dhx_button.dhx_button--view_link.dhx_button--size_medium.dhx_button--view_link.dhx_button--color_secondary.dhx_button--icon.dhx_button--circle", {
                    _ref: "close",
                    onclick: _this._outerHandlers.close,
                    type: "button",
                    "aria-label": "close timepicker",
                }, [(0, dom_1.el)("span.dhx_button__icon.dxi.dxi-close")]);
            };
            layout.getCell("save-action").attach(save);
            layout.getCell("close-action").attach(close_1);
        }
    };
    Timepicker.prototype._initHandlers = function () {
        var _this = this;
        var setMinutes = function (element) {
            var min = validate(parseInt(element.value, 10), 59);
            element.value = min.toString();
            _this._minutesSlider.setValue(min);
        };
        var setHours = function (element) {
            var hour = validate(parseInt(element.value, 10), 23);
            element.value = hour.toString();
            _this._hoursSlider.setValue(hour);
        };
        this._handlers = {
            onchange: {
                ".dhx_timepicker-input--hour": function (e) { return setHours(e.target); },
                ".dhx_timepicker-input--minutes": function (e) { return setMinutes(e.target); },
            },
            oninput: {
                ".dhx_timepicker-input--hour": function (e) {
                    if (!(0, html_1.isSafari)() && !(0, html_1.isFirefox)())
                        return;
                    setHours(e.target);
                },
                ".dhx_timepicker-input--minutes": function (e) {
                    if (!(0, html_1.isSafari)() && !(0, html_1.isFirefox)())
                        return;
                    setMinutes(e.target);
                },
            },
        };
        this._outerHandlers = {
            close: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeClose, [_this.getValue(_this._isTimeObj())])) {
                    return;
                }
                _this.events.fire(types_1.TimepickerEvents.afterClose, [_this.getValue(_this._isTimeObj())]);
                _this.events.fire(types_1.TimepickerEvents.close, []); // TODO: remove suite_7.0
            },
            save: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeApply, [_this.getValue(_this._isTimeObj())]))
                    return;
                _this.events.fire(types_1.TimepickerEvents.afterApply, [_this.getValue(_this._isTimeObj())]);
                _this.events.fire(types_1.TimepickerEvents.apply, [_this.getValue()]); // TODO: remove suite_7.0
                _this.events.fire(types_1.TimepickerEvents.save, [_this._time]); // TODO: remove suite_7.0
            },
        };
    };
    Timepicker.prototype._initEvents = function () {
        var _this = this;
        this._hoursSlider.events.on(ts_slider_1.SliderEvents.beforeChange, function (value) {
            if (value < _this._hoursSlider.config.min || value > _this._hoursSlider.config.max) {
                return;
            }
            var timeObj = __assign({}, _this._time);
            if (_this.config.timeFormat === 12) {
                timeObj.AM = value < 12;
                timeObj.hour = value % 12 || 12;
            }
            else {
                timeObj.hour = value;
            }
            var asObject = _this._isTimeObj();
            return _this.events.fire(types_1.TimepickerEvents.beforeChange, [_this._getValue(timeObj, asObject)]);
        });
        this._hoursSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._hoursSlider.config.min || value > _this._hoursSlider.config.max) {
                return;
            }
            if (_this.config.timeFormat === 12) {
                _this._time.AM = value < 12;
                _this._time.hour = value % 12 || 12;
            }
            else {
                _this._time.hour = value;
            }
            var asObject = _this._isTimeObj();
            _this.events.fire(types_1.TimepickerEvents.change, [_this.getValue(asObject)]);
            _this._inputsView.paint();
        });
        this._minutesSlider.events.on(ts_slider_1.SliderEvents.beforeChange, function (value) {
            if (value < _this._minutesSlider.config.min || value > _this._minutesSlider.config.max) {
                return;
            }
            var timeObj = __assign(__assign({}, _this._time), { minute: value });
            var asObject = _this._isTimeObj();
            return _this.events.fire(types_1.TimepickerEvents.beforeChange, [_this._getValue(timeObj, asObject)]);
        });
        this._minutesSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._minutesSlider.config.min || value > _this._minutesSlider.config.max) {
                return;
            }
            _this._time.minute = value;
            var asObject = _this._isTimeObj();
            _this.events.fire(types_1.TimepickerEvents.change, [_this.getValue(asObject)]);
            _this._inputsView.paint();
        });
    };
    Timepicker.prototype._draw = function () {
        this._minutesSlider.config.label = en_1.default.minutes;
        this._hoursSlider.config.label = en_1.default.hours;
        return (0, dom_1.el)(".dhx_timepicker-inputs", __assign({}, this._handlers), [
            (0, dom_1.el)("input.dhx_timepicker-input.dhx_timepicker-input--hour", {
                _key: "hour",
                _ref: "hour",
                value: this.getValue(true).hour.toString().length > 1
                    ? this.getValue(true).hour
                    : "0" + this.getValue(true).hour,
                "aria-label": "hours",
            }),
            (0, dom_1.el)("span.dhx_timepicker-delimer", ":"),
            (0, dom_1.el)("input.dhx_timepicker-input.dhx_timepicker-input--minutes", {
                _key: "minute",
                value: this.getValue(true).minute.toString().length > 1
                    ? this.getValue(true).minute
                    : "0" + this.getValue(true).minute,
                "aria-label": "minutes",
            }),
            this.config.timeFormat === 12
                ? (0, dom_1.el)(".dhx_timepicker-ampm", this._time.AM ? "AM" : "PM")
                : null,
        ]);
    };
    Timepicker.prototype._isTimeObj = function () {
        var _a;
        return ((_a = this.config.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "timeobject";
    };
    return Timepicker;
}(view_1.View));
exports.Timepicker = Timepicker;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarginSize = exports.getBlockRange = void 0;
function getBlockRange(block1, block2, isXLayout) {
    if (isXLayout === void 0) { isXLayout = true; }
    if (isXLayout) {
        return {
            min: block1.left + window.pageXOffset,
            max: block2.right + window.pageXOffset,
        };
    }
    return {
        min: block1.top + window.pageYOffset,
        max: block2.bottom + window.pageYOffset,
    };
}
exports.getBlockRange = getBlockRange;
function getMarginSize(config) {
    if (!config) {
        return 0;
    }
    if (config.type === "space" || config.type === "wide") {
        return 12;
    }
    return 0;
}
exports.getMarginSize = getMarginSize;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProLayout = void 0;
var Layout_1 = __webpack_require__(54);
var ProCell_1 = __webpack_require__(133);
var ProLayout = /** @class */ (function (_super) {
    __extends(ProLayout, _super);
    function ProLayout(parent, config) {
        return _super.call(this, parent, config) || this;
    }
    ProLayout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            view = new ProLayout(this, cell);
        }
        else {
            view = new ProCell_1.ProCell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        if (cell.init) {
            cell.init(view, cell);
        }
        return view;
    };
    return ProLayout;
}(Layout_1.Layout));
exports.ProLayout = ProLayout;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProCell = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var ScrollView_1 = __webpack_require__(35);
var Cell_1 = __webpack_require__(71);
var ProCell = /** @class */ (function (_super) {
    __extends(ProCell, _super);
    function ProCell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () {
            return _this._getFirstRootView();
        });
        return _this;
    }
    ProCell.prototype._getFirstRootView = function (self) {
        if (self === void 0) { self = this; }
        return self.getParent() && self.getParent().getRootView()
            ? self.getParent().getRootView()
            : this._getFirstRootView(self.getParent());
    };
    ProCell.prototype.toVDOM = function (nodes) {
        var _a;
        var _b, _c;
        this._saveTheme();
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var isFieldset = this.config.$fieldset;
        var style = this._calculateStyle();
        var stylePadding = (0, core_1.isDefined)(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: "".concat(this.config.padding, "px") }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var progressBar = this._checkProgress() ? this._getProgressBar() : null;
        var kids;
        if (!this.config.html) {
            if (this._ui) {
                var view = this._ui.getRootView();
                if (view.render) {
                    view = (0, dom_1.inject)(view);
                }
                // kids = [view];
                kids = view ? [this.scrollView.render(view)] : view || null;
            }
            else {
                // kids = nodes || null;
                kids = nodes ? this.scrollView.render([nodes]) : nodes || null;
            }
        }
        var resizer = this.config.resizable && !this._isLastCell() && this._getNextCell() && !this.config.collapsed
            ? (0, dom_1.el)(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid }), [
                (0, dom_1.el)("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var htmlContent = (0, dom_1.el)(".dhx_layout-cell-content", {
            _key: "".concat(this._uid, "_html"),
            style: stylePadding,
        }, [
            (0, dom_1.el)(".dhx_layout-cell-inner_html", {
                ".innerHTML": this.config.html,
            }),
        ]);
        var cellContent = isFieldset
            ? (0, dom_1.el)("fieldset.dhx_form-fieldset", {
                class: (this.config.$disabled && " dhx_form-fieldset--disabled") || "",
                style: stylePadding,
                disabled: this.config.$disabled,
            }, [
                (0, dom_1.el)("legend.dhx_form-fieldset-legend", {
                    class: "dhx_form-fieldset-legend--".concat(this.config.labelAlignment || "left"),
                }, this.config.label),
                (0, dom_1.el)(".dhx_layout-cell-content", {
                    class: this._getCss(false),
                }, [].concat(kids)),
            ])
            : this.config.full
                ? [
                    (0, dom_1.el)("div", {
                        tabindex: this.config.collapsable ? "0" : "-1",
                        class: "dhx_layout-cell-header" +
                            (this._isXDirection()
                                ? " dhx_layout-cell-header--col"
                                : " dhx_layout-cell-header--row") +
                            (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                            (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                            (((this.getParent() || {}).config || {}).isAccordion
                                ? " dhx_layout-cell-header--accordion"
                                : ""),
                        style: {
                            height: this.config.headerHeight,
                        },
                        onclick: this._handlers.toggle,
                        onkeydown: this._handlers.enterCollapse,
                    }, [
                        this.config.headerIcon &&
                            (0, dom_1.el)("span.dhx_layout-cell-header__icon", {
                                class: this.config.headerIcon,
                            }),
                        this.config.headerImage &&
                            (0, dom_1.el)(".dhx_layout-cell-header__image-wrapper", [
                                (0, dom_1.el)("img", {
                                    src: this.config.headerImage,
                                    class: "dhx_layout-cell-header__image",
                                }),
                            ]),
                        this.config.header && (0, dom_1.el)("h3.dhx_layout-cell-header__title", this.config.header),
                        this.config.collapsable
                            ? (0, dom_1.el)("div.dhx_layout-cell-header__collapse-icon", {
                                class: this._getCollapseIcon(),
                            })
                            : (0, dom_1.el)("div.dhx_layout-cell-header__collapse-icon", {
                                class: "dxi dxi-empty",
                            }),
                    ]),
                    !this.config.collapsed
                        ? (0, dom_1.el)("div", {
                            style: __assign(__assign({}, stylePadding), { height: "calc(100% - ".concat(this.config.headerHeight || 37, "px)") }),
                            class: this._getCss(true) +
                                " dhx_layout-cell-content" +
                                (this.config.type ? typeClass : ""),
                        }, this.config.html
                            ? [
                                (0, dom_1.el)("div", {
                                    ".innerHTML": this.config.html,
                                    class: "dhx_layout-cell dhx_layout-cell-inner_html",
                                }),
                            ]
                            : kids)
                        : null,
                ]
                : this.config.html &&
                    !(this.config.rows &&
                        this.config.cols &&
                        this.config.views)
                    ? [
                        !this.config.collapsed
                            ? this.scrollView && this.scrollView.config.enable
                                ? this.scrollView.render([htmlContent], this._uid)
                                : htmlContent
                            : null,
                    ]
                    : kids;
        var cell = (0, dom_1.el)("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-label"] = this.config.id ? "tab-content-" + this.config.id : null, _a["data-cell-id"] = (_b = this.config.id) !== null && _b !== void 0 ? _b : null, _a["data-dhx-theme"] = (_c = this._theme) !== null && _c !== void 0 ? _c : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type && !this.config.full ? typeClass : ""), style: isFieldset ? style : fullStyle }), cellContent || progressBar ? [].concat(cellContent, progressBar) : null);
        return resizer ? [].concat(cell, resizer) : cell;
    };
    return ProCell;
}(Cell_1.Cell));
exports.ProCell = ProCell;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slider = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var KeyManager_1 = __webpack_require__(21);
var view_1 = __webpack_require__(8);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(74);
var html_1 = __webpack_require__(4);
function normalizeValue(value, min, max) {
    if (value < min) {
        return min;
    }
    if (value > max) {
        return max;
    }
    return value;
}
function parseValue(value, min, max) {
    var values;
    if (value === undefined) {
        values = [];
    }
    else if (Array.isArray(value)) {
        values = value;
    }
    else if (typeof value === "string") {
        values = value.split(",").map(function (v) { return parseInt(v, 10); });
    }
    else {
        values = [value];
    }
    values[0] = values[0] === undefined ? min : normalizeValue(values[0], min, max);
    values[1] = values[1] === undefined ? max : normalizeValue(values[1], min, max);
    return values;
}
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider(container, config) {
        var _this = _super.call(this, container, (0, core_1.extend)({
            mode: "horizontal",
            min: 0,
            max: 100,
            step: 1,
            tooltip: true,
        }, config)) || this;
        _this._disabled = false;
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.thumbLabel !== undefined) {
            _this.config.tooltip = _this.config.thumbLabel; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        _this.events = new events_1.EventSystem(_this);
        _this._axis = _this.config.mode === "horizontal" ? "clientX" : "clientY";
        _this._initStartPosition();
        _this._keyManager = new KeyManager_1.KeyManager(function () {
            var _a, _b;
            var activeEl = document.activeElement;
            var element = (_b = (_a = _this.getRootView().refs) === null || _a === void 0 ? void 0 : _a[_this._isExtraActive ? "extraRunner" : "runner"]) === null || _b === void 0 ? void 0 : _b.el;
            return activeEl === element;
        });
        _this._initHotkeys();
        var vNode = (0, dom_1.create)({
            render: function () { return _this._draw(); },
            hooks: {
                didMount: function () { return _this._calcSliderPosition(); },
                didRedraw: function () { return _this._calcSliderPosition(); },
            },
        });
        _this._initHandlers();
        _this.mount(container, vNode);
        return _this;
    }
    Slider.prototype.disable = function () {
        this._disabled = true;
        this.paint();
    };
    Slider.prototype.enable = function () {
        this._disabled = false;
        this.paint();
    };
    Slider.prototype.isDisabled = function () {
        return this._disabled;
    };
    Slider.prototype.focus = function (extra) {
        this.getRootView().refs[extra ? "extraRunner" : "runner"].el.focus();
    };
    Slider.prototype.blur = function () {
        this.getRootView().refs[this._isExtraActive ? "extraRunner" : "runner"].el.blur();
    };
    Slider.prototype.getValue = function () {
        var res;
        if (this.config.range) {
            var a = this._getValue(this._currentPosition);
            var b = this._getValue(this._extraCurrentPosition);
            res = a < b ? [a, b] : [b, a];
        }
        else {
            res = [this._getValue(this._currentPosition)];
        }
        return res;
    };
    Slider.prototype.setValue = function (value) {
        var old = this._getValue(this._currentPosition);
        if (Array.isArray(value) && value.length > 1) {
            var oldExtra = this._getValue(this._extraCurrentPosition);
            if (this.events.fire(types_1.SliderEvents.beforeChange, [value[0], old, false])) {
                this._setValue(value[0], false);
                this.events.fire(types_1.SliderEvents.change, [value[0], old, false]);
            }
            if (this.events.fire(types_1.SliderEvents.beforeChange, [value[1], oldExtra, true])) {
                this._setValue(value[1], true);
                this.events.fire(types_1.SliderEvents.change, [value[1], oldExtra, true]);
            }
        }
        else {
            value = parseFloat(value);
            if (!isNaN(value)) {
                if (this.events.fire(types_1.SliderEvents.beforeChange, [value, old, false])) {
                    this._setValue(value);
                    this.events.fire(types_1.SliderEvents.change, [value, old, false]);
                }
            }
            else {
                throw new Error("Wrong value type, for more info check documentation https://docs.dhtmlx.com/suite/slider__api__slider_setvalue_method.html");
            }
        }
        this.paint();
    };
    Slider.prototype.destructor = function () {
        this._keyManager && this._keyManager.destructor();
        document.body.contains(this._tooltip) && document.body.removeChild(this._tooltip);
        this._tooltip = null;
        this.unmount();
    };
    Slider.prototype._calcSliderPosition = function () {
        var root = this.getRootView();
        if (!root) {
            return;
        }
        var tracker = root.refs.track.el;
        var rect = tracker.getBoundingClientRect();
        this._offsets = {
            left: rect.left + window.pageXOffset,
            top: rect.top + window.pageYOffset,
        };
        this._length = this.config.mode === "horizontal" ? rect.width : rect.height;
    };
    Slider.prototype._initHotkeys = function () {
        var _this = this;
        var handlers = {
            arrowLeft: function (e) {
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowRight: function (e) {
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowUp: function (e) {
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowDown: function (e) {
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    Slider.prototype._move = function (value, forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        if (this.config.inverse) {
            value = -value;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var oldValue = forExtra
            ? this._getValue(this._extraCurrentPosition)
            : this._getValue(this._currentPosition);
        var newValue = oldValue + value;
        if (newValue > max || newValue < min) {
            newValue = oldValue;
        }
        if (!this.events.fire(types_1.SliderEvents.beforeChange, [newValue, oldValue, forExtra]))
            return;
        this._setValue(oldValue + value, forExtra);
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, forExtra]);
        this.paint();
    };
    Slider.prototype._initStartPosition = function () {
        var _a = this.config, max = _a.max, min = _a.min, range = _a.range;
        var _b = parseValue(this.config.value, this.config.min, this.config.max), value = _b[0], extraValue = _b[1];
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((max - extraValue) / (max - min)) * 100;
        }
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((extraValue - min) / (max - min)) * 100;
        }
        if (this._isInverse()) {
            this._currentPosition = 100 - this._currentPosition;
            if (range) {
                this._extraCurrentPosition = 100 - this._extraCurrentPosition;
            }
        }
    };
    Slider.prototype._getValue = function (value) {
        if (this._isInverse()) {
            value = 100 - value;
        }
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (value === 100) {
            return max;
        }
        if (value === 0) {
            return min;
        }
        var val = (value * (max - min)) / 100;
        var remain = val % step;
        var rounder = remain >= step / 2 ? step : 0;
        var result = Number(min) + Number(val) - remain + rounder;
        return +result.toFixed(5);
    };
    Slider.prototype._setValue = function (val, forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        var _a = this.config, max = _a.max, min = _a.min;
        if (val > max || val < min) {
            return false;
        }
        var rawValue = ((val - min) / (max - min)) * 100;
        var newValue = this._isInverse() ? 100 - rawValue : rawValue;
        if (forExtra) {
            this._extraCurrentPosition = newValue;
        }
        else {
            this._currentPosition = newValue;
        }
    };
    Slider.prototype._initHandlers = function () {
        var _this = this;
        var sliderMove = function (e) {
            e.cancelable && e.preventDefault();
            var currentPosition = e.targetTouches ? e.targetTouches[0][_this._axis] : e[_this._axis];
            var x = ((currentPosition - _this._getBegining()) / _this._length) * 100;
            if (_this._findNewDirection) {
                if (Math.abs(_this._currentPosition - x) < 1) {
                    return;
                }
                if (x > _this._currentPosition) {
                    _this._possibleRange = [_this._currentPosition, 100];
                }
                else {
                    _this._possibleRange = [0, _this._currentPosition];
                }
                _this._findNewDirection = null;
            }
            if (_this._inSide(x)) {
                _this._updatePosition(x, _this._isExtraActive);
            }
            _this.paint();
        };
        var sliderEnd = function (e) {
            _this.events.fire(types_1.SliderEvents.mouseup, [e]);
            setTimeout(function () {
                _this._isMouseMoving = false;
                _this.paint();
            }, 4);
            if (!e.targetTouches) {
                document.removeEventListener("mouseup", sliderEnd);
                document.removeEventListener("mousemove", sliderMove);
            }
            else {
                document.removeEventListener("touchend", sliderEnd);
                document.removeEventListener("touchmove", sliderMove);
            }
        };
        var sliderStart = function (e) {
            if (_this._disabled || e.which === 3) {
                return;
            }
            _this.events.fire(types_1.SliderEvents.mousedown, [e]);
            _this._isMouseMoving = true;
            var active;
            if (e.target.classList.contains("dhx_slider__thumb--extra")) {
                _this._isExtraActive = true;
                active = _this._extraCurrentPosition;
            }
            else {
                _this._isExtraActive = false;
                active = _this._currentPosition;
            }
            _this._findNewDirection = null;
            // define possible range
            if (_this.config.range) {
                var _a = _this._currentPosition > _this._extraCurrentPosition
                    ? [_this._currentPosition, _this._extraCurrentPosition]
                    : [_this._extraCurrentPosition, _this._currentPosition], more = _a[0], less = _a[1];
                if (_this._currentPosition === _this._extraCurrentPosition) {
                    _this._findNewDirection = active;
                    _this._possibleRange = [0, 100];
                }
                else if (active < more) {
                    _this._possibleRange = [0, more];
                }
                else {
                    _this._possibleRange = [less, 100];
                }
            }
            else {
                _this._possibleRange = [0, 100];
            }
        };
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target, {
                    theme: e.target,
                });
            },
            onmousedown: function (e) {
                sliderStart(e);
                document.addEventListener("mousemove", sliderMove);
                document.addEventListener("mouseup", sliderEnd);
            },
            ontouchstart: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                sliderStart(e);
                document.addEventListener("touchmove", sliderMove, { passive: false });
                document.addEventListener("touchend", sliderEnd);
                _this.paint();
            },
            ontouchend: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                _this.paint();
            },
            onlabelClick: function () {
                var refs = _this.getRootView().refs;
                refs.runner.el.focus();
            },
            onclick: function (e) {
                if (_this._disabled || _this._isMouseMoving || e.which === 3) {
                    return;
                }
                var x = ((e[_this._axis] - _this._getBegining()) / _this._length) * 100;
                var refs = _this.getRootView().refs;
                if (_this.config.range) {
                    var dist = Math.abs(_this._currentPosition - x);
                    var extraDist = Math.abs(_this._extraCurrentPosition - x);
                    if (dist < extraDist) {
                        _this._updatePosition(x, false);
                        refs.runner.el.focus();
                    }
                    else {
                        _this._updatePosition(x, true);
                        refs.extraRunner.el.focus();
                    }
                }
                else {
                    _this._updatePosition(x, false);
                    refs.runner.el.focus();
                }
                _this.paint();
            },
            onmouseover: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = true;
                _this.paint();
            },
            onmouseout: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                _this.paint();
            },
            onfocus: function (e) {
                _this._setTooltip(e);
                _this._focusIn = true;
                _this.events.fire(types_1.SliderEvents.focus, []);
                _this.paint();
            },
            onblur: function (e) {
                _this._setTooltip(e);
                _this._focusIn = false;
                _this.events.fire(types_1.SliderEvents.blur, []);
                _this.paint();
            },
            onkeydown: function (e) {
                _this.events.fire(types_1.SliderEvents.keydown, [e]);
            },
        };
    };
    Slider.prototype._getBegining = function () {
        return this.config.mode === "horizontal"
            ? this._offsets.left - window.pageXOffset
            : this._offsets.top - window.pageYOffset;
    };
    Slider.prototype._inSide = function (x) {
        var range = this._possibleRange;
        if (x < range[0]) {
            this._updatePosition(range[0], this._isExtraActive);
            return false;
        }
        if (x > range[1]) {
            this._updatePosition(range[1], this._isExtraActive);
            return false;
        }
        return true;
    };
    Slider.prototype._updatePosition = function (x, extra) {
        if (extra === void 0) { extra = false; }
        if (x > 100) {
            x = 100;
        }
        if (x < 0) {
            x = 0;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var position = extra ? this._extraCurrentPosition : this._currentPosition;
        var oldValue = this._getValue(position);
        var newValue = this._getValue(x);
        if (oldValue === newValue ||
            !this.events.fire(types_1.SliderEvents.beforeChange, [newValue, oldValue, extra])) {
            return;
        }
        var rawValue = ((newValue - min) / (max - min)) * 100;
        var value = this._isInverse() ? 100 - rawValue : rawValue;
        if (extra) {
            this._extraCurrentPosition = value;
        }
        else {
            this._currentPosition = value;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, extra]);
    };
    Slider.prototype._getRunnerStyle = function (forExtra) {
        var _a;
        if (forExtra === void 0) { forExtra = false; }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var pos = forExtra ? this._extraCurrentPosition : this._currentPosition;
        return _a = {},
            _a[direction] = pos + "%",
            _a;
    };
    Slider.prototype._isInverse = function () {
        return ((this.config.inverse && this.config.mode === "horizontal") ||
            (!this.config.inverse && this.config.mode === "vertical"));
    };
    Slider.prototype._getRunnerCss = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        return ("dhx_slider__thumb" +
            (forExtra ? " dhx_slider__thumb--extra" : "") +
            (this._isMouseMoving && ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive))
                ? " dhx_slider__thumb--active"
                : "") +
            (this._disabled ? " dhx_slider__thumb--disabled" : "") +
            (this._isNullable(forExtra ? this._extraCurrentPosition : this._currentPosition) &&
                !this.config.range
                ? " dhx_slider__thumb--nullable"
                : ""));
    };
    Slider.prototype._draw = function () {
        var _a = this.config, labelPosition = _a.labelPosition, mode = _a.mode, hiddenLabel = _a.hiddenLabel, tick = _a.tick, majorTick = _a.majorTick, css = _a.css, helpMessage = _a.helpMessage;
        var labelStyle = (0, html_1.getLabelStyle)(__assign(__assign({}, this.config), { required: false }));
        if (this._tooltip && (!this._mouseIn || !this._focusIn || !this._isMouseMoving)) {
            document.body.contains(this._tooltip) && document.body.removeChild(this._tooltip);
        }
        return (0, dom_1.el)("div", {
            class: "dhx_slider" +
                " dhx_slider--mode_" +
                mode +
                (labelPosition === "left" ? " dhx_slider--label-inline" : "") +
                (hiddenLabel ? " dhx_slider--label_sr" : "") +
                (tick ? " dhx_slider--ticks" : "") +
                (majorTick ? " dhx_slider--major-ticks" : "") +
                (css ? " " + css : "") +
                (this._disabled ? " dhx_slider--disabled" : ""),
            style: {
                paddingBottom: this.config.tick ? "16px" : null,
            },
        }, [
            labelStyle
                ? (0, dom_1.el)("label.dhx_label.dhx_slider__label", {
                    style: labelStyle.style,
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.onlabelClick,
                }, helpMessage
                    ? [
                        labelStyle.label && (0, dom_1.el)("span.dhx_label__holder", labelStyle.label),
                        (0, dom_1.el)("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                        }),
                    ]
                    : labelStyle.label)
                : null,
            this._drawSlider(),
        ]);
    };
    Slider.prototype._drawSlider = function () {
        return (0, dom_1.el)(".dhx_widget.dhx_slider__track-holder", {
            "data-dhx-widget-id": this._uid,
        }, [
            (0, dom_1.el)(".dhx_slider__track", {
                _ref: "track",
                onmouseover: this._handlers.onmouseover,
                onmouseout: this._handlers.onmouseout,
                onclick: this._handlers.onclick,
            }, [
                this._getDetector(),
                (0, dom_1.el)("div", {
                    _ref: "runner",
                    class: this._getRunnerCss(),
                    ontouchstart: this._handlers.ontouchstart,
                    ontouchend: this._handlers.ontouchend,
                    onmousedown: this._handlers.onmousedown,
                    onfocus: this._handlers.onfocus,
                    onblur: this._handlers.onblur,
                    onkeydown: this._handlers.onkeydown,
                    style: this._getRunnerStyle(),
                    tabindex: 0,
                }),
                this.config.tooltip && (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip()
                    : null,
                this.config.tooltip &&
                    this.config.range &&
                    (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip(true)
                    : null,
                this.config.range
                    ? (0, dom_1.el)("div", {
                        _ref: "extraRunner",
                        class: this._getRunnerCss(true),
                        ontouchstart: this._handlers.ontouchstart,
                        ontouchend: this._handlers.ontouchend,
                        onmousedown: this._handlers.onmousedown,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        style: this._getRunnerStyle(true),
                        tabindex: 0,
                    })
                    : null,
            ]),
            this.config.tick ? this._drawTicks() : null,
        ]);
    };
    Slider.prototype._getDetector = function () {
        var _a, _b, _c;
        if (this._disabled) {
            return (0, dom_1.el)(".dhx_slider__range");
        }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var size = this.config.mode === "horizontal" ? "width" : "height";
        if (this.config.range) {
            var _d = this._currentPosition > this._extraCurrentPosition
                ? [this._currentPosition, this._extraCurrentPosition]
                : [this._extraCurrentPosition, this._currentPosition], more = _d[0], less = _d[1];
            return (0, dom_1.el)(".dhx_slider__range", {
                style: (_a = {},
                    _a[direction] = less + "%",
                    _a[size] = more - less + "%",
                    _a),
            });
        }
        if (this._isInverse()) {
            return (0, dom_1.el)(".dhx_slider__range", {
                style: (_b = {},
                    _b[direction] = this._currentPosition + "%",
                    _b[size] = 100 - this._currentPosition + "%",
                    _b),
            });
        }
        return (0, dom_1.el)(".dhx_slider__range", {
            style: (_c = {},
                _c[direction] = 0,
                _c[size] = this._currentPosition + "%",
                _c),
        });
    };
    Slider.prototype._drawTooltip = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        if (this._activeTooltip === "none" || !this.getRootView())
            return;
        var pos = this._activeTooltip === "extraTooltip" ? this._extraCurrentPosition : this._currentPosition;
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var classNameModifiers = "";
        if ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive)) {
            classNameModifiers += " dhx_slider__thumb-label--active";
        }
        if (!this._tooltip) {
            this._tooltip = document.createElement("div");
        }
        var coords = this._activeTooltip === "tooltip"
            ? this.getRootView().refs.runner.el.getBoundingClientRect()
            : this.getRootView().refs.extraRunner.el.getBoundingClientRect();
        this._tooltip.className = "dhx_slider__thumb-label" + classNameModifiers;
        this._tooltip.style.left = coords.x + (direction === "left" ? 6 : -30) + window.pageXOffset + "px";
        this._tooltip.style.top = coords.y + (direction === "left" ? -30 : 6) + window.pageYOffset + "px";
        this._tooltip.innerText = this._getValue(pos).toString();
        document.body.appendChild(this._tooltip);
    };
    Slider.prototype._getTicks = function () {
        var _a = this.config, max = _a.max, min = _a.min, step = _a.step, tick = _a.tick, majorTick = _a.majorTick;
        var len = max - min;
        var tickLength = (step * tick) / len;
        var positions = [];
        var length = 0;
        var index = 0;
        while (length < 1) {
            var tickValue = +(Number(min) + length * len).toFixed(5);
            var isMultiple = index % majorTick === 0;
            positions.push({
                position: (this._isInverse() ? (1 - length) * 100 : length * 100) + "%",
                isMultiple: isMultiple,
                label: isMultiple && typeof this.config.tickTemplate === "function"
                    ? this.config.tickTemplate(tickValue)
                    : null,
            });
            length += tickLength;
            index++;
        }
        positions.push({
            position: (this._isInverse() ? 0 : 100) + "%",
            isMultiple: true,
            label: typeof this.config.tickTemplate === "function" ? this.config.tickTemplate(max) : null,
        });
        return positions;
    };
    Slider.prototype._drawTicks = function () {
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        return (0, dom_1.el)(".dhx_slider__ticks-holder", this._getTicks().map(function (tick) {
            var _a;
            return (0, dom_1.el)("div", {
                class: "dhx_slider__tick" + (tick.isMultiple ? " dhx_slider__tick--major" : ""),
                style: (_a = {},
                    _a[direction] = tick.position,
                    _a),
            }, tick.label !== undefined ? [(0, dom_1.el)(".dhx_slider__tick-label", tick.label)] : null);
        }));
    };
    Slider.prototype._isNullable = function (value) {
        if (this._isInverse()) {
            return value === 100;
        }
        else {
            return value === 0;
        }
    };
    Slider.prototype._setTooltip = function (e) {
        if (e.target.classList.contains("dhx_slider__thumb--extra")) {
            this._activeTooltip = "extraTooltip";
        }
        else if (e.target.classList.contains("dhx_slider__thumb")) {
            this._activeTooltip = "tooltip";
        }
        else {
            this._activeTooltip = "none";
        }
    };
    return Slider;
}(view_1.View));
exports.Slider = Slider;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popup = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var html_1 = __webpack_require__(4);
var view_1 = __webpack_require__(8);
var types_1 = __webpack_require__(73);
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, (0, core_1.extend)({}, config)) || this;
        var popup = (_this._popup = document.createElement("div"));
        popup.className = "dhx_widget dhx_popup" + (_this.config.css ? " " + _this.config.css : "");
        popup.style.position = "absolute";
        popup.setAttribute("role", "dialog");
        popup.setAttribute("aria-modal", "true");
        popup.setAttribute("aria-live", "polite");
        _this.config.theme && _this._setTheme(_this.config.theme);
        _this.mount(popup, (0, dom_1.create)({
            render: function () { return _this.toVDOM(); },
        }));
        _this._clickEvent = function (e) { return _this.events.fire(types_1.PopupEvents.click, [e]); };
        _this.events = config.events || new events_1.EventSystem(_this);
        _this._isActive = false;
        return _this;
    }
    Popup.prototype.show = function (node, config, attached) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!this.events.fire(types_1.PopupEvents.beforeShow, [node])) {
            return;
        }
        node = (0, html_1.toNode)(node);
        if (this._isActive) {
            this._setPopupSize(node, config);
            return;
        }
        if (attached) {
            this.attach(attached);
        }
        config.theme && this._setTheme(config.theme);
        this._popup.style.left = "0";
        this._popup.style.top = "0";
        (0, dom_1.awaitRedraw)()
            .then(function () {
            _this._setPopupSize(node, config);
            _this._popup.style.position = "fixed";
            document.body.appendChild(_this._popup);
            _this._isActive = true;
        })
            .then(function () {
            _this._popup.style.position = "absolute";
            _this.events.fire(types_1.PopupEvents.afterShow, [node]);
            _this._outerClickDestructor = _this._detectOuterClick(node);
        });
    };
    Popup.prototype.hide = function () {
        this._hide(false, null);
    };
    Popup.prototype.isVisible = function () {
        return this._isActive;
    };
    Popup.prototype.attach = function (name, config) {
        this._html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Popup.prototype.attachHTML = function (html) {
        this._html = html;
        this.paint();
    };
    Popup.prototype.getWidget = function () {
        return this._ui;
    };
    Popup.prototype.getContainer = function () {
        return this.getRootView().refs.content.el;
    };
    Popup.prototype.toVDOM = function () {
        var view;
        if (this._html) {
            view = (0, dom_1.el)(".dhx_popup__inner-html-content", {
                ".innerHTML": this._html,
            });
        }
        else {
            view = this._ui ? this._ui.getRootView() : null;
            if (view && view.render) {
                view = (0, dom_1.inject)(view);
            }
        }
        return (0, dom_1.el)("div", {
            class: "dhx_popup-content",
            tabindex: 0,
            onclick: this._clickEvent,
            _key: this._uid,
            _ref: "content",
        }, [view]);
    };
    Popup.prototype.destructor = function () {
        this.hide();
        if (this._outerClickDestructor) {
            this._outerClickDestructor();
        }
        this._popup = null;
    };
    Popup.prototype._setTheme = function (node) {
        var _a;
        if (typeof node === "string") {
            this._popup.setAttribute("data-dhx-theme", node);
        }
        else {
            var theme = (_a = node === null || node === void 0 ? void 0 : node.closest("[data-dhx-theme]")) === null || _a === void 0 ? void 0 : _a.getAttribute("data-dhx-theme");
            theme && this._popup.setAttribute("data-dhx-theme", theme);
        }
    };
    Popup.prototype._setPopupSize = function (node, config, calls) {
        var _this = this;
        if (calls === void 0) { calls = 3; }
        var _a = this._popup.getBoundingClientRect(), width = _a.width, height = _a.height;
        // TODO: IE popup height = 0
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
        if (calls && (width === 0 || height === 0)) {
            this._timeout = setTimeout(function () {
                if (!_this._isActive) {
                    return;
                }
                _this._setPopupSize(node, config, calls - 1);
                _this._timeout = null;
            });
            return;
        }
        var _b = (0, html_1.fitPosition)(node, __assign(__assign({ centering: true, mode: "bottom" }, config), { width: width, height: height })), left = _b.left, top = _b.top;
        this._popup.style.left = left;
        this._popup.style.top = top;
        if (config.indent && config.indent !== 0) {
            switch (config.mode) {
                case "top":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "bottom":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "left":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "right":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                default:
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
            }
        }
    };
    Popup.prototype._detectOuterClick = function (node) {
        var _this = this;
        var isDetect = false;
        var storage = new WeakMap();
        var outerClick = function (event) {
            var target = event.target;
            var popups = document.querySelectorAll(".dhx_popup");
            if (isDetect) {
                popups.forEach(function (popup) { return storage.has(popup) || storage.set(popup, _this._popup); });
            }
            else {
                isDetect = Boolean(popups.length);
                isDetect && popups.forEach(function (popup) { return storage.set(popup, true); });
            }
            while (target) {
                if (target === node || target === _this._popup || storage.get(target) === _this._popup) {
                    return;
                }
                target = target.parentNode;
            }
            if (_this._hide(true, event)) {
                document.removeEventListener("mousedown", outerClick);
            }
        };
        document.addEventListener("mousedown", outerClick);
        return function () { return document.removeEventListener("mousedown", outerClick); };
    };
    Popup.prototype._hide = function (fromOuterClick, e) {
        if (this._isActive) {
            if (!this.events.fire(types_1.PopupEvents.beforeHide, [fromOuterClick, e])) {
                return false;
            }
            document.body.removeChild(this._popup);
            this._isActive = false;
            if (this._outerClickDestructor) {
                this._outerClickDestructor();
                this._outerClickDestructor = null;
            }
            this.events.fire(types_1.PopupEvents.afterHide, [e]);
            return true;
        }
    };
    return Popup;
}(view_1.View));
exports.Popup = Popup;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    hours: "Hours",
    minutes: "Minutes",
    save: "Save",
};
exports.default = locale;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isTimeCheck = void 0;
/**
 * This function is designed to resolve conflicts with the time setting for the 12 hour format.
 */
function isTimeCheck(value) {
    return /(^12:[0-5][0-9]?AM$)/i.test(value);
}
exports.isTimeCheck = isTimeCheck;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.linkButtonClasses = void 0;
exports.linkButtonClasses = ".dhx_button.dhx_button--view_link.dhx_button--icon.dhx_button--size_medium.dhx_button--color_secondary";


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxEditor = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var CheckboxEditor = /** @class */ (function () {
    function CheckboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    CheckboxEditor.prototype.endEdit = function () {
        var value = this._checked;
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.checked = !value;
        }
    };
    CheckboxEditor.prototype.toHTML = function () {
        if (this._checked === undefined) {
            this._checked = this._cell.row[this._cell.col.id];
        }
        var id = (0, core_1.uid)();
        return (0, dom_1.el)("div.dhx_checkbox.dhx_cell-editor__checkbox", [
            (0, dom_1.el)("label", {
                style: {
                    display: "none",
                },
                for: id,
            }, this._checked || "false"),
            (0, dom_1.el)("input.dhx_checkbox__input", {
                type: "checkbox",
                _hooks: {
                    didInsert: this._handlers.didInsert,
                },
                _key: "cell_editor",
                "data-dhx-id": "cell_editor",
                "data-dhx-checked": (!!this._checked).toString(),
                checked: this._checked,
                id: id,
                style: {
                    userSelect: "none",
                },
            }),
            (0, dom_1.el)("span.dhx_checkbox__visual-input"),
        ]);
    };
    CheckboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onClick: function () {
                var value = !_this._input.checked;
                if (_this._config.events.fire(types_1.GridEvents.beforeEditStart, [
                    _this._cell.row,
                    _this._cell.col,
                    "checkbox",
                ])) {
                    _this._checked = value;
                    _this._config.events.fire(types_1.GridEvents.afterEditStart, [
                        _this._cell.row,
                        _this._cell.col,
                        "checkbox",
                    ]);
                    _this.endEdit();
                }
                else {
                    _this._input.checked = !value;
                }
            },
            didInsert: function (node) {
                _this._checkbox = node.el.parentNode.lastChild;
                _this._input = node.el.parentNode.querySelector("input");
                node.el.parentNode.addEventListener("click", _this._handlers.onClick);
            },
        };
    };
    return CheckboxEditor;
}());
exports.CheckboxEditor = CheckboxEditor;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComboboxEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var ts_combobox_1 = __webpack_require__(56);
var FocusManager_1 = __webpack_require__(19);
var data_1 = __webpack_require__(22);
var ComboboxEditor = /** @class */ (function () {
    function ComboboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    ComboboxEditor.prototype.endEdit = function (withoutSave) {
        var _this = this;
        if (!this._config.$editable)
            return;
        var value;
        if (!withoutSave) {
            var val = this._input.getValue();
            value = this._cell.col.editorType === "multiselect" ? val.split(",").join(", ") : val;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            var options_1 = (0, data_1.getEditorOptions)(this._cell.col, this._cell.row);
            this._input.popup.hide();
            document.removeEventListener("mousedown", this._handlers.onOuterClick);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            FocusManager_1.focusManager.setFocusId(this._config.gridId);
            value === null || value === void 0 ? void 0 : value.toString().split(", ").forEach(function (val) {
                var item = options_1.find(function (option) {
                    return typeof option === "string" ? option === val : option.id.toString() === val;
                });
                if (val && !item) {
                    if (!_this._cell.col.$customOptions)
                        _this._cell.col.$customOptions = [];
                    _this._cell.col.$customOptions.push(_this._input.data.getItem(val));
                }
            });
            this._config.$editable = null;
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    ComboboxEditor.prototype.toHTML = function () {
        var _this = this;
        var options = (0, data_1.getEditorOptions)(this._cell.col, this._cell.row);
        var content = options.map(function (item) {
            return typeof item === "string" ? { id: "".concat(item), value: item } : item;
        }) || [];
        if (!this._input) {
            this._input = new ts_combobox_1.Combobox(null, __assign({ itemHeight: 37, css: "dhx_cell-editor__combobox", multiselection: this._cell.col.editorType === "multiselect", htmlEnable: this._cell.col.htmlEnable }, this._cell.col.editorConfig));
            this._input.data.parse(content);
            var comboValue = this._cell.row[this._cell.col.id];
            var value = this._cell.col.editorType === "multiselect"
                ? ((comboValue === null || comboValue === void 0 ? void 0 : comboValue.toString()) || "").split(", ")
                : comboValue;
            this._input.setValue(value);
            this._input.events.on("keydown", this._handlers.onkeydown);
            this._input.data.events.on("beforeAdd", function (item) {
                if (item.id !== item.value) {
                    _this._input.addOption({
                        id: item.value,
                        value: item.value,
                    }, true);
                    return false;
                }
            });
        }
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        this._config.$editable.editor = this;
        (0, dom_1.awaitRedraw)().then(function () {
            var holderNode = _this._input.getRootView().refs.holder.el;
            _this._input.popup.getContainer().style.width = holderNode.offsetWidth + "px";
            _this._input.popup.show(holderNode);
        });
        FocusManager_1.focusManager.setFocusId(this._input._uid);
        return (0, dom_1.inject)(this._input.getRootView());
    };
    ComboboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input &&
                        _this._input.getRootNode() &&
                        _this._input.getRootNode().contains(e.target);
                    var isPopup = _this._input.popup &&
                        _this._input.popup.getRootNode() &&
                        _this._input.popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this.endEdit();
                    }
                }
            },
            onkeydown: function (e) {
                if (e.key === "Escape" || e.key === "Tab") {
                    _this.endEdit();
                }
            },
        };
    };
    return ComboboxEditor;
}());
exports.ComboboxEditor = ComboboxEditor;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CODES = void 0;
exports.KEY_CODES = {
    BACKSPACE: 8,
    ENTER: 13,
    ESC: 27,
    DOWN_ARROW: 40,
    UP_ARROW: 38,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getEditor = void 0;
var InputEditor_1 = __webpack_require__(143);
function getEditor(item, list) {
    return new InputEditor_1.InputEditor(item, list);
}
exports.getEditor = getEditor;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InputEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(57);
var InputEditor = /** @class */ (function () {
    function InputEditor(item, list) {
        var _this = this;
        this._list = list;
        this._config = list.config;
        this._item = item;
        this._list.events.on(types_1.ListEvents.focusChange, function (index, id) {
            if (_this._mode && id !== _this._item.id) {
                _this.endEdit();
            }
        });
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function () {
        if (this._input) {
            var value = this._input.value;
            if (this._list.events.fire(types_1.ListEvents.beforeEditEnd, [value, this._item.id])) {
                this._input.removeEventListener("blur", this._handlers.onBlur);
                this._input.removeEventListener("change", this._handlers.onChange);
                this._input.removeEventListener("keydown", this._handlers.onKeyDown);
                this._handlers = {};
                this._mode = false;
                this._list.events.fire(types_1.ListEvents.afterEditEnd, [value, this._item.id]);
            }
            else {
                this._input.focus();
            }
        }
    };
    InputEditor.prototype.toHTML = function () {
        this._mode = true;
        var itemHeight = this._config.itemHeight;
        return (0, dom_1.el)(".dhx_input__wrapper", { role: "presentation" }, [
            (0, dom_1.el)("div.dhx_input__container", { role: "presentation" }, [
                (0, dom_1.el)("input.dhx_input", {
                    class: this._item.css ? " " + this._item.css : "",
                    style: {
                        height: itemHeight,
                        width: "100%",
                        padding: "8px 12px",
                    },
                    _hooks: {
                        didInsert: this._handlers.didInsert,
                    },
                    _key: this._item.id,
                    "data-dhx-id": this._item.id,
                }),
            ]),
        ]);
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            onKeyDown: function (e) {
                if (e.key === "Enter" && _this._item.value === _this._input.value)
                    _this.endEdit();
                if (e.key === "Escape") {
                    _this._input.value = _this._item.value;
                    _this.endEdit();
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.value = _this._item.value;
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
                input.addEventListener("keydown", _this._handlers.onKeyDown);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProList = void 0;
var dom_1 = __webpack_require__(1);
var ScrollView_1 = __webpack_require__(35);
var List_1 = __webpack_require__(78);
var ProList = /** @class */ (function (_super) {
    __extends(ProList, _super);
    function ProList(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        _this.paint();
        return _this;
    }
    ProList.prototype.destructor = function () {
        _super.prototype.destructor.call(this);
        this.scrollView = null;
    };
    ProList.prototype.scrollTo = function (id) {
        var _a, _b;
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var listEl = ((_a = this.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable)
            ? (_b = this.getRootNode()) === null || _b === void 0 ? void 0 : _b.querySelector(".scroll-view")
            : this.getRootNode();
        this._scrollTo(id, listEl);
    };
    ProList.prototype._renderList = function () {
        var _this = this;
        var range = this._getRange();
        // mapRange
        var data = this.data.getRawData(range[0], range[1]);
        var kids = data.map(function (obj, index) { return _this._renderItem(obj, index); });
        if (this.config.virtual) {
            kids = __spreadArray(__spreadArray([
                (0, dom_1.el)(".div", { style: { height: range[2] + "px" } })
            ], kids, true), [
                (0, dom_1.el)(".div", { style: { height: range[3] + "px" } }),
            ], false);
        }
        var scrollViewEnable = this.scrollView && this.scrollView.config.enable;
        var currentClass = (this.config.css ? this.config.css : "") +
            (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : "") +
            (scrollViewEnable ? " dhx_list--scroll-view" : "");
        return (0, dom_1.el)("ul.dhx_widget.dhx_list", __assign(__assign({ style: {
                "max-height": this.config.height,
                position: "relative",
            }, id: this._uid, class: currentClass, "data-dhx-widget-id": this._uid }, this._handlers), this._getListAriaAttrs(this.config, this.data.getLength())), scrollViewEnable ? [].concat(this.scrollView.render(kids)) : kids);
    };
    return ProList;
}(List_1.List));
exports.ProList = ProList;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyListener = void 0;
var CLEAR_TIMEOUT = 2000;
var KeyListener = /** @class */ (function () {
    function KeyListener() {
        var _this = this;
        this._handler = function (event) {
            if (!_this._isActive) {
                return;
            }
            var key = event.key;
            if (key === "Backspace" && _this._sequence.length > 0) {
                _this._sequence = _this._sequence.slice(0, _this._sequence.length - 1);
                _this._change();
            }
            if (key.length < 2) {
                // handle only single key value
                _this._sequence += key;
                _this._change();
            }
        };
        this._sequence = "";
        document.addEventListener("keydown", this._handler);
    }
    KeyListener.prototype.startNewListen = function (action) {
        this._isActive = true;
        this._sequence = "";
        this._currentAction = action;
    };
    KeyListener.prototype.endListen = function () {
        this._currentAction = null;
        this.reset();
        this._isActive = false;
    };
    KeyListener.prototype.reset = function () {
        this._sequence = "";
    };
    KeyListener.prototype.destructor = function () {
        document.removeEventListener("keydown", this._handler);
    };
    KeyListener.prototype._change = function () {
        this._currentAction(this._sequence);
        this._addClearTimeout();
    };
    KeyListener.prototype._addClearTimeout = function () {
        var _this = this;
        if (this._clearTimeout) {
            clearTimeout(this._clearTimeout);
        }
        this._clearTimeout = setTimeout(function () {
            _this.reset();
            _this._clearTimeout = null;
        }, CLEAR_TIMEOUT);
    };
    return KeyListener;
}());
exports.KeyListener = KeyListener;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProCombobox = void 0;
var Combobox_1 = __webpack_require__(77);
var ts_list_1 = __webpack_require__(32);
var ts_layout_1 = __webpack_require__(16);
var helper_1 = __webpack_require__(81);
var ProCombobox = /** @class */ (function (_super) {
    __extends(ProCombobox, _super);
    function ProCombobox(element, config) {
        return _super.call(this, element, config) || this;
    }
    ProCombobox.prototype._createLayout = function () {
        var list = (this.list = new ts_list_1.ProList(null, {
            $template: Combobox_1.$template,
            template: this.config.template,
            htmlEnable: this.config.htmlEnable,
            virtual: this.config.virtual,
            keyNavigation: true,
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
            eventHandlers: this.config.eventHandlers,
        }));
        var layout = (this._layout = new ts_layout_1.ProLayout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                    ".dhx_combobox-options__action-create-option": this._handlers.addOption,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    return ProCombobox;
}(Combobox_1.Combobox));
exports.ProCombobox = ProCombobox;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextAreaEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(9);
var core_1 = __webpack_require__(0);
var data_1 = __webpack_require__(22);
var TextAreaEditor = /** @class */ (function () {
    function TextAreaEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this.type = this._cell.col.type;
        this._width = this._cell.col.$width;
        var widthOffset = 0;
        if (this._config.firstColId === this._cell.col.id && this._cell.row.hasOwnProperty("$level")) {
            widthOffset = (0, data_1.getTreeCellWidthOffset)(this._cell.row);
        }
        this._width -= widthOffset - 4;
        this._initHandlers();
    }
    TextAreaEditor.prototype.endEdit = function (withoutSave) {
        if (!this._config.$editable)
            return;
        var value;
        if (!withoutSave) {
            value = this._editor.value;
            if (this.type === "number") {
                value = parseFloat(value);
                if (Number.isNaN(value))
                    value = "";
            }
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.$editable = null;
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._editor.focus();
        }
    };
    TextAreaEditor.prototype.toHTML = function (value) {
        if ((0, core_1.isDefined)(value)) {
            this.type = "string";
        }
        value = value !== null && value !== void 0 ? value : this._cell.row[this._cell.col.id];
        if (this._editor) {
            value = this._editor.value;
        }
        this._config.$editable.editor = this;
        var css = typeof this._cell.row.height === "undefined" && !this._cell.col.htmlEnable
            ? "dhx_cell-editor dhx_cell-editor__textarea"
            : "dhx_cell-editor dhx_cell-editor__textarea_constant-height";
        return (0, dom_1.el)("textarea", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _ref: "textarea",
            _key: "cell_editor",
            "data-dhx-id": "cell_editor",
            value: value,
            onblur: this._handlers.onBlur,
            oninput: this._handlers.onInput,
            class: css,
            style: {
                width: this._width,
            },
        });
    };
    TextAreaEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onInput: function (event) {
                var _a;
                if (typeof _this._cell.row.height !== "undefined" || _this._cell.col.htmlEnable)
                    return;
                var currentHeight = _this._getCurrentHeight(_this._editor.value, {
                    width: _this._cell.col.$width - 2,
                    maxHeight: _this._config.rowHeight,
                });
                _this._cell.row[_this._cell.col.id] = _this._editor.value;
                var totalHeight = (0, data_1.getCalculatedRowHeight)((0, data_1.getMaxRowHeight)(_this._cell.row, _this._config.columns));
                var currentRowHeight = (0, data_1.getCalculatedRowHeight)((0, data_1.getMaxRowHeight)((_a = {}, _a[_this._cell.col.id] = _this._cell.row[_this._cell.col.id], _a), _this._config.columns));
                _this._minHeight = totalHeight === currentRowHeight ? _this._config.rowHeight : totalHeight;
                if (currentHeight >= _this._minHeight && currentHeight !== _this._prevHeight) {
                    if (!_this._config.events.fire(types_1.GridEvents.beforeRowResize, [
                        _this._cell.row,
                        event,
                        currentHeight,
                    ])) {
                        return;
                    }
                    _this._config.events.fire(types_1.GridEvents.afterRowResize, [
                        _this._cell.row,
                        event,
                        currentHeight,
                    ]);
                }
                _this._prevHeight = currentHeight;
            },
            didInsert: function (node) {
                _this._editor = node.el;
                _this._editor.focus();
            },
        };
    };
    TextAreaEditor.prototype._getCurrentHeight = function (value, config) {
        config = __assign({ width: 100, maxHeight: 40, lineHeight: 20 }, config);
        var element = document.createElement("textarea");
        element.className = "dhx_cell-editor dhx_cell-editor__textarea";
        element.value = value;
        element.style.width = "".concat(config.width, "px");
        element.style.lineHeight = "".concat(config.lineHeight, "px");
        element.style.maxHeight = "".concat(config.maxHeight, "px");
        element.style.boxSizing = "border-box";
        document.body.appendChild(element);
        var height = this._getElementHeight(element);
        var currentRows = element.value.split("\n").length;
        var calculateRows = Math.round(height / config.lineHeight);
        var calculateHeight = height < config.maxHeight ? config.maxHeight : height;
        document.body.removeChild(element);
        return currentRows === 1 && currentRows === calculateRows ? config.maxHeight : calculateHeight;
    };
    TextAreaEditor.prototype._getElementHeight = function (element) {
        return element.scrollHeight;
    };
    return TextAreaEditor;
}());
exports.TextAreaEditor = TextAreaEditor;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getContent = void 0;
var dom_1 = __webpack_require__(1);
var data_1 = __webpack_require__(22);
var core_1 = __webpack_require__(0);
var ComboFilter_1 = __webpack_require__(149);
var SelectFilter_1 = __webpack_require__(150);
var InputFilter_1 = __webpack_require__(151);
function parseItemValue(column, item) {
    var value = item[column.id];
    if (column.editorType === "combobox") {
        parseFloat((0, data_1.getEditorValue)(value, (0, data_1.getEditorOptions)(column, item)));
    }
    else if (column.editorType === "multiselect") {
        return NaN;
    }
    return parseFloat(value);
}
function applyMathMethod(column, config, method, validate) {
    if (!column || !config || !method) {
        return;
    }
    var columnData = validate
        ? validate(column.id, config.data)
        : config.data.reduce(function (items, item) {
            var val = parseItemValue(column, item);
            if (!isNaN(val))
                items.push(val);
            return items;
        }, []);
    // [todo] move to treegrid
    var roots = columnData;
    if (config.type === "tree") {
        roots = config.data.reduce(function (total, item) {
            var _a;
            if (item.$level === 0) {
                var val = parseItemValue(column, item);
                if (!isNaN(val)) {
                    total.push(val);
                }
                else {
                    var value_1 = 0;
                    (_a = config.datacollection) === null || _a === void 0 ? void 0 : _a.eachChild(item.id, function (cell) {
                        if (!config.datacollection.haveItems(cell.id)) {
                            var val_1 = parseItemValue(column, cell);
                            if (!isNaN(val_1))
                                value_1 += val_1;
                        }
                    });
                    total.push(value_1);
                }
            }
            return total;
        }, []);
    }
    return method(columnData, roots);
}
function getContent() {
    return {
        inputFilter: {
            element: {},
            toHtml: function (column, config) {
                var _this = this;
                var id = (0, core_1.uid)();
                var colId = column.id.toString();
                var filter = this.element[colId];
                if (!filter) {
                    filter = new InputFilter_1.InputFilter(column, config, id, this.value[colId]);
                    filter.events.on("change", function (value) {
                        _this.value[colId] = value;
                    });
                    this.element[colId] = filter;
                }
                else {
                    filter.value = this.value[colId];
                }
                return filter.toHTML();
            },
            match: function (_a) {
                var val = _a.val, match = _a.match, col = _a.col;
                if (!(0, core_1.isDefined)(val))
                    return false;
                var values = [];
                values.push((0, data_1.toFormat)(val, col.type, col.format));
                if (col.format) {
                    var i = col.format.lastIndexOf("#");
                    if (i > 0) {
                        values.push((0, data_1.toFormat)(val, col.type, col.format.slice(i)));
                    }
                }
                var res = "";
                for (var i = 0; i < match.length; i++) {
                    var char = match.charCodeAt(i);
                    if ((char > 32 && char < 48) || char === 63 || (char > 90 && char < 95) || char === 124) {
                        res += "\\" + match[i];
                    }
                    else {
                        res += match[i];
                    }
                }
                return values.some(function (value) { return new RegExp("".concat(res), "i").test(value); });
            },
            value: {},
        },
        selectFilter: {
            element: {},
            toHtml: function (column, config) {
                var _this = this;
                var colId = column.id.toString();
                var filter = this.element[colId];
                if (!filter) {
                    filter = new SelectFilter_1.SelectFilter(column, config, column.$uniqueData, this.value[colId]);
                    filter.events.on("change", function (value) {
                        _this.value[colId] = value;
                    });
                    this.element[colId] = filter;
                }
                else {
                    filter.value = this.value[colId];
                    filter.data = column.$activeFilterData || column.$uniqueData;
                }
                return filter.toHTML();
            },
            match: function (_a) {
                var val = _a.val, match = _a.match, col = _a.col;
                var value = (0, data_1.toFormat)(val, col.type, col.format);
                return match ? (value || typeof value === "boolean") && value.toString() == match : true;
            },
            value: {},
        },
        comboFilter: {
            element: {},
            toHtml: function (column, config) {
                var _this = this;
                var colId = column.id.toString();
                var filter = this.element[colId];
                if (!filter) {
                    var conf = column.header.filter(function (item) { return item.filterConfig !== undefined; })[0];
                    filter = new ComboFilter_1.ComboFilter(column, config, column.$uniqueData, this.value[colId], conf);
                    filter.events.on("change", function (value) {
                        _this.value[colId] = value;
                    });
                    this.element[colId] = filter;
                }
                else {
                    filter.data = column.$uniqueData;
                }
                return (0, dom_1.inject)(filter.getFilter().getRootView());
            },
            match: function (_a) {
                var val = _a.val, _b = _a.match, match = _b === void 0 ? "" : _b, _c = _a.multi, multi = _c === void 0 ? false : _c, col = _a.col;
                var value = (0, data_1.toFormat)(val, col.type, col.format);
                if (Array.isArray(match)) {
                    var result = void 0;
                    var _loop_1 = function (i) {
                        result =
                            multi && typeof value === "string"
                                ? value.split(", ").some(function (item) { return item === match[i]; })
                                : match[i] === value;
                        if (result)
                            return "break";
                    };
                    for (var i = 0; i < match.length; i++) {
                        var state_1 = _loop_1(i);
                        if (state_1 === "break")
                            break;
                    }
                    return match && match.length ? result : true;
                }
                else {
                    return match !== undefined ? value === match : true;
                }
            },
            destroy: function () {
                this.value = {};
                var comboFilters = this.element;
                for (var colId in comboFilters) {
                    comboFilters[colId].destructor();
                    delete comboFilters[colId];
                }
            },
            value: {},
        },
        sum: {
            calculate: function (col, roots) {
                if (!col.length)
                    return null;
                return roots.reduce(function (sum, c) {
                    var value = sum + parseFloat(c) || 0;
                    return parseFloat(value.toFixed(12));
                }, 0);
            },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return (0, data_1.toFormat)(value, column.type, column.format);
                }
                else {
                    return (0, core_1.isDefined)(value) ? value : null;
                }
            },
        },
        avg: {
            calculate: function (col, roots) {
                return col.length ? roots.reduce(function (sum, c) { return sum + c; }, 0) / col.length : null;
            },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return (0, data_1.toFormat)(value, column.type, column.format);
                }
                else {
                    return (0, core_1.isDefined)(value) ? value.toFixed(3) : null;
                }
            },
        },
        min: {
            calculate: function (col) { return (col.length ? Math.min.apply(Math, col) : null); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent" || column.type === "number") {
                    return (0, data_1.toFormat)(value, column.type, column.format);
                }
                else {
                    return (0, core_1.isDefined)(value) ? value.toFixed(3) : null;
                }
            },
        },
        max: {
            calculate: function (col) { return (col.length ? Math.max.apply(Math, col) : null); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent" || column.type === "number") {
                    return (0, data_1.toFormat)(value, column.type, column.format);
                }
                else {
                    return (0, core_1.isDefined)(value) ? value.toFixed(3) : null;
                }
            },
        },
        count: {
            calculate: function (_col, roots) {
                // [todo]
                return roots.length;
            },
            validate: function (colId, data) {
                return data.reduce(function (items, item) {
                    if ((0, core_1.isDefined)(item[colId]) && item[colId] !== "") {
                        if (isNaN(item)) {
                            items.push(1);
                        }
                        else {
                            items.push(item);
                        }
                    }
                    return items;
                }, []);
            },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate, this.validate);
            },
        },
    };
}
exports.getContent = getContent;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ComboFilter = void 0;
var ts_combobox_1 = __webpack_require__(56);
var events_1 = __webpack_require__(3);
var ts_data_1 = __webpack_require__(13);
var core_1 = __webpack_require__(0);
var types_1 = __webpack_require__(9);
var ComboFilter = /** @class */ (function () {
    function ComboFilter(column, config, data, value, conf) {
        var _a;
        this.events = new events_1.EventSystem();
        this._silentMode = false; // for silent filter cleaning
        this.column = column;
        this.config = config;
        this.data = data;
        this.value = value;
        this.filterConfig = (conf === null || conf === void 0 ? void 0 : conf.filterConfig) || {};
        if (this.column.htmlEnable || (((_a = this.config) === null || _a === void 0 ? void 0 : _a.htmlEnable) && this.column.htmlEnable !== false)) {
            this.filterConfig.readonly = true;
            if (!this.filterConfig.template) {
                this.filterConfig.template = function (item) { return item.value; };
            }
        }
        if (!this.filterConfig.filter) {
            this.filterConfig.filter = function (item, val) { return (0, core_1.isExistValue)(item.value, val); };
        }
        this.initFilter();
        this.config && this.initHandlers();
    }
    ComboFilter.prototype.initFilter = function () {
        this._filter = new ts_combobox_1.Combobox(null, Object.assign({}, this.filterConfig));
        this.data && this._filter.data && this._setData();
    };
    ComboFilter.prototype.initHandlers = function () {
        var _this = this;
        var _a, _b, _c;
        var colId = this.column.id.toString();
        this.config.events.on(ts_data_1.DataEvents.load, function () { return _this._setData(); }, this);
        this._filter.events.on("change", function (id) {
            var _a;
            var value;
            if (id) {
                var haveIds = Array.isArray(id)
                    ? id.find(function (item) { return _this._filter.data.getItem(item); })
                    : _this._filter.data.getItem(id);
                if (haveIds) {
                    value = _this._filter.config.multiselection
                        ? _this._filter.list.selection.getItem().map(function (item) {
                            if (item && _this._filter.data.getItem(item.id)) {
                                return item.value;
                            }
                        })
                        : _this._filter.list.selection.getItem().value;
                }
            }
            _this.value = value;
            (_a = _this.config.events) === null || _a === void 0 ? void 0 : _a.fire(types_1.GridEvents.filterChange, [
                _this.value,
                colId,
                "comboFilter",
                _this._silentMode,
            ]);
            if (_this._silentMode && _this.value === undefined) {
                _this._silentMode = false;
            }
        });
        this.config.events.on(types_1.GridEvents.filterChange, function (value) { return _this.events.fire(types_1.HeaderFilterEvent.change, [value]); }, this);
        this._filter.popup.events.on("afterHide", function () {
            if (!_this.filterConfig.multiselection && !_this._filter.list.selection.getItem()) {
                _this.clear();
            }
        });
        this._filter.popup.events.on("afterShow", function () {
            if (!_this.filterConfig.multiselection &&
                (_this.value === "" || (_this.filterConfig.readonly && _this.value !== undefined))) {
                _this.clear();
            }
        });
        (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.on(types_1.GridEvents.scroll, function () {
            var _a;
            if (_this._isFocused && ((_a = _this._filter.getRootView().refs) === null || _a === void 0 ? void 0 : _a.input)) {
                _this._filter.focus();
            }
        }, this);
        (_b = this.config.events) === null || _b === void 0 ? void 0 : _b.on(types_1.GridEvents.headerCellMouseDown, function (col) {
            if (col.id !== _this.column.id)
                _this.blur();
        }, this);
        (_c = this.config.events) === null || _c === void 0 ? void 0 : _c.on(types_1.GridEvents.cellMouseDown, function () { return _this.blur(); }, this);
        this.config.events.on(ts_data_1.DataEvents.change, function (id, status) {
            if (_this.column.hidden)
                return;
            if (status === "add" || status === "update" || status === "remove") {
                if (status !== "add")
                    _this._checkValue();
                _this._setData(true);
            }
        }, this);
        this.config.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this.clear(true);
            _this._setData();
        }, this);
        this.config.events.on(types_1.GridEvents.afterRowShow, function () { return _this._setData(true); }, this);
        this.config.events.on(types_1.GridEvents.afterRowHide, function () {
            if (_this.column.hidden)
                return;
            _this._checkValue();
            _this._setData(true);
        }, this);
        this.config.events.on(ts_data_1.DataEvents.filter, function (filters) {
            if (_this.column.hidden)
                return;
            if (!filters || (0, ts_data_1.isOnlyPermanentFilters)(filters)) {
                _this.clear(true);
            }
            else {
                _this._checkValue();
            }
            if (!_this.filterConfig.multiselection || !_this._filter.popup.isVisible()) {
                _this._setData(true);
            }
        }, this);
        this.config.events.on(types_1.GridEvents.afterColumnShow, function () {
            if (!_this.filterConfig.multiselection) {
                _this._checkValue();
                _this._setData();
            }
        }, this);
        this.config.events.on(types_1.GridEvents.afterColumnHide, function () {
            if (!_this.filterConfig.multiselection) {
                _this._setData();
            }
        }, this);
    };
    ComboFilter.prototype.getFilter = function () {
        return this._filter;
    };
    ComboFilter.prototype.setValue = function (value, silent) {
        var _this = this;
        var _a, _b;
        if (!this.filterConfig.multiselection && Array.isArray(value))
            return;
        if (!(0, core_1.isDefined)(value)) {
            if (silent)
                this._silentMode = true;
            this._filter.clear();
            if (!this.filterConfig.multiselection && this.value !== undefined) {
                this.value = undefined;
                (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.fire(types_1.GridEvents.filterChange, [
                    this.value,
                    this.column.id,
                    "comboFilter",
                ]);
            }
        }
        else if ((value === null || value === void 0 ? void 0 : value.length) || value === "") {
            var item = this.filterConfig.multiselection && Array.isArray(value)
                ? value.map(function (v) { var _a; return (_a = _this._filter.data.find(function (item) { return item.value === v; })) === null || _a === void 0 ? void 0 : _a.id; })
                : (_b = this._filter.data.find(function (item) { return item.value === value; })) === null || _b === void 0 ? void 0 : _b.id;
            this._filter.setValue(item, silent);
        }
    };
    ComboFilter.prototype.clear = function (silent) {
        if (this.value !== undefined) {
            this.setValue(null, silent);
        }
    };
    ComboFilter.prototype.focus = function () {
        var _a;
        this._isFocused = true;
        ((_a = this._filter.getRootView().refs) === null || _a === void 0 ? void 0 : _a.input) && this._filter.focus();
    };
    ComboFilter.prototype.blur = function () {
        var _a;
        this._isFocused = false;
        ((_a = this._filter.getRootView().refs) === null || _a === void 0 ? void 0 : _a.input) && this._filter.blur();
    };
    ComboFilter.prototype.destructor = function () {
        var gridEvents = this.config.events;
        if (gridEvents) {
            for (var name_1 in gridEvents.events) {
                this.config.events.detach(name_1, this);
            }
        }
        this.events.clear();
        this._filter && this._filter.destructor();
        this.config = this.filterConfig = this.data = this.column = this.value = this.events = null;
    };
    ComboFilter.prototype._setData = function (active) {
        var _this = this;
        if (active === void 0) { active = false; }
        var parseData = function () {
            var uniqueData = _this.column.$activeFilterData || _this.column.$uniqueData;
            if (_this.column.header.some(function (col) { var _a; return (_a = col.filterConfig) === null || _a === void 0 ? void 0 : _a.filter; })) {
                var data_1 = _this._filter.data.reduce(function (obj, item) {
                    obj[item.value] = item.id;
                    return obj;
                }, {});
                var newData = uniqueData.map(function (value) {
                    return data_1[value] ? { id: data_1[value], value: value } : { value: value };
                });
                _this._filter.data.parse(newData);
            }
            else {
                _this._filter.data.parse(uniqueData.map(function (value) { return ({ value: value }); }));
            }
        };
        if (this.value === undefined) {
            parseData();
        }
        else if (active && this.filterConfig.multiselection) {
            parseData();
            this.setValue(this.value, true);
        }
    };
    ComboFilter.prototype._checkValue = function () {
        if (this.value === undefined)
            return;
        var values = Array.isArray(this.value) ? this.value : [this.value];
        var _loop_1 = function (value) {
            if (this_1.column.$uniqueData.includes(value))
                return "continue";
            if (values.length > 1) {
                var item = this_1._filter.data.find(function (item) { return item.value === value; });
                this_1._filter.list.selection.remove(item.id);
            }
            else {
                this_1.clear();
            }
            return "break";
        };
        var this_1 = this;
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var value = values_1[_i];
            var state_1 = _loop_1(value);
            if (state_1 === "break")
                break;
        }
    };
    return ComboFilter;
}());
exports.ComboFilter = ComboFilter;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectFilter = void 0;
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(9);
var SelectFilter = /** @class */ (function () {
    function SelectFilter(column, config, uniqueData, value) {
        this.events = new events_1.EventSystem();
        this.column = column;
        this.config = config;
        this.data = uniqueData;
        this.value = value || "";
        this.initHandlers();
        this.toHTML();
    }
    SelectFilter.prototype.toHTML = function () {
        var _this = this;
        var _a;
        return (0, dom_1.el)("label.dhx_grid-filter__label.dxi.dxi-menu-down", { _ref: "".concat(this.column.id, "_filter") }, [
            (0, dom_1.el)("select.dxi.dxi-menu-down", {
                type: "text",
                class: "dhx_input dhx_grid-filter dhx_grid-filter--select",
                onchange: this._handlers.onchange,
                onfocus: this._handlers.onfocus,
                onblur: this._handlers.onblur,
                _key: this.column.id,
            }, [
                (0, dom_1.el)("option", { value: "", _key: 0 }, ""),
                (_a = (this.value ? [this.value] : this.data)) === null || _a === void 0 ? void 0 : _a.map(function (val) {
                    val = val !== null && val !== void 0 ? val : "";
                    return (val !== "" &&
                        (0, dom_1.el)("option", {
                            _key: val,
                            value: val,
                            selected: _this.value === val.toString(),
                        }, val));
                }),
            ]),
        ]);
    };
    SelectFilter.prototype.getFilter = function () {
        return this.toHTML();
    };
    SelectFilter.prototype.setValue = function (value, silent) {
        var _a;
        this.value = value || "";
        this.events.fire(types_1.HeaderFilterEvent.change, [value]);
        (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.fire(types_1.GridEvents.filterChange, [
            this.value,
            this.column.id,
            "selectFilter",
            silent,
        ]);
    };
    SelectFilter.prototype.clear = function (silent) {
        this.setValue("", silent);
    };
    SelectFilter.prototype.focus = function () {
        var _a, _b, _c, _d;
        this._isFocused = true;
        var filterEl = (_d = (_c = (_b = (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.getRootView()) === null || _c === void 0 ? void 0 : _c.refs["".concat(this.column.id, "_filter")]) === null || _d === void 0 ? void 0 : _d.el;
        if (filterEl) {
            filterEl.focus();
        }
    };
    SelectFilter.prototype.blur = function () {
        var _a, _b, _c, _d;
        this._isFocused = false;
        var filterEl = (_d = (_c = (_b = (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.getRootView()) === null || _c === void 0 ? void 0 : _c.refs["".concat(this.column.id, "_filter")]) === null || _d === void 0 ? void 0 : _d.el;
        if (filterEl) {
            filterEl.blur();
        }
    };
    SelectFilter.prototype.initHandlers = function () {
        var _this = this;
        var _a, _b, _c;
        this._handlers = {
            onchange: function (e) {
                var _a, _b, _c, _d;
                var value = ((_a = e.target) === null || _a === void 0 ? void 0 : _a.value) || ((_c = (_b = e.composedPath()) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value) || ((_d = e.explicitOriginalTarget) === null || _d === void 0 ? void 0 : _d.value);
                _this.setValue(value);
            },
            onfocus: function () {
                _this._isFocused = true;
            },
            onblur: function () {
                _this._isFocused = false;
            },
        };
        (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.on(types_1.GridEvents.scroll, function () {
            var _a, _b, _c, _d;
            var filterEl = (_d = (_c = (_b = (_a = _this.config.events) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.getRootView()) === null || _c === void 0 ? void 0 : _c.refs["".concat(_this.column.id, "_filter")]) === null || _d === void 0 ? void 0 : _d.el;
            if (_this._isFocused && filterEl) {
                (0, dom_1.awaitRedraw)().then(function () {
                    filterEl.focus();
                });
            }
        });
        (_b = this.config.events) === null || _b === void 0 ? void 0 : _b.on(types_1.GridEvents.headerCellMouseDown, function (col) {
            if (col.id !== _this.column.id)
                _this.blur();
        });
        (_c = this.config.events) === null || _c === void 0 ? void 0 : _c.on(types_1.GridEvents.cellMouseDown, function () { return _this.blur(); });
    };
    return SelectFilter;
}());
exports.SelectFilter = SelectFilter;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InputFilter = void 0;
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(9);
var InputFilter = /** @class */ (function () {
    function InputFilter(column, config, id, value) {
        this.events = new events_1.EventSystem();
        this.column = column;
        this.config = config;
        this.id = id;
        this.value = value || "";
        this.initHandlers();
        this.toHTML();
    }
    InputFilter.prototype.toHTML = function () {
        return (0, dom_1.el)("div.dhx_grid-filter__label.dxi.dxi-magnify", { "aria-label": "Type to search", _ref: "".concat(this.column.id, "_filter") }, [
            (0, dom_1.el)("label", {
                style: {
                    display: "none",
                },
                "aria-label": "Type to search",
                for: this.id,
            }, "Type to search"),
            (0, dom_1.el)("input", {
                type: "text",
                class: "dhx_input dhx_grid-filter",
                oninput: this._handlers.onchange,
                onfocus: this._handlers.onfocus,
                onblur: this._handlers.onblur,
                _key: this.column.id,
                id: this.id,
                value: this.value,
            }),
        ]);
    };
    InputFilter.prototype.getFilter = function () {
        return this.toHTML();
    };
    InputFilter.prototype.setValue = function (value, silent) {
        var _a;
        this.value = value || "";
        this.events.fire(types_1.HeaderFilterEvent.change, [this.value]);
        (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.fire(types_1.GridEvents.filterChange, [
            this.value,
            this.column.id,
            "inputFilter",
            silent,
        ]);
    };
    InputFilter.prototype.clear = function (silent) {
        this.setValue("", silent);
    };
    InputFilter.prototype.focus = function () {
        var _a, _b, _c, _d, _e;
        this._isFocused = true;
        var filterEl = (_d = (_c = (_b = (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.getRootView()) === null || _c === void 0 ? void 0 : _c.refs["".concat(this.column.id, "_filter")]) === null || _d === void 0 ? void 0 : _d.el;
        if (filterEl) {
            (_e = filterEl.querySelector("input")) === null || _e === void 0 ? void 0 : _e.focus();
        }
    };
    InputFilter.prototype.blur = function () {
        var _a, _b, _c, _d, _e;
        this._isFocused = false;
        var filterEl = (_d = (_c = (_b = (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.getRootView()) === null || _c === void 0 ? void 0 : _c.refs["".concat(this.column.id, "_filter")]) === null || _d === void 0 ? void 0 : _d.el;
        if (filterEl) {
            (_e = filterEl.querySelector("input")) === null || _e === void 0 ? void 0 : _e.blur();
        }
    };
    InputFilter.prototype.initHandlers = function () {
        var _this = this;
        var _a, _b, _c;
        this._handlers = {
            onchange: function (e) {
                var _a, _b, _c, _d;
                var value = ((_a = e.target) === null || _a === void 0 ? void 0 : _a.value) || ((_c = (_b = e.composedPath()) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value) || ((_d = e.explicitOriginalTarget) === null || _d === void 0 ? void 0 : _d.value);
                if (_this._inputDelay) {
                    clearTimeout(_this._inputDelay);
                }
                _this._inputDelay = setTimeout(function () { return _this.setValue(value); }, 500);
            },
            onfocus: function () {
                _this._isFocused = true;
            },
            onblur: function () {
                _this._isFocused = false;
            },
        };
        (_a = this.config.events) === null || _a === void 0 ? void 0 : _a.on(types_1.GridEvents.scroll, function () {
            var _a, _b, _c, _d;
            var filterEl = (_d = (_c = (_b = (_a = _this.config.events) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.getRootView()) === null || _c === void 0 ? void 0 : _c.refs["".concat(_this.column.id, "_filter")]) === null || _d === void 0 ? void 0 : _d.el;
            if (_this._isFocused && filterEl) {
                (0, dom_1.awaitRedraw)().then(function () {
                    var _a;
                    (_a = filterEl.querySelector("input")) === null || _a === void 0 ? void 0 : _a.focus();
                });
            }
        });
        (_b = this.config.events) === null || _b === void 0 ? void 0 : _b.on(types_1.GridEvents.headerCellMouseDown, function (col) {
            if (col.id !== _this.column.id)
                _this.blur();
        });
        (_c = this.config.events) === null || _c === void 0 ? void 0 : _c.on(types_1.GridEvents.cellMouseDown, function () { return _this.blur(); });
    };
    return InputFilter;
}());
exports.InputFilter = InputFilter;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startResize = void 0;
var core_1 = __webpack_require__(0);
var types_1 = __webpack_require__(9);
var render_1 = __webpack_require__(24);
function startResize(grid, column, ev, cb) {
    var _a;
    var rightSplit = grid.config.rightSplit;
    ev.targetTouches && ev.preventDefault();
    var initX = ev.targetTouches ? ev.targetTouches[0].clientX : ev.clientX;
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    var rightFixedColsIds = rightSplit ? columns.slice(-rightSplit).map(function (c) { return c.id; }) : [];
    var customScroll = !!((_a = grid.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable);
    var xInitScrollBarState = rightSplit ? (0, render_1.calcScrollBarWidth)(grid.config, customScroll).xState : null;
    var initWidth = 0;
    grid.config.$resizing = column;
    var moveHandler = function (e) {
        var _a;
        var i = (0, core_1.findIndex)(columns, function (obj) {
            return obj.id === column;
        });
        var currentX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var containerLeft = currentX - grid.getRootNode().getBoundingClientRect().left;
        var scrollBarWidth = (0, render_1.calcScrollBarWidth)(grid.config, customScroll);
        if ((grid.config.leftSplit === i + 1 && containerLeft >= grid.config.$width - scrollBarWidth.y - 2) ||
            (rightSplit &&
                rightFixedColsIds.includes(column) &&
                scrollBarWidth.xState !== xInitScrollBarState)) {
            return;
        }
        initWidth = initWidth || columns[i].$width;
        var minWidth = columns[i].minWidth || 40;
        var maxWidth = columns[i].maxWidth;
        var move = currentX - initX;
        var cols = __spreadArray([], columns, true);
        var size = initWidth + (xInitScrollBarState && rightFixedColsIds.includes(column) ? -move : move);
        var final;
        if ((maxWidth && size >= maxWidth) || size <= minWidth) {
            if (size <= minWidth) {
                final = minWidth;
            }
            if (size >= maxWidth) {
                final = maxWidth;
            }
        }
        else {
            final = size;
        }
        cols[i].$width = final;
        for (var index = 0; index < cols.length; index++) {
            var adjust = (_a = cols[index].adjust) !== null && _a !== void 0 ? _a : grid.config.adjust;
            if (!adjust) {
                cols[index].$fixedWidth = index <= i;
            }
        }
        grid.events.fire(types_1.GridEvents.resize, [columns[i], e]);
        grid.paint();
    };
    var upHandler = function () {
        if (!ev.targetTouches) {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
        }
        else {
            document.removeEventListener("touchmove", moveHandler);
            document.removeEventListener("touchend", upHandler);
        }
        cb();
    };
    if (!ev.targetTouches) {
        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
    }
    else {
        document.addEventListener("touchmove", moveHandler);
        document.addEventListener("touchend", upHandler);
    }
    grid.paint();
}
exports.startResize = startResize;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeysHandlers = exports.selectionMove = void 0;
var types_1 = __webpack_require__(9);
var html_1 = __webpack_require__(4);
var cells_1 = __webpack_require__(30);
function selectionMove(e, grid, dir, range, toEnd, ctrlUp, shiftUp) {
    if (toEnd === void 0) { toEnd = false; }
    if (ctrlUp === void 0) { ctrlUp = false; }
    if (shiftUp === void 0) { shiftUp = false; }
    if (grid.config.$editable || !grid.config.selection || (0, html_1.locateNodeByClassName)(e, "dhx_grid-header-cell")) {
        return;
    }
    if (e) {
        e.preventDefault();
    }
    var selected = grid.selection.getCell();
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    grid.data.filter(function (row) { return !row.hidden; });
    if (selected) {
        if (dir === "vertical") {
            if (toEnd) {
                var newItem = range === 1
                    ? grid.data.getItem(grid.data.getId(grid.data.getLength() - 1))
                    : grid.data.getItem(grid.data.getId(0));
                grid.scrollTo(newItem.id.toString(), selected.column.id.toString());
                grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
            }
            else {
                var index = grid.data.getIndex(selected.row.id.toString());
                if (index + range >= 0 && index + range < grid.data.getLength()) {
                    var newItem = grid.data.getItem(grid.data.getId(index + range));
                    grid.scrollTo(newItem.id.toString(), selected.column.id.toString());
                    grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                }
            }
        }
        else {
            if (toEnd) {
                var newItem = range === 1 ? columns[columns.length - 1] : columns[0];
                grid.scrollTo(selected.row.id.toString(), newItem.id.toString());
                grid.selection.setCell(selected.row.id, newItem.id, ctrlUp, shiftUp);
            }
            else {
                var index = columns.indexOf(selected.column);
                if (index + range >= 0 && index + range < columns.length) {
                    grid.scrollTo(selected.row.id.toString(), columns[index + range].id.toString());
                    grid.selection.setCell(selected.row.id, columns[index + range].id, ctrlUp, shiftUp);
                }
            }
        }
    }
}
exports.selectionMove = selectionMove;
function getRange(grid, direction) {
    var _a, _b;
    var selectedCell = grid.selection.getCell();
    var span = selectedCell && grid.getSpan(selectedCell.row.id, selectedCell.column.id);
    if (span) {
        if (direction === "up" || direction === "down") {
            var spanIndex = (_a = grid.config.data) === null || _a === void 0 ? void 0 : _a.findIndex(function (item) { return item.id === span.row; });
            var cellIndex = (_b = grid.config.data) === null || _b === void 0 ? void 0 : _b.findIndex(function (item) { return item.id === selectedCell.row.id; });
            if (direction === "up")
                return spanIndex - cellIndex - 1;
            else
                return spanIndex + (span.rowspan || 1) - cellIndex;
        }
        else {
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            var spanIndex = columns.findIndex(function (item) { return item.id === span.column; });
            var cellIndex = columns.findIndex(function (item) { return item.id === selectedCell.column.id; });
            if (direction === "left")
                return spanIndex - cellIndex - 1;
            else
                return spanIndex + (span.colspan || 1) - cellIndex;
        }
    }
    else {
        if (direction === "down" || direction === "right")
            return 1;
        else
            return -1;
    }
}
function getKeysHandlers(grid) {
    var _a, _b, _c;
    var cellSelection = grid.config.selection === "cell" ||
        grid.config.selection === "complex" ||
        grid.config.selection === true;
    var gridBodyHandlers = {};
    if (grid.getRootView()) {
        var gridBody_1 = (_c = (_b = (_a = grid.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.grid_body) === null || _c === void 0 ? void 0 : _c.el;
        if (!gridBody_1) {
            return;
        }
        gridBodyHandlers = {
            pageUp: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop -= gridBody_1.clientHeight;
            },
            pageDown: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.clientHeight;
            },
            home: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop = 0;
            },
            end: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.scrollHeight;
            },
        };
    }
    return __assign({ enter: function () {
            if (cellSelection) {
                var selected = (0, cells_1.normalizeCell)(grid.selection.getCell(), grid);
                if (selected &&
                    ((selected.column.editable !== false && grid.config.editable) || selected.column.editable)) {
                    if (!grid.config.$editable) {
                        if (selected.column.type === "boolean") {
                            if (!grid.events.fire(types_1.GridEvents.beforeEditStart, [
                                selected.row,
                                selected.column,
                                "checkbox",
                            ]))
                                return;
                            grid.events.fire(types_1.GridEvents.afterEditStart, [
                                selected.row,
                                selected.column,
                                "checkbox",
                            ]);
                            if (!grid.events.fire(types_1.GridEvents.beforeEditEnd, [
                                !selected.row[selected.column.id],
                                selected.row,
                                selected.column,
                            ]))
                                return;
                            grid.events.fire(types_1.GridEvents.afterEditEnd, [
                                !selected.row[selected.column.id],
                                selected.row,
                                selected.column,
                            ]);
                        }
                        else {
                            grid.editCell(selected.row.id, selected.column.id, selected.column.editorType);
                        }
                    }
                    else {
                        grid.editEnd();
                    }
                }
            }
            else {
                if (grid.config.$editable) {
                    grid.editEnd();
                }
            }
        }, space: function (e) {
            var _a;
            var selected = (0, cells_1.normalizeCell)(grid.selection.getCell(), grid);
            if (cellSelection &&
                ((_a = selected === null || selected === void 0 ? void 0 : selected.column.editable) !== null && _a !== void 0 ? _a : grid.config.editable) &&
                !grid.config.$editable) {
                if (selected && selected.column.type === "boolean") {
                    e.preventDefault();
                    if (!grid.events.fire(types_1.GridEvents.beforeEditStart, [
                        selected.row,
                        selected.column,
                        "checkbox",
                    ]))
                        return;
                    grid.events.fire(types_1.GridEvents.afterEditStart, [selected.row, selected.column, "checkbox"]);
                    if (!grid.events.fire(types_1.GridEvents.beforeEditEnd, [
                        !selected.row[selected.column.id],
                        selected.row,
                        selected.column,
                    ]))
                        return;
                    grid.events.fire(types_1.GridEvents.afterEditEnd, [
                        !selected.row[selected.column.id],
                        selected.row,
                        selected.column,
                    ]);
                }
            }
        }, escape: function () {
            if (grid.config.$editable) {
                grid.editEnd(true);
            }
        }, tab: function (e) {
            if (!grid.config.selection || (0, html_1.locateNodeByClassName)(e, "dhx_grid-header-cell")) {
                return;
            }
            if (grid.config.$editable) {
                grid.editEnd();
            }
            var selected = grid.selection.getCell();
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) + getRange(grid, "right");
                if (index >= 0 && index < columns.length) {
                    e && e.preventDefault();
                    grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                    grid.selection.setCell(selected.row.id, columns[index].id);
                }
                else if (index >= 0) {
                    var newLineIndex = grid.data.getIndex(selected.row.id.toString()) + 1;
                    if (newLineIndex < grid.data.getLength()) {
                        e && e.preventDefault();
                        grid.scrollTo(grid.data.getId(newLineIndex).toString(), columns[0].id.toString());
                        grid.selection.setCell(grid.data.getId(newLineIndex), columns[0].id);
                    }
                }
            }
        }, "shift+tab": function (e) {
            if (!grid.config.selection || (0, html_1.locateNodeByClassName)(e, "dhx_grid-header-cell")) {
                return;
            }
            if (grid.config.$editable) {
                grid.editEnd();
            }
            var selected = grid.selection.getCell();
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) + getRange(grid, "left");
                if (index >= 0 && index < columns.length) {
                    e && e.preventDefault();
                    grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                    grid.selection.setCell(selected.row.id, columns[index].id);
                }
                else if (index < grid.data.getLength()) {
                    var newLineIndex = grid.data.getIndex(selected.row.id.toString()) - 1;
                    if (newLineIndex >= 0) {
                        e && e.preventDefault();
                        grid.scrollTo(grid.data.getId(newLineIndex).toString(), columns[columns.length - 1].id.toString());
                        grid.selection.setCell(grid.data.getId(newLineIndex), columns[columns.length - 1].id);
                    }
                }
            }
        }, arrowUp: function (e) {
            selectionMove(e, grid, "vertical", getRange(grid, "up"));
        }, "ctrl+arrowUp": function (e) {
            selectionMove(e, grid, "vertical", -1, true);
        }, "shift+arrowUp": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", -1, false, false, true);
            }
        }, "ctrl+shift+arrowUp": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", -1, true, false, true);
            }
        }, arrowDown: function (e) {
            selectionMove(e, grid, "vertical", getRange(grid, "down"));
        }, "ctrl+arrowDown": function (e) {
            selectionMove(e, grid, "vertical", 1, true);
        }, "shift+arrowDown": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", 1, false, false, true);
            }
        }, "ctrl+shift+arrowDown": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", 1, true, false, true);
            }
        }, arrowRight: function (e) {
            selectionMove(e, grid, "horizontal", getRange(grid, "right"));
        }, "ctrl+arrowRight": function (e) {
            selectionMove(e, grid, "horizontal", 1, true);
        }, "shift+arrowRight": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", 1, false, false, true);
            }
        }, "ctrl+shift+arrowRight": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", 1, true, false, true);
            }
        }, arrowLeft: function (e) {
            selectionMove(e, grid, "horizontal", getRange(grid, "left"));
        }, "ctrl+arrowLeft": function (e) {
            selectionMove(e, grid, "horizontal", -1, true);
        }, "shift+arrowLeft": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", -1, false, false, true);
            }
        }, "ctrl+shift+arrowLeft": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", -1, true, false, true);
            }
        } }, gridBodyHandlers);
}
exports.getKeysHandlers = getKeysHandlers;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProGrid = void 0;
var Grid_1 = __webpack_require__(70);
var types_1 = __webpack_require__(9);
var ts_data_1 = __webpack_require__(13);
var html_1 = __webpack_require__(4);
var data_1 = __webpack_require__(22);
var render_1 = __webpack_require__(24);
var dom_1 = __webpack_require__(1);
var ScrollView_1 = __webpack_require__(35);
var main_1 = __webpack_require__(20);
var ProGrid = /** @class */ (function (_super) {
    __extends(ProGrid, _super);
    function ProGrid(container, config) {
        var _this = this;
        var _a, _b;
        _this = _super.call(this, container, __assign({ autoHeight: false, headerAutoHeight: (_a = config === null || config === void 0 ? void 0 : config.headerAutoHeight) !== null && _a !== void 0 ? _a : config === null || config === void 0 ? void 0 : config.autoHeight, footerAutoHeight: (_b = config === null || config === void 0 ? void 0 : config.footerAutoHeight) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.autoHeight }, config)) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); }, {
            scrollHandler: function (e) {
                return _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
        });
        return _this;
    }
    ProGrid.prototype._createView = function () {
        var _this = this;
        return (0, dom_1.create)({
            render: function (vm, obj) {
                return _this._destructed
                    ? (0, dom_1.el)("div")
                    : (0, render_1.proRender)(vm, obj, _this._htmlEvents, _this.selection, _this._uid);
            },
            hooks: this._initHooks(),
        }, this);
    };
    ProGrid.prototype._setEventHandlers = function () {
        var _this = this;
        _super.prototype._setEventHandlers.call(this);
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            var _a;
            var targetRow = (0, html_1.locateNodeByClassName)(e, "dhx_header-row");
            var targetRowIndex = targetRow && targetRow.getAttribute("aria-rowindex");
            if ((_a = col.header[Number(targetRowIndex) - 1]) === null || _a === void 0 ? void 0 : _a.content)
                return;
            if (!e.targetTouches) {
                _this._dragStartColumn(e, col);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStartColumn(e, col);
                }, _this._touch.duration);
            }
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchMove, function (_col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        this.events.on(types_1.GridEvents.afterResizeEnd, function () {
            if (_this.config.autoHeight) {
                _this.config.data = _this.data.map(function (row) {
                    var height = (0, data_1.getMaxRowHeight)(row, _this.config.columns);
                    row.$height = (0, data_1.getCalculatedRowHeight)(height, {
                        rowHeight: _this.config.rowHeight,
                    });
                    return row;
                });
            }
        });
        this.events.on(types_1.GridEvents.afterRowResize, function (row, _e, currentHeight) {
            var _a = _this.data.getItem(row.id), id = _a.id, height = _a.height, $height = _a.$height;
            if (height && height !== $height) {
                _this.data.update(id, { height: currentHeight });
            }
            _this.data.update(id, { $height: currentHeight }, true);
            _this.config.data = _this.data.map(function (row) { return row; });
            _this.paint();
        });
        this.events.on(types_1.GridEvents.scroll, function () {
            _this._lazyLoad();
        });
        this.events.on(ts_data_1.DataEvents.dataRequest, function (from, to) {
            var proxy = _this.data.dataProxy;
            if (proxy && proxy.config) {
                _this._prepareDataFromTo(_this.data, from, to);
            }
        });
    };
    ProGrid.prototype.getNormalizeContentHeight = function (row, col, config) {
        var _a, _b;
        var HORIZONTAL_OFFSET = 24;
        var VERTICAL_OFFSET = 16;
        var width = 0;
        var content = this.content[row.content];
        var textContent = row.content &&
            typeof content.calculate === "function" &&
            content.toHtml(col, config).toString();
        var text = row.text || textContent || "";
        if (row.colspan) {
            var startIndex = (_a = config.columns) === null || _a === void 0 ? void 0 : _a.findIndex(function (c) { return c.id === col.id; });
            var endIndex = startIndex + row.colspan;
            var targetColumns = (_b = config.columns) === null || _b === void 0 ? void 0 : _b.slice(startIndex, endIndex);
            targetColumns === null || targetColumns === void 0 ? void 0 : targetColumns.forEach(function (column) {
                width += column.$width;
            });
        }
        else {
            width += col.$width;
        }
        return ((0, data_1.measureTextHeight)({
            text: text,
            width: width - HORIZONTAL_OFFSET,
            htmlEnable: (0, main_1.isHtmlEnable)(config, col, row),
            font: "normal 14.4px Arial",
        }) + VERTICAL_OFFSET);
    };
    ProGrid.prototype._prepareData = function (data) {
        var _this = this;
        this._normalizeDataType();
        this._adjustColumns();
        return data.map(function (row) {
            if (_this.config.autoHeight && typeof row.height === "undefined") {
                var columns = _this.config.columns.filter(function (col) { return !col.hidden; });
                var height = (0, data_1.getMaxRowHeight)(row, columns);
                row.$height =
                    (0, data_1.getCalculatedRowHeight)(height, {
                        rowHeight: _this.config.rowHeight,
                    }) || _this.config.rowHeight;
            }
            else {
                row.$height = row.height || _this.config.rowHeight;
            }
            return row;
        });
    };
    ProGrid.prototype._prepareDataFromTo = function (data, from, to) {
        var _this = this;
        return data.mapRange(from, to, function (row) {
            var height = (0, data_1.getMaxRowHeight)(row, _this.config.columns);
            row.$height =
                (0, data_1.getCalculatedRowHeight)(height, {
                    rowHeight: _this.config.rowHeight,
                }) || _this.config.rowHeight;
            return row;
        });
    };
    ProGrid.prototype._dragStart = function (event) {
        if (this.config.dragMode &&
            (this.config.dragItem === "row" || this.config.dragItem === "both") &&
            !this.config.$editable) {
            var column = this.getColumn(event.target.getAttribute("data-dhx-col-id"));
            if ((column === null || column === void 0 ? void 0 : column.draggable) === false)
                return;
            var item = (0, html_1.locateNode)(event, "data-dhx-id");
            var itemId = item && item.getAttribute("data-dhx-id");
            if (event.targetTouches) {
                this._touch.start = true;
            }
            var moveIds = [itemId];
            if (this.config.multiselection) {
                moveIds = __spreadArray(__spreadArray([], moveIds, true), this.selection.getCells().map(function (i) { return i.row.id; }), true);
                if (moveIds.length > 1) {
                    var initData = this.data.getInitialData();
                    var sort = {};
                    var _loop_1 = function (index) {
                        var id = moveIds[index];
                        var itemIndex = initData === null || initData === void 0 ? void 0 : initData.findIndex(function (item) { return item.id == id; });
                        sort[itemIndex] = id;
                    };
                    for (var index = 0; index < moveIds.length; index++) {
                        _loop_1(index);
                    }
                    moveIds = __spreadArray([], Object.values(sort), true);
                }
            }
            return ts_data_1.dragManager.onMouseDown(event, moveIds, [this._getRowGhost(moveIds)]);
        }
    };
    ProGrid.prototype._lazyLoad = function () {
        var _this = this;
        var _a, _b;
        var proxy = this.data.dataProxy;
        if (proxy && proxy.config) {
            var data = this.data.getRawData(0, -1, null, 2);
            if (!data.length)
                return;
            var renderConfig = (0, render_1.getRenderConfig)(this, data, {
                width: this.config.$width,
                height: this.config.$height,
            });
            var from_1;
            var initialLimit = proxy.config.limit;
            var limit = initialLimit;
            var currentRows_1 = renderConfig.currentRows;
            var firstRow = currentRows_1[0];
            var lastRow = currentRows_1[currentRows_1.length - 1];
            var to_1 = this.data.getIndex(lastRow.id);
            var getRowIndex = function (row) {
                for (var i = 1; i < currentRows_1.length; i++) {
                    if ((row === "firstFilledRow" && !currentRows_1[i].$empty && currentRows_1[i - 1].$empty) ||
                        (row === "firstEmptyRow" && currentRows_1[i].$empty && !currentRows_1[i - 1].$empty)) {
                        return _this.data.getIndex(currentRows_1[i].id);
                    }
                }
            };
            if (firstRow.$empty) {
                if (lastRow.$empty) {
                    from_1 = this.data.getIndex(firstRow.id);
                }
                else {
                    var firstFilledRowIndex = getRowIndex("firstFilledRow");
                    var start = firstFilledRowIndex - limit;
                    if (start < 0)
                        start = 0;
                    for (var i = start; i < firstFilledRowIndex; i++) {
                        if (this.data.getItem(this.data.getId(i)).$empty) {
                            from_1 = i;
                            limit = firstFilledRowIndex - i;
                            break;
                        }
                    }
                }
            }
            else if (lastRow.$empty) {
                from_1 = getRowIndex("firstEmptyRow");
            }
            else {
                from_1 = (_a = getRowIndex("firstEmptyRow")) !== null && _a !== void 0 ? _a : this.data.getIndex(firstRow.id);
                limit = ((_b = getRowIndex("firstFilledRow")) !== null && _b !== void 0 ? _b : to_1) - from_1;
            }
            if (!this.data.isDataLoaded(from_1, to_1) && this.data.events.fire(ts_data_1.DataEvents.beforeLazyLoad, [])) {
                proxy.updateUrl(null, { from: from_1, limit: limit });
                proxy.config.limit = initialLimit;
                this.data.load(proxy).then(function () {
                    _this.config.autoHeight && _this._prepareDataFromTo(_this.data, from_1, to_1);
                });
            }
        }
    };
    ProGrid.prototype._getColumnGhost = function (col) {
        var container = this._container || (0, html_1.toNode)(this._uid);
        var headerRow = container.querySelector(".dhx_header-row");
        var colHeaderCell = headerRow.querySelector(".dhx_grid-header-cell[data-dhx-id=\"".concat(col.id, "\"]"));
        var headerCols = Array.from(headerRow.childNodes);
        var n = headerCols.indexOf(colHeaderCell) + 1;
        var colHeaderCells = container.querySelectorAll(".dhx_grid-header-cell[data-dhx-id=\"".concat(col.id, "\"]:not(.dhx_span-cell)"));
        var ghostGridNodes = container.querySelectorAll(".dhx_grid_data .dhx_grid-cell:nth-child(".concat(n, ")"));
        var ghostContainer = document.createElement("div");
        colHeaderCells.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        ghostGridNodes.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        return ghostContainer;
    };
    ProGrid.prototype._dragStartColumn = function (e, col) {
        var target = e.target;
        var testCustom = function (el) { return el.classList.contains("dhx_grid-custom-content-cell"); };
        var isCustom = testCustom(target.parentElement) || testCustom(target.parentElement.parentElement);
        if (!isCustom &&
            (col.draggable ||
                (this.config.dragItem === "column" && col.draggable !== false) ||
                (this.config.dragItem === "both" && col.draggable !== false)) &&
            !(0, html_1.locateNodeByClassName)(e, "dhx_resizer_grip_wrap")) {
            if (e.targetTouches) {
                this._touch.start = true;
            }
            ts_data_1.dragManager.onMouseDown(e, [col.id], [this._getColumnGhost(col)]);
        }
    };
    return ProGrid;
}(Grid_1.Grid));
exports.ProGrid = ProGrid;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.collectionStore = void 0;
var core_1 = __webpack_require__(0);
var CollectionStore = /** @class */ (function () {
    function CollectionStore() {
        this._store = {};
    }
    CollectionStore.prototype.setItem = function (id, target) {
        this._store[id] = target;
    };
    CollectionStore.prototype.getItem = function (id) {
        if (!(0, core_1.isId)(id) || !this._store[id]) {
            return null;
        }
        return this._store[id];
    };
    return CollectionStore;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.collectionStore = dhx.collectionStore || new CollectionStore();
exports.collectionStore = dhx.collectionStore;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyDataProxy = void 0;
var dataproxy_1 = __webpack_require__(34);
var core_1 = __webpack_require__(0);
var ajax_1 = __webpack_require__(51);
var LazyDataProxy = /** @class */ (function (_super) {
    __extends(LazyDataProxy, _super);
    function LazyDataProxy(url, config) {
        var _this = _super.call(this, url) || this;
        _this.config = (0, core_1.extend)({
            from: 0,
            limit: 50,
            delay: 50,
            prepare: 0,
        }, config);
        _this.updateUrl(url, { from: _this.config.from, limit: _this.config.limit });
        return _this;
    }
    LazyDataProxy.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this._timeout) {
                ajax_1.ajax.get(_this.url, { responseType: "text" })
                    .then(resolve)
                    .catch(reject);
                _this._cooling = true;
                _this._timeout = setTimeout(function () {
                    return;
                });
            }
            else {
                clearTimeout(_this._timeout);
                _this._timeout = setTimeout(function () {
                    ajax_1.ajax.get(_this.url, { responseType: "text" })
                        .then(resolve)
                        .catch(reject);
                    _this._cooling = true;
                }, _this.config.delay);
                if (_this._cooling) {
                    resolve(null);
                    _this._cooling = false;
                }
            }
        });
    };
    return LazyDataProxy;
}(dataproxy_1.DataProxy));
exports.LazyDataProxy = LazyDataProxy;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Selection = void 0;
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(39);
var types_2 = __webpack_require__(26);
var core_1 = __webpack_require__(0);
var Selection = /** @class */ (function () {
    function Selection(config, data, events) {
        var _this = this;
        this.events = events || new events_1.EventSystem(this);
        this._data = data;
        this.config = config;
        this._data.events.on(types_2.DataEvents.removeAll, function () {
            _this._selected = null;
        });
        this._data.events.on(types_2.DataEvents.change, function () {
            if ((0, core_1.isId)(_this._selected)) {
                var near = _this._data.getNearId(_this._selected);
                if (near !== _this._selected) {
                    _this._selected = null;
                    if (near) {
                        _this.add(near);
                    }
                }
            }
        });
    }
    Selection.prototype.getId = function () {
        return this._selected;
    };
    Selection.prototype.getItem = function () {
        if ((0, core_1.isId)(this._selected)) {
            return this._data.getItem(this._selected);
        }
        return null;
    };
    Selection.prototype.remove = function (id) {
        id = id !== null && id !== void 0 ? id : this._selected;
        if (!(0, core_1.isDefined)(id)) {
            return true;
        }
        if (this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id])) {
            this._data.update(id, { $selected: false }, true);
            this._selected = null;
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
            return true;
        }
        return false;
    };
    Selection.prototype.add = function (id) {
        if (this._selected === id || !!this.config.disabled || !this._data.exists(id)) {
            return;
        }
        this.remove();
        this._addSingle(id);
    };
    Selection.prototype.enable = function () {
        this.config.disabled = false;
    };
    Selection.prototype.disable = function () {
        this.remove();
        this.config.disabled = true;
    };
    Selection.prototype._addSingle = function (id) {
        if (this.events.fire(types_1.SelectionEvents.beforeSelect, [id])) {
            this._selected = id;
            this._data.update(id, { $selected: true }, true);
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
        }
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Navbar = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var ts_message_1 = __webpack_require__(17);
var html_1 = __webpack_require__(4);
var KeyManager_1 = __webpack_require__(21);
var view_1 = __webpack_require__(8);
var ts_data_1 = __webpack_require__(13);
var types_1 = __webpack_require__(40);
function addInGroups(groups, item) {
    if (groups[item.group]) {
        if (item.active) {
            groups[item.group].active = item.id;
        }
        groups[item.group].elements.push(item.id);
    }
    else {
        groups[item.group] = {
            active: item.active ? item.id : null,
            elements: [item.id],
        };
    }
}
var Navbar = /** @class */ (function (_super) {
    __extends(Navbar, _super);
    function Navbar(element, config) {
        var _this = 
        // super(element, extend({}, config));
        _super.call(this, element, config) || this;
        _this._isContextMenu = false;
        _this._documentHaveListener = false;
        _this.config = (0, core_1.extend)({
            rootId: (typeof element === "string" && element) || _this._uid,
        }, config);
        _this._rootItem = {};
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ rootId: _this.config.rootId }, _this.events);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ rootId: _this.config.rootId }, _this.events);
        }
        _this._documentClick = function (e) {
            if (_this._documentHaveListener) {
                var element_1 = (0, html_1.locateNode)(e);
                var root = _this.data.getRoot();
                var id = element_1 && element_1.getAttribute("data-dhx-id");
                var parent_1 = _this.data.getParent(id);
                var supportsTouch = "ontouchstart" in window || navigator.msMaxTouchPoints;
                document.removeEventListener("click", _this._documentClick);
                _this._documentHaveListener = false;
                if ((0, core_1.isId)(id) && _this._currentRoot === id)
                    return;
                if ((((supportsTouch && !element_1) || !_this._isContextMenu) &&
                    (root === parent_1 || !parent_1 || !_this.data.getItem(id))) ||
                    !parent_1 ||
                    !_this.data.getItem(id) ||
                    (_this._isContextMenu && root !== (0, html_1.locate)(e, "data-dhx-widget-id"))) {
                    _this._close(e);
                }
            }
        };
        _this._currentRoot = _this.data.getRoot();
        _this._factory = _this._getFactory();
        _this._initHandlers();
        _this._keyManager = new KeyManager_1.KeyManager(function (_, focusId) { return focusId === _this._uid; });
        _this._initEvents();
        if (Array.isArray(_this.config.data)) {
            _this.data.parse(_this.config.data);
        }
        return _this;
    }
    Navbar.prototype.paint = function () {
        _super.prototype.paint.call(this);
        if (this._isContextMenu && !this._vpopups) {
            this._init();
        }
        if (this._vpopups) {
            this._vpopups.redraw();
        }
    };
    Navbar.prototype.disable = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "disabled", true);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "disabled", true);
            });
        }
    };
    Navbar.prototype.enable = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "disabled", false);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "disabled", false);
            });
        }
    };
    Navbar.prototype.isDisabled = function (id) {
        var item = this.data.getItem(id);
        if (item) {
            return item.disabled || false;
        }
    };
    Navbar.prototype.show = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "hidden", false);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "hidden", false);
            });
        }
    };
    Navbar.prototype.hide = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "hidden", true);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "hidden", true);
            });
        }
    };
    Navbar.prototype.destructor = function () {
        this.events.clear();
        this._keyManager && this._keyManager.destructor();
        this._vpopups && !!this._vpopups.node && this._vpopups.unmount();
        this.unmount();
    };
    Navbar.prototype.select = function (id, unselect) {
        var _this = this;
        if (unselect === void 0) { unselect = true; }
        if (!(0, core_1.isId)(id)) {
            throw new Error("Function argument cannot be empty, for more info check documentation https://docs.dhtmlx.com");
        }
        unselect && this.unselect();
        this.data.update(id, { active: true });
        this.data.eachParent(id, function (parent) {
            _this.data.update(parent.id, { active: true });
        });
    };
    Navbar.prototype.unselect = function (id) {
        var _this = this;
        if (!(0, core_1.isId)(id)) {
            this.data.forEach(function (item) {
                _this.data.update(item.id, { active: false });
            });
        }
        else {
            this.data.update(id, { active: false });
            this.data.eachChild(id, function (parent) {
                _this.data.update(parent.id, { active: false });
            });
        }
    };
    Navbar.prototype.isSelected = function (id) {
        if (!(0, core_1.isId)(id) || !this.data.getItem(id)) {
            return;
        }
        return !!this.data.getItem(id).active;
    };
    Navbar.prototype.getSelected = function () {
        var selected = [];
        this.data.forEach(function (item) {
            item.active && selected.push(item.id);
        });
        return selected;
    };
    Navbar.prototype._customHandlers = function () {
        return {};
    };
    Navbar.prototype._close = function (e) {
        var _this = this;
        if (!this._popupActive || !this.events.fire(types_1.NavigationBarEvents.beforeHide, [this._activeMenu, e])) {
            return;
        }
        if (this._activeParents) {
            this._activeParents.forEach(function (parentId) { return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: false }); });
        }
        if (this.config.navigationType === "click") {
            this._isActive = false;
        }
        clearTimeout(this._currentTimeout);
        this._popupActive = false;
        this._activeMenu = null;
        !!this._vpopups.node && this._vpopups.unmount();
        this._vpopups = null;
        this.events.fire(types_1.NavigationBarEvents.afterHide, [e]);
        this.paint();
    };
    Navbar.prototype._init = function () {
        var _this = this;
        var _a;
        if (this._isContextMenu && !this._activePosition) {
            return;
        }
        var parentEl = this.getRootNode() || document.documentElement;
        var theme = (_a = parentEl === null || parentEl === void 0 ? void 0 : parentEl.closest("[data-dhx-theme]")) === null || _a === void 0 ? void 0 : _a.getAttribute("data-dhx-theme");
        var render = function () {
            var _a;
            return (0, dom_1.el)("div", {
                "data-dhx-widget-id": _this._uid,
                "data-dhx-theme": theme || "light",
                class: "dhx_".concat((_a = _this.config) === null || _a === void 0 ? void 0 : _a.$name, "--popup-menu ").concat(_this._isContextMenu ? " dhx_context-menu" : "", " ").concat(_this.config.css
                    ? _this.config.css
                        .split(" ")
                        .map(function (i) { return (_this._isContextMenu ? i : i + "--popup-menu"); })
                        .join(" ")
                    : ""),
                onmousemove: _this._handlers.onmousemove,
                onmouseleave: _this._handlers.onmouseleave,
                onclick: _this._handlers.onclick,
                onmousedown: _this._handlers.onmousedown,
                onkeydown: _this._handlers.onkeydown,
            }, _this._drawPopups());
        };
        this._vpopups = (0, dom_1.create)({
            render: render,
        });
        this._vpopups.mount(document.body);
    };
    Navbar.prototype._initHandlers = function () {
        var _this = this;
        /*
            for navigation type click:
            first click open menu, _isActive = true
            after navigation use mousemove
            can be closed after outer click or menu leaf item click
        */
        this._isActive = this.config.navigationType !== "click";
        this._handlers = __assign({ onkeydown: function (e) {
                var id = (0, html_1.locate)(e) || undefined;
                var root = (0, html_1.locateNode)(e, "data-dhx-widget-id");
                if (root.contains(document.activeElement)) {
                    _this.events.fire(types_1.NavigationBarEvents.keydown, [e, id]);
                }
            }, onmousemove: function (e) {
                if (!_this._isActive) {
                    return;
                }
                var elem = (0, html_1.locateNode)(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("data-dhx-id");
                if (_this._activeMenu !== id) {
                    if (_this.data.haveItems(id)) {
                        if (!_this._vpopups) {
                            _this._init();
                        }
                        _this._setRoot(id);
                        var position = (0, html_1.getRealPosition)(elem);
                        _this.data.update(id, { $position: position }, false);
                    }
                    _this._activeItemChange(id, e);
                }
            }, onmouseleave: function (e) {
                if (_this.config.navigationType !== "click") {
                    // maybe all time when mouse leave close menu
                    if (_this._popupActive) {
                        var element = (0, html_1.locateNode)(e, "data-dhx-id", "relatedTarget");
                        if (element) {
                            var id = element.getAttribute("data-dhx-id");
                            if (!_this.data.getItem(id)) {
                                _this._close(e);
                                _this._activeItemChange(null, e);
                            }
                            if (_this.data.haveItems(id)) {
                                if (!_this._vpopups) {
                                    _this._init();
                                }
                                var position = (0, html_1.getRealPosition)(element);
                                _this.data.update(id, { $position: position }, false);
                                _this._activeItemChange(id, e);
                            }
                        }
                        else {
                            _this._close(e);
                            _this._activeItemChange(null, e);
                        }
                    }
                    else
                        _this._activeItemChange(null, e);
                }
            }, onclick: function (e) {
                var element = (0, html_1.locateNode)(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("data-dhx-id");
                if (_this.isDisabled(id)) {
                    return;
                }
                var item = _this.data.getItem(id);
                if (item === null || item === void 0 ? void 0 : item.multiClick) {
                    return;
                }
                if (_this._currentRoot === id) {
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                    if (_this.config.navigationType === "click") {
                        _this._close(e);
                    }
                    return;
                }
                if (_this.data.haveItems(id)) {
                    if (!_this._vpopups) {
                        _this._init();
                    }
                    if (!_this._isActive) {
                        _this._isActive = true;
                    }
                    _this._setRoot(id);
                    var position = (0, html_1.getRealPosition)(element);
                    _this.data.update(id, { $position: position }, false);
                    _this._activeItemChange(id, e);
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                }
                else {
                    switch (item === null || item === void 0 ? void 0 : item.type) {
                        case "input":
                        case "title":
                            break;
                        case "menuItem":
                        case "selectButton":
                            _this._onMenuItemClick(id, e);
                            break;
                        case "imageButton":
                        case "button":
                        case "customButton":
                        case "customHTML":
                        case "navItem":
                            if (item.twoState) {
                                _this.data.update(item.id, { active: !item.active });
                            }
                            _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                            _this._close(e);
                            break;
                        default:
                            _this._close(e);
                    }
                }
            }, onmousedown: function (e) {
                var element = (0, html_1.locateNode)(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("data-dhx-id");
                var item = _this.data.getItem(id);
                if (!(item === null || item === void 0 ? void 0 : item.multiClick)) {
                    return;
                }
                var fireTime = 365;
                var timeout;
                var fireAction = function () {
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                    if (fireTime > 50) {
                        fireTime -= 55;
                    }
                    timeout = setTimeout(fireAction, fireTime);
                };
                var mouseup = function () {
                    clearTimeout(timeout);
                    document.removeEventListener("mouseup", mouseup);
                };
                fireAction();
                document.addEventListener("mouseup", mouseup);
            } }, this._customHandlers());
    };
    Navbar.prototype._initEvents = function () {
        var _this = this;
        var timeout = null;
        var handler = function () {
            _this.paint();
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(function () {
                var groups = {};
                _this.data.eachChild(_this.data.getRoot(), function (item) {
                    if (item.group) {
                        item.twoState = true;
                        addInGroups(groups, item);
                    }
                }, true);
                _this._groups = groups;
                _this._resetHotkeys();
                timeout = null;
                _this.paint();
            }, 100);
        };
        [types_1.DataEvents.change, types_1.DataEvents.filter].forEach(function (eventName) {
            _this.events.on(eventName, function () { return handler(); });
        });
        this.events.on(types_1.NavigationBarEvents.click, function (id) {
            var item = _this.data.getItem(id);
            var parent = _this.data.getItem(item === null || item === void 0 ? void 0 : item.parent);
            if (parent && parent.type === "selectButton") {
                _this.data.update(item.parent, { value: item.value, icon: item.icon });
            }
            if (item === null || item === void 0 ? void 0 : item.group) {
                var group = _this._groups[item.group];
                if (group.active) {
                    _this.data.update(group.active, { active: false });
                }
                group.active = item.id;
                _this.data.update(item.id, { active: true });
            }
        });
        this.events.on(types_1.NavigationBarEvents.inputChange, function (id, newValue) {
            _this.data.update(id, { value: newValue });
        });
        this._customInitEvents();
    };
    Navbar.prototype._getMode = function (item, root, _active) {
        if (_active === void 0) { _active = false; }
        return item.parent === root ? "bottom" : "right";
    };
    Navbar.prototype._drawMenuItems = function (id, asMenuItem) {
        var _this = this;
        if (asMenuItem === void 0) { asMenuItem = true; }
        return this.data.map(function (item) { return _this._factory(item, asMenuItem); }, id, false);
    };
    Navbar.prototype._setRoot = function (_id) {
        return; // need only for toolbar
    };
    Navbar.prototype._getParents = function (id, root) {
        var parentIds = [];
        var afterRoot = false;
        var currentItem = this.data.getItem(id);
        var disabled = currentItem && currentItem.disabled;
        this.data.eachParent(id, function (item) {
            if (item.id === root) {
                parentIds.push(item.id);
                afterRoot = true;
            }
            else if (!afterRoot) {
                parentIds.push(item.id);
            }
        }, !disabled);
        if (this._isContextMenu && this._activePosition) {
            parentIds.push(root);
        }
        return parentIds;
    };
    Navbar.prototype._listenOuterClick = function () {
        if (this._documentHaveListener) {
            return;
        }
        document.addEventListener("click", this._documentClick, true);
        this._documentHaveListener = true;
    };
    Navbar.prototype._customInitEvents = function () {
        return;
    };
    Navbar.prototype._drawPopups = function () {
        var _this = this;
        var id = this._activeMenu;
        if (!this._isContextMenu && !id) {
            return null;
        }
        var rootNode = this.getRootNode();
        var offsetParent = rootNode && rootNode.offsetParent && rootNode.offsetParent.offsetParent;
        var zIndex = (0, ts_message_1.getZIndex)(offsetParent);
        var root = this._currentRoot;
        var parentIds = this._getParents(id, root);
        this._activeParents = parentIds;
        parentIds.forEach(function (parentId) {
            return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: true }, false);
        });
        return parentIds
            .map(function (itemId) {
            if (!_this.data.haveItems(itemId)) {
                return null;
            }
            var getAriaAttrs = function (item) { return ({
                role: "menu",
                "aria-labeledby": item.id,
                "aria-live": "polite",
            }); };
            var item = _this.data.getItem(itemId) || _this._rootItem; // for root item
            _this._popupActive = true;
            return (0, dom_1.el)("ul", __assign({ class: "dhx_widget dhx_menu" + (_this.config.menuCss ? " " + _this.config.menuCss : ""), _key: itemId, _hooks: {
                    didInsert: function (vnode) {
                        var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                        var position = _this._isContextMenu && _this._activePosition && itemId === root
                            ? _this._activePosition
                            : item.$position;
                        var mode = _this._getMode(item, root, position === _this._activePosition);
                        var style = (0, html_1.calculatePosition)(position, {
                            mode: mode,
                            auto: true,
                            width: width,
                            height: height,
                        });
                        item.$style = __assign(__assign({}, style), { zIndex: _this._activePosition
                                ? _this._activePosition.zIndex || zIndex
                                : zIndex });
                        vnode.patch({ style: item.$style });
                    },
                    didRecycle: function (_, vnode) {
                        if (_this._isContextMenu && _this._activePosition && itemId === root) {
                            var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                            var style = (0, html_1.calculatePosition)(_this._activePosition, {
                                mode: _this._getMode(item, root, true),
                                width: width,
                                height: height,
                            });
                            item.$style = __assign(__assign({}, style), { zIndex: _this._activePosition.zIndex || zIndex });
                            vnode.patch({ style: item.$style });
                        }
                    },
                }, tabindex: 0, style: item.$style || {
                    position: "absolute",
                } }, getAriaAttrs(item)), _this._drawMenuItems(itemId));
        })
            .reverse();
    };
    Navbar.prototype._onMenuItemClick = function (id, e) {
        var item = this.data.getItem(id);
        if (item.disabled) {
            return;
        }
        if (item.twoState) {
            this.data.update(item.id, { active: !item.active });
        }
        this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
        this._close(e);
    };
    Navbar.prototype._activeItemChange = function (id, e) {
        var _this = this;
        if (this._activeParents) {
            var parentIds_1 = this._getParents(id, this._currentRoot);
            this._activeParents.forEach(function (parentId) {
                if (_this.data.exists(parentId) && !parentIds_1.includes(parentId)) {
                    _this.data.update(parentId, { $activeParent: false }, false);
                }
            });
        }
        if ((0, core_1.isId)(id) && !this._documentHaveListener) {
            this._listenOuterClick();
        }
        if ((0, core_1.isId)(id) && this.data.haveItems(id)) {
            if (this._activeMenu !== id || !this._popupActive) {
                this.events.fire(types_1.NavigationBarEvents.openMenu, [id]);
            }
            clearTimeout(this._currentTimeout);
            this.paint();
        }
        else {
            clearTimeout(this._currentTimeout);
            this._currentTimeout = setTimeout(function () { return _this.paint(); }, 400);
        }
        this._activeMenu = id;
    };
    Navbar.prototype._resetHotkeys = function () {
        var _this = this;
        this._keyManager.removeHotKey(null, this);
        this.data.map(function (item) {
            if (item.hotkey) {
                _this._keyManager.addHotKey(item.hotkey, function () { return _this._onMenuItemClick(item.id, null); });
            }
        });
    };
    Navbar.prototype._setProp = function (id, key, value) {
        var _a;
        var _this = this;
        if (Array.isArray(id)) {
            id.forEach(function (itemId) {
                var _a;
                return _this.data.update(itemId, (_a = {}, _a[key] = value, _a));
            });
        }
        else {
            this.data.update(id, (_a = {}, _a[key] = value, _a));
        }
    };
    return Navbar;
}(view_1.View));
exports.Navbar = Navbar;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createFactory = void 0;
var button_1 = __webpack_require__(160);
var navItem_1 = __webpack_require__(161);
var customHTMLButton_1 = __webpack_require__(162);
var imageButton_1 = __webpack_require__(163);
var input_1 = __webpack_require__(164);
var menuItem_1 = __webpack_require__(165);
var separator_1 = __webpack_require__(166);
var spacer_1 = __webpack_require__(167);
var title_1 = __webpack_require__(168);
var datePicker_1 = __webpack_require__(169);
var helpers_1 = __webpack_require__(36);
function itemfactory(item, events, widgetName, props) {
    switch (item.type) {
        case "navItem":
        case "selectButton":
            return (0, navItem_1.navItem)(item, widgetName, props.collapsed);
        case "button":
            return (0, button_1.button)(item, widgetName);
        case "title":
            return (0, title_1.title)(item, widgetName);
        case "separator":
            return (0, separator_1.separator)(item, widgetName);
        case "spacer":
            return (0, spacer_1.spacer)(item, widgetName);
        case "input":
            return (0, input_1.input)(item, events, widgetName);
        case "imageButton":
            return (0, imageButton_1.imageButton)(item, widgetName);
        case "menuItem":
            return (0, menuItem_1.menuItem)(item, widgetName, props.asMenuItem);
        case "customHTMLButton":
            return (0, customHTMLButton_1.customHTMLButton)(item, widgetName, props.asMenuItem);
        case "datePicker":
            return (0, datePicker_1.datePicker)(item, events, widgetName);
        case "block":
        default:
            throw new Error("unknown item type " + item.type);
    }
}
function normalizeOpenIcon(widgetName, item, data) {
    switch (widgetName) {
        case "sidebar":
        case "context-menu":
            item.$openIcon = "right";
            break;
        case "toolbar":
            if (item.parent === data.getRoot()) {
                item.$openIcon = "right";
            }
            else {
                item.$openIcon = "bottom";
            }
            break;
        case "menu":
            if (item.parent !== this.data.getRoot()) {
                item.$openIcon = "right";
            }
            break;
        case "ribbon": {
            var parent_1 = data.getItem(item.parent);
            if (parent_1 && item.type !== "block") {
                if (parent_1.type === "block") {
                    item.$openIcon = "bottom";
                }
                else {
                    item.$openIcon = "right";
                }
            }
            break;
        }
    }
}
function createFactory(_a) {
    var defaultType = _a.defaultType, allowedTypes = _a.allowedTypes, widgetName = _a.widgetName, widget = _a.widget;
    var allowedSet = new Set();
    for (var _i = 0, allowedTypes_1 = allowedTypes; _i < allowedTypes_1.length; _i++) {
        var type = allowedTypes_1[_i];
        allowedSet.add(type);
    }
    var config = widget.config, events = widget.events, data = widget.data;
    return function (item, asMenuItem) {
        if (item.hidden) {
            return null;
        }
        if (!item.type || item.type === "button" || item.type === "navItem" || item.type === "menuItem") {
            if (!item.value && !item.icon && !item.html) {
                return null;
            }
        }
        item.type = item.type || defaultType;
        if (allowedSet && !allowedSet.has(item.type)) {
            item.type = defaultType;
        }
        if (item.type === "imageButton" && widgetName !== "ribbon") {
            item.active = false;
        }
        if (asMenuItem && item.type !== "spacer" && item.type !== "separator" && item.type !== "customHTML") {
            item.type = "menuItem";
        }
        if (data.haveItems(item.id)) {
            normalizeOpenIcon(widgetName, item, data);
        }
        if (widgetName === "toolbar" && item.items) {
            item.items.forEach(function (element) {
                if (!element.type) {
                    element.type = "menuItem";
                }
            });
        }
        var itemVNode = item.type !== "customHTML" &&
            itemfactory(item, events, widgetName, {
                asMenuItem: asMenuItem,
                collapsed: widgetName !== "sidebar" || config.collapsed,
            });
        return (0, helpers_1.navbarComponentMixin)(widgetName, item, asMenuItem, itemVNode);
    };
}
exports.createFactory = createFactory;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.button = void 0;
var dom_1 = __webpack_require__(1);
var helpers_1 = __webpack_require__(36);
function button(item, widgetName) {
    var getAriaAttrs = function (item) {
        var isItemActivated = item.active || item.$activeParent;
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
            "aria-label": item.value || item.tooltip || item.id || "" + " ".concat(item.count || ""),
        };
        if (item.items) {
            // as menu
            attrs["id"] = item.id;
            attrs["aria-haspopup"] = "menu"; // menu has hot keys, listbox doesn't have
            if (isItemActivated) {
                attrs["aria-expanded"] = "true";
            }
        }
        return attrs;
    };
    var isIconButton = item.icon && !item.value;
    var counterClass = isIconButton ? " dhx_navbar-count--absolute" : " dhx_navbar-count--button-inline";
    return (0, dom_1.el)("button.dhx_button", __assign({ class: (0, helpers_1.getNavbarButtonCSS)(item, widgetName), "data-dhx-id": item.id, disabled: item.disabled, type: "button" }, getAriaAttrs(item)), [
        item.icon ? (0, helpers_1.getIcon)(item.icon, "button") : null,
        item.html
            ? (0, dom_1.el)("div.dhx_button__text", { ".innerHTML": item.html })
            : item.value && (0, dom_1.el)("span.dhx_button__text", item.value),
        item.count > 0 && (0, helpers_1.getCount)(item, counterClass, isIconButton),
        item.value && item.$openIcon
            ? (0, dom_1.el)("span.dhx_button__icon.dhx_button__icon--menu.dxi.dxi-menu-right", {
                "aria-hidden": "true",
            })
            : null,
        item.loading &&
            (0, dom_1.el)("span.dhx_button__loading", {
                "aria-hidden": "true",
            }, [(0, dom_1.el)("span.dhx_button__loading-icon.dxi.dxi-loading")]),
    ]);
}
exports.button = button;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.navItem = void 0;
var dom_1 = __webpack_require__(1);
var helpers_1 = __webpack_require__(36);
function navItem(item, widgetName, collapsed) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
            "aria-label": item.value || " ",
        };
        var isItemActivated = item.active || item.$activeParent;
        if (item.type === "selectButton" || item.items) {
            attrs["id"] = item.id;
            attrs["aria-haspopup"] = "menu"; // menu has hot keys, listbox doesn't have
            if (isItemActivated) {
                attrs["aria-expanded"] = "true";
            }
        }
        else {
            if (item.twoState || isItemActivated) {
                attrs["aria-pressed"] = isItemActivated ? "true" : "false";
            }
            if (!item.value && item.icon && item.tooltip) {
                attrs["aria-label"] = "".concat(item.tooltip, " ").concat(item.count || "");
            }
        }
        return attrs;
    };
    var baseClass = " dhx_" + widgetName + "-button";
    return (0, dom_1.el)("button", __assign({ class: "dhx_button" +
            baseClass +
            (item.active || item.$activeParent ? baseClass + "--active" : "") +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.$openIcon ? baseClass + "--select" : "") +
            (item.circle ? baseClass + "--circle" : "") +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.icon ? baseClass + "--icon" : "") +
            (item.css ? " " + item.css : ""), "data-dhx-id": item.id, disabled: item.disabled, type: "button" }, getAriaAttrs(item)), [
        item.icon &&
            (0, dom_1.el)("span", {
                class: item.icon + baseClass + "__icon",
                "aria-hidden": "true",
            }),
        item.html &&
            (0, dom_1.el)("div", {
                class: baseClass.trim() + "__html",
                ".innerHTML": item.html,
            }),
        !item.html &&
            item.value &&
            (0, dom_1.el)("span", {
                class: baseClass.trim() + "__text",
            }, item.value),
        item.count > 0 && (0, helpers_1.getCount)(item, baseClass + "__count", collapsed),
        item.$openIcon &&
            (0, dom_1.el)("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
                "aria-hidden": "true",
            }),
    ]);
}
exports.navItem = navItem;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customHTMLButton = void 0;
var dom_1 = __webpack_require__(1);
function customHTMLButton(item, widgetName, asMenuItem) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.twoState || item.active || item.$activeParent) {
            attrs["aria-pressed"] = item.active || item.$activeParent ? "true" : "false";
        }
        return attrs;
    };
    var baseClass = asMenuItem ? " dhx_button dhx_menu-button" : " dhx_button dhx_nav-menu-button";
    return (0, dom_1.el)("button", __assign({ class: "dhx_custom-button" + baseClass + (item.$activeParent ? baseClass + "--active" : ""), "data-dhx-id": item.id, type: "button", ".innerHTML": item.html }, getAriaAttrs(item)), item.html ? "" : item.value);
}
exports.customHTMLButton = customHTMLButton;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageButton = void 0;
var dom_1 = __webpack_require__(1);
var helpers_1 = __webpack_require__(36);
function imageButton(item, widgetName) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.twoState || item.active) {
            attrs["aria-pressed"] = item.active ? "true" : "false";
        }
        if (!item.value && item.src && item.tooltip) {
            attrs["aria-label"] = "".concat(item.tooltip, " ").concat(item.count || "");
        }
        return attrs;
    };
    var baseClass = "dhx_" + widgetName + "-button-image";
    var isRibbon = widgetName === "ribbon";
    return (0, dom_1.el)("button.dhx_button", __assign({ class: baseClass +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.src ? " " + baseClass + "--icon" : "") +
            (isRibbon && item.$openIcon ? " " + baseClass + "--select" : "") +
            (item.active ? " " + baseClass + "--active" : ""), "data-dhx-id": item.id, type: "button" }, getAriaAttrs(item)), [
        isRibbon &&
            item.value &&
            item.$openIcon &&
            (0, dom_1.el)("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
                "aria-hidden": "true",
            }),
        item.html
            ? (0, dom_1.el)("div", {
                class: baseClass + "__text",
                ".innerHTML": item.html,
            })
            : item.value &&
                (0, dom_1.el)("span", {
                    class: baseClass + "__text",
                }, item.value),
        item.src &&
            (0, dom_1.el)("span", {
                class: baseClass + "__image",
                style: { backgroundImage: "url(".concat(item.src, ")") },
                role: "presentation",
            }),
        item.count > 0 && (0, helpers_1.getCount)(item, baseClass + "__count", true),
    ]);
}
exports.imageButton = imageButton;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.input = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(40);
function onBlur(events, id) {
    events.fire(types_1.NavigationBarEvents.inputBlur, [id]);
}
function onFocus(events, id) {
    events.fire(types_1.NavigationBarEvents.inputFocus, [id]);
}
function onChange(events, id, e) {
    events.fire(types_1.NavigationBarEvents.inputChange, [id, e.target.value]);
}
function input(item, events, widgetName) {
    return (0, dom_1.el)(".dhx_form-group.dhx_form-group--no-message-holder" +
        (item.hiddenLabel ? ".dhx_form-group--label_sr" : ".dhx_form-group--inline") +
        ".dhx_".concat(widgetName, "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
        role: "presentation",
    }, [
        item.label &&
            (0, dom_1.el)("label.dhx_label", {
                for: item.id,
                style: {
                    maxWidth: item.hiddenLabel ? null : "100%",
                },
            }, item.label),
        (0, dom_1.el)(".dhx_input__wrapper", {
            role: "presentation",
        }, [
            (0, dom_1.el)("input.dhx_input", {
                id: item.id,
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                autocomplete: item.autocomplete ? "on" : "off",
                value: item.value,
                disabled: item.disabled,
                onblur: [onBlur, events, item.id],
                onfocus: [onFocus, events, item.id],
                onchange: [onChange, events, item.id],
                "data-dhx-id": item.id,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
                "aria-label": item.label ||
                    item.helpMessage ||
                    "type ".concat(item.placeholder ? "text like " + item.placeholder : "text"),
            }),
            item.icon
                ? (0, dom_1.el)(".dhx_input__icon", {
                    class: item.icon,
                    "aria-hidden": "true",
                })
                : null,
        ]),
    ]);
}
exports.input = input;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuItem = void 0;
var dom_1 = __webpack_require__(1);
var helpers_1 = __webpack_require__(36);
var core_1 = __webpack_require__(0);
function menuItem(item, widgetName, asMenuItem) {
    var getAriaAttrs = function (item) {
        var attrs = {
            role: "menuitem",
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.items) {
            attrs["aria-haspopup"] = "true";
        }
        return attrs;
    };
    var baseClass = asMenuItem ? " dhx_menu-button" : " dhx_nav-menu-button";
    var isCount = (0, core_1.isDefined)(item.count);
    return (0, dom_1.el)("button", __assign({ class: "dhx_button" +
            baseClass +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.active || item.$activeParent ? baseClass + "--active" : ""), disabled: item.disabled, "data-dhx-id": item.id, type: "button" }, getAriaAttrs(item)), asMenuItem
        ? [
            item.icon || item.value || item.html
                ? (0, dom_1.el)("span.dhx_menu-button__block.dhx_menu-button__block--left", [
                    item.icon &&
                        (0, dom_1.el)("span.dhx_menu-button__icon", {
                            class: item.icon,
                        }),
                    item.html
                        ? (0, dom_1.el)("div.dhx_menu-button__text", { ".innerHTML": item.html })
                        : item.value && (0, dom_1.el)("span.dhx_menu-button__text", item.value),
                ])
                : null,
            isCount || item.hotkey || item.items
                ? (0, dom_1.el)("span.dhx_menu-button__block.dhx_menu-button__block--right", [
                    isCount && (0, helpers_1.getCount)(item, " dhx_menu-button__count", false),
                    item.hotkey && (0, dom_1.el)("span.dhx_menu-button__hotkey", item.hotkey),
                    item.items && (0, dom_1.el)("span.dhx_menu-button__caret.dxi.dxi-menu-right"),
                ])
                : null,
        ]
        : [
            item.icon &&
                (0, dom_1.el)("span.dhx_menu-button__icon", {
                    class: item.icon,
                }),
            item.html
                ? (0, dom_1.el)("div.dhx_menu-button__text", { ".innerHTML": item.html })
                : item.value && (0, dom_1.el)("span.dhx_nav-menu-button__text", item.value),
            isCount && (0, helpers_1.getCount)(item, " dhx_menu-button__count", false),
        ]);
}
exports.menuItem = menuItem;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.separator = void 0;
function separator(item, widgetName) {
    return null;
}
exports.separator = separator;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.spacer = void 0;
function spacer(item, widgetName) {
    return null;
}
exports.spacer = spacer;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.title = void 0;
var dom_1 = __webpack_require__(1);
function title(item, widgetName) {
    return (0, dom_1.el)("span", {
        class: "dhx_navbar-title" + " dhx_navbar-title--" + widgetName,
        "data-dhx-id": item.id,
        ".innerHTML": item.html,
        "aria-label": item.value || "", // without label span is not accessible
    }, !item.html ? item.value : null);
}
exports.title = title;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.datePicker = void 0;
var dom_1 = __webpack_require__(1);
var ts_calendar_1 = __webpack_require__(38);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(40);
var date_1 = __webpack_require__(18);
var html_1 = __webpack_require__(4);
function onBlur(events, item, e) {
    var element = e.target;
    if (element) {
        element.value = item.$calendar.getValue();
    }
    events.fire(types_1.NavigationBarEvents.inputBlur, [item === null || item === void 0 ? void 0 : item.id]);
}
function onFocus(events, item, e) {
    (0, dom_1.awaitRedraw)().then(function () { return item.$popup.show(e.target, { theme: e.target }); });
    events.fire(types_1.NavigationBarEvents.inputFocus, [item === null || item === void 0 ? void 0 : item.id]);
}
function onInput(item, events, e) {
    var stringDate = e.target.value;
    var dateFormat = item.$calendar.config.dateFormat;
    if (!stringDate.length) {
        item.$calendar.clear();
    }
    else if ((0, date_1.stringToDate)(stringDate, dateFormat, true)) {
        item.$calendar.setValue((0, date_1.stringToDate)(stringDate, dateFormat));
    }
    events.fire(types_1.NavigationBarEvents.input, [(0, html_1.locate)(e), stringDate]);
    return false;
}
function datePicker(item, events, widgetName) {
    if (!item.$popup) {
        item.$popup = new ts_popup_1.Popup();
    }
    if (!item.$calendar) {
        item.$calendar = new ts_calendar_1.Calendar(null, __assign(__assign({}, item), { css: "dhx_widget--bordered" }));
        item.$popup.attach(item.$calendar);
        item.$calendar.events.on("change", function (_date, _oldDate, byClick) {
            var _a;
            if (byClick && item.$popup.isVisible()) {
                item.$popup.hide();
            }
            var asDate = ((_a = item.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "date";
            events.fire(types_1.NavigationBarEvents.inputChange, [item.id, item.$calendar.getValue(asDate)]);
        });
    }
    var value = item.$calendar.getValue();
    if (item.mode && item.mode !== "calendar") {
        item.$calendar.showDate(undefined, item.mode);
    }
    return (0, dom_1.el)(".dhx_form-group.dhx_form-group--no-message-holder" +
        (item.hiddenLabel ? ".dhx_form-group--label_sr" : ".dhx_form-group--inline") +
        ".dhx_".concat(widgetName, "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
        role: "presentation",
    }, [
        item.label &&
            (0, dom_1.el)("label.dhx_label", {
                for: item.id,
                style: {
                    maxWidth: item.hiddenLabel ? null : "100%",
                },
            }, item.label),
        (0, dom_1.el)(".dhx_input__wrapper", {
            role: "presentation",
        }, [
            (0, dom_1.el)("input.dhx_input", {
                id: item.id,
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                value: value,
                disabled: item.disabled,
                onblur: [onBlur, events, item],
                onfocus: [onFocus, events, item],
                oninput: [onInput, item, events],
                "data-dhx-id": item.id,
                readOnly: item.editable !== true,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
                "aria-label": item.label ||
                    item.helpMessage ||
                    "type ".concat(item.placeholder ? "text like " + item.placeholder : "text"),
            }),
            item.icon
                ? (0, dom_1.el)(".dhx_input__icon", {
                    class: item.icon,
                    "aria-hidden": "true",
                })
                : null,
        ]),
    ]);
}
exports.datePicker = datePicker;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProToolbar = void 0;
var Toolbar_1 = __webpack_require__(85);
var ScrollView_1 = __webpack_require__(35);
var dom_1 = __webpack_require__(1);
var html_1 = __webpack_require__(4);
var ts_message_1 = __webpack_require__(17);
var ProToolbar = /** @class */ (function (_super) {
    __extends(ProToolbar, _super);
    function ProToolbar(element, config) {
        var _this = _super.call(this, element, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        return _this;
    }
    ProToolbar.prototype._draw = function (element) {
        var _this = this;
        var getAriaAttrs = function (element) { return ({
            role: "toolbar",
            "aria-label": element || "",
        }); };
        var toolbarHeight = this.data.getLength()
            ? this.data.reduce(function (result, item) {
                switch (item.type) {
                    case "title":
                        return !result ? 20 : result;
                    case "button":
                        return item.size === "small" && (!result || result <= 28) ? 28 : result || 32;
                    default:
                        return 32;
                }
            }, 0) + 24
            : null;
        var navBar = [
            (0, dom_1.el)("ul.dhx_navbar.dhx_navbar--horizontal", __assign(__assign({ "data-dhx-widget-id": this._uid, tabindex: 0 }, getAriaAttrs(element)), { onclick: this._handlers.onclick, onmousedown: this._handlers.onmousedown, oninput: this._handlers.input, onmouseover: this._handlers.tooltip, onkeydown: this._handlers.onkeydown, onmousemove: this._handlers.onmousemove, onmouseleave: this._handlers.onmouseleave, _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = (0, html_1.locateNode)(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("data-dhx-id");
                            var item = _this.data.getItem(id);
                            if (item === null || item === void 0 ? void 0 : item.tooltip) {
                                (0, ts_message_1.tooltip)(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                } }), this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ];
        return (0, dom_1.el)("nav.dhx_widget.dhx_toolbar", {
            style: { height: toolbarHeight },
            class: this.config.css ? this.config.css : "",
        }, this.scrollView && this.scrollView.config.enable
            ? [].concat(this.scrollView.render(navBar))
            : navBar);
    };
    return ProToolbar;
}(Toolbar_1.Toolbar));
exports.ProToolbar = ProToolbar;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(172), exports);
__exportStar(__webpack_require__(173), exports);


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenu = void 0;
var core_1 = __webpack_require__(0);
var html_1 = __webpack_require__(4);
var ts_message_1 = __webpack_require__(17);
var ts_navbar_1 = __webpack_require__(23);
var ContextMenu = /** @class */ (function (_super) {
    __extends(ContextMenu, _super);
    function ContextMenu(element, config) {
        var _this = _super.call(this, element, (0, core_1.extend)({
            $name: "context-menu",
        }, config)) || this;
        _this._isContextMenu = true;
        return _this;
    }
    ContextMenu.prototype.showAt = function (elem, showAt) {
        if (showAt === void 0) { showAt = "bottom"; }
        if (elem instanceof MouseEvent) {
            this._close(elem);
            this._changeActivePosition({
                left: window.pageXOffset + elem.x + 1,
                right: window.pageXOffset + elem.x + 1,
                top: window.pageYOffset + elem.y,
                bottom: window.pageYOffset + elem.y,
                zIndex: (0, ts_message_1.getZIndex)(elem.target),
            }, showAt);
        }
        else if (window.TouchEvent && elem instanceof TouchEvent) {
            this._close(elem);
            this._changeActivePosition({
                left: window.pageXOffset + elem.touches[0].clientX,
                right: window.pageXOffset + elem.touches[0].clientX,
                top: window.pageYOffset + elem.touches[0].clientY,
                bottom: window.pageYOffset + elem.touches[0].clientY,
                zIndex: (0, ts_message_1.getZIndex)(elem.target),
            }, showAt);
        }
        else if (elem instanceof HTMLElement || typeof elem === "string") {
            var node = (0, html_1.toNode)(elem);
            this._changeActivePosition((0, html_1.getRealPosition)(node), showAt);
        }
    };
    ContextMenu.prototype._getFactory = function () {
        return (0, ts_navbar_1.createFactory)({
            widget: this,
            defaultType: "menuItem",
            allowedTypes: [
                "menuItem",
                "spacer",
                "separator",
                "customHTML",
                // TODO: deprecated
                "customHTMLButton",
            ],
            widgetName: "context-menu",
        });
    };
    ContextMenu.prototype._close = function (e) {
        var _this = this;
        this.events.on(ts_navbar_1.NavigationBarEvents.afterHide, function () {
            _this._activeMenu = null;
            _this._changeActivePosition(null, null);
        });
        _super.prototype._close.call(this, e);
    };
    ContextMenu.prototype._getMode = function (_item, _root, active) {
        return active ? this._mode : "right";
    };
    ContextMenu.prototype._changeActivePosition = function (position, mode) {
        this._activePosition = position;
        this._mode = mode;
        this._listenOuterClick();
        this.paint();
    };
    return ContextMenu;
}(ts_navbar_1.Navbar));
exports.ContextMenu = ContextMenu;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var ts_navbar_1 = __webpack_require__(23);
var Menu = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu(element, config) {
        var _this = _super.call(this, element, (0, core_1.extend)({
            $name: "menu",
        }, config)) || this;
        var render = function () { return _this._draw(); };
        _this.mount(element, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Menu.prototype._getFactory = function () {
        return (0, ts_navbar_1.createFactory)({
            widget: this,
            defaultType: "menuItem",
            allowedTypes: ["menuItem", "spacer", "separator", "customHTML", "customHTMLButton"],
            widgetName: "menu-nav",
        });
    };
    Menu.prototype._getMode = function (item, root) {
        return item.id === root ? "bottom" : "right";
    };
    Menu.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Menu.prototype._setRoot = function (id) {
        if (this.data.getParent(id) === this.data.getRoot()) {
            this._currentRoot = id;
        }
    };
    Menu.prototype._draw = function () {
        return (0, dom_1.el)("ul.dhx_widget", {
            "data-dhx-widget-id": this._uid,
            onmousemove: this._handlers.onmousemove,
            onmouseleave: this._handlers.onmouseleave,
            onclick: this._handlers.onclick,
            onmousedown: this._handlers.onmousedown,
            onkeydown: this._handlers.onkeydown,
            class: "dhx_menu-nav " + (this.config.css ? this.config.css : ""),
        }, this._drawMenuItems(this.data.getRoot(), false));
    };
    return Menu;
}(ts_navbar_1.Navbar));
exports.Menu = Menu;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddColumn = void 0;
var main_1 = __webpack_require__(2);
var actions_1 = __webpack_require__(29);
var AddColumn = /** @class */ (function () {
    function AddColumn(config) {
        var _a;
        this.config = config;
        this._sheetName = (_a = config.spreadsheet) === null || _a === void 0 ? void 0 : _a.getActiveSheet().name;
    }
    AddColumn.prototype.do = function () {
        var _a = this.config, cell = _a.cell, dataStore = _a.dataStore, spreadsheet = _a.spreadsheet, grid = _a.grid;
        if (!cell)
            return;
        if (!this._index) {
            this._index = (0, main_1.getCellIndex)(cell, grid).col - 1;
        }
        var activePage = dataStore.getPage(this._sheetName);
        activePage.addColumn(this._index, 1);
        var _b = activePage.getMeta(), cols = _b.cols, _c = _b.merged, merged = _c === void 0 ? [] : _c;
        this._prev = { cols: __spreadArray([], cols, true) };
        var colsBefore = cols.slice(0, this._index);
        var colsAfter = cols.slice(this._index);
        activePage.setMeta({ cols: __spreadArray(__spreadArray(__spreadArray([], colsBefore, true), [{ width: 120 }], false), colsAfter, true) });
        spreadsheet._updateGridSizes();
        var spans = (0, actions_1.updateSpans)(1, 0, this._index, activePage);
        if (spans) {
            this._prev.merged = __spreadArray([], merged, true);
            spreadsheet._updateGridState();
        }
    };
    AddColumn.prototype.undo = function () {
        var _a = this.config, dataStore = _a.dataStore, spreadsheet = _a.spreadsheet;
        var activePage = dataStore.getPage(this._sheetName);
        activePage.removeColumn(this._index, 1);
        activePage.setMeta(this._prev);
        spreadsheet._updateGridSizes();
        if (this._prev.merged) {
            spreadsheet._updateGridState();
        }
    };
    return AddColumn;
}());
exports.AddColumn = AddColumn;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddRow = void 0;
var main_1 = __webpack_require__(2);
var actions_1 = __webpack_require__(29);
var AddRow = /** @class */ (function () {
    function AddRow(config) {
        var _a;
        this.config = config;
        this._sheetName = (_a = config.spreadsheet) === null || _a === void 0 ? void 0 : _a.getActiveSheet().name;
    }
    AddRow.prototype.do = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid, dataStore = _a.dataStore, spreadsheet = _a.spreadsheet;
        if (!cell)
            return;
        if (!this._index) {
            this._index = (0, main_1.getCellIds)(cell, grid).row;
        }
        var activePage = dataStore.getPage(this._sheetName);
        activePage.addRow(this._index, 1);
        var _b = activePage.getMeta(), rows = _b.rows, _c = _b.merged, merged = _c === void 0 ? [] : _c;
        this._prev = { rows: __spreadArray([], rows, true) };
        var rowsBefore = rows.slice(0, this._index);
        var rowsAfter = rows.slice(this._index);
        activePage.setMeta({
            rows: __spreadArray(__spreadArray(__spreadArray([], rowsBefore, true), [{ height: grid === null || grid === void 0 ? void 0 : grid.config.rowHeight }], false), rowsAfter, true),
        });
        spreadsheet._updateGridSizes();
        var spans = (0, actions_1.updateSpans)(0, 1, this._index, activePage);
        if (spans) {
            this._prev.merged = __spreadArray([], merged, true);
            spreadsheet._updateGridState();
        }
    };
    AddRow.prototype.undo = function () {
        var _a = this.config, dataStore = _a.dataStore, spreadsheet = _a.spreadsheet;
        var activePage = dataStore.getPage(this._sheetName);
        activePage.removeRow(this._index, 1);
        activePage.setMeta(this._prev);
        spreadsheet._updateGridSizes();
        if (this._prev.merged) {
            spreadsheet._updateGridState();
        }
    };
    return AddRow;
}());
exports.AddRow = AddRow;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AddSheet = void 0;
var types_1 = __webpack_require__(6);
var AddSheet = /** @class */ (function () {
    function AddSheet(config) {
        this.config = config;
        this._store = config.dataStore;
    }
    AddSheet.prototype.do = function () {
        var _a = this.config, sheets = _a.sheets, val = _a.val;
        if (sheets.find(function (i) { return i.value === val; }))
            return;
        this._store.addPage(val);
        var cols = [];
        var rows = [];
        for (var i = 0; i < this.config.spreadsheet.config.colsCount; i++) {
            cols.push({ width: 120 });
        }
        for (var i = 0; i < this.config.spreadsheet.config.rowsCount; i++) {
            rows.push({ height: this.config.spreadsheet._grid.config.rowHeight });
        }
        this._store.getPage(val).setMeta({ focusedCell: { cell: "A1" }, selectedCells: ["A1"], cols: cols, rows: rows });
        var currentSheetId = this.config.spreadsheet.getActiveSheet().id;
        var currentSheetIndex = sheets.getIndex(currentSheetId);
        this._id = sheets.add({ value: val, id: this._id || null }, currentSheetIndex + 1);
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterSheetAdd, [{ name: val, id: this._id }]);
        this.config.id = this._id;
        this.config.spreadsheet._changeSheet(this._id);
        this.config.grid.paint();
    };
    AddSheet.prototype.undo = function () {
        this._store.removePage(this.config.val);
        this.config.sheets.remove(this._id);
        this.config.spreadsheet._changeSheet(this.config.prev);
    };
    return AddSheet;
}());
exports.AddSheet = AddSheet;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteColumn = void 0;
var main_1 = __webpack_require__(2);
var actions_1 = __webpack_require__(29);
var en_1 = __webpack_require__(11);
var DeleteColumn = /** @class */ (function () {
    function DeleteColumn(config) {
        var _a;
        this.config = config;
        this._sheetName = (_a = config.spreadsheet) === null || _a === void 0 ? void 0 : _a.getActiveSheet().name;
    }
    DeleteColumn.prototype.do = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid, spreadsheet = _a.spreadsheet, dataStore = _a.dataStore;
        if (!cell)
            return;
        var col = (0, main_1.getCellIds)(cell, grid).col;
        if (!this._index) {
            this._index = col;
        }
        var activePage = dataStore.getPage(this._sheetName);
        var _b = activePage.getMeta(), cols = _b.cols, merged = _b.merged;
        if (cols.length === 1) {
            return (0, main_1.showAlert)(en_1.default.removeAlert.replace("$name", en_1.default.col));
        }
        var rowCount = activePage.getSize()[0];
        this._cells = activePage.getCellRange(0, col, rowCount - 1, col);
        activePage.removeColumn(this._index, 1);
        this._prev = { cols: __spreadArray([], cols, true) };
        var colsBefore = cols.slice(0, this._index);
        var colsAfter = cols.slice(this._index + 1);
        var newMetaCols = __spreadArray(__spreadArray([], colsBefore, true), colsAfter, true);
        activePage.setMeta({ cols: newMetaCols });
        var spans = (0, actions_1.updateSpans)(-1, 0, this._index, activePage);
        spreadsheet._updateGridSizes();
        if (spans) {
            this._prev.merged = __spreadArray([], merged, true);
            spreadsheet._updateGridState();
        }
    };
    DeleteColumn.prototype.undo = function () {
        var _a = this.config, dataStore = _a.dataStore, spreadsheet = _a.spreadsheet;
        var activePage = dataStore.getPage(this._sheetName);
        activePage.addColumn(this._index, 1);
        for (var i = 0; i < this._cells.length; i++) {
            if (this._cells[i]) {
                activePage.setCell(i, this._index, this._cells[i]);
            }
        }
        activePage.setMeta(this._prev);
        spreadsheet._updateGridSizes();
        if (this._prev.merged) {
            spreadsheet._updateGridState();
        }
    };
    return DeleteColumn;
}());
exports.DeleteColumn = DeleteColumn;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteRow = void 0;
var main_1 = __webpack_require__(2);
var actions_1 = __webpack_require__(29);
var en_1 = __webpack_require__(11);
var DeleteRow = /** @class */ (function () {
    function DeleteRow(config) {
        var _a;
        this.config = config;
        this._sheetName = (_a = config.spreadsheet) === null || _a === void 0 ? void 0 : _a.getActiveSheet().name;
    }
    DeleteRow.prototype.do = function () {
        var _a = this.config, cell = _a.cell, dataStore = _a.dataStore, grid = _a.grid, spreadsheet = _a.spreadsheet;
        if (!cell)
            return;
        var row = (0, main_1.getCellIds)(cell, grid).row;
        if (!this._row) {
            this._row = row;
        }
        var activePage = dataStore.getPage(this._sheetName);
        var collCount = activePage.getSize()[1];
        this._cells = activePage.getCellRange(row, 0, row, collCount - 1);
        activePage.removeRow(this._row, 1);
        var _b = activePage.getMeta(), rows = _b.rows, _c = _b.merged, merged = _c === void 0 ? [] : _c;
        if (rows.length === 1) {
            return (0, main_1.showAlert)(en_1.default.removeAlert.replace("$name", en_1.default.row));
        }
        this._prev = { rows: __spreadArray([], rows, true) };
        var colsBefore = rows.slice(0, this._row);
        var colsAfter = rows.slice(this._row + 1);
        var newMetaRows = __spreadArray(__spreadArray([], colsBefore, true), colsAfter, true);
        activePage.setMeta({ rows: newMetaRows });
        spreadsheet._updateGridSizes();
        var spans = (0, actions_1.updateSpans)(0, -1, this._row, activePage);
        if (spans) {
            this._prev.merged = __spreadArray([], merged, true);
            spreadsheet._updateGridState();
        }
    };
    DeleteRow.prototype.undo = function () {
        var _a = this.config, dataStore = _a.dataStore, spreadsheet = _a.spreadsheet;
        var activePage = dataStore.getPage(this._sheetName);
        activePage.addRow(this._row, 1);
        for (var i = 0; i < this._cells.length; i++) {
            if (this._cells[i]) {
                activePage.setCell(this._row, i, this._cells[i]);
            }
        }
        activePage.setMeta(this._prev);
        spreadsheet._updateGridSizes();
        if (this._prev.merged) {
            spreadsheet._updateGridState();
        }
    };
    return DeleteRow;
}());
exports.DeleteRow = DeleteRow;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteSheet = void 0;
var DeleteSheet = /** @class */ (function () {
    function DeleteSheet(config) {
        this.config = config;
        this._store = config.dataStore;
        this._deletedSheet = __assign({}, config.sheets.getItem(config.prev));
    }
    DeleteSheet.prototype.do = function () {
        var _a = this.config, sheets = _a.sheets, spreadsheet = _a.spreadsheet, val = _a.val;
        var page = this._store.getPage(val);
        this._data = page ? page.serialize(true) : [];
        this._sheetMeta = page ? page.getMeta() : {};
        this._store.removePage(val);
        var index = (this._index = sheets.getIndex(this._deletedSheet.id));
        if (val === spreadsheet.getActiveSheet().name) {
            spreadsheet._changeSheet(sheets.getId(index === 1 ? index + 1 : index - 1));
        }
        sheets.remove(this._deletedSheet.id);
        this.config.grid.paint();
    };
    DeleteSheet.prototype.undo = function () {
        var _a = this.config, sheets = _a.sheets, spreadsheet = _a.spreadsheet, val = _a.val;
        this._store.addPage(val);
        sheets.add(this._deletedSheet, this._index);
        var page = this._store.getPage(val);
        page.setMeta(this._sheetMeta);
        page.parse(this._data);
        this._store.getStore().recalculate(true, page.getContext());
        spreadsheet._changeSheet(this._deletedSheet.id);
        this.config.grid.paint();
    };
    return DeleteSheet;
}());
exports.DeleteSheet = DeleteSheet;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupAction = void 0;
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var ActionsManager_1 = __webpack_require__(41);
var GroupAction = /** @class */ (function () {
    function GroupAction(config) {
        this.config = config;
        this._actions = [];
    }
    GroupAction.prototype.do = function () {
        var _this = this;
        var _a = this.config, spreadsheet = _a.spreadsheet, grid = _a.grid, command = _a.action;
        var events = spreadsheet.events;
        if (!this._actions.length) {
            var val_1 = this.config.val;
            var valueIndex_1 = 0;
            if (Array.isArray(val_1)) {
                val_1 = val_1[valueIndex_1];
            }
            if (!events.fire(types_1.SpreadsheetEvents.beforeAction, [command, (0, main_1.cleanActionConfig)(this.config)]))
                return;
            spreadsheet.eachCell(function (cell) {
                var _a = (0, main_1.getCellIds)(cell, grid), row = _a.row, col = _a.col;
                if (grid === null || grid === void 0 ? void 0 : grid.isRowHidden(row + 1))
                    return;
                var newCell = (0, main_1.getCellIds)(cell, grid);
                var action = new ActionsManager_1.actions[_this.config.action](__assign(__assign({}, _this.config), { row: row || newCell.row, col: col || newCell.col, cell: cell, val: val_1 }));
                _this._actions.push(action);
                if (Array.isArray(_this.config.val)) {
                    if (valueIndex_1 + 1 >= _this.config.val.length) {
                        valueIndex_1 = 0;
                    }
                    else {
                        valueIndex_1 += 1;
                    }
                    val_1 = _this.config.val[valueIndex_1];
                }
            }, this.config.cell);
        }
        for (var _i = 0, _b = this._actions; _i < _b.length; _i++) {
            var action = _b[_i];
            action.do();
        }
        events.fire(types_1.SpreadsheetEvents.afterAction, [command, (0, main_1.cleanActionConfig)(this.config)]);
    };
    GroupAction.prototype.undo = function () {
        var _a = this.config, spreadsheet = _a.spreadsheet, command = _a.action;
        var events = spreadsheet.events;
        if (!events.fire(types_1.SpreadsheetEvents.beforeAction, [command, (0, main_1.cleanActionConfig)(this.config)]))
            return;
        for (var _i = 0, _b = this._actions; _i < _b.length; _i++) {
            var action = _b[_i];
            action.undo();
        }
        var firstCell = this.config.cell.split(":")[0];
        setTimeout(function () {
            spreadsheet.selection.setSelectedCell(firstCell, false);
        });
        events.fire(types_1.SpreadsheetEvents.afterAction, [command, (0, main_1.cleanActionConfig)(this.config)]);
    };
    return GroupAction;
}());
exports.GroupAction = GroupAction;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupColAction = void 0;
var main_1 = __webpack_require__(2);
var ActionsManager_1 = __webpack_require__(41);
var GroupColAction = /** @class */ (function () {
    function GroupColAction(config) {
        this.config = config;
        this._actions = [];
    }
    GroupColAction.prototype.do = function () {
        var _this = this;
        var _a = this.config, spreadsheet = _a.spreadsheet, grid = _a.grid, cell = _a.cell;
        if (!this._actions.length) {
            var id = (0, main_1.getCellIds)(cell, grid);
            var startRow_1 = id.start.row;
            var firstCell_1 = cell.split(":")[0];
            spreadsheet.eachCell(function (cell) {
                var _a = (0, main_1.getCellIds)(cell, grid), row = _a.row, col = _a.col;
                if (row === startRow_1) {
                    var action = new ActionsManager_1.actions[_this.config.action](__assign(__assign({}, _this.config), { row: row, col: col, cell: firstCell_1 }));
                    _this._actions.push(action);
                }
            }, this.config.cell);
        }
        for (var i = this._actions.length - 1; i >= 0; i--) {
            this._actions[i].do();
        }
    };
    GroupColAction.prototype.undo = function () {
        for (var i = 0; i < this._actions.length; i++) {
            this._actions[i].undo();
        }
    };
    return GroupColAction;
}());
exports.GroupColAction = GroupColAction;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupRowAction = void 0;
var main_1 = __webpack_require__(2);
var ActionsManager_1 = __webpack_require__(41);
var GroupRowAction = /** @class */ (function () {
    function GroupRowAction(config) {
        this.config = config;
        this._actions = [];
    }
    GroupRowAction.prototype.do = function () {
        var _this = this;
        var _a = this.config, cell = _a.cell, grid = _a.grid, spreadsheet = _a.spreadsheet;
        if (!this._actions.length) {
            var id = (0, main_1.getCellIds)(cell, grid);
            var startCol_1 = id.start.col;
            var firstCell_1 = cell.split(":")[0];
            spreadsheet.eachCell(function (cell) {
                var _a = (0, main_1.getCellIds)(cell, grid), row = _a.row, col = _a.col;
                if (col === startCol_1) {
                    var action = new ActionsManager_1.actions[_this.config.action](__assign(__assign({}, _this.config), { row: row, col: col, cell: firstCell_1 }));
                    _this._actions.push(action);
                }
            }, this.config.cell);
        }
        for (var i = this._actions.length - 1; i >= 0; i--) {
            this._actions[i].do();
        }
    };
    GroupRowAction.prototype.undo = function () {
        for (var i = this._actions.length - 1; i >= 0; i--) {
            this._actions[i].undo();
        }
    };
    return GroupRowAction;
}());
exports.GroupRowAction = GroupRowAction;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LockCell = void 0;
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var LockCell = /** @class */ (function () {
    function LockCell(config) {
        this.config = config;
        this._store = config.dataStore;
        this._page = config.page;
    }
    LockCell.prototype.do = function () {
        var _a = this.config, val = _a.val, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        this._page.setCell(row, col, { locked: val });
        if (val) {
            this.config.editLine.lock();
        }
        else {
            this.config.editLine.unlock();
        }
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterFocusSet, [cell]);
    };
    LockCell.prototype.undo = function () {
        var _a = this.config, val = _a.val, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        this._page.setCell(row, col, { locked: !val });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterFocusSet, [cell]);
        if (val) {
            this.config.editLine.unlock();
        }
        else {
            this.config.editLine.lock();
        }
    };
    return LockCell;
}());
exports.LockCell = LockCell;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveCellStyles = void 0;
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var RemoveCellStyles = /** @class */ (function () {
    function RemoveCellStyles(config) {
        this.config = config;
        this._page = config.page;
    }
    RemoveCellStyles.prototype.do = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        var cellInfo = (0, main_1.getCellInfo)(cell, this._page, grid);
        if (cellInfo.locked) {
            return;
        }
        this.config.prev = cellInfo.css;
        this._page.setCell(row, col, { css: "" });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterStyleChange, [cell, {}]);
        this.config.grid.paint();
    };
    RemoveCellStyles.prototype.undo = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        var cellInfo = (0, main_1.getCellInfo)(cell, this._page, grid);
        if (cellInfo.locked) {
            return;
        }
        this._page.setCell(row, col, { css: this.config.prev });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterStyleChange, [cell, {}]);
    };
    return RemoveCellStyles;
}());
exports.RemoveCellStyles = RemoveCellStyles;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RenameSheet = void 0;
var RenameSheet = /** @class */ (function () {
    function RenameSheet(config) {
        this.config = config;
        this.page = config.activePage;
    }
    RenameSheet.prototype.do = function () {
        var _a = this.config, sheets = _a.sheets, dataStore = _a.dataStore, val = _a.val, prev = _a.prev;
        var item = sheets.getItem(prev);
        var activeSheet = this.config.spreadsheet.getActiveSheet().name;
        if (!item.prevValue) {
            sheets.update(item.id, { prevValue: item.value });
        }
        if (activeSheet === item.prevValue) {
            this.config.spreadsheet._activeSheetName = { name: val, id: item.id };
        }
        dataStore.renamePage(item.prevValue, val);
        sheets.update(prev, { value: val, prevValue: item.prevValue });
        this.config.grid.paint();
        this.config.spreadsheet.selection.setFocusedCell(this.config.spreadsheet.selection.getFocusedCell(), false);
    };
    RenameSheet.prototype.undo = function () {
        var _a = this.config, sheets = _a.sheets, dataStore = _a.dataStore, val = _a.val, prev = _a.prev;
        var item = sheets.getItem(prev);
        dataStore.renamePage(val, item.prevValue);
        var activeSheet = this.config.spreadsheet.getActiveSheet().name;
        if (activeSheet === val) {
            this.config.spreadsheet._activeSheetName = { name: val, id: item.id };
        }
        sheets.update(prev, { value: item.prevValue, prevValue: item.prevValue });
        this.config.grid.paint();
        this.config.spreadsheet.selection.setFocusedCell(this.config.spreadsheet.selection.getFocusedCell(), false);
    };
    return RenameSheet;
}());
exports.RenameSheet = RenameSheet;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetCellFormat = void 0;
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var SetCellFormat = /** @class */ (function () {
    function SetCellFormat(config) {
        this.config = config;
        this._page = config.page;
    }
    SetCellFormat.prototype.do = function () {
        var _a;
        var _b = this.config, cell = _b.cell, grid = _b.grid, spreadsheet = _b.spreadsheet;
        var val = this.config.val;
        var _c = (0, main_1.getCellIds)(cell, grid), row = _c.row, col = _c.col;
        var format = __assign({}, (0, format_1.getFormat)(val));
        val = (format && format.mask) || val;
        var cellInfo = (0, main_1.getCellInfo)(cell, this._page, grid);
        if (cellInfo.locked) {
            return;
        }
        if (!(spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.events.fire(types_1.SpreadsheetEvents.beforeFormatChange, [cell, val]))) {
            return;
        }
        var cellFormat = cellInfo.format;
        this.config.prev = (_a = cellInfo.format) === null || _a === void 0 ? void 0 : _a.id;
        var math = spreadsheet.getFormula(cell);
        var cellVal = cellInfo.value;
        if ((cellFormat === null || cellFormat === void 0 ? void 0 : cellFormat.mask) !== "@" && val === "@") {
            this._page.setValue(row, col, "".concat(math ? "=" + math : cellVal || ""), 1);
        }
        if ((cellFormat === null || cellFormat === void 0 ? void 0 : cellFormat.mask) === "@" && val !== "@") {
            this._page.setValue(row, col, math ? "=" + math : cellVal, 0);
        }
        this._page.setCell(row, col, {
            format: __assign({}, (format || (0, format_1.getFormat)("common"))),
        });
        spreadsheet.events.fire(types_1.SpreadsheetEvents.afterFormatChange, [cell, val]);
        grid === null || grid === void 0 ? void 0 : grid.paint();
    };
    SetCellFormat.prototype.undo = function () {
        var val = this.config.val;
        var prev = this.config.prev;
        this.config.val = prev;
        this.config.prev = val;
        this.do();
        this.config.val = val;
        this.config.prev = prev;
    };
    return SetCellFormat;
}());
exports.SetCellFormat = SetCellFormat;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetCellStyle = void 0;
var actions_1 = __webpack_require__(29);
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var SetCellStyle = /** @class */ (function () {
    function SetCellStyle(config) {
        this.config = config;
        this._page = config.page;
    }
    SetCellStyle.prototype.do = function () {
        var _a, _b;
        var _c = this.config, cell = _c.cell, _d = _c.val, val = _d === void 0 ? "" : _d, grid = _c.grid;
        if (!cell)
            return;
        var _e = (0, main_1.getCellIds)(cell, grid), row = _e.row, col = _e.col;
        var meta = (0, main_1.getCellInfo)(cell, this._page, grid);
        var locked = meta.locked, defaultAlign = meta.$toolbarAlign;
        var css = meta.css || "";
        if (locked) {
            return;
        }
        var multiline;
        var $toolbarAlign = defaultAlign;
        if (typeof val !== "string") {
            multiline = val.multiline;
            var styles = (0, main_1.getStylesObject)(css === null || css === void 0 ? void 0 : css.split("dhx_spreadsheet_link").join(" "));
            if (Array.isArray(val)) {
                val = val[0];
            }
            var css_string = void 0;
            if (typeof val !== "string") {
                $toolbarAlign = !!val["text-align"];
                if (this.config.replace) {
                    css_string = dhx.css.add(__assign({}, val));
                }
                else {
                    css_string = dhx.css.add(__assign(__assign({}, styles), (0, main_1.convertStyles)(val)));
                }
                val = css_string;
            }
            val = (css.includes("dhx_spreadsheet_link") ? "dhx_spreadsheet_link " : "") + css_string;
        }
        if (!((_a = this.config.spreadsheet) === null || _a === void 0 ? void 0 : _a.events.fire(types_1.SpreadsheetEvents.beforeStyleChange, [
            cell,
            dhx.css.get(val),
        ]))) {
            return;
        }
        if (multiline) {
            var meta_1 = this._page.getMeta();
            this._page_rows = __spreadArray([], meta_1.rows, true);
            this._page_cols = __spreadArray([], meta_1.cols, true);
            if ((0, actions_1.setAutoHeightToRow)(cell, this.config.grid, this._page, multiline)) {
                this.config.spreadsheet._updateGridState();
            }
        }
        this.config.prev = css;
        this._page.setCell(row, col, { css: val, $toolbarAlign: $toolbarAlign });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterStyleChange, [cell, dhx.css.get(val)]);
        (_b = this.config.grid) === null || _b === void 0 ? void 0 : _b.paint();
    };
    SetCellStyle.prototype.undo = function () {
        var val = this.config.val;
        var prev = this.config.prev;
        this.config.val = prev || "";
        this.config.prev = val || "";
        this.do();
        if (this._page_rows) {
            this._page.setMeta({ rows: this._page_rows, cols: this._page_cols });
            this.config.spreadsheet._updateGridState();
        }
        this.config.val = val;
        this.config.prev = prev;
    };
    return SetCellStyle;
}());
exports.SetCellStyle = SetCellStyle;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetCellValue = void 0;
var muon_1 = __webpack_require__(25);
var actions_1 = __webpack_require__(29);
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var core_1 = __webpack_require__(0);
function analyzeMath(f, spreadsheet) {
    var code = spreadsheet._math.parse(f).code;
    var _a = spreadsheet.config.localization, decimal = _a.decimal, thousands = _a.thousands;
    var converted = "";
    for (var i = 0; i < code.length; i += 3) {
        var type = code[i];
        var char = f.substr(code[i + 1], code[i + 2]);
        if (type === muon_1.T_OPERATOR || type === muon_1.T_SPACE) {
            if ((char === decimal || char === thousands) &&
                code[i + 3] === muon_1.T_NUMBER &&
                code[i - 3] === muon_1.T_NUMBER) {
                char = char === decimal ? "." : "";
            }
        }
        if (type === muon_1.T_TEXT) {
            return (converted += "\"".concat(char, "\""));
        }
        if (type !== muon_1.T_DATA && type !== muon_1.T_PAGE) {
            converted += char;
        }
    }
    return converted;
}
var SetCellValue = /** @class */ (function () {
    function SetCellValue(config) {
        this.config = config;
        this._page = config.page;
    }
    SetCellValue.prototype.do = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        var value = this.config.val;
        var spreadsheet = this.config.spreadsheet;
        if (spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.isLocked(cell)) {
            return;
        }
        if (!(spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.events.fire(types_1.SpreadsheetEvents.beforeValueChange, [cell, value]))) {
            return;
        }
        var math = spreadsheet.getFormula(cell);
        this.config.prev = math ? "=" + math : spreadsheet.getValue(cell);
        var cellInfo = (0, main_1.getCellInfo)(cell, this._page, grid);
        var format = cellInfo.format;
        if (!format) {
            format = __assign({}, (0, format_1.getDefaultFormats)().filter(function (i) { return i.id === "common"; })[0]);
        }
        this._prevCell = __assign(__assign({}, cellInfo), { format: __assign({}, cellInfo.format) });
        if (format.id === "common") {
            format.$value = (0, core_1.isDefined)(value) ? value : "";
        }
        if (typeof value === "string" && value.startsWith("=") && (format === null || format === void 0 ? void 0 : format.mask) !== "@") {
            var openParenthesis = value
                .split("")
                .reduce(function (c, i) { return (i === "(" ? c + 1 : c); }, 0);
            var closeParenthesis = value
                .split("")
                .reduce(function (c, i) { return (i === ")" ? c + 1 : c); }, 0);
            while (closeParenthesis < openParenthesis) {
                value += ")";
                closeParenthesis++;
            }
            var rule = (0, format_1.getFormatRule)(format.mask);
            var decimal = rule === null || rule === void 0 ? void 0 : rule.decimalSeparator;
            var thousand = rule === null || rule === void 0 ? void 0 : rule.thousandsSeparator;
            if (thousand !== "" || decimal !== ".") {
                value = analyzeMath(value, spreadsheet);
            }
            try {
                this._page.setValue(+row, +col, value);
            }
            catch (e) {
                // do nothing
            }
        }
        else {
            var v = (0, format_1.getCleanValue)(value, format);
            var isNumber = typeof v === "number";
            var id = format.id;
            this._page.setValue(+row, +col, v, id === "text" || (id === "common" && !isNumber) ? 1 : 0);
        }
        var _c = (0, main_1.getCellInfo)(cell, this._page, grid).css, css = _c === void 0 ? "" : _c;
        var styles = dhx.css.get(css) || {};
        var multiline = styles.multiline;
        var newCellMeta = {};
        if (multiline) {
            var meta = this._page.getMeta();
            this._page_rows = __spreadArray([], meta.rows, true);
            this._page_cols = __spreadArray([], meta.cols, true);
            if ((0, actions_1.setAutoHeightToRow)(cell, this.config.grid, this._page, multiline)) {
                this.config.spreadsheet._updateGridState();
            }
        }
        var href = (0, main_1.doesContainUrl)(value);
        if (href) {
            newCellMeta = {
                css: (0, main_1.isURL)(value) ? "dhx_spreadsheet_link ".concat(css) : css,
                link: { href: href },
            };
        }
        if (!value) {
            newCellMeta = {
                css: css === null || css === void 0 ? void 0 : css.split("dhx_spreadsheet_link ").join(""),
                link: null,
            };
        }
        if (format.id === "common") {
            format.$value = typeof value === "string" && !href && value.startsWith("=") ? null : (0, core_1.isDefined)(value) ? "".concat(value) : "";
        }
        ;
        this._page.setCell(row, col, __assign({ nextValue: undefined, edited: false, format: format }, newCellMeta));
        this._page.setMeta({ inserted: true });
        grid === null || grid === void 0 ? void 0 : grid.paint();
        spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.events.fire(types_1.SpreadsheetEvents.afterValueChange, [this.config.cell, value]);
    };
    SetCellValue.prototype.undo = function () {
        var _this = this;
        var _a = this.config, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        if (this._page_rows) {
            this._page.setMeta({ rows: this._page_rows, cols: this._page_cols });
            this.config.spreadsheet._updateGridState();
        }
        var value = this._prevCell.value;
        //[dirty] need refactor after https://tracker.webix.io/issue/DHX-4155
        setTimeout(function () {
            var meta = _this._page.getCell(row, col);
            var prev = {};
            Object.keys(meta).forEach(function (key) {
                prev[key] = undefined;
            });
            _this._page.setCell(row, col, __assign(__assign(__assign({}, prev), _this._prevCell), { value: (0, core_1.isDefined)(value) ? value : "", nextValue: undefined, edited: false, editorValue: undefined }));
            grid === null || grid === void 0 ? void 0 : grid.paint();
        });
    };
    return SetCellValue;
}());
exports.SetCellValue = SetCellValue;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Clear = void 0;
var Clear = /** @class */ (function () {
    function Clear(config) {
        this.config = config;
    }
    Clear.prototype.do = function () {
        var spreadsheet = this.config.spreadsheet;
        this._data = spreadsheet.serialize();
        spreadsheet.parse([]);
    };
    Clear.prototype.undo = function () {
        var spreadsheet = this.config.spreadsheet;
        spreadsheet.parse(this._data);
    };
    return Clear;
}());
exports.Clear = Clear;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ClearSheet = void 0;
var ClearSheet = /** @class */ (function () {
    function ClearSheet(config) {
        this.config = config;
        this._store = config.dataStore;
    }
    ClearSheet.prototype.do = function () {
        var _a = this.config, val = _a.val, spreadsheet = _a.spreadsheet;
        this._page = this._store.getPage(val);
        this._data = this._page ? this._page.serialize(true) : [];
        this._page.parse([]);
        spreadsheet._math.recalculate();
        spreadsheet.selection.setFocusedCell(spreadsheet.selection.getSelectedCell(), false);
        spreadsheet._grid.paint();
    };
    ClearSheet.prototype.undo = function () {
        var spreadsheet = this.config.spreadsheet;
        this._page.parse(this._data);
        this._store.getStore().recalculate(true, this._page.getContext());
        spreadsheet.selection.setFocusedCell(spreadsheet.selection.getSelectedCell(), false);
        spreadsheet._math.recalculate();
        spreadsheet._grid.paint();
    };
    return ClearSheet;
}());
exports.ClearSheet = ClearSheet;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizeCol = void 0;
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var ResizeCol = /** @class */ (function () {
    function ResizeCol(config) {
        this.config = config;
    }
    ResizeCol.prototype.do = function () {
        var _this = this;
        var _a = this.config, grid = _a.grid, cell = _a.cell, mouseEvent = _a.mouseEvent;
        if (this._colsAfterResize) {
            grid.setColumns(this._colsAfterResize);
            return;
        }
        var initX = mouseEvent.clientX;
        var _b = cell.split(":"), startCell = _b[0], endCell = _b[1];
        var first = (0, main_1.getCellIds)(startCell, grid);
        var last = (0, main_1.getCellIds)(endCell || startCell, grid);
        this._prevCols = grid.config.columns.map(function (i) { return (__assign({}, i)); });
        var cols = __spreadArray([], grid.config.columns, true);
        var node = grid.getRootNode();
        node.style.cursor = "col-resize";
        var selectedColumns = [];
        for (var i = first.col + 1; i <= last.col + 1; i++) {
            var col = cols[i];
            col.$initWidth = grid.config.columns[i].width;
            selectedColumns.push(col);
        }
        var moveHandler = function (e) {
            var move = e.clientX - initX;
            selectedColumns.forEach(function (col) {
                var size = col.$initWidth + move / selectedColumns.length;
                col.width = size <= 20 ? 20 : size;
            });
            grid.setColumns(cols);
            grid.paint();
        };
        var upHandler = function (e) {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
            node.style.cursor = "unset";
            _this._colsAfterResize = cols;
            _this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterAction, [
                types_1.Actions.resizeCol,
                (0, main_1.cleanActionConfig)(_this.config),
            ]);
        };
        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
        grid.paint();
    };
    ResizeCol.prototype.undo = function () {
        this.config.grid.setColumns(this._prevCols);
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterAction, [
            types_1.Actions.resizeCol,
            (0, main_1.cleanActionConfig)(this.config),
        ]);
    };
    return ResizeCol;
}());
exports.ResizeCol = ResizeCol;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizeRow = void 0;
var main_1 = __webpack_require__(2);
var types_1 = __webpack_require__(6);
var ResizeRow = /** @class */ (function () {
    function ResizeRow(config) {
        this.config = config;
    }
    ResizeRow.prototype.do = function () {
        var _this = this;
        var _a = this.config, grid = _a.grid, cell = _a.cell, mouseEvent = _a.mouseEvent;
        if (this._rowsAfterResize) {
            this._rowsAfterResize.forEach(function (row) {
                var id = row.id, height = row.height;
                grid.data.update(id, { height: height, changedByUser: true });
            });
            return;
        }
        var initY = mouseEvent.clientY;
        var _b = cell.split(":"), startCell = _b[0], endCell = _b[1];
        var first = (0, main_1.getCellIds)(startCell, grid);
        var last = (0, main_1.getCellIds)(endCell || startCell, grid);
        var rowsCopy = __spreadArray([], grid.data.serialize(), true);
        var node = grid.getRootNode();
        node.style.cursor = "row-resize";
        var selectedRows = [];
        var _loop_1 = function (i) {
            var row = rowsCopy.find(function (item) { return +item.id - 1 === i; });
            if (!row)
                return "continue";
            if (!row.height) {
                row.height = grid.config.rowHeight;
            }
            selectedRows.push(row);
        };
        for (var i = first.row; i <= last.row; i++) {
            _loop_1(i);
        }
        this._prevRows = selectedRows.map(function (r) { return (__assign({}, r)); });
        this._rowsAfterResize = selectedRows.map(function (r) { return (__assign({}, r)); });
        var moveHandler = function (e) {
            var move = e.clientY - initY;
            selectedRows.forEach(function (row) {
                var size = row.height + move / selectedRows.length;
                var height = size <= 10 ? 10 : size;
                grid.data.update(row.id, { height: height, changedByUser: true });
                _this._rowsAfterResize.find(function (r) { return r.id === row.id; }).height = height;
            });
            grid.paint();
        };
        var upHandler = function (e) {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
            node.style.cursor = "unset";
            _this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterAction, [
                types_1.Actions.resizeRow,
                (0, main_1.cleanActionConfig)(_this.config),
            ]);
        };
        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
        grid.paint();
    };
    ResizeRow.prototype.undo = function () {
        var _this = this;
        this._prevRows.forEach(function (row) {
            var _a, _b;
            var id = row.id, height = row.height;
            (_b = (_a = _this.config) === null || _a === void 0 ? void 0 : _a.grid) === null || _b === void 0 ? void 0 : _b.data.update(id, { height: height, changedByUser: true });
        });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterAction, [
            types_1.Actions.resizeRow,
            (0, main_1.cleanActionConfig)(this.config),
        ]);
    };
    return ResizeRow;
}());
exports.ResizeRow = ResizeRow;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SetValidation = void 0;
var main_1 = __webpack_require__(2);
var SetValidation = /** @class */ (function () {
    function SetValidation(config) {
        this.config = config;
        this._page = config.page;
        this._prevState = {};
    }
    SetValidation.prototype.do = function () {
        var _a = this.config, val = _a.val, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        var meta = this._page.getCell(row, col);
        this._prevState[cell] = (meta === null || meta === void 0 ? void 0 : meta.editor) || null;
        this._page.setCell(row, col, { editor: val ? { type: "select", options: val } : null });
        this.config.grid.paint();
    };
    SetValidation.prototype.undo = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        this._page.setCell(row, col, { editor: this._prevState[cell] });
        this.config.grid.paint();
    };
    return SetValidation;
}());
exports.SetValidation = SetValidation;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SortCells = void 0;
var main_1 = __webpack_require__(2);
var SortCells = /** @class */ (function () {
    function SortCells(config) {
        this.config = config;
        this._data = {};
    }
    SortCells.prototype.do = function () {
        var _this = this;
        var _a = this.config, dir = _a.dir, cell = _a.cell, spreadsheet = _a.spreadsheet, activePage = _a.page, dataStore = _a.dataStore, grid = _a.grid;
        var cellsArr = cell.split(",");
        var filter = (activePage === null || activePage === void 0 ? void 0 : activePage.getMeta()).filter;
        var filterStart = (0, main_1.getCellIds)(filter === null || filter === void 0 ? void 0 : filter.cell, grid).start;
        cellsArr.forEach(function (item) {
            var page = activePage;
            var c = item;
            if (c.includes("!")) {
                var parse = c.split("!");
                c = parse[1];
                page = dataStore.getPage(parse[0]);
                if (!page)
                    return;
            }
            _this._data[item] = page.serialize(true);
            var _a = page.getSize(), rowsCount = _a[0], colsCount = _a[1];
            var cellIds = (0, main_1.getCellIds)(c, grid);
            if (!cellIds.end)
                return;
            var start = cellIds.start, end = cellIds.end;
            if (filter && filterStart.row === start.row) {
                start.row = start.row + 1;
            }
            var topSplit = spreadsheet.config.topSplit;
            var startRow = topSplit || start.row;
            var lastRow = rowsCount - 1 < end.row ? rowsCount - 1 : end.row;
            var columnData = page
                .getCellRange(startRow, start.col, lastRow, start.col)
                .map(function (meta, index) { return (__assign(__assign({}, meta), { $row: index })); });
            var sortedColumn = columnData.sort(function (left, right) {
                var a = left === null || left === void 0 ? void 0 : left.value;
                var b = right === null || right === void 0 ? void 0 : right.value;
                if (typeof a === "string") {
                    a = a.toLowerCase();
                }
                if (typeof b === "string") {
                    b = b.toLowerCase();
                }
                if (!a && typeof a !== "number" && b) {
                    return 1;
                }
                if (!b && typeof b !== "number" && a) {
                    return -1;
                }
                if (typeof a === "string" && typeof b === "number") {
                    return -dir;
                }
                if (typeof a === "number" && typeof b === "string") {
                    return dir;
                }
                if (a < b) {
                    return -dir;
                }
                if (a > b) {
                    return dir;
                }
                return 0;
            });
            var row = startRow;
            var index = 0;
            var sortedData = [];
            while (row < lastRow + 1) {
                var cell_1 = sortedColumn[index];
                var prevRow = cell_1.$row + startRow;
                var gridRow = [];
                for (var col = 0; col < colsCount; col++) {
                    var cellMeta = page.getCell(prevRow, col) || {};
                    var cellValue = page.getValue(prevRow, col, true);
                    if (typeof cellValue === "string" && cellValue.startsWith("=")) {
                        cellValue = spreadsheet._math.transposeMath(cellValue, row - prevRow, 0, page.getContext());
                    }
                    gridRow.push([row, col, __assign(__assign({}, cellMeta), { value: cellValue })]);
                }
                sortedData.push.apply(sortedData, gridRow);
                row++;
                index++;
            }
            var serializedData = page.serialize(true).filter(function (item) {
                var exsited = sortedData.find(function (d) { return d[0] === item[0] && d[1] === item[1]; });
                return !exsited;
            });
            page.parse(__spreadArray(__spreadArray([], serializedData, true), sortedData, true));
        });
        this.config.grid.paint();
    };
    SortCells.prototype.undo = function () {
        var _this = this;
        var _a = this.config, grid = _a.grid, activePage = _a.page, dataStore = _a.dataStore;
        Object.keys(this._data).forEach(function (cell) {
            var page = activePage;
            if (cell.includes("!")) {
                var parse = cell.split("!");
                page = dataStore.getPage(parse[0]);
                if (!page)
                    return;
            }
            page.parse(_this._data[cell]);
        });
        grid.paint();
    };
    return SortCells;
}());
exports.SortCells = SortCells;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertLink = void 0;
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
var InsertLink = /** @class */ (function () {
    function InsertLink(config) {
        this.config = config;
        this._page = config.page;
    }
    InsertLink.prototype.do = function () {
        var _a;
        var _b = this.config, cell = _b.cell, val = _b.val, grid = _b.grid;
        if (!cell)
            return;
        var _c = (0, main_1.getCellIds)(cell, grid), row = _c.row, col = _c.col;
        var spreadsheet = this.config.spreadsheet;
        if (spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.isLocked(cell)) {
            return;
        }
        var meta = (0, main_1.getCellInfo)(cell, this._page, grid);
        var css = meta.css, format = meta.format;
        if (!format) {
            format = (0, format_1.getDefaultFormats)().filter(function (i) { return i.id === "common"; })[0];
        }
        this.config.prev = meta;
        if (val) {
            var text = val.text, href = val.href;
            text = text === null || text === void 0 ? void 0 : text.trim();
            this._page.setCell(row, col, {
                value: text || href,
                link: __assign(__assign({}, val), { text: text }),
                css: "dhx_spreadsheet_link ".concat(css || ""),
                format: format,
            });
        }
        else {
            this._page.setCell(row, col, {
                link: null,
                css: css === null || css === void 0 ? void 0 : css.split("dhx_spreadsheet_link ").join(""),
                format: format,
            });
        }
        (_a = this.config.grid) === null || _a === void 0 ? void 0 : _a.paint();
    };
    InsertLink.prototype.undo = function () {
        var _a = this.config, cell = _a.cell, grid = _a.grid, groupAction = _a.groupAction;
        if (!cell)
            return;
        var _b = (0, main_1.getCellIds)(cell, grid), row = _b.row, col = _b.col;
        var _c = this.config.prev, _d = _c.value, value = _d === void 0 ? "" : _d, _e = _c.css, css = _e === void 0 ? "" : _e, _f = _c.link, link = _f === void 0 ? null : _f;
        if (groupAction) {
            this._page.setCell(row, col, { link: link });
        }
        else {
            this._page.setCell(row, col, { value: value, css: css, link: link });
        }
        grid === null || grid === void 0 ? void 0 : grid.paint();
    };
    return InsertLink;
}());
exports.InsertLink = InsertLink;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FitColumn = void 0;
var main_1 = __webpack_require__(2);
var core_1 = __webpack_require__(0);
var format_1 = __webpack_require__(12);
var FitColumn = /** @class */ (function () {
    function FitColumn(config) {
        this.config = config;
        this._page = config.page;
    }
    FitColumn.prototype.do = function () {
        var _this = this;
        var _a = this.config, cell = _a.cell, spreadsheet = _a.spreadsheet, grid = _a.grid;
        var col = (0, main_1.getCellIds)(cell, grid).col;
        var sizes = this._page.getSize();
        var filter = this._page.getMeta().filter;
        var filteredId = null;
        if (filter === null || filter === void 0 ? void 0 : filter.cell) {
            var filterCell = filter.cell.split(":")[0];
            var ids = (0, main_1.getCellIds)(filterCell, grid);
            if (col === ids.col) {
                filteredId = ids.row;
            }
        }
        var range = this._page.getRange(0, col, sizes[0], col);
        var newWidth = 40;
        range.forEach(function (val, index) {
            var _a;
            if (val) {
                var meta = _this._page.getCell(index, col);
                var width = (0, core_1.getStringWidth)((0, format_1.getFormattedValue)("".concat(val), meta.format));
                if (((_a = meta.editor) === null || _a === void 0 ? void 0 : _a.type) === "select" || index === filteredId)
                    width += 20;
                if (width > newWidth) {
                    newWidth = width;
                }
            }
        });
        var cols = this._page.getMeta().cols;
        this._prev = __spreadArray([], cols, true);
        newWidth += 20;
        var colsBefore = cols.slice(0, col);
        var colsAfter = cols.slice(col + 1);
        this._page.setMeta({ cols: __spreadArray(__spreadArray(__spreadArray([], colsBefore, true), [{ width: newWidth }], false), colsAfter, true) });
        spreadsheet._updateGridState();
    };
    FitColumn.prototype.undo = function () {
        var spreadsheet = this.config.spreadsheet;
        this._page.setMeta({ cols: this._prev });
        spreadsheet._updateGridState();
    };
    return FitColumn;
}());
exports.FitColumn = FitColumn;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filter = void 0;
var main_1 = __webpack_require__(2);
var en_1 = __webpack_require__(11);
var Filter = /** @class */ (function () {
    function Filter(config) {
        this.config = config;
    }
    Filter.prototype.do = function () {
        var _a = this.config, initCell = _a.cell, page = _a.page, val = _a.val, grid = _a.grid, spreadsheet = _a.spreadsheet;
        this._prev = __assign({}, page.getMeta().filter);
        var cell = initCell;
        if (!val) {
            page.setMeta({ filter: null });
            if (page === spreadsheet._activePage) {
                spreadsheet._filterForm.applyFilter(page);
            }
            return;
        }
        var cellIds = (0, main_1.getCellIds)(cell, grid);
        if (!cellIds.end) {
            var _b = page.getSize(), rows = _b[0], cols = _b[1];
            cell = "".concat((0, main_1.getCellNameById)(grid, 1, 1), ":").concat((0, main_1.getCellNameById)(grid, rows, cols));
            cellIds = (0, main_1.getCellIds)(cell, grid);
            this.config.cell = cell;
        }
        if (!spreadsheet._spanControl.checkBeforeAction(this.config.cell, page, en_1.default.filter))
            return;
        var start = cellIds.start, end = cellIds.end;
        var colsSelected = end.col - start.col;
        // add empty filters
        while (val.length < colsSelected + 1) {
            val.push({});
        }
        page === null || page === void 0 ? void 0 : page.setMeta({ filter: { cell: cell, rules: val } });
        if (page === spreadsheet._activePage) {
            spreadsheet._filterForm.applyFilter(page);
        }
    };
    Filter.prototype.undo = function () {
        var _a, _b;
        var _c = this.config, cell = _c.cell, val = _c.val;
        this.config.val = (_a = this._prev) === null || _a === void 0 ? void 0 : _a.rules;
        this.config.cell = (_b = this._prev) === null || _b === void 0 ? void 0 : _b.cell;
        this.do();
        this.config.cell = cell;
        this.config.val = val;
    };
    return Filter;
}());
exports.Filter = Filter;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Merge = void 0;
var main_1 = __webpack_require__(2);
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var Merge = /** @class */ (function () {
    function Merge(config) {
        this.config = config;
    }
    Merge.prototype.do = function () {
        var _this = this;
        var _a = this.config, cell = _a.cell, spreadsheet = _a.spreadsheet, page = _a.page, $autofill = _a.$autofill, grid = _a.grid;
        if (!cell || !(0, main_1.isRangeId)(cell) || (cell === null || cell === void 0 ? void 0 : cell.includes(",")))
            return;
        var _b = (page === null || page === void 0 ? void 0 : page.getMeta()).merged, merged = _b === void 0 ? [] : _b;
        var cells = (0, main_1.getCellsArray)(cell, grid);
        var spans = new Set();
        var pageData = page === null || page === void 0 ? void 0 : page.serialize(true);
        this._prevData = __spreadArray([], pageData, true);
        //find prev spans
        cells.forEach(function (c) {
            var span = (0, main_1.isCellSpaned)(c, merged);
            if (span) {
                spans.add(span);
            }
        });
        var _c = (0, main_1.getCellsArray)(cell, grid), firstCell = _c[0], rest = _c.slice(1);
        var removedCells = __spreadArray([], rest, true);
        var lastCell = removedCells[removedCells.length - 1];
        var data = pageData.filter(function (c) {
            var removed = removedCells.find(function (rCell) {
                var _a = (0, main_1.getCellIndex)(rCell, grid), row = _a.row, col = _a.col;
                return c[0] === row && c[1] === col - 1;
            });
            return !removed;
        });
        var firstIds = (0, main_1.getCellIndex)(firstCell, grid);
        var lastIds = (0, main_1.getCellIndex)(lastCell, grid);
        this._newSpan = {
            from: {
                row: firstIds.row,
                column: firstIds.col - 1,
            },
            to: {
                row: lastIds.row,
                column: lastIds.col - 1,
            },
        };
        if (merged.find(function (span) { return (0, core_1.compare)(span, _this._newSpan); }))
            return; // return if span already exists
        this._prevSpan = merged.filter(function (span) { return spans.has(span); }) || [];
        var newMerge = __spreadArray(__spreadArray([], merged.filter(function (span) { return !spans.has(span); }), true), [this._newSpan], false); // remove prev cell spans and add new one
        page === null || page === void 0 ? void 0 : page.setMeta({ merged: newMerge });
        (0, dom_1.awaitRedraw)().then(function () {
            if (!$autofill) {
                page === null || page === void 0 ? void 0 : page.parse(data);
            }
            spreadsheet._updateGridState();
            spreadsheet._updateToolbar();
        });
    };
    Merge.prototype.undo = function () {
        var _this = this;
        var _a = this.config, page = _a.page, spreadsheet = _a.spreadsheet, $autofill = _a.$autofill;
        var merged = (page === null || page === void 0 ? void 0 : page.getMeta()).merged;
        page === null || page === void 0 ? void 0 : page.setMeta({
            merged: __spreadArray(__spreadArray([], merged.filter(function (span) { return span !== _this._newSpan; }), true), this._prevSpan, true),
        }); // remove created span and return prev spans
        if (!$autofill) {
            page === null || page === void 0 ? void 0 : page.parse(this._prevData);
        }
        (0, dom_1.awaitRedraw)().then(function () {
            spreadsheet._updateGridState();
        });
    };
    return Merge;
}());
exports.Merge = Merge;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Unmerge = void 0;
var main_1 = __webpack_require__(2);
var dom_1 = __webpack_require__(1);
var Unmerge = /** @class */ (function () {
    function Unmerge(config) {
        this.config = config;
    }
    Unmerge.prototype.do = function () {
        var _this = this;
        var _a = this.config, cell = _a.cell, spreadsheet = _a.spreadsheet, page = _a.page, grid = _a.grid;
        if (!cell || (cell === null || cell === void 0 ? void 0 : cell.includes(",")))
            return;
        var merged = (page === null || page === void 0 ? void 0 : page.getMeta()).merged;
        var cells = (0, main_1.getCellsArray)(cell, grid);
        this._prevSpan = (0, main_1.isCellSpaned)(cells[0], merged);
        if (!this._prevSpan)
            return; // return if cell wasn't spaned
        var newMerge = merged.filter(function (s) { return s !== _this._prevSpan; });
        page === null || page === void 0 ? void 0 : page.setMeta({ merged: newMerge });
        spreadsheet._updateGridState();
    };
    Unmerge.prototype.undo = function () {
        var _a = this.config, page = _a.page, spreadsheet = _a.spreadsheet;
        if (!this._prevSpan)
            return;
        var merged = (page === null || page === void 0 ? void 0 : page.getMeta()).merged;
        page === null || page === void 0 ? void 0 : page.setMeta({ merged: __spreadArray(__spreadArray([], merged, true), [this._prevSpan], false) });
        (0, dom_1.awaitRedraw)().then(function () {
            spreadsheet._updateGridState();
        });
    };
    return Unmerge;
}());
exports.Unmerge = Unmerge;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getSheetsContextMenuStruct = exports.getContextMenuStruct = void 0;
var en_1 = __webpack_require__(11);
function getContextMenuStruct() {
    return [
        { id: "lock", value: en_1.default.lockCell, icon: "dxi dxi-key" },
        {
            id: "clear",
            value: en_1.default.clear,
            icon: "dxi dxi-eraser",
            items: [
                {
                    id: "clear-value",
                    value: en_1.default.clearValue,
                },
                {
                    id: "clear-styles",
                    value: en_1.default.clearStyles,
                },
                {
                    id: "clear-all",
                    value: en_1.default.clearAll,
                },
            ],
        },
        {
            id: "columns",
            value: en_1.default.columns,
            icon: "dxi dxi-table-column",
            items: [
                {
                    id: "add-col",
                    value: en_1.default.addColumn,
                    icon: "dxi dxi-table-column-plus-before",
                },
                {
                    id: "remove-col",
                    value: en_1.default.removeColumn,
                    icon: "dxi dxi-table-column-remove",
                },
                {
                    id: "fit-col",
                    value: en_1.default.fitToData,
                    hidden: true,
                    icon: "dxi dxi-table-column"
                }
            ],
        },
        {
            id: "rows",
            value: en_1.default.rows,
            icon: "dxi dxi-table-row",
            items: [
                {
                    id: "add-row",
                    value: en_1.default.addRow,
                    icon: "dxi dxi-table-row-plus-before",
                },
                {
                    id: "remove-row",
                    value: en_1.default.removeRow,
                    icon: "dxi dxi-table-row-remove",
                },
            ],
        },
        {
            id: "sort",
            value: en_1.default.sort,
            icon: "dxi dxi-format-line-spacing",
            items: [
                {
                    id: "asc-sort",
                    value: en_1.default.ascSort,
                    icon: "dxi dxi-sort-variant dhx-sort-acs",
                },
                {
                    id: "desc-sort",
                    value: en_1.default.descSort,
                    icon: "dxi dxi-sort-variant",
                },
            ],
        },
        {
            id: "link",
            value: "".concat(en_1.default.insert, " ").concat(en_1.default.link.toLowerCase()),
            icon: "dxi dxi-link-variant",
        },
    ];
}
exports.getContextMenuStruct = getContextMenuStruct;
function getSheetsContextMenuStruct(multisheets) {
    return [
        { id: "delete", value: en_1.default.deleteSheet, icon: "dxi dxi-delete-forever", disabled: !multisheets },
        { id: "rename", value: en_1.default.renameSheet, icon: "dxi dxi-pencil" },
    ];
}
exports.getSheetsContextMenuStruct = getSheetsContextMenuStruct;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getMenuStruct = void 0;
var toolbar_1 = __webpack_require__(42);
var en_1 = __webpack_require__(11);
function getMenuStruct(config) {
    return [
        {
            id: "file",
            open: true,
            value: en_1.default.file,
            items: [
                {
                    id: "import",
                    value: en_1.default.importAs,
                    icon: "dxi dxi-file-import",
                    items: [
                        {
                            id: "import-xlsx",
                            value: "Microsoft Excel(.xlsx)",
                            icon: "dxi dxi-file-excel",
                        },
                    ],
                },
                {
                    id: "download",
                    value: en_1.default.downloadAs,
                    icon: "dxi dxi-file-export",
                    items: [
                        {
                            id: "export-xlsx",
                            value: "Microsoft Excel(.xlsx)",
                            icon: "dxi dxi-file-excel",
                        },
                    ],
                },
            ],
        },
        {
            id: "edit",
            value: en_1.default.edit,
            items: [
                { id: "undo", value: en_1.default.undo, icon: "dxi dxi-undo" },
                { id: "redo", value: en_1.default.redo, icon: "dxi dxi-redo" },
                { type: "separator" },
                { id: "lock", value: en_1.default.lockCell, icon: "dxi dxi-key" },
                { type: "separator" },
                {
                    id: "clear",
                    value: en_1.default.clear,
                    icon: "dxi dxi-eraser",
                    items: [
                        {
                            id: "clear-value",
                            value: en_1.default.clearValue,
                        },
                        {
                            id: "clear-styles",
                            value: en_1.default.clearStyles,
                        },
                        {
                            id: "clear-all",
                            value: en_1.default.clearAll,
                        },
                    ],
                },
            ],
        },
        {
            id: "insert",
            value: en_1.default.insert,
            items: [
                {
                    id: "columns",
                    value: en_1.default.columns,
                    icon: "dxi dxi-table-column",
                    items: [
                        {
                            id: "add-col",
                            value: en_1.default.addColumn,
                            icon: "dxi dxi-table-column-plus-before",
                        },
                        {
                            id: "remove-col",
                            value: en_1.default.removeColumn,
                            icon: "dxi dxi-table-column-remove",
                        },
                    ],
                },
                {
                    id: "rows",
                    value: en_1.default.rows,
                    icon: "dxi dxi-table-row",
                    items: [
                        {
                            id: "add-row",
                            value: en_1.default.addRow,
                            icon: "dxi dxi-table-row-plus-before",
                        },
                        {
                            id: "remove-row",
                            value: en_1.default.removeRow,
                            icon: "dxi dxi-table-row-remove",
                        },
                    ],
                },
                {
                    id: "link",
                    type: "navItem",
                    icon: "dxi dxi-link-variant",
                    value: "".concat(en_1.default.insert, " ").concat(en_1.default.link.toLowerCase()),
                },
            ],
        },
        {
            id: "configuration",
            value: en_1.default.format,
            items: [
                {
                    id: "font-weight-bold",
                    value: en_1.default.bold,
                    icon: "dxi dxi-format-bold",
                },
                {
                    id: "font-style-italic",
                    value: en_1.default.italic,
                    icon: "dxi dxi-format-italic",
                },
                {
                    id: "text-decoration-underline",
                    value: en_1.default.underline,
                    icon: "dxi dxi-format-underline",
                },
                {
                    id: "text-decoration-line-through",
                    value: en_1.default.strikethrough,
                    icon: "dxi dxi-format-strikethrough",
                },
                { type: "separator" },
                {
                    id: "halign",
                    value: en_1.default.halign,
                    items: [
                        {
                            id: "halign-left",
                            value: en_1.default.left,
                            twoState: true,
                            group: "halign",
                            icon: "dxi dxi-format-align-left",
                        },
                        {
                            id: "halign-center",
                            value: en_1.default.center,
                            twoState: true,
                            group: "halign",
                            icon: "dxi dxi-format-align-center",
                        },
                        {
                            id: "halign-right",
                            value: en_1.default.right,
                            twoState: true,
                            group: "halign",
                            icon: "dxi dxi-format-align-right",
                        },
                    ],
                },
                {
                    id: "valign",
                    value: en_1.default.valign,
                    items: [
                        {
                            id: "valign-top",
                            value: en_1.default.top,
                            twoState: true,
                            group: "valign",
                            icon: "dxi dxi-format-vertical-align-top",
                        },
                        {
                            id: "valign-center",
                            value: en_1.default.center,
                            twoState: true,
                            group: "valign",
                            icon: "dxi dxi-format-vertical-align-center",
                        },
                        {
                            id: "valign-bottom",
                            value: en_1.default.bottom,
                            twoState: true,
                            group: "valign",
                            icon: "dxi dxi-format-vertical-align-bottom",
                        },
                    ],
                },
                {
                    id: "multiline",
                    value: en_1.default.multiline,
                    items: [
                        {
                            id: "multiline-clip",
                            group: "multiline",
                            twoState: true,
                            value: en_1.default.clip,
                            icon: "dxi dxi-format-text-wrapping-clip",
                        },
                        {
                            id: "multiline-wrap",
                            group: "multiline",
                            twoState: true,
                            value: en_1.default.wrap,
                            icon: "dxi dxi-format-text-wrapping-wrap",
                        },
                    ],
                },
                {
                    id: "format",
                    type: "navItem",
                    value: en_1.default.format,
                    items: (0, toolbar_1.getFormatsDropdown)(config),
                },
                {
                    id: "merge",
                    type: "navItem",
                    // icon: "dxi dxi-format-align-left", //[TODO] add new icons
                    value: en_1.default.merge,
                    tooltip: en_1.default.merge,
                },
            ],
        },
        {
            id: "data",
            value: en_1.default.data,
            items: [
                {
                    id: "validation",
                    value: en_1.default.validation,
                    icon: "dxi dxi-table-check",
                },
                {
                    id: "search",
                    value: en_1.default.search,
                    icon: "dxi dxi-magnify",
                },
                {
                    id: "filter",
                    value: en_1.default.filter,
                    icon: "dxi dxi-filter-variant",
                },
                {
                    id: "sort",
                    value: en_1.default.sort,
                    icon: "dxi dxi-format-line-spacing",
                    items: [
                        {
                            id: "asc-sort",
                            value: en_1.default.ascSort,
                            icon: "dxi dxi-sort-variant dhx-sort-acs",
                        },
                        {
                            id: "desc-sort",
                            value: en_1.default.descSort,
                            icon: "dxi dxi-sort-variant",
                        },
                    ]
                }
            ],
        },
        {
            id: "help",
            value: en_1.default.help,
        },
    ];
}
exports.getMenuStruct = getMenuStruct;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToolbarStruct = exports.getHotKey = void 0;
var main_1 = __webpack_require__(2);
var toolbar_1 = __webpack_require__(42);
var en_1 = __webpack_require__(11);
var ctrlhotKeysWin = {
    undo: "z",
    redo: "y",
    bold: "b",
    italic: "i",
    underline: "u",
    link: "k",
    "align-left": "l",
    "align-center": "e",
    "align-right": "r",
};
var altKeysWin = {
    "line-through": "shift+5"
};
var hotKeysMac = __assign(__assign(__assign({}, ctrlhotKeysWin), altKeysWin), { "line-through": "shift+x" });
function getHotKey(name) {
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    if ((0, main_1.isMac)()) {
        return "\u2318+".concat(hotKeysMac[name]);
    }
    return ctrlhotKeysWin[name] ? "ctrl+".concat(ctrlhotKeysWin[name]) : "alt+".concat(altKeysWin[name]);
}
exports.getHotKey = getHotKey;
function getToolbarStruct(elements, config) {
    var toolbarBlocks = {
        undo: [
            {
                id: "undo",
                type: "navItem",
                icon: "dxi dxi-undo",
                tooltip: "".concat(en_1.default.undo, " (").concat(getHotKey("undo"), ")"),
            },
            {
                id: "redo",
                type: "navItem",
                icon: "dxi dxi-redo",
                tooltip: "".concat(en_1.default.redo, " (").concat(getHotKey("redo"), ")"),
            },
        ],
        colors: [
            {
                id: "color",
                css: "dhx_button-toolbar-colorPicker",
                type: "HTMLButton",
                html: (0, toolbar_1.getColorpickerTemplate)("#4C4C4C", "format-color-text"),
                tooltip: en_1.default.textColor,
            },
            {
                id: "background",
                css: "dhx_button-toolbar-colorPicker",
                type: "HTMLButton",
                html: (0, toolbar_1.getColorpickerTemplate)("#FFF", "format-color-fill"),
                tooltip: en_1.default.backgroundColor,
            },
        ],
        lock: [
            {
                id: "lock",
                type: "navItem",
                icon: "dxi dxi-key",
                tooltip: en_1.default.lockCell,
            },
        ],
        file: [
            {
                id: "export",
                type: "navItem",
                icon: "dxi dxi-file-export",
                tooltip: en_1.default.export,
                items: [
                    {
                        id: "export-xlsx",
                        value: "Microsoft Excel(.xlsx)",
                        icon: "dxi dxi-file-excel",
                    },
                ],
            },
            {
                id: "import",
                type: "navItem",
                icon: "dxi dxi-file-import",
                tooltip: en_1.default.import,
                items: [
                    {
                        id: "import-xlsx",
                        value: "Microsoft Excel(.xlsx)",
                        icon: "dxi dxi-file-excel",
                    },
                ],
            },
        ],
        columns: [
            {
                id: "add-col",
                type: "navItem",
                icon: "dxi dxi-table-column-plus-before",
                tooltip: en_1.default.addColumn,
            },
            {
                id: "remove-col",
                type: "navItem",
                icon: "dxi dxi-table-column-remove",
                tooltip: en_1.default.removeColumn,
            },
        ],
        rows: [
            {
                id: "add-row",
                type: "navItem",
                icon: "dxi dxi-table-row-plus-before",
                tooltip: en_1.default.addRow,
            },
            {
                id: "remove-row",
                type: "navItem",
                icon: "dxi dxi-table-row-remove",
                tooltip: en_1.default.removeRow,
            },
        ],
        clear: [
            {
                type: "navItem",
                icon: "dxi dxi-eraser",
                id: "clear-group",
                tooltip: en_1.default.clear,
                items: [
                    {
                        id: "clear-value",
                        value: en_1.default.clearValue,
                    },
                    {
                        id: "clear-styles",
                        value: en_1.default.clearStyles,
                    },
                    {
                        id: "clear-all",
                        value: en_1.default.clearAll,
                    },
                ],
            },
        ],
        align: [
            {
                id: "halign",
                type: "navItem",
                icon: "dxi dxi-format-align-left",
                tooltip: en_1.default.halign,
                items: [
                    {
                        id: "halign-left",
                        type: "navItem",
                        value: en_1.default.left,
                        icon: "dxi dxi-format-align-left",
                        group: "halign",
                        tooltip: "".concat(en_1.default.left, " (").concat(getHotKey("align-left"), ")"),
                    },
                    {
                        id: "halign-center",
                        type: "navItem",
                        value: en_1.default.center,
                        icon: "dxi dxi-format-align-center",
                        group: "halign",
                        tooltip: "".concat(en_1.default.center, " (").concat(getHotKey("align-center"), ")"),
                    },
                    {
                        id: "halign-right",
                        type: "navItem",
                        value: en_1.default.right,
                        icon: "dxi dxi-format-align-right",
                        group: "halign",
                        tooltip: "".concat(en_1.default.right, " (").concat(getHotKey("align-right"), ")"),
                    },
                ],
            },
            {
                id: "valign",
                type: "navItem",
                icon: "dxi dxi-format-align-left",
                tooltip: en_1.default.valign,
                items: [
                    {
                        id: "valign-top",
                        type: "navItem",
                        group: "valign",
                        value: en_1.default.top,
                        icon: "dxi dxi-format-vertical-align-top",
                    },
                    {
                        id: "valign-center",
                        type: "navItem",
                        group: "valign",
                        value: en_1.default.center,
                        icon: "dxi dxi-format-vertical-align-center",
                    },
                    {
                        id: "valign-bottom",
                        type: "navItem",
                        group: "valign",
                        value: en_1.default.bottom,
                        icon: "dxi dxi-format-vertical-align-bottom",
                    },
                ],
            },
            {
                id: "multiline",
                type: "navItem",
                icon: "dxi dxi-format-align-left",
                tooltip: en_1.default.multiline,
                items: [
                    {
                        id: "multiline-clip",
                        type: "navItem",
                        group: "multiline",
                        value: en_1.default.clip,
                        icon: "dxi dxi-format-text-wrapping-clip",
                    },
                    {
                        id: "multiline-wrap",
                        type: "navItem",
                        group: "multiline",
                        value: en_1.default.wrap,
                        icon: "dxi dxi-format-text-wrapping-wrap",
                    },
                ],
            },
            {
                id: "merge",
                type: "navItem",
                icon: "dxi dxi-table-merge-cells",
                tooltip: en_1.default.merge,
            },
        ],
        decoration: [
            {
                id: "font-weight-bold",
                type: "navItem",
                icon: "dxi dxi-format-bold",
                tooltip: "".concat(en_1.default.bold, " (").concat(getHotKey("bold"), ")"),
            },
            {
                id: "font-style-italic",
                type: "navItem",
                icon: "dxi dxi-format-italic",
                tooltip: "".concat(en_1.default.italic, " (").concat(getHotKey("italic"), ")"),
            },
            {
                id: "text-decoration-underline",
                type: "navItem",
                icon: "dxi dxi-format-underline",
                tooltip: "".concat(en_1.default.underline, " (").concat(getHotKey("underline"), ")"),
            },
            {
                id: "text-decoration-line-through",
                type: "navItem",
                icon: "dxi dxi-format-strikethrough",
                tooltip: "".concat(en_1.default.strikethrough, " (").concat(getHotKey("line-through"), ")"),
            },
        ],
        helpers: [
            {
                id: "link",
                type: "navItem",
                icon: "dxi dxi-link-variant",
                tooltip: "".concat(en_1.default.insert, " ").concat(en_1.default.link.toLowerCase(), " (").concat(getHotKey("link"), ")"),
            },
            {
                id: "help",
                type: "navItem",
                icon: "dxi dxi-help-circle-outline",
                tooltip: en_1.default.help,
            },
        ],
        format: [
            {
                id: "format",
                type: "navItem",
                tooltip: en_1.default.format,
                css: "dhx_format-dropdown",
                items: (0, toolbar_1.getFormatsDropdown)(config),
            },
        ],
        actions: [
            {
                id: "filter",
                type: "navItem",
                tooltip: en_1.default.filter,
                icon: "dxi dxi-filter-variant",
            },
        ]
    };
    var defaultBlocks = ["undo", "colors", "decoration", "align", "format", "actions", "helpers"];
    elements = elements || defaultBlocks;
    var defaultBlockIndex = elements.indexOf("default");
    if (defaultBlockIndex !== -1) {
        elements.splice.apply(elements, __spreadArray([defaultBlockIndex, 1], defaultBlocks, false));
    }
    elements = elements.filter(function (item, i, arr) { return arr.indexOf(item) === i; });
    return elements.reduce(function (struct, item, i, arr) {
        if (toolbarBlocks[item]) {
            struct.push.apply(struct, toolbarBlocks[item]);
            if (i !== arr.length - 1) {
                struct.push({
                    type: "separator",
                });
            }
        }
        return struct;
    }, []);
}
exports.getToolbarStruct = getToolbarStruct;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditLine = void 0;
var dom_1 = __webpack_require__(1);
var view_1 = __webpack_require__(8);
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(2);
var muon_1 = __webpack_require__(25);
var EditPopup_1 = __webpack_require__(204);
var core_1 = __webpack_require__(0);
var EditLine = /** @class */ (function (_super) {
    __extends(EditLine, _super);
    function EditLine(element, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, element, config) || this;
        _this._store = config.math;
        _this._activePage = config.activePage;
        _this._grid = config.grid;
        _this._suggest = new EditPopup_1.default(function (x, s, e, c) { return _this.setAtCursor(x, s, e, c); });
        _this._prevStyles = [];
        _this._htmlEvents = {
            oninput: function (e) {
                if (!_this._isEdit) {
                    e.target.value = _this._value;
                }
                _this._value = e.target.value;
                _this._isMath =
                    _this._value && _this._value.toString().startsWith("=") ? _this._parse(_this._value) : null;
                if (_this._isMath) {
                    _this._suggest.show(_this._value, e.target, _this._isMath, _this.config.spreadsheet._grid.config.height);
                }
                if (!_this._editMode) {
                    _this.config.events.fire(types_1.SpreadsheetEvents.editLineInput, [e.target.value]);
                }
                else {
                    _this.setValue(_this._value);
                }
            },
            onfocus: function (e) {
                if (!_this._editMode) {
                    _this.config.events.fire(types_1.SpreadsheetEvents.editLineFocus, [e.target.value, e]);
                }
            },
            onblur: function (e) {
                if (!_this._editMode) {
                    _this.config.events.fire(types_1.SpreadsheetEvents.editLineBlur, [e.target.value, e]);
                }
                else {
                    _this.focus();
                }
            },
            onclick: function (e) {
                var cursor = _this._input.selectionStart;
                if (cursor !== _this._prevCursorPosition && _this._isMath) {
                    _this._suggest.show(_this._value, e.target, _this._isMath);
                    _this._prevCursorPosition = cursor;
                }
            },
            onselectionchange: function () {
                var view = _this.getRootView();
                var wrapper = view && view.refs && view.refs.input_wrapper;
                var left = "0px";
                if (_this._isEdit && _this._value && _this._input) {
                    var cursor = _this._input.selectionStart;
                    var valWidth = (0, core_1.getStringWidth)("".concat(_this._value).substr(0, cursor)) + 12;
                    var node = _this.getRootNode();
                    var nodeWidth = node.offsetWidth;
                    if (wrapper && nodeWidth < valWidth) {
                        left = nodeWidth - valWidth + "px";
                    }
                }
                if (wrapper) {
                    wrapper.el.style.left = left;
                    _this.paint();
                }
                return;
            },
        };
        document.addEventListener("selectionchange", _this._htmlEvents.onselectionchange);
        _this.config.events.on(types_1.SpreadsheetEvents.cellInput, function (_cell, val) {
            _this._setValue(val);
        });
        _this.config.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            _this._activePage = _this.config.spreadsheet._activePage;
            var edit = _this.config.spreadsheet._editMode;
            var cursor = _this._input && _this._input.selectionStart;
            if (edit) {
                _this._editMode = edit;
                _this._removeStyles();
                _this._setValue(_this._value);
                _this.focus();
                _this.setCursor(cursor);
                if (edit.pageName === _this.config.spreadsheet.getActiveSheet().name) {
                    _this._editMode = null;
                }
            }
            else {
                _this._editMode = null;
            }
        });
        _this.config.events.on(types_1.SpreadsheetEvents.afterEditStart, function () {
            _this._isEdit = true;
        });
        _this.config.events.on(types_1.SpreadsheetEvents.afterEditEnd, function () {
            _this._isEdit = false;
        });
        var render = function () { return _this._render(); };
        _this.mount(element, (0, dom_1.create)({ render: render }));
        return _this;
    }
    EditLine.prototype._parse = function (text, ctx) {
        if (ctx === void 0) { ctx = this._activePage.getContext(); }
        return this._store.parse(text, ctx);
    };
    EditLine.prototype.navigate = function (key) {
        if (key === "enter" && this._isMath) {
            this._presedEnter = true;
        }
        if (this._editMode && this._presedEnter) {
            this.setCellMath();
            return false;
        }
        return this._suggest.navigate(key);
    };
    EditLine.prototype.setAtCursor = function (value, from, to, cursor) {
        if (!this._input)
            return;
        var startStr = this._value.substr(0, from);
        var endStr = this._value.substr(to);
        var newVal = startStr + value + endStr;
        if (!this._editMode) {
            this.config.events.fire(types_1.SpreadsheetEvents.editLineInput, [newVal]);
        }
        else {
            this.setValue(newVal);
        }
        this._prevCursorPosition = from + cursor;
        this._input.setSelectionRange(from + cursor, from + cursor);
    };
    EditLine.prototype.focus = function () {
        if (this._input) {
            this._input.focus();
        }
    };
    EditLine.prototype.blur = function () {
        if (this._input) {
            this._input.blur();
        }
    };
    EditLine.prototype.lock = function () {
        this._locked = true;
        this.paint();
    };
    EditLine.prototype.unlock = function () {
        this._locked = false;
        this.paint();
    };
    EditLine.prototype.setValueAtRedactor = function (val) {
        var cursor = this._input && this._input.selectionStart;
        this.setAtCursor(val, cursor, cursor, val.length);
    };
    EditLine.prototype.setValue = function (val) {
        this.unlock();
        this._setValue(val);
    };
    EditLine.prototype._setValue = function (val) {
        this._value = val;
        this._isMath =
            this._value && this._value.toString().startsWith("=") ? this._parse(this._value) : null;
        this._colored = this._parseColors(this._value);
        if (this._input)
            this._input.value = this._value;
        this._presedEnter = false;
        this._htmlEvents.onselectionchange();
        this.paint();
    };
    EditLine.prototype.setCellMath = function () {
        if (!this._editMode)
            return;
        this._removeStyles();
        var _a = (0, main_1.getCellIds)(this._editMode.cell, this._grid), row = _a.row, col = _a.col;
        var page = this._editMode.page;
        this._editMode = null;
        page.setCell(row, col, { nextValue: this._value });
        this.config.spreadsheet._changeSheet(page.getMeta().toolbarId);
        this.blur();
        this._presedEnter = false;
        return;
    };
    EditLine.prototype.getValue = function () {
        return this._value;
    };
    EditLine.prototype.clean = function () {
        var _this = this;
        // [dirty]
        setTimeout(function () {
            _this._setValue("");
        }, 1);
    };
    EditLine.prototype.destructor = function () {
        this._suggest.destructor();
        document.removeEventListener("selectionchange", this._htmlEvents.onselectionchange);
    };
    EditLine.prototype.getInput = function () {
        return this._input;
    };
    EditLine.prototype.setCursor = function (cursor) {
        this._input && this._input.setSelectionRange(cursor, cursor);
    };
    EditLine.prototype.isCellExpected = function (cell, needToSet, editor, editedCell) {
        if (this._presedEnter) {
            this._presedEnter = false;
            return;
        }
        if (this._isMath && this._isEdit) {
            var val = this._value;
            var comma = cell.lastIndexOf(",");
            var spliter = cell.lastIndexOf(":");
            var commaIndex = comma > spliter ? comma : spliter;
            var isSpliter = cell.includes(",") || cell.includes(":");
            var cursorStart = editor
                ? editor.selectionStart
                : this._input
                    ? this._input.selectionStart
                    : this._value.length;
            var code = this._isMath.code;
            var _a = this.config.spreadsheet.config
                .localization, decimal = _a.decimal, thousands = _a.thousands;
            var cellsSplitter = decimal === "," || thousands === "," ? ";" : ",";
            // Trims  cell range from cell:cell or cell,cell  to :cell and ,cell when it was ctrl or shift editedCell
            if (commaIndex > -1 && cell.includes(editedCell)) {
                var parse = this._parse(this._isMath.source.substring(0, cursorStart)).code.reverse();
                var sumbolBeforeCursor = parse[2] === 12 ? parse[5] : parse[2];
                if (sumbolBeforeCursor !== muon_1.T_OPERATOR) {
                    cell = cell.substring(commaIndex);
                }
                else {
                    cell = cell.substring(commaIndex + 1);
                }
                cell = cell.split(",").join(cellsSplitter);
            }
            for (var i = 0; i < code.length; i += 3) {
                // finds the char witch is before selection
                var isCursorAfter = code[i + 1] + code[i + 2] == cursorStart;
                var char = code[i] === muon_1.T_SPACE ? code[i - 3] : code[i];
                // checks if the char before selection is a math operator or if the incoming cell is a range
                if (isCursorAfter && ((char == muon_1.T_OPERATOR && val[code[i + 1]] !== ")") || isSpliter)) {
                    //set incoming cell to Edit input
                    if (needToSet) {
                        var active = this.config.spreadsheet.getActiveSheet().name;
                        if (this._editMode && this._editMode.pageName !== active) {
                            if (cell.includes(cellsSplitter) || cell.startsWith(":")) {
                                cell = "".concat(cell.includes(cellsSplitter) ? cellsSplitter : ":").concat(!cell.startsWith(":") ? "'".concat(active, "'!") : "").concat(cell.substring(1));
                            }
                            else {
                                cell = "'".concat(active, "'!").concat(cell);
                            }
                        }
                        var startStr = val.substring(0, cursorStart);
                        var endStr = val.substring(cursorStart);
                        var newval = startStr + cell + endStr;
                        if (!this._editMode) {
                            this.config.events.fire(types_1.SpreadsheetEvents.editLineInput, [newval]);
                        }
                        else {
                            this.setValue(newval);
                            this.setCursor(startStr.length + cell.length);
                        }
                        return startStr.length + cell.length;
                    }
                    return cursorStart;
                }
            }
        }
        return 0;
    };
    EditLine.prototype._render = function () {
        var _this = this;
        return (0, dom_1.el)(".dhx_edit_line", {}, [
            (0, dom_1.el)(".input__wrapper", [
                (0, dom_1.el)(".input_value", {
                    _ref: "input_wrapper",
                }, this._colored),
                (0, dom_1.el)("input.dhx_edit_line_input", {
                    _hooks: {
                        didInsert: function (n) {
                            _this._input = n.el;
                        },
                        didUnmount: function () {
                            document.removeEventListener("selectionchange", _this._htmlEvents.onselectionchange);
                        },
                    },
                    oninput: this._htmlEvents.oninput,
                    onfocus: this._htmlEvents.onfocus,
                    onblur: this._htmlEvents.onblur,
                    onclick: this._htmlEvents.onclick,
                    value: this._value || "",
                    _ref: "input",
                    disabled: this._locked,
                }),
                (0, dom_1.el)(".input-animation"),
            ]),
        ]);
    };
    EditLine.prototype._parseColors = function (val) {
        this._removeStyles();
        var styleNum = 1;
        var result = [];
        var createSpan = function (str, className) {
            return result.push((0, dom_1.el)("span".concat(className ? "." + className : ""), { ".innerText": str }));
        };
        if (val && val[0] === "=") {
            var code = this._parse(val).code;
            var valCursor = 0;
            var _loop_1 = function (i) {
                var strAfterCursor = val.substr(valCursor, code[i + 1] - valCursor);
                var str = val.substr(code[i + 1], code[i + 2]);
                switch (code[i]) {
                    case muon_1.T_SPACE:
                        for (var c = 0; c < code[i + 2]; c++) {
                            result.push((0, dom_1.el)("", { ".innerHTML": "&nbsp;" }));
                            valCursor++;
                        }
                        break;
                    case muon_1.T_ARG:
                    case muon_1.T_RANGE:
                        // eslint-disable-next-line no-case-declarations
                        var isSelected = this_1._prevStyles.find(function (item) { return item && item.cell === str; });
                        styleNum = styleNum === 9 ? 1 : styleNum;
                        if (code[i + 1] > valCursor) {
                            createSpan(strAfterCursor);
                        }
                        valCursor = code[i + 1] + code[i + 2];
                        createSpan(str, "text_range_".concat(isSelected ? isSelected.styleNum : styleNum));
                        if (!isSelected && code[i - 3] !== muon_1.T_ERROR) {
                            this_1._setStyles(str, styleNum);
                            this_1._prevStyles.push({ cell: str, styleNum: styleNum });
                            ++styleNum;
                        }
                        break;
                    case muon_1.T_DATA:
                    case muon_1.T_ERROR:
                        break;
                    case muon_1.T_PAGE:
                        if (code[i + 3] !== muon_1.T_ARG && code[i + 3] !== muon_1.T_RANGE && code[i + 3] !== muon_1.T_ERROR) {
                            if (code[i + 1] !== valCursor) {
                                createSpan(strAfterCursor);
                            }
                            valCursor = code[i + 1] + code[i + 2];
                            createSpan(str);
                        }
                        break;
                    default:
                        if (code[i + 1] > valCursor) {
                            createSpan(strAfterCursor);
                        }
                        valCursor = code[i + 1] + code[i + 2];
                        createSpan(str);
                }
            };
            var this_1 = this;
            for (var i = 0; i < code.length; i += 3) {
                _loop_1(i);
            }
            if (valCursor !== val.length) {
                createSpan(val.substr(valCursor, val.length - valCursor));
            }
        }
        else {
            createSpan(val);
        }
        return result;
    };
    EditLine.prototype._setStyles = function (cell, i) {
        var _this = this;
        if (cell.includes("$")) {
            cell = cell = cell.split("$").join("");
        }
        if (!cell.includes("!")) {
            cell = "'".concat(this._editMode ? this._editMode.pageName : this.config.spreadsheet.getActiveSheet().name, "'!").concat(cell);
        }
        var grid = this.config.grid;
        var code = this._parse(cell).code;
        if ((0, muon_1.fromId)(code[7])[2] !== this._activePage.getID()) {
            return;
        }
        else if (cell.includes("!")) {
            cell = cell.substr(cell.indexOf("!") + 1);
        }
        if (cell.indexOf(":") !== -1) {
            this.config.spreadsheet.eachCell(function (c) {
                var _a = (0, main_1.getCellIds)(c, _this._grid), row = _a.row, col = _a.col;
                grid.addCellCss("".concat(row + 1), "".concat(col + 1), "range_".concat(i));
            }, cell);
        }
        else {
            var _a = (0, main_1.getCellIds)(cell, this._grid), row = _a.row, col = _a.col;
            grid.addCellCss("".concat(row + 1), "".concat(col + 1), "range_".concat(i));
        }
    };
    EditLine.prototype._removeStyles = function () {
        var _this = this;
        var _loop_2 = function (item) {
            if (!item)
                return { value: void 0 };
            var grid = this_2.config.grid;
            var cell = item.cell;
            if (cell.includes("$")) {
                cell = cell.split("$").join("");
            }
            if (cell.includes("!")) {
                cell = cell.substr(cell.indexOf("!") + 1);
            }
            if (cell.includes(":")) {
                this_2.config.spreadsheet.eachCell(function (c) {
                    var _a = (0, main_1.getCellIds)(c, _this._grid), row = _a.row, col = _a.col;
                    grid.removeCellCss("".concat(row + 1), "".concat(col + 1), "range_".concat(item.styleNum));
                }, cell);
            }
            else {
                var _b = (0, main_1.getCellIds)(cell, this_2._grid), row = _b.row, col = _b.col;
                grid.removeCellCss("".concat(row + 1), "".concat(col + 1), "range_".concat(item.styleNum));
            }
        };
        var this_2 = this;
        for (var _i = 0, _a = this._prevStyles; _i < _a.length; _i++) {
            var item = _a[_i];
            var state_1 = _loop_2(item);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        this._prevStyles = [];
    };
    return EditLine;
}(view_1.View));
exports.EditLine = EditLine;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_popup_1 = __webpack_require__(10);
var ts_list_1 = __webpack_require__(32);
var muon_1 = __webpack_require__(25);
var EditPopup = /** @class */ (function () {
    function EditPopup(cb) {
        this._suggestCallback = cb;
    }
    EditPopup.prototype.isVisible = function () {
        return this._popup && this._popup.isVisible();
    };
    EditPopup.prototype.hide = function () {
        if (this.isVisible())
            this._popup.hide();
    };
    EditPopup.prototype.destructor = function () {
        if (this._popup)
            this._popup.destructor();
    };
    EditPopup.prototype.navigate = function (key) {
        if (!this.isVisible()) {
            return false;
        }
        var list = this._list;
        var count = list.data.getLength();
        if (!count)
            return false;
        if (key === "arrowUp" || key === "arrowDown") {
            var dir = key === "arrowDown" ? 1 : -1;
            var index = list.data.getIndex(list.getFocus());
            if (typeof index === "undefined")
                index = dir === -1 ? count : -1;
            this._list.setFocus(list.data.getId((index + dir + count) % count));
            return true;
        }
        // enter key
        var suggest = list.getFocusItem();
        if (!suggest) {
            var id = this._list.data.getId(0);
            suggest = this._list.data.getItem(id);
        }
        this._insertSuggest(suggest.value);
        return true;
    };
    EditPopup.prototype.show = function (val, input, fm, maxHeight, cursor) {
        var cursorStart = cursor || input.selectionStart;
        var code = fm.code;
        var popup = this._getPopup(maxHeight);
        var _loop_1 = function (i) {
            if (code[i] == muon_1.T_NAME && cursorStart == code[i + 1] + code[i + 2]) {
                // cursor after name
                var check_1 = val.substr(code[i + 1], code[i + 2]).toUpperCase();
                this_1._list.data.filter(function (item) { return item.value.startsWith(check_1); });
                if (this_1._list.data.getLength()) {
                    this_1._cursorStart = cursorStart;
                    this_1._startTrim = code[i + 1];
                    popup.show(input, { centering: false });
                }
                else {
                    popup.hide();
                }
                return { value: void 0 };
            }
        };
        var this_1 = this;
        for (var i = 0; i < code.length; i += 3) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        // unfilter if any
        popup.hide();
    };
    EditPopup.prototype._insertSuggest = function (suggest) {
        this._suggestCallback(suggest + "(", this._startTrim, this._cursorStart, suggest.length + 1);
        this._popup.hide();
    };
    EditPopup.prototype._getPopup = function (maxHeight) {
        var _this = this;
        if (!this._popup) {
            var data = Object.keys(muon_1.methods).map(function (i) { return ({ value: i }); });
            this._popup = new ts_popup_1.Popup({
                css: "dhx_suggest_list",
            });
            this._list = new ts_list_1.List(null);
            this._list.data.parse(data);
            this._list.events.on("Click", function (id) {
                var suggest = _this._list.selection.getItem();
                _this._insertSuggest(suggest.value);
                _this._list.selection.remove(suggest.id);
            });
            this._popup.attach(this._list);
        }
        var popup = this._popup.getRootNode();
        if (!popup.style.maxHeight && maxHeight) {
            popup.style.maxHeight = "".concat(maxHeight, "px");
        }
        return this._popup;
    };
    return EditPopup;
}());
exports.default = EditPopup;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferManager = void 0;
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(2);
var selection_1 = __webpack_require__(58);
var en_1 = __webpack_require__(11);
var core_1 = __webpack_require__(0);
var BufferManager = /** @class */ (function () {
    function BufferManager(spreadsheet, grid, callAction, page, dataStore) {
        this._spreadsheet = spreadsheet;
        this._grid = grid;
        this._activePage = page;
        this._math = dataStore.getStore();
        this._dataStore = dataStore;
        // [dirty]
        this._callAction = callAction.bind(spreadsheet);
        this._buffer = {
            value: "",
            math: [],
            meta: [],
            styles: {},
            cell: "",
            cells: "",
            operation: "",
            inserted: false,
            formats: [],
            html: "",
            spans: [],
        };
        this._setHandlers();
    }
    BufferManager.prototype.store = function (operation) {
        var _this = this;
        var focus = this._spreadsheet.selection.getFocusedCell();
        var cellInfo = (0, main_1.getCellInfo)(focus, this._activePage, this._grid);
        var cell = this._spreadsheet.selection.getSelectedCell();
        if (this._prevCopyPage) {
            this._prevCopyPage.setMeta({ inserted: true });
        }
        if (cellInfo.edited) {
            return;
        }
        var range = (0, main_1.isRangeId)(cell);
        var arrOfCells = [cell];
        if (range && cell.includes(",")) {
            arrOfCells = cell.split(",");
            var lastCopyCell = arrOfCells[arrOfCells.length - 1];
            if (!cell.includes(":")) {
                cell = lastCopyCell;
                arrOfCells = [cell];
            }
            else if (!lastCopyCell.includes(":")) {
                cell = lastCopyCell;
                arrOfCells = [cell];
            }
            else {
                var firstRange = void 0;
                var prevItem = void 0;
                var resArr = void 0;
                var firstRangeCoords = void 0;
                var dir = void 0;
                for (var i = 0; i < arrOfCells.length; i++) {
                    var item = arrOfCells[i];
                    if (item.includes(":") && !firstRange) {
                        firstRange = item;
                        firstRangeCoords = {
                            start: (0, main_1.getCellIds)(firstRange.split(":")[0], this._grid),
                            end: (0, main_1.getCellIds)(firstRange.split(":")[1], this._grid),
                        };
                    }
                    if (i) {
                        if (!item.includes(":") && !prevItem.includes(":")) {
                            var checkFirstRange = firstRangeCoords.start.row === firstRangeCoords.end.row ||
                                firstRangeCoords.start.col === firstRangeCoords.end.col;
                            if (checkFirstRange) {
                                var dir_1 = firstRangeCoords.start.row === firstRangeCoords.end.row ? "row" : "col";
                                var cellId = (0, main_1.getCellIds)(item, this._grid)[dir_1];
                                if (firstRangeCoords.start[dir_1] === cellId[dir_1]) {
                                    resArr.push(item);
                                }
                            }
                            else {
                                cell = lastCopyCell;
                                i = arrOfCells.length;
                                resArr = [cell];
                            }
                        }
                        if (item.includes(":") && item !== firstRange) {
                            var firstCellId = (0, main_1.getCellIds)(item.split(":")[0], this._grid);
                            var lastCellId = (0, main_1.getCellIds)(item.split(":")[1], this._grid);
                            var firstCellCheck = firstCellId.row === firstRangeCoords.start.row ||
                                firstCellId.row === firstRangeCoords.end.row ||
                                firstCellId.col === firstRangeCoords.start.col ||
                                firstCellId.col === firstRangeCoords.end.col;
                            var lastCellCheck = lastCellId.row === firstRangeCoords.start.row ||
                                lastCellId.row === firstRangeCoords.end.row ||
                                lastCellId.col === firstRangeCoords.start.col ||
                                lastCellId.col === firstRangeCoords.end.col;
                            var isSameRange = firstCellCheck && lastCellCheck;
                            var currentDir = firstCellId.row === firstRangeCoords.start.row ? "col" : "row";
                            if (!dir) {
                                dir = currentDir;
                            }
                            if (isSameRange && dir === currentDir) {
                                resArr.push(item);
                            }
                            else {
                                cell = lastCopyCell;
                                i = arrOfCells.length;
                                resArr = [cell];
                            }
                        }
                    }
                    else {
                        resArr = [item];
                    }
                    prevItem = item;
                }
                arrOfCells = resArr;
                if (arrOfCells.length > 1) {
                    cell = arrOfCells.join();
                }
            }
        }
        if ((0, main_1.isRangeId)(cell) && !cell.includes(":")) {
            this._buffer.cell = null;
            return;
        }
        var res = [];
        var isColDir;
        if ((0, main_1.isRangeId)(arrOfCells[0])) {
            var firstCellRow = (0, main_1.getCellIds)(arrOfCells[0].split(":")[0], this._grid).row;
            var lastCellRow = (0, main_1.getCellIds)(arrOfCells[0].split(":")[1], this._grid).row;
            var nextCellRow = arrOfCells[1] && (0, main_1.getCellIds)(arrOfCells[1].split(":")[0], this._grid).row;
            isColDir = nextCellRow && (nextCellRow === firstCellRow || nextCellRow === lastCellRow);
        }
        var currentRow = 0;
        var _loop_1 = function (i) {
            var index = 0;
            var prevCell;
            currentRow = isColDir ? 0 : currentRow;
            var range_1 = arrOfCells[i];
            this_1._spreadsheet.eachCell(function (c, val) {
                if (!(0, core_1.isDefined)(val)) {
                    val = " ";
                }
                if (!index) {
                    res[currentRow] ? (res[currentRow] += "\t" + val) : res.push("".concat(val));
                }
                else {
                    var prevCellId = (0, main_1.getCellIds)(prevCell, _this._grid);
                    var cellId = (0, main_1.getCellIds)(c, _this._grid);
                    if (prevCellId.row === cellId.row) {
                        res[currentRow] ? (res[currentRow] += "\t" + val) : res.push("".concat(val));
                    }
                    else {
                        currentRow++;
                        res[currentRow] ? (res[currentRow] += "\t" + val) : res.push("".concat(val));
                    }
                }
                prevCell = c;
                index++;
            }, range_1);
            currentRow++;
        };
        var this_1 = this;
        for (var i = 0; i < arrOfCells.length; i++) {
            _loop_1(i);
        }
        this._buffer.value = res.join("\n");
        this._buffer.styles = this._spreadsheet.getStyle(cell, false);
        var merged = this._activePage.getMeta().merged;
        var spans = [];
        if ((0, main_1.isRangeId)(cell)) {
            var math_1 = [];
            var cellArr_1 = (0, main_1.getCellsArray)(cell, this._grid);
            this._spreadsheet.eachCell(function (c) {
                math_1.push(_this._spreadsheet._getMath(c));
                var span = (0, main_1.isCellSpaned)(c, merged);
                if (span && !spans.includes(span)) {
                    var from = span.from, to = span.to;
                    var firstCell = (0, main_1.getCellNameByIndex)(from.row, from.column + 1, _this._grid);
                    var lastCell = (0, main_1.getCellNameByIndex)(to.row, to.column + 1, _this._grid);
                    if (cellArr_1.includes(firstCell) && cellArr_1.includes(lastCell) && firstCell === c) {
                        spans.push(span);
                    }
                }
                else {
                    spans.push(null);
                }
            }, cell);
            this._buffer.math = math_1;
        }
        else {
            var math = this._spreadsheet._getMath(cell);
            this._buffer.math = [math];
            var span = (0, main_1.isCellSpaned)(cell, merged);
            if (span && !spans.includes(span)) {
                spans.push(span);
            }
        }
        this._buffer.spans = spans;
        this._buffer.cells = cell;
        this._buffer.meta = [];
        this._spreadsheet.eachCell(function (c) {
            var _a = (0, main_1.getCellIds)(c, _this._grid), row = _a.row, col = _a.col;
            _this._buffer.meta.push(_this._activePage.getCell(row, col) || {});
        }, cell);
        var format = this._spreadsheet.getFormat(cell);
        this._buffer.formats = format instanceof Array ? format : [format];
        this._buffer.cell = focus;
        this._buffer.operation = operation;
        this._activePage.setMeta({ inserted: false });
        this._prevCopyPage = this._activePage;
        this._grid.paint();
    };
    BufferManager.prototype.paste = function () {
        var _this = this;
        if (!this._buffer.cell) {
            return;
        }
        this._activePage.setMeta({ inserted: true });
        var cell = this._buffer.cell;
        var format = this._buffer.formats;
        var newCell = cell;
        var isRangeCells = false;
        if ((0, main_1.isRangeId)(this._buffer.cells)) {
            isRangeCells = true;
            var index_1 = (0, main_1.getRangeIndexes)(this._buffer.cells, this._grid);
            var to = (0, main_1.getCellIndex)(cell, this._grid);
            var diff = {
                row: index_1.end.row - index_1.start.row,
                col: index_1.end.col - index_1.start.col,
            };
            var lastCell = (0, main_1.getCellNameByIndex)(to.row + diff.row, to.col + diff.col, this._grid);
            if ((0, main_1.isRangeId)(cell)) {
                var bufferCellsLength = (0, main_1.getCellsArray)(this._buffer.cells, this._grid).length;
                var targetCellsLength = (0, main_1.getCellsArray)(cell, this._grid).length;
                if (bufferCellsLength > targetCellsLength) {
                    newCell = "".concat(cell.split(":")[0], ":").concat(lastCell);
                }
            }
            else {
                newCell += ":".concat(lastCell);
            }
        }
        var isRangeTarget = (0, main_1.isRangeId)(newCell);
        var styles = Array.isArray(this._buffer.styles)
            ? this._buffer.styles.map(function (obj) { return dhx.css.add(obj); })
            : dhx.css.add(this._buffer.styles);
        var actionsGroup = [];
        if (this._buffer.operation === "cut") {
            actionsGroup.push({
                cell: this._buffer.cells,
                action: types_1.Actions.setCellFormat,
                groupAction: isRangeTarget ? types_1.Actions.groupAction : null,
                val: "",
                page: this._activePage,
                dataStore: this._dataStore,
            }, {
                cell: this._buffer.cells,
                action: types_1.Actions.setCellValue,
                val: "",
                page: this._activePage,
                groupAction: isRangeCells ? types_1.Actions.groupAction : null,
                dataStore: this._dataStore,
            }, {
                cell: this._buffer.cells,
                action: types_1.Actions.setCellStyle,
                val: "",
                page: this._activePage,
                groupAction: isRangeCells ? types_1.Actions.groupAction : null,
                dataStore: this._dataStore,
            }, {
                cell: this._buffer.cells,
                action: types_1.Actions.setValidation,
                val: null,
                page: this._activePage,
                groupAction: isRangeCells ? types_1.Actions.groupAction : null,
                dataStore: this._dataStore,
            }, {
                cell: this._buffer.cells,
                action: types_1.Actions.insertLink,
                val: null,
                page: this._activePage,
                groupAction: isRangeCells ? types_1.Actions.groupAction : null,
                dataStore: this._dataStore,
            });
            // remove spans
            this._buffer.spans.forEach(function (span) {
                if (!span)
                    return;
                var from = span.from;
                var firstCell = (0, main_1.getCellNameByIndex)(from.row, from.column + 1, _this._grid);
                actionsGroup.push({
                    action: types_1.Actions.unmerge,
                    groupAction: types_1.Actions.groupAction,
                    dataStore: _this._dataStore,
                    cell: firstCell,
                    page: _this._activePage,
                });
            });
            this._buffer.operation = "copy";
        }
        // get values from buffer
        var values = (isRangeCells ? [].concat(this._buffer.value) : this._buffer.value);
        var maths = this._buffer.math;
        var options = this._buffer.meta.map(function (i) { var _a; return ((_a = i.editor) === null || _a === void 0 ? void 0 : _a.options) || null; });
        var link = this._buffer.meta.map(function (i) { return i.link || null; });
        var valuesLength = values.length;
        // get info about start range
        var from;
        var dx;
        // let dy: number;
        if (isRangeCells) {
            var indexes = (0, main_1.getRangeIndexes)(this._buffer.cells, this._grid);
            from = indexes.start;
            dx = indexes.end.col - indexes.start.col + 1;
            // dy = indexes.end.row - indexes.start.row + 1;
        }
        else {
            from = (0, main_1.getCellIndex)(this._buffer.cells, this._grid);
            dx = 1;
            // dy = 1;
        }
        var i = 0;
        var merged = this._activePage.getMeta().merged;
        this._spreadsheet.eachCell(function (aCell) {
            var iSource = i % valuesLength;
            var value = values[iSource];
            var math = maths[iSource];
            if (math) {
                var ix = iSource % dx;
                var iy = (iSource - ix) / dx;
                var to = (0, main_1.getCellIndex)(aCell, _this._grid);
                value =
                    "=" +
                        _this._math.transposeMath(math.source, to.row - from.row - iy, to.col - from.col - ix);
            }
            values[i] = value;
            i++;
        }, newCell);
        values = values.map(function (v, i) {
            if ((0, main_1.doesContainUrl)(v) && !link[i]) {
                link[i] = { href: v };
                return "";
            }
            return v;
        });
        actionsGroup.push({
            cell: newCell,
            action: types_1.Actions.setCellFormat,
            groupAction: isRangeTarget ? types_1.Actions.groupAction : null,
            val: format,
            page: this._activePage,
            dataStore: this._dataStore,
        }, {
            cell: newCell,
            action: types_1.Actions.setCellStyle,
            val: styles,
            page: this._activePage,
            groupAction: isRangeTarget ? types_1.Actions.groupAction : null,
            dataStore: this._dataStore,
        }, {
            cell: newCell,
            action: types_1.Actions.setCellValue,
            val: values,
            page: this._activePage,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        }, {
            cell: newCell,
            action: types_1.Actions.setValidation,
            val: options,
            page: this._activePage,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        }, {
            cell: newCell,
            action: types_1.Actions.insertLink,
            val: link,
            page: this._activePage,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        });
        var err = false;
        var grid = this._spreadsheet._grid;
        var index = 0;
        var focusedArr = (0, main_1.getCellsArray)(this._buffer.cell, grid);
        var _a = this._spreadsheet.config, leftSplit = _a.leftSplit, topSplit = _a.topSplit;
        var newSpannedCells = [];
        this._spreadsheet.eachCell(function (c) {
            var _a;
            var span = _this._buffer.spans[index];
            var isTargetSpanned = (0, main_1.isCellSpaned)(c, merged);
            if (span) {
                var _b = (0, selection_1.getCellsDiff)(focusedArr[index], c, grid), x = _b.x, y = _b.y;
                var firstCell = (0, main_1.getCellNameByIndex)(span.from.row + y, span.from.column + x + 1, grid);
                var lastCell = (0, main_1.getCellNameByIndex)(span.to.row + y, span.to.column + x + 1, grid);
                var spannedCells = "".concat(firstCell, ":").concat(lastCell);
                if (!(0, main_1.checkSpanByNames)(spannedCells, leftSplit, topSplit, grid)) {
                    (0, main_1.showAlert)(en_1.default.spanPasteError);
                    err = true;
                    return;
                }
                newSpannedCells.push((0, main_1.getCellsArray)(spannedCells, grid));
                if (!isTargetSpanned ||
                    ((_a = _this._spreadsheet._spanControl) === null || _a === void 0 ? void 0 : _a.checkBeforeMerge(spannedCells))) {
                    actionsGroup.push({
                        action: types_1.Actions.merge,
                        groupAction: types_1.Actions.merge,
                        dataStore: _this._dataStore,
                        cell: spannedCells,
                        page: _this._activePage,
                        $autofill: true,
                    });
                }
            }
            if (isTargetSpanned && !span && newSpannedCells.includes(c)) {
                actionsGroup.push({
                    action: types_1.Actions.unmerge,
                    groupAction: types_1.Actions.groupAction,
                    dataStore: _this._dataStore,
                    cell: c,
                    page: _this._activePage,
                });
            }
            index = index === focusedArr.length - 1 ? 0 : ++index;
        }, newCell);
        if (err)
            return;
        this._spreadsheet.eachCell(function (c) {
            var _a = (0, main_1.getCellIds)(c, grid), row = _a.row, col = _a.col;
            _this._activePage.setCell(+row, +col, { $toolbarAlign: true });
        }, newCell);
        this._callAction(actionsGroup);
        var end = (0, main_1.getCellIds)(newCell, grid).end;
        var gridRows = grid.data.getLength();
        var gridCols = grid.config.columns.length;
        if (gridRows < (end === null || end === void 0 ? void 0 : end.row) + 1 || gridCols <= (end === null || end === void 0 ? void 0 : end.col) + 1) {
            this._spreadsheet._updateGridSizes();
        }
        this._spreadsheet.selection.setSelectedCell(newCell, false);
    };
    BufferManager.prototype.getStruct = function () {
        return this._buffer;
    };
    BufferManager.prototype._setHandlers = function () {
        var _this = this;
        this._spreadsheet.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            _this._activePage = _this._spreadsheet._activePage;
        });
    };
    return BufferManager;
}());
exports.BufferManager = BufferManager;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomCsvDriver = void 0;
var ts_data_1 = __webpack_require__(13);
var main_1 = __webpack_require__(2);
var CustomCsvDriver = /** @class */ (function (_super) {
    __extends(CustomCsvDriver, _super);
    function CustomCsvDriver(grid) {
        var _this = _super.call(this) || this;
        _this._grid = grid;
        return _this;
    }
    CustomCsvDriver.prototype.toJsonArray = function (data) {
        var _this = this;
        var dataArr = _super.prototype.toJsonArray.call(this, data);
        var d = dataArr.reduce(function (total, item, i) {
            for (var key in item) {
                total.push({
                    value: item[key],
                    cell: (0, main_1.getCellNameByIndex)(i, parseFloat(key), _this._grid),
                });
            }
            return total;
        }, []);
        return d;
    };
    return CustomCsvDriver;
}(ts_data_1.CsvDriver));
exports.CustomCsvDriver = CustomCsvDriver;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyManager = void 0;
var FocusManager_1 = __webpack_require__(19);
var html_1 = __webpack_require__(4);
function getHotKeyCode(code) {
    var matches = code.toLowerCase().match(/\w+/g);
    var comp = 0;
    var key = "";
    for (var i = 0; i < matches.length; i++) {
        var check = matches[i];
        if (check === "ctrl") {
            comp += 4;
        }
        else if (check === "shift") {
            comp += 2;
        }
        else if (check === "alt") {
            comp += 1;
        }
        else {
            key = check;
        }
    }
    return comp + key;
}
var ie_key_map = {
    Up: "arrowUp",
    Down: "arrowDown",
    Right: "arrowRight",
    Left: "arrowLeft",
    Esc: "escape",
    Spacebar: "space",
};
var KeyManager = /** @class */ (function () {
    function KeyManager(beforeCall) {
        var _this = this;
        this._keysStorage = {};
        this._initHandler = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = (0, html_1.isIE)() ? ie_key_map[keyName] || keyName : keyName;
            }
            var actions = _this._keysStorage[(e.ctrlKey || e.metaKey ? 4 : 0) +
                (e.shiftKey ? 2 : 0) +
                (e.altKey ? 1 : 0) +
                (key && key.toLowerCase())];
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    if (_this._beforeCall && _this._beforeCall(e, FocusManager_1.focusManager.getFocusId()) === false) {
                        return;
                    }
                    actions[i].handler(e);
                }
            }
        };
        if (beforeCall) {
            this._beforeCall = beforeCall;
        }
        document.addEventListener("keydown", this._initHandler);
    }
    KeyManager.prototype.destructor = function () {
        document.removeEventListener("keydown", this._initHandler);
        this.removeHotKey();
    };
    KeyManager.prototype.addHotKey = function (key, handler) {
        var code = getHotKeyCode(key);
        if (!this._keysStorage[code]) {
            this._keysStorage[code] = [];
        }
        this._keysStorage[code].push({ handler: handler });
    };
    KeyManager.prototype.removeHotKey = function (key, handler) {
        var _this = this;
        if (key) {
            if (key && handler) {
                var code_1 = getHotKeyCode(key);
                var functionToString_1 = function (fun) {
                    return fun
                        .toString()
                        .replace(/\n/g, "")
                        .replace(/\s/g, "");
                };
                this._keysStorage[code_1].forEach(function (existHotKey, i) {
                    if (functionToString_1(existHotKey.handler) === functionToString_1(handler)) {
                        delete _this._keysStorage[code_1][i];
                        _this._keysStorage[code_1] = _this._keysStorage[code_1].filter(function (el) { return el; });
                    }
                });
            }
            else {
                var code = getHotKeyCode(key);
                delete this._keysStorage[code];
            }
        }
        else {
            this._keysStorage = {};
        }
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Selection = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var ts_grid_1 = __webpack_require__(52);
var main_1 = __webpack_require__(2);
var selection_1 = __webpack_require__(58);
var types_1 = __webpack_require__(6);
var render_1 = __webpack_require__(24);
var Selection = /** @class */ (function () {
    function Selection(spreadsheet, grid, bufferManager, activePage) {
        this._spreadsheet = spreadsheet;
        this._grid = grid;
        this._bufferManager = bufferManager;
        this._events = spreadsheet.events;
        this._activePage = activePage;
        if (!spreadsheet.config.readonly) {
            this._setHandlers();
        }
    }
    Selection.prototype.setSelectedCell = function (cell, scroll) {
        var _this = this;
        if (scroll === void 0) { scroll = true; }
        if (!cell) {
            return;
        }
        if (!this._events.fire(types_1.SpreadsheetEvents.beforeSelectionSet, [cell])) {
            return;
        }
        this._removeHeadersCss();
        var merged = this._activePage.getMeta().merged;
        var cells = cell.split(",");
        var selected = cells.map(function (c) {
            var newCell = c;
            if (!(merged === null || merged === void 0 ? void 0 : merged.length) || (_this._pressedArea && _this._pressedArea !== "cell"))
                return newCell;
            if ((0, main_1.isRangeId)(c)) {
                var cells_1 = (0, main_1.getRangeArray)(c, _this._grid);
                var set_1 = new Set();
                cells_1.forEach(function (rangeCell) {
                    var span = (0, main_1.isCellSpaned)(rangeCell, merged);
                    if (span) {
                        set_1.add(span);
                    }
                });
                if (set_1.size) {
                    var firstCellIds = (0, main_1.getCellIds)(cells_1[0], _this._grid);
                    var lastCellIds = (0, main_1.getCellIds)(cells_1[cells_1.length - 1], _this._grid);
                    var firstRow_1 = firstCellIds.row, firstCol_1 = firstCellIds.col;
                    var lastRow_1 = lastCellIds.row, lastCol_1 = lastCellIds.col;
                    Array.from(set_1).forEach(function (_a) {
                        var from = _a.from, to = _a.to;
                        if (from.row < firstRow_1) {
                            firstRow_1 = from.row;
                        }
                        if (from.column < firstCol_1) {
                            firstCol_1 = from.column;
                        }
                        if (to.row > lastRow_1) {
                            lastRow_1 = to.row;
                        }
                        if (to.column > lastCol_1) {
                            lastCol_1 = to.column;
                        }
                    });
                    var firstCell = (0, main_1.getCellNameByIndex)(firstRow_1, firstCol_1 + 1, _this._grid);
                    var lastCell = (0, main_1.getCellNameByIndex)(lastRow_1, lastCol_1 + 1, _this._grid);
                    newCell = "".concat(firstCell, ":").concat(lastCell);
                }
            }
            else {
                var span = (0, main_1.isCellSpaned)(c, merged);
                if (span) {
                    newCell = (0, main_1.getCellNameByIndex)(span.from.row, span.from.column + 1, _this._grid);
                }
            }
            return newCell;
        });
        this._activePage.setMeta({ selectedCells: selected });
        var nextFocused = cells[cells.length - 1];
        if ((0, main_1.isRangeId)(nextFocused)) {
            nextFocused = nextFocused.split(":")[0];
        }
        this.setFocusedCell(nextFocused, scroll);
        this._setHeadersCss();
        if (!this._mousePressed) {
            this._events.fire(types_1.SpreadsheetEvents.afterSelectionSet, [this.getSelectedCell()]);
        }
        else {
            this._grid.paint();
        }
    };
    Selection.prototype.getSelectedCell = function () {
        var selected = this._activePage.getMeta().selectedCells;
        if (selected && selected.length) {
            return selected.join(",");
        }
    };
    Selection.prototype.getFocusedCell = function () {
        var focusedCell = this._activePage.getMeta().focusedCell;
        if (focusedCell && focusedCell.cell) {
            return focusedCell.cell;
        }
    };
    Selection.prototype.setFocusedCell = function (cell, scroll) {
        if (scroll === void 0) { scroll = true; }
        if (!cell)
            return;
        cell = cell.toUpperCase();
        if (!this._events.fire(types_1.SpreadsheetEvents.beforeFocusSet, [cell])) {
            return;
        }
        var _a = (0, main_1.getCellIds)(cell, this._grid), row = _a.row, col = _a.col;
        this._activePage.setMeta({
            focusedCell: {
                row: row,
                col: col,
                cell: cell,
                edit: false,
            },
        });
        if (scroll) {
            var id = (0, main_1.getCellIds)(cell, this._grid);
            this._grid.scrollTo("".concat(id.row + 1), "".concat(id.col + 1));
        }
        this._events.fire(types_1.SpreadsheetEvents.afterFocusSet, [cell]);
    };
    Selection.prototype.removeSelectedCell = function (cell) {
        var _this = this;
        var selected = this.getSelectedCell();
        if (selected) {
            if (!cell) {
                this._activePage.setMeta({ selectedCells: null });
            }
            else {
                var selectedCells = selected.split(",");
                var splitedTarget = cell.split(",");
                var cellsToRemove_1 = [];
                splitedTarget.forEach(function (c) {
                    if ((0, main_1.isRangeId)(c)) {
                        var cells = (0, main_1.getCellsArray)(c, _this._grid);
                        cells.forEach(function (i) {
                            cellsToRemove_1.push(i);
                        });
                        return;
                    }
                    cellsToRemove_1.push(c);
                });
                var next_1 = [];
                selectedCells.forEach(function (c) {
                    if ((0, main_1.isRangeId)(c)) {
                        var cells_2 = (0, main_1.getCellsArray)(c, _this._grid);
                        cellsToRemove_1.forEach(function (i) {
                            var index = cells_2.indexOf(i);
                            if (index > -1) {
                                cells_2[index] = null;
                            }
                        });
                        var firstCell_1 = null;
                        cells_2.forEach(function (i, index) {
                            if (!firstCell_1) {
                                firstCell_1 = i;
                                return;
                            }
                            if (!i) {
                                next_1.push("".concat(firstCell_1, ":").concat(cells_2[index - 1]));
                                firstCell_1 = null;
                            }
                            if (i && index === cells_2.length - 1) {
                                next_1.push("".concat(firstCell_1, ":").concat(cells_2[index]));
                            }
                        });
                        return;
                    }
                    if (!cellsToRemove_1.includes(c)) {
                        next_1.push(c);
                    }
                });
                if (next_1.length) {
                    this.setSelectedCell(next_1.join(","), false);
                    return;
                }
                else {
                    this._activePage.setMeta({ selectedCells: null });
                }
            }
            this._grid.paint();
        }
    };
    Selection.prototype._isInRange = function (cell, range) {
        if (!range || !cell || !range.includes(":")) {
            return false;
        }
        var _a = (0, main_1.getCellIndex)(cell, this._grid), row = _a.row, col = _a.col;
        var _b = (0, main_1.getRangeIndexes)(range, this._grid), start = _b.start, end = _b.end;
        var between = function (x, min, max) {
            return (x - min) * (x - max) <= 0;
        };
        if (start && end) {
            return between(row, start.row, end.row) && between(col, start.col, end.col);
        }
        return false;
    };
    Selection.prototype._setSearchCell = function (index) {
        if (!this._searchedCells[index])
            return;
        this._searchCell = this._searchedCells[index];
        var _a = (0, main_1.getCellIndex)(this._searchCell, this._grid, true), row = _a.row, col = _a.col;
        this._grid.scrollTo(row + 1, col);
    };
    Selection.prototype._setSearchedArray = function (cells) {
        this._searchedCells = cells;
    };
    Selection.prototype._removeSearchCell = function () {
        this._searchCell = null;
        this._searchedCells = [];
        this._grid.paint();
    };
    Selection.prototype._removeHeadersCss = function () {
        var _this = this;
        var selected = this.getSelectedCell();
        if (selected) {
            this._prevHeaderCss.forEach(function (cellName) {
                var index = (0, main_1.getCellIndex)(cellName, _this._grid);
                var row = _this._grid.data.getId(index.row);
                if (row !== undefined) {
                    _this._grid.removeRowCss(row, "dhx_selected_row");
                }
                var col = _this._grid.config.columns[index.col];
                if (col !== undefined) {
                    col.header[0].css = col.header[0].css.replace(" dhx_selected_header", "");
                }
            });
            var focusedCell = this._activePage.getMeta().focusedCell;
            if (this._grid.data.exists(focusedCell.row)) {
                this._grid.removeRowCss(focusedCell.row, "dhx_selected_row");
            }
        }
        if (this._filteredCells) {
            this._spreadsheet.eachCell(function (cellName) {
                var index = (0, main_1.getCellIndex)(cellName, _this._grid);
                var row = _this._grid.data.getId(index.row);
                if (row !== undefined) {
                    _this._grid.removeRowCss(row, "dhx_filtered_row");
                }
                var col = _this._grid.config.columns[index.col];
                if (col !== undefined) {
                    col.header[0].css = col.header[0].css.replace(" dhx_filtered_header", "");
                }
            }, this._filteredCells);
            this._filteredCells = "";
        }
    };
    Selection.prototype._setHeadersCss = function () {
        var _this = this;
        var selected = this.getSelectedCell();
        var _a = this._activePage.getMeta(), merged = _a.merged, filter = _a.filter;
        this._prevHeaderCss = [];
        if (selected) {
            var spans_1 = [];
            this._spreadsheet.eachCell(function (cellName) {
                var index = (0, main_1.getCellIndex)(cellName, _this._grid);
                var row = _this._grid.data.getId(index.row);
                if (row !== undefined) {
                    _this._grid.addRowCss(row, "dhx_selected_row");
                }
                var span = (0, main_1.isCellSpaned)(cellName, merged);
                var spanedCell = cellName;
                if (span &&
                    !spans_1.includes(span) &&
                    _this._pressedArea !== "header" &&
                    _this._pressedArea !== "index") {
                    var from = span.from, to = span.to;
                    spanedCell = "".concat((0, main_1.getCellNameByIndex)(from.row, from.column + 1, _this._grid), ":").concat((0, main_1.getCellNameByIndex)(to.row, to.column + 1, _this._grid));
                    spans_1.push(span);
                }
                if ((0, main_1.isRangeId)(spanedCell)) {
                    _this._spreadsheet.eachCell(function (cn) { return _this._setCss(cn); }, spanedCell);
                }
                else {
                    _this._setCss(spanedCell);
                }
            });
        }
        if (filter) {
            this._spreadsheet.eachCell(function (cellName) {
                var index = (0, main_1.getCellIndex)(cellName, _this._grid);
                var row = _this._grid.data.getId(index.row);
                if (row !== undefined) {
                    _this._grid.addRowCss(row, "dhx_filtered_row");
                }
                var col = _this._grid.config.columns[index.col];
                if (col !== undefined && !col.header[0].css.includes("dhx_filtered_header")) {
                    col.header[0].css += " dhx_filtered_header";
                }
            }, filter.cell);
            this._filteredCells = filter.cell;
        }
    };
    Selection.prototype._setCss = function (name) {
        this._prevHeaderCss.push(name);
        var index = (0, main_1.getCellIndex)(name, this._grid);
        var row = this._grid.data.getId(index.row);
        if (row !== undefined) {
            this._grid.addRowCss(row, "dhx_selected_row");
        }
        var col = this._grid.config.columns[index.col];
        if (col !== undefined && !col.header[0].css.includes("dhx_selected_header")) {
            col.header[0].css += " dhx_selected_header";
        }
    };
    Selection.prototype._selectRow = function (row) {
        var firsCol = this._grid.config.columns[1];
        var lastCol = this._grid.config.columns[this._grid.config.columns.length - 1];
        this.setSelectedCell("".concat((0, main_1.getCellNameById)(this._grid, row.id, firsCol.id), ":").concat((0, main_1.getCellNameById)(this._grid, row.id, lastCol.id)), false);
    };
    Selection.prototype._selectColumn = function (col) {
        var firstRowId = this._grid.data.getId(0);
        var lastRowId = this._grid.data.getId(this._grid.data.getLength() - 1);
        var firstRow = this._grid.data.getItem(firstRowId);
        var lastRow = this._grid.data.getItem(lastRowId);
        this.setSelectedCell("".concat((0, main_1.getCellNameById)(this._grid, firstRow.id, col.id), ":").concat((0, main_1.getCellNameById)(this._grid, lastRow.id, col.id)), false);
    };
    Selection.prototype._setGroupSelectionHandlers = function () {
        var _this = this;
        if (this._spreadsheet.config.readonly)
            return;
        this._grid.events.on(ts_grid_1.GridEvents.cellMouseOver, function (row, col) {
            if ((0, main_1.getCellInfo)(_this.getFocusedCell(), _this._activePage, _this._grid).edited) {
                return;
            }
            var meta = _this._activePage.getMeta();
            var focusedCell = meta.focusedCell;
            if (_this._mousePressed) {
                if (_this._pressedArea !== "index" && col.id === "$index") {
                    return;
                }
                if (_this._pressedArea === "header" && col.id !== "$index") {
                    var lastRowId = _this._grid.data.getId(_this._grid.data.getLength() - 1);
                    var lastRow = _this._grid.data.getItem(lastRowId);
                    _this.setSelectedCell("".concat(focusedCell.cell, ":").concat((0, main_1.getCellNameById)(_this._grid, lastRow.id, col.id)), false);
                    return;
                }
                var lastCol = _this._grid.config.columns[_this._grid.config.columns.length - 1];
                var lastCell = (0, main_1.getCellNameById)(_this._grid, row.id, _this._pressedArea === "index" ? lastCol.id : col.id);
                var focused = focusedCell.cell;
                var selected = __spreadArray([], meta.selectedCells, true);
                if (_this._pressedArea === "fillHandle") {
                    lastCell = (0, selection_1.getLastCopyingCell)(_this._cellsToCopy, lastCell, _this._grid);
                    var lastCellInRange = _this._isInRange(lastCell, _this._cellsToCopy);
                    if (((0, main_1.isRangeId)(_this._cellsToCopy) && lastCell === focused) || lastCellInRange) {
                        lastCell = _this._cellsToCopy.split(":")[1];
                    }
                }
                var range = focused === lastCell ? focused : "".concat(focused, ":").concat(lastCell);
                selected[selected.length - 1] = range;
                var prevFocusedCell = _this.getFocusedCell();
                _this.setSelectedCell(selected.join(","), false);
                _this.setFocusedCell(prevFocusedCell, false);
            }
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellMouseOver, function (col) {
            if (_this._pressedArea === "cell") {
                return;
            }
            if (_this._mousePressed && _this._pressedArea === "header" && col.id !== "$index") {
                var lastRowId = _this._grid.data.getId(_this._grid.data.getLength() - 1);
                var lastRow = _this._grid.data.getItem(lastRowId);
                var focusedCell = _this._activePage.getMeta().focusedCell;
                _this.setSelectedCell("".concat(focusedCell.cell, ":").concat((0, main_1.getCellNameById)(_this._grid, lastRow.id, col.id.toString())), false);
            }
        });
    };
    Selection.prototype._setHandlers = function () {
        var _this = this;
        var gridRect;
        var reCallTimer;
        (0, dom_1.awaitRedraw)().then(function () {
            var _a;
            gridRect = (_a = _this._grid.getRootView().node) === null || _a === void 0 ? void 0 : _a.el.getBoundingClientRect();
        });
        var moveHandler = function (e) {
            if (reCallTimer) {
                clearTimeout(reCallTimer);
            }
            var scrollState = _this._grid.getScrollState();
            if (e.clientX > gridRect.width + gridRect.left - 50) {
                _this._grid.scroll(scrollState.x + 50, scrollState.y);
            }
            if (e.clientX < gridRect.left + 50) {
                _this._grid.scroll(scrollState.x - 50, scrollState.y);
            }
            if (e.clientY > gridRect.height + gridRect.top - 50) {
                _this._grid.scroll(scrollState.x, scrollState.y + 50);
            }
            if (e.clientY < gridRect.top + 50) {
                _this._grid.scroll(scrollState.x, scrollState.y - 50);
            }
            reCallTimer = setTimeout(function () {
                moveHandler(e);
            }, 100);
        };
        document.addEventListener("mouseup", function () {
            if (_this._mousePressed) {
                _this._mousePressed = false;
                var selected = _this.getSelectedCell();
                if (_this._pressedArea === "fillHandle") {
                    if (selected !== _this._cellsToCopy) {
                        _this._events.fire(types_1.SpreadsheetEvents.groupFill, [_this._cellsToCopy, selected]);
                    }
                    _this._cellsToCopy = "";
                }
                _this._pressedArea = null;
                document.removeEventListener("mousemove", moveHandler);
                if (reCallTimer) {
                    clearTimeout(reCallTimer);
                }
                if (selected) {
                    _this._events.fire(types_1.SpreadsheetEvents.afterSelectionSet, [_this.getSelectedCell()]);
                }
                _this._grid.paint();
            }
        });
        this._grid.events.on(ts_grid_1.GridEvents.cellMouseDown, function (row, col, e) {
            var _a;
            _this._mousePressed = true;
            gridRect = _this._grid.getRootView().node.el.getBoundingClientRect();
            setTimeout(function () {
                if (_this._mousePressed) {
                    document.addEventListener("mousemove", moveHandler);
                }
            }, 100);
            var selected = _this._activePage.getMeta().selectedCells;
            if (col.id === "$index") {
                var resizedRow = e.target.getAttribute("data-dhx-id");
                if (e.shiftKey) {
                    var selected_1 = _this.getSelectedCell();
                    var range = [];
                    if ((0, main_1.isRangeId)(selected_1)) {
                        range = selected_1.split(":");
                    }
                    var firstCellId = (0, main_1.getCellIds)(range[0] || selected_1, _this._grid);
                    var columns = _this._grid.config.columns;
                    var lastCell = (0, main_1.getCellNameById)(_this._grid, row.id, columns[columns.length - 1].id);
                    var firstCell = (0, main_1.getCellNameById)(_this._grid, firstCellId.row + 1, 1);
                    _this.setSelectedCell("".concat(firstCell, ":").concat(lastCell), false);
                    return;
                }
                if (!resizedRow) {
                    _this._pressedArea = "index";
                    _this._selectRow(row);
                    _this._mousePressed = true;
                }
                else {
                    document.removeEventListener("mousemove", moveHandler);
                    _this._mousePressed = false;
                    var selected_2 = (_a = _this.getSelectedCell()) === null || _a === void 0 ? void 0 : _a.split(":");
                    var first = selected_2 && (0, main_1.getCellIds)(selected_2[0], _this._grid);
                    var last = selected_2 && (0, main_1.getCellIds)(selected_2[1], _this._grid);
                    if (selected_2 &&
                        first.col === 0 &&
                        last.col + 2 === _this._grid.config.columns.length &&
                        (+resizedRow === first.row || +resizedRow === last.row)) {
                        _this._resizedRows = selected_2;
                    }
                    else {
                        var cell_1 = (0, main_1.getCellNameById)(_this._grid, +resizedRow + 1, 1);
                        _this._resizedRows = [cell_1, cell_1];
                    }
                    _this._spreadsheet._callAction({
                        cell: _this._resizedRows.join(":"),
                        action: types_1.Actions.resizeRow,
                        groupAction: types_1.Actions.resizeRow,
                        mouseEvent: e,
                    });
                }
                return;
            }
            _this._pressedArea = "cell";
            var cell = (0, main_1.getCellNameById)(_this._grid, row.id, col.id);
            var cellInfo = (0, main_1.getCellInfo)(cell, _this._activePage, _this._grid);
            if (e.which === 3 && _this._isInRange(cell, selected[selected.length - 1])) {
                return;
            }
            if (cellInfo.edited) {
                return;
            }
            var focusedCell = _this.getFocusedCell();
            if (e.shiftKey && !e.ctrlKey && !e.metaKey) {
                _this.setSelectedCell("".concat(focusedCell, ":").concat((0, main_1.getCellNameById)(_this._grid, row.id, col.id)), false);
                return;
            }
            if (e.shiftKey && (e.ctrlKey || e.metaKey)) {
                if (selected.length && selected[selected.length - 1] === focusedCell) {
                    selected.pop();
                }
                var selectedCells = _this.getSelectedCell();
                _this.setSelectedCell("".concat(selectedCells ? selectedCells + "," : "").concat(focusedCell, ":").concat(cell), false);
                return;
            }
            if ((e.ctrlKey || e.metaKey) && !e.shiftKey) {
                var selectedCells = _this.getSelectedCell();
                if (!selectedCells)
                    return;
                if (selectedCells && !(0, main_1.getCellsArray)(selectedCells, _this._grid).includes(cell)) {
                    return _this.setSelectedCell("".concat(selectedCells, ",").concat(cell), false);
                }
                var splitedCells = selectedCells.split(",");
                for (var i = 0; i < splitedCells.length; i++) {
                    var item = splitedCells[i];
                    if (!(0, main_1.isRangeId)(item) && item === cell) {
                        _this.setSelectedCell(splitedCells.filter(function (i) { return i !== cell; }).join(","), false);
                    }
                }
                return;
            }
            _this.setSelectedCell(cell, false);
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellMouseDown, function (col, e) {
            var _a;
            var resizedColumn = e.target.getAttribute("data-dhx-id");
            if (e.shiftKey) {
                var selected = _this.getSelectedCell();
                var range = [];
                if ((0, main_1.isRangeId)(selected)) {
                    range = selected.split(":");
                }
                var cell = (0, main_1.getCellIds)(range[0] || selected, _this._grid);
                var firstCell = (0, main_1.getCellNameById)(_this._grid, _this._grid.data.getId(0), cell.col + 1);
                var lastCell = (0, main_1.getCellNameById)(_this._grid, _this._grid.data.getLength(), col.id);
                _this.setSelectedCell("".concat(firstCell, ":").concat(lastCell), false);
                return;
            }
            var sortIcon = e.target.className.includes("dhx_header_icon");
            if (sortIcon) {
                _this._pressedArea = "header";
                _this._selectColumn(col);
                return;
            }
            // not select when click on column resize grip [todo] make more stable check
            if (!resizedColumn || sortIcon) {
                _this._pressedArea = "header";
                _this._selectColumn(col);
                _this._mousePressed = true;
            }
            else {
                if (resizedColumn === "$index") {
                    // select all cells
                    var first_1 = (0, main_1.getCellNameByIndex)(0, 1, _this._grid);
                    var last_1 = (0, main_1.getCellNameByIndex)(_this._grid.data.getLength() - 1, _this._grid.config.columns.length - 1, _this._grid);
                    _this.setSelectedCell("".concat(first_1, ":").concat(last_1), false);
                    return;
                }
                var selected = (_a = _this.getSelectedCell()) === null || _a === void 0 ? void 0 : _a.split(":");
                var first = selected && (0, main_1.getCellIds)(selected[0], _this._grid);
                var last = selected && (0, main_1.getCellIds)(selected[1], _this._grid);
                if (selected &&
                    first.row === 0 &&
                    last.row + 1 === _this._grid.data.getLength() &&
                    (+resizedColumn === first.col + 1 || +resizedColumn === last.col + 1)) {
                    _this._resizedColumns = selected;
                }
                else {
                    var cell = (0, main_1.getCellNameByIndex)(0, +resizedColumn, _this._grid);
                    _this._resizedColumns = [cell, cell];
                }
                _this._spreadsheet._callAction({
                    cell: _this._resizedColumns.join(":"),
                    action: types_1.Actions.resizeCol,
                    groupAction: types_1.Actions.resizeCol,
                    mouseEvent: e,
                });
            }
        });
        this._setGroupSelectionHandlers();
        this._grid.events.on(ts_grid_1.GridEvents.cellDblClick, function (row, col, e) {
            if (e.ctrlKey || e.metaKey) {
                _this._grid.events.fire(ts_grid_1.GridEvents.cellClick, [row, col, e]);
                return;
            }
            if (col.id !== "$index") {
                _this._spreadsheet.startEdit((0, main_1.getCellNameById)(_this._grid, row.id, col.id));
            }
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellDblClick, function (col, e) {
            var resizeGrip = e.target.getAttribute("data-dhx-id");
            if (resizeGrip === "$index")
                return;
            if (resizeGrip) {
                var cell = (0, main_1.getCellNameByIndex)(0, +col.id, _this._grid);
                _this._spreadsheet.fitColumn(cell);
            }
        });
        this._spreadsheet.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            _this._removeHeadersCss();
            _this._activePage = _this._spreadsheet._activePage;
            var meta = _this._activePage.getMeta();
            _this.setSelectedCell(meta.selectedCells ? meta.selectedCells.join(",") : null, false);
            _this.setFocusedCell(meta.focusedCell ? meta.focusedCell.cell : null, false);
        });
        this._events.on(types_1.SpreadsheetEvents.afterAction, function (action) {
            if (action === types_1.Actions.resizeRow) {
                _this._resizedRows = null;
                _this._grid.paint();
            }
            if (action === types_1.Actions.resizeCol) {
                _this._resizedColumns = null;
                _this._grid.paint();
            }
        });
        this._events.on(types_1.SpreadsheetEvents.gridRedraw, function (vm) {
            var _a;
            var _b = _this._activePage.getMeta(), selected = _b.selectedCells, fc = _b.focusedCell, _c = _b.merged, merged = _c === void 0 ? [] : _c, filter = _b.filter, inserted = _b.inserted;
            var focused = fc === null || fc === void 0 ? void 0 : fc.cell;
            if (!selected || (!focused && !((_a = _this._searchedCells) === null || _a === void 0 ? void 0 : _a.length))) {
                return;
            }
            var getCellCoords = function (index) {
                var BORDER = 1;
                var row = _this._grid.data.getItem(_this._grid.data.getId(index.row));
                if (!row) {
                    return {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0,
                    };
                }
                return {
                    x: _this._grid.config.columns
                        .slice(0, index.col)
                        .reduce(function (total, c) { return (total += c.$width); }, 0),
                    y: !index.row
                        ? 0
                        : _this._grid.data
                            .mapRange(0, index.row - 1, function (i) { return i; })
                            .reduce(function (total, r) { return (total += r.height || r.$height); }, 0) - BORDER,
                    width: (_this._grid.config.columns[index.col]
                        ? _this._grid.config.columns[index.col].$width
                        : 0) + BORDER,
                    height: (row.height || row.$height) + BORDER,
                };
            };
            var getGroupCoords = function (rangeIndex) {
                var start = getCellCoords(rangeIndex.start);
                var end = getCellCoords(rangeIndex.end);
                return {
                    x: start.x,
                    y: start.y,
                    width: end.x - start.x + (end.width || 0),
                    height: end.y - start.y + end.height,
                };
            };
            var _d = _this._spreadsheet.config, _e = _d.leftSplit, leftSplit = _e === void 0 ? 0 : _e, _f = _d.topSplit, topSplit = _f === void 0 ? 0 : _f;
            var scroll = _this._grid.getScrollState();
            var fixedCoords = getCellCoords({ row: topSplit, col: leftSplit });
            var getCellInlineStyles = function (cell) {
                if (cell === void 0) { cell = "A1"; }
                var _a = (0, main_1.getCellIds)(cell, _this._grid), col = _a.col, row = _a.row;
                var _b = (0, main_1.isCellFixed)(cell, leftSplit, topSplit, _this._grid), isLeftFixed = _b.isLeftFixed, isTopFixed = _b.isTopFixed;
                var span = (0, main_1.isCellSpaned)(cell, merged);
                if (span) {
                    var _c = span.from, row_1 = _c.row, column = _c.column;
                    cell = (0, main_1.getCellNameByIndex)(row_1, column + 1, _this._grid);
                }
                var _d = getCellCoords((0, main_1.getCellIndex)(cell, _this._grid)), x = _d.x, y = _d.y, _e = _d.width, width = _e === void 0 ? 0 : _e, height = _d.height;
                var fixedLeft = fixedCoords.x + scroll.x + (fixedCoords.width || 0);
                var fixedTop = fixedCoords.y + scroll.y;
                var minWidth = isLeftFixed ? width : null;
                var minHeight = isTopFixed ? height : null;
                var widthDecrease = Math.abs(x - fixedLeft < 0 && !isLeftFixed ? x - fixedLeft : 0);
                var topDecrease = Math.abs(y - fixedTop < 0 && !isTopFixed ? y - fixedTop : 0);
                var left = isLeftFixed ? x + scroll.x : x;
                var top = isTopFixed ? y + scroll.y : y;
                if (span) {
                    var _f = span, to = _f.to, from = _f.from;
                    var spanCoords = getCellCoords({ row: to.row, col: +to.column + 1 });
                    var spanHeight = from.row !== to.row ? spanCoords.y - top + spanCoords.height - height : 0;
                    var spanWidth = from.column !== to.column ? spanCoords.x - left + spanCoords.width - width : 0;
                    width = width + spanWidth;
                    height = height + spanHeight;
                    var spanCoordsStatic = getGroupCoords({
                        start: {
                            row: from.row,
                            col: from.column + 1,
                        },
                        end: {
                            row: to.row,
                            col: to.column + 1,
                        },
                    });
                    if (isLeftFixed) {
                        minWidth = spanCoordsStatic.width;
                    }
                    if (isTopFixed) {
                        minHeight = spanCoordsStatic.height;
                    }
                }
                var finalWidth = width - widthDecrease;
                var finalHeight = height - topDecrease;
                return {
                    width: minWidth && minWidth > finalWidth ? minWidth : finalWidth,
                    height: minHeight && minHeight > finalHeight ? minHeight : finalHeight,
                    top: top + topDecrease,
                    left: left + widthDecrease,
                    borderLeft: !isLeftFixed && width > finalWidth + render_1.BORDERS ? "none" : null,
                    borderRight: !isLeftFixed && finalWidth <= 0 ? "none" : null,
                    borderTop: !isTopFixed && height > finalHeight ? "none" : null,
                    borderBottom: !isTopFixed && finalHeight <= 0 ? "none" : null,
                    position: "absolute",
                    pointerEvents: "none",
                    zIndex: 12,
                    minWidth: minWidth,
                    minHeight: minHeight,
                };
            };
            var getRangeInlineStyles = function (cell) {
                var rangeIndexs = (0, main_1.getRangeIndexes)(cell, _this._grid);
                var _a = getGroupCoords(rangeIndexs), x = _a.x, y = _a.y, coordsWidth = _a.width, coordsHeight = _a.height;
                var start = rangeIndexs.start, end = rangeIndexs.end;
                var isFixedLeft = start.col <= leftSplit;
                var isFixedTop = start.row < topSplit;
                if (isFixedLeft || isFixedTop) {
                    var fixedLeft = fixedCoords.x + scroll.x + fixedCoords.width;
                    var fixedTop = fixedCoords.y + scroll.y;
                    var fixedCellsCoords = getGroupCoords({
                        start: {
                            row: start.row,
                            col: start.col,
                        },
                        end: {
                            row: topSplit && end.row >= topSplit ? topSplit - 1 : end.row,
                            col: leftSplit && end.col > leftSplit ? leftSplit : end.col,
                        },
                    });
                    var minWidth = isFixedLeft ? fixedCellsCoords.width : null;
                    var minHeight = isFixedTop ? fixedCellsCoords.height : null;
                    var left = isFixedLeft ? x + scroll.x : x;
                    var top_1 = isFixedTop ? y + scroll.y : y;
                    var widthDecrease = Math.abs(x - fixedLeft < 0 && !isFixedLeft ? x - fixedLeft : 0);
                    var topDecrease = Math.abs(y - fixedTop < 0 && !isFixedTop ? y - fixedTop : 0);
                    var width = coordsWidth - widthDecrease;
                    var height = coordsHeight - topDecrease;
                    if (isFixedLeft) {
                        width -= scroll.x;
                    }
                    if (isFixedTop) {
                        height -= scroll.y;
                    }
                    return {
                        top: top_1 + topDecrease,
                        left: left + widthDecrease,
                        width: width,
                        minWidth: minWidth,
                        height: height,
                        borderLeft: !isFixedLeft && coordsWidth > width ? "none" : null,
                        borderRight: !isFixedLeft && width <= 0 ? "none" : null,
                        borderTop: !isFixedTop && coordsHeight > height ? "none" : null,
                        borderBottom: !isFixedTop && height <= 0 ? "none" : null,
                        minHeight: minHeight,
                        zIndex: 12,
                    };
                }
                return {
                    top: y,
                    left: x,
                    width: coordsWidth,
                    height: coordsHeight,
                    zIndex: 10,
                };
            };
            var selectedCells = selected.map(function (cell) {
                if ((0, main_1.isRangeId)(cell)) {
                    return (0, dom_1.el)(".dhx_group_selection", {
                        style: getRangeInlineStyles(cell),
                    });
                }
                else {
                    if (selected.length === 1) {
                        return;
                    }
                    return (0, dom_1.el)(".dhx_group_selection", {
                        style: getCellInlineStyles(cell),
                    });
                }
            });
            var lastSelectedCell = selected[selected.length - 1];
            var focusedCell = (0, dom_1.el)(".dhx_selected_cell", {
                style: getCellInlineStyles(focused || lastSelectedCell),
            });
            var searchedCells;
            if (_this._searchCell) {
                searchedCells = _this._searchedCells.map(function (cell) {
                    return (0, dom_1.el)(".dhx_search_group".concat(cell === _this._searchCell ? ".dhx_search_cell" : ""), {
                        style: getCellInlineStyles(cell),
                    });
                });
            }
            var copySelection = [];
            var buffer = _this._bufferManager.getStruct();
            if (buffer.cell && inserted !== undefined && !inserted) {
                var arrOfCells = buffer.cells.includes(",") ? buffer.cells.split(",") : [buffer.cells];
                copySelection = arrOfCells.map(function (copyCell) {
                    var styles = (0, main_1.isRangeId)(copyCell)
                        ? getRangeInlineStyles(copyCell)
                        : getCellInlineStyles(copyCell);
                    var width = styles.width, left = styles.left, height = styles.height, top = styles.top;
                    return (0, dom_1.el)(".dhx_copy_selection", {
                        style: __assign(__assign({}, styles), { width: width + 2, left: left - 1, height: height + 2, top: top - 1 }),
                    });
                });
            }
            var resizedLine;
            if (_this._resizedColumns) {
                var resizedId_1 = (0, main_1.getCellIds)(_this._resizedColumns[1], _this._grid);
                var colIndex = (0, core_1.findIndex)(_this._grid.config.columns, function (col) { return col.id == resizedId_1.col + 1; });
                var firstCell = getCellCoords({ row: 0, col: colIndex });
                var totalHeight = _this._grid.config.$totalHeight;
                var lineCenter = 1.5;
                resizedLine = (0, dom_1.el)(".resize_line", {
                    style: {
                        top: firstCell.y,
                        left: firstCell.x + firstCell.width - lineCenter,
                        height: totalHeight,
                    },
                });
            }
            if (_this._resizedRows) {
                var resizedId = (0, main_1.getCellIndex)(_this._resizedRows[1], _this._grid);
                var firstCell = getCellCoords({ row: resizedId.row, col: 0 });
                resizedLine = (0, dom_1.el)(".resize_line", {
                    style: {
                        top: firstCell.y + firstCell.height - 2,
                        left: 0,
                        width: _this._grid.config.$totalWidth,
                        height: "2px",
                    },
                });
            }
            if ((0, main_1.isRangeId)(lastSelectedCell)) {
                var rangeArray = (0, main_1.getRangeArray)(lastSelectedCell, _this._grid);
                lastSelectedCell = rangeArray[rangeArray.length - 1];
            }
            var filteredCells;
            if (filter) {
                var cellsArr = (0, main_1.getCellsArray)(filter.cell, _this._grid).reverse();
                var lastVisibleCell = cellsArr.find(function (c) { return !_this._grid.isRowHidden((0, main_1.getCellIds)(c, _this._grid).row + 1); });
                filteredCells = (0, dom_1.el)(".dhx_filtered_cells", {
                    style: getRangeInlineStyles("".concat(cellsArr[cellsArr.length - 1], ":").concat(lastVisibleCell)),
                });
            }
            var selectionGrip;
            if (!(0, main_1.getCellInfo)(_this.getFocusedCell(), _this._activePage, _this._grid).edited) {
                var _g = getCellInlineStyles((0, main_1.isRangeId)(_this.getSelectedCell()) ? lastSelectedCell : focused), top_2 = _g.top, left = _g.left, width = _g.width, height = _g.height, minWidth = _g.minWidth, minHeight = _g.minHeight;
                top_2 += (minHeight || height) - 6;
                left += (minWidth || width) - 6;
                var _h = (0, main_1.isCellFixed)(lastSelectedCell, leftSplit, topSplit, _this._grid), isLeftFixed = _h.isLeftFixed, isTopFixed = _h.isTopFixed;
                selectionGrip = (0, dom_1.el)(".dhx_selection_grip", {
                    "data-dhx-id": "selection_grip",
                    style: {
                        position: "absolute",
                        left: left,
                        top: top_2,
                        zIndex: (!isTopFixed && !isLeftFixed) ||
                            (isTopFixed && width <= 0) ||
                            (isLeftFixed && height <= 0)
                            ? 10
                            : 12, // zIndex 10 if under fixed cells
                    },
                    onmousedown: function () {
                        _this._mousePressed = true;
                        document.addEventListener("mousemove", moveHandler);
                        _this._pressedArea = "fillHandle";
                        var selected = _this.getSelectedCell().split(",");
                        var lastCell = selected[selected.length - 1];
                        _this.setSelectedCell(lastCell, false);
                        //check if the last cell is spaned
                        var cellsArr = (0, main_1.getCellsArray)(lastCell, _this._grid);
                        var span = (0, main_1.isCellSpaned)(cellsArr[cellsArr.length - 1], merged);
                        _this._cellsToCopy = lastCell;
                        if (span) {
                            var to = span.to;
                            var lastCell_1 = (0, main_1.getCellNameByIndex)(to.row, to.column + 1, _this._grid);
                            _this._cellsToCopy = "".concat(cellsArr[0], ":").concat(lastCell_1);
                        }
                    },
                });
            }
            vm.refs.selection.patch((0, dom_1.el)(".dhx_grid_selection", __spreadArray(__spreadArray(__spreadArray(__spreadArray([], copySelection, true), [
                focusedCell
            ], false), selectedCells, true), [
                searchedCells,
                resizedLine,
                filteredCells,
                selectionGrip,
            ], false)));
        });
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateEditor = void 0;
var dom_1 = __webpack_require__(1);
var ts_calendar_1 = __webpack_require__(38);
var ts_popup_1 = __webpack_require__(10);
var date_1 = __webpack_require__(28);
var format_1 = __webpack_require__(12);
var types_1 = __webpack_require__(6);
var date_2 = __webpack_require__(18);
var DateEditor = /** @class */ (function () {
    function DateEditor(cb, dateFormat, events) {
        var _this = this;
        this._dateFormat = dateFormat;
        this._calendar = new ts_calendar_1.Calendar(null, { dateFormat: dateFormat });
        this._popup = new ts_popup_1.Popup({ css: "dhx_editor-popup" });
        this._popup.attach(this._calendar);
        this._events = events;
        this._endEdit = cb;
        this._popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            var calendarNode = _this._calendar.getRootNode();
            var body = calendarNode.querySelector(".dhx_calendar__days");
            body.addEventListener("click", _this.endEdit.bind(_this), { once: true });
        });
        this._initHandlers();
    }
    DateEditor.prototype.endEdit = function () {
        var _this = this;
        if (!this.edit)
            return;
        (0, dom_1.awaitRedraw)().then(function () {
            _this._events.fire(types_1.SpreadsheetEvents.cellInput, [
                _this._config.oninput[1],
                _this._calendar.getValue(),
            ]);
            _this._endEdit();
            _this._popup.hide();
        });
        this.edit = false;
    };
    DateEditor.prototype.setValue = function (value) {
        var val;
        if (value === "") {
            this._calendar.setValue(new Date());
            this._calendar.clear();
            return;
        }
        ;
        if ((0, format_1.isNumeric)(value)) {
            val = (0, date_1.excelDateToJSDate)(value);
        }
        else {
            if (!(0, date_2.stringToDate)(value, this._dateFormat, true))
                return;
            val = (0, date_2.stringToDate)(value, this._dateFormat);
        }
        this._calendar.setValue(val);
    };
    DateEditor.prototype.hidePopup = function () {
        if (this._popup.isVisible()) {
            this._popup.hide();
        }
    };
    DateEditor.prototype.toHTML = function (conf) {
        var _this = this;
        this._config = conf;
        this.setValue(conf.value);
        this.edit = true;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return (0, dom_1.el)("input.dhx_cell_input", __assign(__assign({}, conf), { onkeydown: function (e) {
                if (e.code === "Enter") {
                    _this._popup.hide();
                }
            }, oninput: this._handlers.oninput, _hooks: __assign(__assign({}, conf._hooks), { didInsert: this._handlers.didInsert }) }));
    };
    DateEditor.prototype._showPopup = function () {
        if (!this._input.value.startsWith("=")) {
            this._popup.show(this._input, {
                centering: true,
                mode: "bottom",
            });
        }
    };
    DateEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                (0, dom_1.awaitRedraw)().then(function () {
                    _this._showPopup();
                });
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            oninput: function (e) {
                if (!e.target.value) {
                    _this._showPopup();
                }
                if (e.target.value.startsWith("=") && _this._popup.isVisible()) {
                    _this._popup.hide();
                }
                var _a = _this._config.oninput, cb = _a[0], cell = _a[1];
                cb(cell, e);
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._config._hooks.didInsert(node);
            },
        };
    };
    return DateEditor;
}());
exports.DateEditor = DateEditor;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exporter = void 0;
var core_1 = __webpack_require__(0);
var format_1 = __webpack_require__(12);
var main_1 = __webpack_require__(2);
var Exporter = /** @class */ (function () {
    function Exporter(spreadsheet, grid) {
        this._spreadsheet = spreadsheet;
        this._grid = grid;
    }
    Exporter.prototype.xlsx = function (name) {
        var _this = this;
        if (name === void 0) { name = "data"; }
        if (!(0, main_1.isWasmSupported)()) {
            throw new Error("WebAssembly is not supported by your browser");
        }
        var styles = [{ id: "" }];
        var serializedData = this._spreadsheet.serialize();
        var formats = (0, format_1.getDefaultFormats)();
        var data = [];
        serializedData.sheets.forEach(function (sheet) {
            var page = _this._spreadsheet._dataStore.getPage(sheet.name);
            var pageSizes = page.getSize();
            var merged = page.getMeta().merged;
            var rowItem = [];
            var cells = [];
            for (var i = 0; i < pageSizes[1]; i++) {
                rowItem.push(null);
            }
            for (var i = 0; i < pageSizes[0]; i++) {
                cells.push(__spreadArray([], rowItem, true));
            }
            sheet.data.forEach(function (item) {
                var styleInd = null;
                var _a = (0, main_1.getCellIds)(item.cell, _this._grid), row = _a.row, col = _a.col;
                var defaultFormat = formats.find(function (format) { return format.id === item.format; });
                var format = defaultFormat ? defaultFormat.mask : "";
                var css = item.css || "";
                var styleId = format + css;
                styleInd = (0, core_1.findIndex)(styles, function (s) { return s.id === styleId; });
                if (styleInd === -1) {
                    var propsMap_1 = {
                        "text-align": "align",
                        "font-size": "fontSize",
                        "font-weight": "fontWeight",
                        "font-style": "fontStyle",
                        "text-decoration": "textDecoration",
                        "vertical-align": "verticalAlign",
                    };
                    var cssStyles_1 = dhx.css.get(css) || {};
                    var exportStyles = Object.keys(cssStyles_1).reduce(function (newStyles, key) {
                        newStyles[propsMap_1[key] || key] = cssStyles_1[key];
                        return newStyles;
                    }, {});
                    styles.push(__assign(__assign({ format: format }, exportStyles), { id: styleId }));
                    styleInd = styles.length - 1;
                }
                var cellValue = {
                    v: (0, core_1.isDefined)(item.value) ? "".concat(item.value) : "",
                    s: styleInd,
                };
                cells[row][col] = cellValue;
            });
            data.push({
                name: sheet.name,
                cells: cells,
                cols: sheet.cols,
                rows: sheet.rows,
                merged: merged,
            });
        });
        var exportData = { data: data, styles: styles };
        var path = this._spreadsheet.config.exportModulePath;
        var xlsxWorker = this._getXlsxWorker(name, path);
        xlsxWorker.then(function (x) {
            return x.postMessage({
                type: "convert",
                data: exportData,
            });
        });
    };
    Exporter.prototype.json = function () {
        return (0, core_1.downloadFile)(JSON.stringify(this._spreadsheet.serialize()), "data.json", "text/json");
    };
    Exporter.prototype._getXlsxWorker = function (name, path) {
        if (!this._xlsxWorker) {
            var url_1 = window.URL.createObjectURL(new Blob(["importScripts('".concat(path, "');")], { type: "text/javascript" }));
            this._xlsxWorker = new Promise(function (res) {
                var xlsxWorker = new Worker(url_1);
                xlsxWorker.addEventListener("message", function (e) {
                    if (e.data.type === "init") {
                        res(xlsxWorker);
                    }
                    else if (e.data.type === "ready") {
                        var a = document.createElement("a");
                        a.href = URL.createObjectURL(e.data.blob);
                        a.download = "".concat(name, ".xlsx");
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                    }
                });
            });
        }
        return this._xlsxWorker;
    };
    return Exporter;
}());
exports.Exporter = Exporter;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.XlsxDriver = void 0;
var main_1 = __webpack_require__(2);
var XlsxDriver = /** @class */ (function () {
    function XlsxDriver() {
    }
    XlsxDriver.prototype.toJsonArray = function (data, grid) {
        var sheets = [];
        var formats = [];
        var styles = {};
        data.styles.forEach(function (style, i) {
            var allowedProps = [
                "background",
                "color",
                "textAlign",
                "verticalAlign",
                "textDecoration",
                "fontWeight",
                "fontStyle",
            ];
            var css = allowedProps.reduce(function (acc, prop) {
                if (style[prop]) {
                    acc[prop] = style[prop];
                }
                return acc;
            }, {});
            formats.push(style.format);
            styles["imported_class" + i] = css;
        });
        data.data.forEach(function (item) {
            var cells = [];
            item.cells.forEach(function (row, rowInd) {
                row.forEach(function (col, colInd) {
                    if (col) {
                        var cell = {
                            cell: (0, main_1.getCellNameByIndex)(rowInd, colInd + 1, grid),
                            value: col.v,
                            css: ["imported_class" + col.s],
                            format: formats[col.s],
                        };
                        cells.push(cell);
                    }
                });
            });
            sheets.push({ name: item.name, data: cells, cols: item.cols, rows: item.rows, merged: item.merged });
        });
        return {
            sheets: sheets,
            styles: styles,
        };
    };
    return XlsxDriver;
}());
exports.XlsxDriver = XlsxDriver;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileProxy = void 0;
var main_1 = __webpack_require__(2);
var FileProxy = /** @class */ (function () {
    function FileProxy(spreadsheet) {
        this._spreadsheet = spreadsheet;
    }
    FileProxy.prototype.load = function (type, url) {
        var _this = this;
        if (type === void 0) { type = "xlsx"; }
        return new Promise(function (res) {
            _this._getFile(type, url).then(function (file) {
                if (type === "json") {
                    return res(file);
                }
                if (file instanceof ArrayBuffer) {
                    file = new Uint8Array(file);
                }
                var path = _this._spreadsheet.config.importModulePath;
                var xlsxWorker = _this._getXlsxWorker(path);
                xlsxWorker.then(function (w) {
                    w.postMessage({
                        type: "convert",
                        data: file,
                        formulas: true,
                    });
                    w.onmessage = function (e) {
                        if (e.data.type === "ready") {
                            res(e.data);
                        }
                    };
                });
            });
        });
    };
    FileProxy.prototype._getXlsxWorker = function (path) {
        if (!this._xlsxWorker) {
            var url_1 = window.URL.createObjectURL(new Blob(["importScripts('".concat(path, "');")], { type: "text/javascript" }));
            this._xlsxWorker = new Promise(function (res) {
                var xlsxWorker = new Worker(url_1);
                xlsxWorker.addEventListener("message", function (e) {
                    if (e.data.type === "init") {
                        res(xlsxWorker);
                    }
                });
            });
        }
        return this._xlsxWorker;
    };
    FileProxy.prototype._getFile = function (type, url) {
        if (type === void 0) { type = "xlsx"; }
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        return new Promise(function (res) {
            if (url) {
                return (0, main_1.fetchFile)(url, "GET", "arraybuffer").then(function (data) {
                    res(data);
                });
            }
            else {
                var input = document.createElement("input");
                input.type = "file";
                input.accept = ".".concat(type);
                input.click();
                input.addEventListener("change", function (e) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        var result = reader.result;
                        res(type === "json" ? result : new Uint8Array(result));
                    };
                    if (type === "json") {
                        reader.readAsText(e.target.files[0]);
                    }
                    else {
                        reader.readAsArrayBuffer(e.target.files[0]);
                    }
                });
            }
        });
    };
    return FileProxy;
}());
exports.FileProxy = FileProxy;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.initMathStore = exports.Store = void 0;
var muon_1 = __webpack_require__(25);
Object.defineProperty(exports, "Store", { enumerable: true, get: function () { return muon_1.Store; } });
function initMathStore(sheets) {
    var store = new muon_1.DataStore({ strict: false });
    sheets.forEach(function (i) { return store.addPage(i.value); });
    return store;
}
exports.initMathStore = initMathStore;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectDrag = void 0;
function detectDrag(e) {
    return new Promise(function (res) {
        var handleMouseUp = function () {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
            res(false);
        };
        var timeout = setTimeout(function () {
            handleMouseUp();
        }, 1000);
        var handleMouseMove = function (moveEvent) {
            if (Math.abs(moveEvent.pageX - e.pageX) > 4 || Math.abs(moveEvent.pageY - e.pageY) > 4) {
                document.removeEventListener("mousemove", handleMouseMove);
                document.removeEventListener("mouseup", handleMouseUp);
                clearTimeout(timeout);
                res({ x: e.pageX, y: e.pageY });
            }
        };
        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);
    });
}
exports.detectDrag = detectDrag;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    popups: {},
    lastActive: null,
    freeCount: 0,
    add: function (id, popup) {
        if (this.lastActive) {
            this.popups[this.lastActive].classList.remove("dhx_popup--window_active");
        }
        this.lastActive = id;
        popup.classList.add("dhx_popup--window_active");
        this.popups[id] = popup;
    },
    setActive: function (id) {
        if (id === this.lastActive) {
            return;
        }
        var popup = this.popups[id];
        if (popup) {
            if (this.lastActive) {
                this.popups[this.lastActive].classList.remove("dhx_popup--window_active");
            }
            this.lastActive = id;
            popup.classList.add("dhx_popup--window_active");
        }
    },
    openFreeWindow: function (node) {
        if (this.freeCount === 0) {
            node.classList.add("dhx_window--no-scroll");
        }
        this.freeCount++;
    },
    closeFreeWindow: function (node) {
        this.freeCount--;
        if (this.freeCount === 0) {
            node.classList.remove("dhx_window--no-scroll");
        }
    },
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProWindow = void 0;
var Window_1 = __webpack_require__(86);
var ts_toolbar_1 = __webpack_require__(33);
var ts_layout_1 = __webpack_require__(16);
var ts_navbar_1 = __webpack_require__(23);
var types_1 = __webpack_require__(43);
var ProWindow = /** @class */ (function (_super) {
    __extends(ProWindow, _super);
    function ProWindow(config) {
        return _super.call(this, config) || this;
    }
    ProWindow.prototype._startResize = function (resizeConfig) {
        var _this = this;
        var minWidth = this.config.minWidth | 100;
        var minHeight = this.config.minHeight | 100;
        var left = this._popup.offsetLeft;
        var top = this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var root = this.getRootView().refs;
        var resizer;
        var resizeClassName;
        switch (true) {
            case resizeConfig.bottom && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--bottom_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--bottom_right";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--top_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--top-right";
                resizer = root.right;
                break;
            case resizeConfig.top:
                resizeClassName = "dhx_window-body-pointer--top";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom:
                resizeClassName = "dhx_window-body-pointer--bottom";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--right";
                resizer = root.right;
                break;
        }
        resizer.el.classList.add("dhx_window-resizer--active");
        this.config.node.classList.add("dhx_window--stop_selection");
        this.config.node.classList.add(resizeClassName);
        var mousemove = function (e) {
            var _a = _this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
            var size = {
                width: _this._notInNode() ? e.pageX - left : e.pageX - _this.config.node.offsetLeft - left,
                height: _this._notInNode() ? e.pageY - top : e.pageY - _this.config.node.offsetTop - top,
                left: _this._notInNode() ? e.pageX : e.pageX - _this.config.node.offsetLeft,
                top: _this._notInNode() ? e.pageY : e.pageY - _this.config.node.offsetTop,
            };
            if (resizeConfig.right) {
                if (size.width < minWidth) {
                    size.width = minWidth;
                }
                else if (size.width > containerXOffset + containerInnerWidth - left) {
                    size.width = containerXOffset + containerInnerWidth - left;
                }
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.bottom) {
                if (size.height < minHeight) {
                    size.height = minHeight;
                }
                else if (size.height > containerYOffset + containerInnerHeight - top) {
                    size.height = containerYOffset + containerInnerHeight - top;
                }
                _this._popup.style.height = size.height + "px";
            }
            if (resizeConfig.left) {
                if (left + width - size.left < minWidth) {
                    size.left = left + width - minWidth;
                }
                size.width = left + width - size.left;
                _this.config.left = size.left;
                _this._popup.style.left = size.left + "px";
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.top) {
                if (size.top < containerYOffset) {
                    size.top = containerYOffset;
                }
                else if (top + height - size.top < minHeight) {
                    size.top = top + height - minHeight;
                }
                size.height = top + height - size.top;
                _this.config.top = size.top;
                _this._popup.style.top = size.top + "px";
                _this._popup.style.height = size.height + "px";
            }
            _this.config.width = _this._popup.offsetWidth;
            _this.config.height = _this._popup.offsetHeight;
            _this.events.fire(types_1.WindowEvents.resize, [size, { left: left, top: top, height: height, width: width }, resizeConfig]);
            _this.scrollView && _this.scrollView.update();
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
            _this.config.node.classList.remove(resizeClassName);
            resizer.el.classList.remove("dhx_window-resizer--active");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    ProWindow.prototype._initUI = function () {
        var _this = this;
        var rows = [];
        var isHeader = (this.config.header || this.config.title || this.config.closable || this.config.movable) &&
            this.config.header !== false;
        if (isHeader) {
            rows.push({
                id: "header",
                height: "content",
                css: "dhx_window-header " + (this.config.movable ? "dhx_window-header--movable" : ""),
                on: {
                    mousedown: this.config.movable && this._handlers.move,
                    dblclick: this._handlers.headerDblClick,
                },
            });
        }
        rows.push({
            id: "content",
            css: isHeader ? "dhx_window-content" : "dhx_window-content-without-header",
        });
        if (this.config.footer) {
            rows.push({ id: "footer", height: "content", css: "dhx_window-footer" });
        }
        if (this.config.resizable) {
            rows.push({ id: "resizers", height: "content", css: "resizers" });
        }
        var layout = (this._layout = new ts_layout_1.ProLayout(this._popup, {
            css: "dhx_window" + (this.config.modal ? " dhx_window--modal" : ""),
            rows: rows,
            on: {
                mousedown: this._handlers.setActive,
            },
            id: this._uid,
        }));
        var contentCell = this._layout.getCell("content");
        if (contentCell && contentCell.scrollView) {
            this.scrollView = contentCell.scrollView;
        }
        if (isHeader) {
            var header = (this.header = new ts_toolbar_1.Toolbar());
            if (this.config.title) {
                this.header.data.add({
                    type: "title",
                    value: this.config.title,
                    id: "title",
                    css: "title_max",
                });
                this._popup.setAttribute("aria-label", this.config.title);
            }
            if (this.config.closable) {
                this.header.data.add({
                    type: "spacer",
                });
                this.header.data.add({
                    id: "close",
                    type: "button",
                    view: "link",
                    size: "medium",
                    color: "secondary",
                    circle: true,
                    icon: "dxi dxi-close",
                });
                header.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
                    if (id === "close") {
                        _this._hide(e);
                    }
                });
            }
            layout.getCell("header").attach(header);
        }
        if (this.config.footer) {
            var footer = (this.footer = new ts_toolbar_1.Toolbar());
            layout.getCell("footer").attach(footer);
        }
        if (this.config.resizable) {
            layout.getCell("resizers").attach(function () { return _this._drawResizers(); });
        }
    };
    return ProWindow;
}(Window_1.Window));
exports.ProWindow = ProWindow;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeysHandlers = exports.getHtmlData = exports.isPrintableKey = void 0;
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(2);
var toolbar_1 = __webpack_require__(42);
var FocusManager_1 = __webpack_require__(19);
var muon_1 = __webpack_require__(25);
var core_1 = __webpack_require__(0);
var format_1 = __webpack_require__(12);
var EXCELFormatMap = {
    "General": "common",
    "Fixed": "number",
    "Short Date": "date"
};
function isPrintableKey(e) {
    if (e.ctrlKey || e.altKey || e.metaKey || (e.shiftKey && e.keyCode === 32)) {
        return false;
    }
    var keyCode = e.which || e.keyCode;
    var symbols = {
        32: " ",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'",
    };
    var isLetter = keyCode >= 65 && keyCode <= 90;
    var isNumber = keyCode >= 48 && keyCode <= 57;
    var isNumpadNumber = keyCode >= 96 && keyCode <= 105;
    var isSymbol = !!symbols[keyCode];
    return isLetter || isNumber || isNumpadNumber || isSymbol || false;
}
exports.isPrintableKey = isPrintableKey;
function getHtmlData(spreadsheet) {
    var selected = spreadsheet.selection.getSelectedCell();
    var page = spreadsheet._activePage;
    var merged = page.getMeta().merged;
    if (selected.includes(",")) {
        var splited = selected.split(",");
        selected = splited[splited.length - 1];
    }
    var matrix;
    if (!(0, main_1.isRangeId)(selected)) {
        matrix = [[selected]];
    }
    else {
        matrix = (0, main_1.getRangeMatrix)(selected, spreadsheet._grid);
    }
    var values = matrix.reduce(function (total, row) {
        var rowValues = row.reduce(function (t, cell) {
            var _a = (0, muon_1.str2pos)(cell), row = _a[0], col = _a[1];
            var mergeTarget = merged.find(function (_a) {
                var from = _a.from;
                return from.row === row && from.column === col;
            });
            var rowSpan = 1;
            var colSpan = 1;
            if (mergeTarget) {
                rowSpan += mergeTarget.to.row - mergeTarget.from.row;
                colSpan += mergeTarget.to.column - mergeTarget.from.column;
            }
            if ((0, main_1.isCellSpaned)(cell, merged) && !mergeTarget)
                return t;
            var cellVal = spreadsheet.getValue(cell);
            var val = (0, core_1.isDefined)(cellVal) ? cellVal : " ";
            var stylesObj = spreadsheet.getStyle(cell) || {};
            var styles = Object.keys(stylesObj).reduce(function (totalStyles, key) { return "".concat(totalStyles).concat(key, ":").concat(stylesObj[key], ";"); }, "");
            return "".concat(t, " <td style=\"").concat(styles, "\" rowSpan=\"").concat(rowSpan, "\" colSpan=\"").concat(colSpan, "\">\n\t\t\t").concat(val, "</td>");
        }, "");
        return "".concat(total, "<tr style=\"box-sizing: inherit;\">").concat(rowValues, "</tr>");
    }, "");
    return "\n\t<!--StartFragment-->\n\t\t<table id=\"customers\">\n\t\t<col span=\"".concat(matrix[0].length, "\">\n\t\t\t<tbody style=\"box-sizing: inherit;\">\n\t\t\t\t").concat(values, "\n\t\t\t</tbody>\n\t\t</table>\n\t<!--EndFragment-->");
}
exports.getHtmlData = getHtmlData;
function getLength(grid, dir) {
    if (dir === "row") {
        return {
            min: 0,
            max: grid.data.getLength() - 1,
        };
    }
    return {
        min: 1,
        max: grid.config.columns.length - 1,
    };
}
function setCell(spreadsheet, grid, set, page, add, dir) {
    var prevCell = spreadsheet.selection.getFocusedCell();
    var info = (0, main_1.getCellInfo)(prevCell, page, grid);
    if (info.edited) {
        return;
    }
    var index = (0, main_1.getCellIndex)(prevCell, grid);
    var length = getLength(grid, dir);
    var nextVal = add ? index[dir] + add : set;
    if (nextVal >= length.min && nextVal <= length.max) {
        index[dir] = nextVal;
    }
    var cell = (0, main_1.getCellNameByIndex)(index.row, index.col, grid);
    var merged = page.getMeta().merged;
    if (merged === null || merged === void 0 ? void 0 : merged.length) {
        var nextSpan = (0, main_1.isCellSpaned)(cell, merged);
        if (nextSpan) {
            var prevSpan = (0, main_1.isCellSpaned)(prevCell, merged);
            var spanDir = dir === "col" ? "column" : "row";
            var span = { from: __assign({}, nextSpan.from), to: __assign({}, nextSpan.to) };
            span.from.column += 1;
            span.to.column += 1;
            if (nextSpan === prevSpan) {
                var nextVal_1 = add > 0 ? span.to[spanDir] + 1 : span.from[spanDir] - 1;
                if (nextVal_1 >= length.min && nextVal_1 <= length.max) {
                    index[dir] = nextVal_1;
                }
                cell = (0, main_1.getCellNameByIndex)(index.row, index.col, grid);
            }
            else {
                var row = spanDir === "row" ? span.from.row : index.row;
                var col = spanDir === "column" ? span.from.column : index.col;
                cell = (0, main_1.getCellNameByIndex)(row, col, grid);
            }
        }
    }
    spreadsheet.selection.setSelectedCell(cell, true);
}
function setSelection(spreadsheet, grid, step, dir, page) {
    var focused = spreadsheet.selection.getFocusedCell();
    var info = (0, main_1.getCellInfo)(focused, page, grid);
    if (info.edited) {
        return;
    }
    var selectedIndex = (0, main_1.getCellIndex)(focused, grid);
    var lastSelected = spreadsheet.selection.getSelectedCell().split(",")[0];
    var index;
    var end;
    if (!lastSelected.includes(":")) {
        index = __assign({}, selectedIndex);
        end = selectedIndex;
    }
    else {
        var range = (0, main_1.getRangeIndexes)(lastSelected, grid);
        if (range.end[dir] > selectedIndex[dir]) {
            index = __assign({}, range.end);
            end = range.start;
        }
        else {
            index = __assign({}, range.start);
            end = range.end;
        }
    }
    var length = getLength(grid, dir);
    if (index[dir] + step >= length.min && index[dir] + step <= length.max) {
        index[dir] += step;
        var start = (0, main_1.getCellNameByIndex)(index.row, index.col, grid);
        end = (0, main_1.getCellNameByIndex)(end.row, end.col, grid);
        if (start === end) {
            spreadsheet.selection.setSelectedCell(start, false);
            return;
        }
        spreadsheet.selection.setSelectedCell("".concat(start, ":").concat(end), false);
        spreadsheet.selection.setFocusedCell(focused, false);
    }
}
function getKeysHandlers(spreadsheet, grid, bufferManager, editLine) {
    var editedCell;
    var page;
    spreadsheet.events.on(types_1.SpreadsheetEvents.afterEditStart, function (cell) {
        editedCell = cell;
    });
    spreadsheet.events.on(types_1.SpreadsheetEvents.afterEditEnd, function () {
        editedCell = null;
    });
    spreadsheet.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () { return (page = spreadsheet._activePage); });
    document.addEventListener("keydown", function (e) {
        if (isPrintableKey(e) &&
            (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                FocusManager_1.focusManager.getFocusId() === grid._uid)) {
            var focused = spreadsheet.selection.getFocusedCell();
            if (focused && focused !== editedCell) {
                e.preventDefault();
                spreadsheet.startEdit(focused, e.key);
            }
        }
    });
    var pasteFromClipboard = function (data, html) {
        var _a;
        var buffer = bufferManager.getStruct();
        var focus = spreadsheet.selection.getSelectedCell();
        var to = (0, main_1.getCellIndex)(focus, grid);
        var lastCell = (0, main_1.getCellNameByIndex)(to.row + data.rowsCount - 1, to.col + data.colsCount - 1, grid);
        var cell = (0, main_1.isRangeId)(focus) ? focus : "".concat(focus, ":").concat(lastCell);
        var _b = (0, muon_1.str2pos)(focus), row = _b[0], col = _b[1];
        var spans = (_a = data.spans) === null || _a === void 0 ? void 0 : _a.map(function (span) {
            if (!span)
                return null;
            var from = span.from, to = span.to;
            return {
                from: { row: from.row + row, column: from.column + col },
                to: { row: to.row + row, column: to.column + col },
            };
        });
        if (data.styles) {
            buffer.styles = data.styles;
        }
        else {
            buffer.styles = spreadsheet.getStyle(cell, false);
        }
        //pasted outside from spreadsheet
        if ((0, core_1.isDefined)(html) && (!html.includes(buffer.html) || !buffer.html)) {
            buffer.cells = "";
            if (data.formats.length) {
                var spreadsheetFormats = spreadsheet.config.formats;
                var formats = [];
                var _loop_1 = function (format) {
                    var prevFormat = spreadsheetFormats === null || spreadsheetFormats === void 0 ? void 0 : spreadsheetFormats.find(function (f) { return f.mask === format || EXCELFormatMap[format] === f.id || (!format && f.id === "common") || format.toLowerCase().includes(f.id.toLowerCase()); });
                    if (!prevFormat) {
                        prevFormat = (0, format_1.addNewFormat)(format, spreadsheet.toolbar.data, spreadsheetFormats);
                    }
                    formats.push(prevFormat === null || prevFormat === void 0 ? void 0 : prevFormat.id);
                };
                for (var _i = 0, _c = data.formats; _i < _c.length; _i++) {
                    var format = _c[_i];
                    _loop_1(format);
                }
                buffer.formats = formats;
            }
        }
        var prevVal = buffer.value;
        buffer.value = data.values.map(function (v, i) {
            return buffer.formats[i] !== "text" && (0, core_1.isNumeric)(v) ? +v : v;
        });
        buffer.cell = cell;
        buffer.spans = spans || [];
        bufferManager.paste();
        buffer.value = prevVal;
    };
    var clipboardData = {};
    if (window.clipboardData) {
        clipboardData = {
            "ctrl+c": function () {
                if (!editedCell) {
                    bufferManager.store("copy");
                    if (window.clipboardData) {
                        var html = getHtmlData(spreadsheet);
                        window.clipboardData.setData("text/html", html);
                        window.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                        window.preventDefault();
                        bufferManager.getStruct().html = html;
                    }
                }
            },
            "ctrl+x": function () {
                if (!editedCell) {
                    bufferManager.store("cut");
                    if (window.clipboardData) {
                        window.clipboardData.setData("text/html", getHtmlData(spreadsheet));
                        window.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                        window.preventDefault();
                        bufferManager.getStruct().html = window.clipboardData.getData("text/html");
                    }
                }
            },
            "ctrl+v": function () {
                if (!editedCell) {
                    if (window.clipboardData) {
                        var data = (0, main_1.parseFromText)(window.clipboardData.getData("text"));
                        var html = window.clipboardData.getData("text/html");
                        if (html && html.includes("<table")) {
                            data = (0, main_1.parseHtmlTable)(html);
                        }
                        pasteFromClipboard(data, html || "");
                    }
                }
            },
        };
    }
    else {
        document.addEventListener("cut", function (e) {
            if (!editedCell &&
                (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                    FocusManager_1.focusManager.getFocusId() === grid._uid)) {
                bufferManager.store("cut");
                e.clipboardData.setData("text/html", getHtmlData(spreadsheet));
                e.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                e.preventDefault();
                bufferManager.getStruct().html = e.clipboardData.getData("text/html");
            }
        });
        document.addEventListener("copy", function (e) {
            if (!editedCell &&
                (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                    FocusManager_1.focusManager.getFocusId() === grid._uid)) {
                bufferManager.store("copy");
                var html = getHtmlData(spreadsheet);
                e.clipboardData.setData("text/html", html);
                e.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                e.preventDefault();
                bufferManager.getStruct().html = html;
            }
        });
        document.addEventListener("paste", function (e) {
            if (!editedCell &&
                (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                    FocusManager_1.focusManager.getFocusId() === grid._uid)) {
                e.preventDefault();
                var html = e.clipboardData.getData("text/html");
                var data = (0, main_1.parseFromText)(e.clipboardData.getData("text"));
                if (html && html.includes("<table")) {
                    data = (0, main_1.parseHtmlTable)(html);
                }
                pasteFromClipboard(data, html || "");
            }
        });
    }
    function lineThrough(e) {
        e.preventDefault();
        var cell = spreadsheet.selection.getSelectedCell();
        var val = (0, toolbar_1.getToggledValue)(page, cell, "text-decoration", "line-through", grid);
        spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
            "text-decoration": val,
        });
    }
    function textAlign(align, e) {
        e.preventDefault();
        spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
            "text-align": align,
        });
    }
    function navigateSheets(dir, e) {
        e.preventDefault();
        var sheets = spreadsheet._sheets;
        var active = spreadsheet.getActiveSheet().id;
        var currentIndex = sheets.getIndex(active);
        var lastIndex = sheets.getLength() - 1;
        var index = currentIndex + dir;
        var firstIndex = sheets.getId(0) === "add-sheet" ? 1 : 0;
        if (index < firstIndex) {
            index = lastIndex;
        }
        if (index > lastIndex) {
            index = firstIndex;
        }
        spreadsheet.setActiveSheet(sheets.getId(index));
    }
    function selectAction(collumn, e) {
        e.preventDefault();
        var focused = spreadsheet.selection.getFocusedCell();
        var _a = (0, main_1.getCellIds)(focused, grid), row = _a.row, col = _a.col;
        var lastCell = (0, main_1.getCellNameById)(grid, collumn ? grid.data.getLength() : row + 1, collumn ? col + 1 : grid.config.columns.length - 1);
        var firstCell = (0, main_1.getCellNameById)(grid, collumn ? 1 : row + 1, collumn ? col + 1 : 1);
        spreadsheet.selection.setSelectedCell("".concat(firstCell, ":").concat(lastCell), false);
        spreadsheet.selection.setFocusedCell(focused, false);
    }
    return __assign(__assign({}, clipboardData), { escape: function () {
            var selected = spreadsheet.selection.getSelectedCell();
            var info = (0, main_1.getCellInfo)(selected, page, grid);
            var buffer = bufferManager.getStruct();
            buffer.inserted = true;
            if (info.edited) {
                spreadsheet.endEdit(true);
                grid.paint();
            }
        }, delete: function () {
            if (editedCell) {
                return;
            }
            var selected = spreadsheet.selection.getSelectedCell();
            if (selected) {
                spreadsheet.setValue(selected, "");
            }
            grid.paint();
        }, enter: function () {
            var selected = spreadsheet.selection.getSelectedCell();
            var focused = spreadsheet.selection.getFocusedCell();
            var editMode = spreadsheet._editMode;
            var insertedFormula = editLine.navigate("enter");
            if (insertedFormula) {
                return;
            }
            if (editedCell || (editMode && editMode.cell)) {
                var index = (0, main_1.getCellIndex)(editedCell || editMode.cell, grid);
                index.row = index.row + 1 === grid.data.getLength() ? index.row : index.row + 1;
                spreadsheet.selection.setSelectedCell((0, main_1.getCellNameByIndex)(index.row, index.col, grid), false);
                editedCell = "";
                if ((0, main_1.isRangeId)(selected) && !editMode) {
                    spreadsheet.selection.setSelectedCell(selected, false);
                    spreadsheet.selection.setFocusedCell((0, main_1.getNextRangeCell)(selected, focused, grid, "col"), false);
                }
            }
            else {
                if ((0, main_1.isRangeId)(selected)) {
                    spreadsheet.endEdit();
                    spreadsheet.selection.setSelectedCell(selected, false);
                    spreadsheet.selection.setFocusedCell((0, main_1.getNextRangeCell)(selected, focused, grid, "col"), false);
                    return;
                }
                spreadsheet.startEdit(selected);
            }
        }, f2: function () {
            spreadsheet.startEdit(spreadsheet.selection.getSelectedCell());
        }, pageUp: function (e) {
            e.preventDefault();
            var body = grid.getRootView().refs.grid_body;
            body.el.scrollTop -= body.el.clientHeight;
        }, pageDown: function (e) {
            e.preventDefault();
            var body = grid.getRootView().refs.grid_body;
            body.el.scrollTop += body.el.clientHeight - grid.config.rowHeight;
        }, "ctrl+a": function (e) {
            if (!editedCell) {
                e.preventDefault();
                var first = (0, main_1.getCellNameByIndex)(0, 1, grid);
                var last = (0, main_1.getCellNameByIndex)(grid.data.getLength() - 1, grid.config.columns.length - 1, grid);
                spreadsheet.selection.setSelectedCell("".concat(first, ":").concat(last), false);
            }
        }, "shift+arrowLeft": function () {
            setSelection(spreadsheet, grid, -1, "col", page);
        }, "shift+arrowRight": function () {
            setSelection(spreadsheet, grid, 1, "col", page);
        }, "shift+arrowDown": function () {
            setSelection(spreadsheet, grid, 1, "row", page);
        }, "shift+arrowUp": function () {
            setSelection(spreadsheet, grid, -1, "row", page);
        }, "ctrl+enter": function () {
            spreadsheet.endEdit();
        }, "shift+enter": function () {
            var selected = spreadsheet.selection.getSelectedCell();
            if ((0, main_1.isRangeId)(selected)) {
                var focused = spreadsheet.selection.getFocusedCell();
                spreadsheet.endEdit();
                spreadsheet.selection.setSelectedCell(selected, false);
                spreadsheet.selection.setFocusedCell((0, main_1.getPrevRangeCell)(selected, focused, grid, "col"), false);
                return;
            }
            setCell(spreadsheet, grid, null, page, -1, "row");
        }, tab: function (e) {
            e.preventDefault();
            var selected = spreadsheet.selection.getSelectedCell();
            if (editedCell)
                spreadsheet.endEdit();
            if ((0, main_1.isRangeId)(selected)) {
                var focused = spreadsheet.selection.getFocusedCell();
                spreadsheet.endEdit();
                spreadsheet.selection.setSelectedCell(selected, false);
                spreadsheet.selection.setFocusedCell((0, main_1.getNextRangeCell)(selected, focused, grid), false);
                return;
            }
            setCell(spreadsheet, grid, null, page, 1, "col");
        }, "shift+tab": function (e) {
            e.preventDefault();
            var selected = spreadsheet.selection.getSelectedCell();
            if (editedCell)
                spreadsheet.endEdit();
            if ((0, main_1.isRangeId)(selected)) {
                var focused = spreadsheet.selection.getFocusedCell();
                spreadsheet.endEdit();
                spreadsheet.selection.setSelectedCell(selected, false);
                spreadsheet.selection.setFocusedCell((0, main_1.getPrevRangeCell)(selected, focused, grid), false);
                return;
            }
            setCell(spreadsheet, grid, null, page, -1, "col");
        }, arrowLeft: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, null, page, -1, "col");
        }, arrowRight: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, null, page, 1, "col");
        }, arrowDown: function (e) {
            e.preventDefault();
            if (editLine.navigate("arrowDown")) {
                return;
            }
            if (editedCell) {
                return;
            }
            setCell(spreadsheet, grid, null, page, 1, "row");
        }, arrowUp: function (e) {
            e.preventDefault();
            if (editLine.navigate("arrowUp")) {
                return;
            }
            if (editedCell) {
                return;
            }
            setCell(spreadsheet, grid, null, page, -1, "row");
        }, "ctrl+arrowLeft": function () {
            setCell(spreadsheet, grid, 1, page, null, "col");
        }, "ctrl+arrowRight": function () {
            setCell(spreadsheet, grid, grid.config.columns.length - 1, page, null, "col");
        }, "ctrl+arrowDown": function () {
            setCell(spreadsheet, grid, grid.data.getLength() - 1, page, null, "row");
        }, "ctrl+arrowUp": function () {
            setCell(spreadsheet, grid, 0, page, null, "row");
        }, home: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, 1, page, null, "col");
        }, end: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, grid.config.columns.length - 1, page, null, "col");
        }, "ctrl+home": function () {
            setCell(spreadsheet, grid, 0, page, null, "row");
            setCell(spreadsheet, grid, 1, page, null, "col");
        }, "ctrl+end": function () {
            setCell(spreadsheet, grid, grid.data.getLength() - 1, page, null, "row");
            setCell(spreadsheet, grid, grid.config.columns.length - 1, page, null, "col");
        }, "ctrl+z": function (e) {
            var focused = spreadsheet.selection.getFocusedCell();
            var cellInfo = (0, main_1.getCellInfo)(focused, page, grid);
            if (!focused || !cellInfo.edited) {
                e.preventDefault();
            }
            spreadsheet.undo();
        }, "ctrl+y": function (e) {
            e.preventDefault();
            spreadsheet.redo();
        }, "ctrl+shift+z": function () {
            spreadsheet.redo();
        }, "ctrl+b": function () {
            var cell = spreadsheet.selection.getSelectedCell();
            var val = (0, toolbar_1.getToggledValue)(page, cell, "font-weight", "bold", grid);
            spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
                "font-weight": val,
            });
        }, "ctrl+i": function () {
            var cell = spreadsheet.selection.getSelectedCell();
            var val = (0, toolbar_1.getToggledValue)(page, cell, "font-style", "italic", grid);
            spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
                "font-style": val,
            });
        }, "ctrl+u": function (e) {
            e.preventDefault();
            var cell = spreadsheet.selection.getSelectedCell();
            var val = (0, toolbar_1.getToggledValue)(page, cell, "text-decoration", "underline", grid);
            spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
                "text-decoration": val,
            });
        }, "ctrl+f": function (e) {
            e.preventDefault();
            spreadsheet.search("", true);
        }, "alt+shift+5": function (e) {
            if ((0, main_1.isMac)())
                return;
            lineThrough(e);
        }, "ctrl+shift+x": function (e) {
            if (!(0, main_1.isMac)())
                return;
            lineThrough(e);
        }, "ctrl+shift+e": function (e) {
            textAlign("center", e);
        }, "ctrl+shift+l": function (e) {
            textAlign("left", e);
        }, "ctrl+shift+r": function (e) {
            textAlign("right", e);
        }, "shift + F11": function (e) {
            e.preventDefault();
            spreadsheet.addSheet();
        }, "alt + arrowUp": function (e) {
            navigateSheets(1, e);
        }, "alt + arrowDown": function (e) {
            navigateSheets(-1, e);
        }, "ctrl + space": function (e) {
            selectAction(true, e);
        }, "shift + space": function (e) {
            selectAction(false, e);
        }, "ctrl+k": function (e) {
            e.preventDefault();
            var cell = spreadsheet.selection.getFocusedCell();
            spreadsheet._showLinkPopup(cell);
        }, backspace: function () {
            if (editedCell) {
                return;
            }
            spreadsheet.setValue(spreadsheet.selection.getSelectedCell(), "");
        } });
}
exports.getKeysHandlers = getKeysHandlers;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectEditor = void 0;
var dom_1 = __webpack_require__(1);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(6);
var ts_list_1 = __webpack_require__(32);
var FocusManager_1 = __webpack_require__(19);
var format_1 = __webpack_require__(12);
var SelectEditor = /** @class */ (function () {
    function SelectEditor(cb, events) {
        this._list = new ts_list_1.List(null, { keyNavigation: true, css: "dhx_editor-list" });
        this._data = this._list.data;
        this._popup = new ts_popup_1.Popup({ css: "dhx_editor-popup" });
        this._popup.attach(this._list);
        this._events = events;
        this._endEdit = cb;
        this._initHandlers();
    }
    SelectEditor.prototype.endEdit = function () {
        var _this = this;
        if (!this.edit)
            return;
        (0, dom_1.awaitRedraw)().then(function () {
            var _a;
            _this._events.fire(types_1.SpreadsheetEvents.cellInput, [
                _this._config.oninput[1],
                ((_a = _this._list.selection.getItem()) === null || _a === void 0 ? void 0 : _a.value) || _this._input.value,
            ]);
            _this._endEdit();
            _this._popup.hide();
        });
        this.edit = false;
    };
    SelectEditor.prototype.setValue = function (data) {
        var values = data.filter(function (i) { return i || (0, format_1.isNumeric)(i); }).map(function (i) { return (i === null || i === void 0 ? void 0 : i.toString().trim()) || ""; });
        var set = new Set(values);
        this._data.parse(Array.from(set).map(function (i) { return ({ value: i }); }));
    };
    SelectEditor.prototype.toHTML = function (conf) {
        var _this = this;
        this._config = conf;
        this.edit = true;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return [
            (0, dom_1.el)("input.dhx_cell_input", __assign(__assign({}, conf), { onkeydown: function (e) {
                    if (e.code === "Enter") {
                        _this._popup.hide();
                    }
                    if (e.code === "ArrowDown" || e.code === "ArrowUp") {
                        FocusManager_1.focusManager.setFocusId(_this._list._uid);
                    }
                }, oninput: this._handlers.oninput, _hooks: __assign(__assign({}, conf._hooks), { didInsert: this._handlers.didInsert, didRemove: function () { return document.removeEventListener("mousedown", _this._handlers.onOuterClick); } }) })),
            (0, dom_1.el)(".dxi.dxi-menu-up.dhx_spreadsheet_cell_icon", {
                onclick: function () { return _this.endEdit(); },
            }),
        ];
    };
    SelectEditor.prototype._filter = function (val) {
        this._list.data.filter(function (item) { return (val ? item.value.includes(val) : item); });
    };
    SelectEditor.prototype._showPopup = function () {
        var _this = this;
        var _a;
        this._popup.show(this._input, {
            centering: true,
            mode: "bottom",
        });
        this._list.selection.add(((_a = this._list.data.find(function (i) { return i.value === _this._input.value; })) === null || _a === void 0 ? void 0 : _a.id) || "");
    };
    SelectEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                (0, dom_1.awaitRedraw)().then(function () {
                    _this._showPopup();
                });
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            oninput: function (e) {
                var value = e.target.value;
                if (!value) {
                    _this._showPopup();
                }
                if (value.startsWith("=") && _this._popup.isVisible()) {
                    _this._popup.hide();
                }
                _this._filter(value);
                var _a = _this._config.oninput, cb = _a[0], cell = _a[1];
                cb(cell, e);
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._config._hooks.didInsert(node);
            },
        };
        this._list.events.on(ts_list_1.ListEvents.click, function () {
            _this.endEdit();
        });
        this._events.on(types_1.SpreadsheetEvents.afterEditEnd, function () {
            _this._popup.hide();
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            var focus = _this._list.getFocus();
            if (!_this._list.data.getItem(focus)) {
                _this._list.setFocus(_this._list.data.getId(0));
            }
        });
    };
    return SelectEditor;
}());
exports.SelectEditor = SelectEditor;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeEditor = void 0;
var dom_1 = __webpack_require__(1);
var ts_timepicker_1 = __webpack_require__(53);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(6);
var format_1 = __webpack_require__(12);
var date_1 = __webpack_require__(28);
var TimeEditor = /** @class */ (function () {
    function TimeEditor(_cb, format, events) {
        var timeFormat = format.toLocaleLowerCase().includes("%a") ? 12 : 24;
        this._timepicker = new ts_timepicker_1.Timepicker(null, { timeFormat: timeFormat });
        this._popup = new ts_popup_1.Popup({ css: "dhx_editor_popup" });
        this._popup.attach(this._timepicker);
        this._events = events;
        this._initHandlers();
    }
    TimeEditor.prototype.endEdit = function () { };
    TimeEditor.prototype.setValue = function (value) {
        this._isFromSet = true;
        if (value === "") {
            this._timepicker.setValue(new Date());
            return;
        }
        if (this._initialDate && (0, format_1.isNumeric)(value)) {
            this._initialDate = (0, date_1.excelDateToJSDate)(value);
        }
        var val = (0, format_1.isNumeric)(value) ? (0, date_1.excelDateToJSDate)(value) : (0, date_1.timeStringToJS)(value);
        if (val === value)
            return;
        this._timepicker.setValue(val);
    };
    TimeEditor.prototype.hidePopup = function () {
        if (this._popup.isVisible()) {
            this._popup.hide();
        }
    };
    TimeEditor.prototype.toHTML = function (conf) {
        var _this = this;
        this._config = conf;
        this.setValue(conf.value);
        this._initialDate = conf.initValue;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return (0, dom_1.el)("input.dhx_cell_input", __assign(__assign({}, conf), { "data-skip-restore-focus": "true", onkeydown: function (e) {
                if (e.code === "Enter") {
                    _this._popup.hide();
                }
            }, oninput: this._handlers.oninput, _hooks: __assign(__assign({}, conf._hooks), { didInsert: this._handlers.didInsert, didRemove: this._handlers.didRemove }) }));
    };
    TimeEditor.prototype._showPopup = function () {
        if (!this._input.value.startsWith("=")) {
            this._popup.show(this._input, {
                centering: true,
                mode: "bottom",
            });
        }
    };
    TimeEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                (0, dom_1.awaitRedraw)().then(function () {
                    _this._showPopup();
                });
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            oninput: function (e) {
                var value = e.target.value;
                if (!value) {
                    _this._showPopup();
                }
                if (value.startsWith("=") && _this._popup.isVisible()) {
                    _this._popup.hide();
                }
                var _a = _this._config.oninput, cb = _a[0], cell = _a[1];
                _this.setValue(value);
                cb(cell, e);
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._config._hooks.didInsert(node);
                _this._initTimePickerEvents();
            },
            didRemove: function () {
                document.removeEventListener("mousedown", _this._handlers.onOuterClick);
            },
        };
    };
    TimeEditor.prototype._initTimePickerEvents = function () {
        var _this = this;
        this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.change, function (val) {
            if (_this._isFromSet) {
                (0, dom_1.awaitRedraw)().then(function () {
                    _this._isFromSet = false;
                });
                return;
            }
            _this._events.fire(types_1.SpreadsheetEvents.cellInput, [
                _this._config.oninput[1],
                (0, format_1.getFormattedValue)((0, date_1.getExcelDateFromJs)((0, date_1.timeStringToJS)(val)), _this._config.format),
            ]);
        });
    };
    return TimeEditor;
}());
exports.TimeEditor = TimeEditor;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationForm = void 0;
var ts_form_1 = __webpack_require__(59);
var types_1 = __webpack_require__(6);
var ts_window_1 = __webpack_require__(44);
var en_1 = __webpack_require__(11);
var ts_popup_1 = __webpack_require__(10);
var main_1 = __webpack_require__(2);
var DOMPurify = __webpack_require__(95);
var ValidationForm = /** @class */ (function () {
    function ValidationForm(events, set, grid) {
        this._set = set;
        this._grid = grid;
        this._modal = new ts_window_1.Window({
            title: en_1.default.validation,
            movable: true,
            closable: true,
            css: "dhx-spreadsheet-form-validation",
            height: 250,
            width: 600,
        });
        this._form = new ts_form_1.Form(null, {
            rows: [
                {
                    name: "cell",
                    type: "input",
                    label: "Cell range:",
                    labelPosition: "left",
                    labelWidth: 70,
                    width: 270,
                    placeholder: "Enter cell range",
                },
                {
                    cols: [
                        {
                            name: "criteria",
                            type: "combo",
                            label: "Criteria:",
                            labelPosition: "left",
                            labelWidth: 70,
                            width: 270,
                            readonly: true,
                            multiselection: false,
                            data: [
                                { value: "List of items", id: "items" },
                                { value: "List from a range", id: "range" },
                            ],
                        },
                        {
                            labelWidth: 3,
                            width: 260,
                            labelPosition: "left",
                            name: "target",
                            type: "input",
                            validation: this.formValidation.bind(this),
                            errorMessage: "Invalid cell range",
                            placeholder: "Enter cell range",
                        },
                    ],
                },
                {
                    align: "end",
                    cols: [
                        {
                            type: "button",
                            text: en_1.default.cancel,
                            id: "cancel",
                            view: "link",
                        },
                        {
                            type: "button",
                            text: en_1.default.removeValidation,
                            id: "remove",
                            view: "link",
                        },
                        {
                            type: "button",
                            text: en_1.default.save,
                            id: "save",
                        },
                    ],
                },
            ],
        });
        this._modal.attach(this._form);
        this._events = events;
        this._initHandlers();
    }
    ValidationForm.prototype.hide = function () {
        if (this._modal.isVisible()) {
            this._modal.hide();
        }
        this._events.fire(types_1.SpreadsheetEvents.afterPopupHide);
    };
    ValidationForm.prototype.formValidation = function (val) {
        if (!val)
            return true;
        var criteria = this._form.getItem("criteria").getValue();
        if (criteria === "range") {
            var _a = (0, main_1.getCellIds)(val, this._grid), row = _a.row, start = _a.start;
            return row || start;
        }
        return true;
    };
    ValidationForm.prototype.show = function (cell, config) {
        if (!this._modal.isVisible()) {
            this._modal.show();
        }
        var conf = __assign({}, config);
        if (config.editor) {
            var options = config.editor.options;
            conf.target = typeof options === "string" ? options : options.join(",");
            conf.criteria = typeof options === "string" ? "range" : "items";
        }
        this._form.setValue(__assign({ cell: cell, criteria: "items", target: "" }, conf));
    };
    ValidationForm.prototype._save = function (save) {
        var _a = this._form.getValue(), target = _a.target, cell = _a.cell, criteria = _a.criteria;
        target = DOMPurify.sanitize(target);
        if (!this._form.validate()) {
            this._form.blur("target");
            return;
        }
        if (save && !target)
            return;
        var isRange = criteria === "range";
        if (isRange && !(0, main_1.getCellIds)(target, this._grid).start) {
            target += ":".concat(target);
        }
        this.hide();
        var options = isRange ? target : target.split(",").map(function (i) { return i.trim(); });
        this._set(cell, save ? options : null);
    };
    ValidationForm.prototype._initHandlers = function () {
        var _this = this;
        this._form.events.on(ts_form_1.FormEvents.focus, function (name) {
            _this._focus = name;
        });
        this._modal.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            _this._form.setFocus("target");
        });
        this._form.events.on(ts_form_1.FormEvents.click, function (name) {
            switch (name) {
                case "save":
                    _this._save(true);
                    break;
                case "remove":
                    _this._save(false);
                    break;
                default:
                    _this.hide();
            }
        });
        this._form.getItem("criteria").events.on(ts_form_1.FormEvents.change, function (val) {
            var placeholder = "Enter ".concat(val === "range" ? "cell range" : " items separated by a comma");
            _this._form.getItem("target").setProperties({ placeholder: placeholder });
            _this._form.setFocus("target");
        });
        this._events.on(types_1.SpreadsheetEvents.afterSelectionSet, function (cell) {
            if (_this._focus === "cell") {
                _this._form.setValue({ cell: cell });
                _this._form.setFocus("cell");
            }
            if (_this._focus === "target" && _this._form.getItem("criteria").getValue() === "range") {
                _this._form.setValue({ target: cell });
                _this._form.setFocus("target");
            }
        });
    };
    return ValidationForm;
}());
exports.ValidationForm = ValidationForm;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatePicker = void 0;
var ts_calendar_1 = __webpack_require__(38);
var date_1 = __webpack_require__(18);
var events_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var label_1 = __webpack_require__(14);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(5);
var helper_1 = __webpack_require__(7);
var KeyManager_1 = __webpack_require__(21);
var DatePicker = /** @class */ (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._popupIsFocus = false;
        _this._propsItem = [
            "required",
            "validation",
            "valueFormat",
            "icon",
            "placeholder",
            "editable",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsCalendar = [
            "mode",
            "mark",
            "disabledDates",
            "weekStart",
            "weekNumbers",
            "timePicker",
            "dateFormat",
            "timeFormat",
            "thisMonthOnly",
        ];
        _this._props = __spreadArray(__spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true), _this._propsCalendar, true);
        _this._keyManager = new KeyManager_1.KeyManager(function () {
            var _a, _b, _c;
            var activeEl = document.activeElement;
            var element = (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el;
            return element === activeEl || _this._popup.isVisible();
        });
        _this._initView(config);
        _this._initHandlers();
        _this._initHotkeys();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    DatePicker.prototype.destructor = function () {
        this._popup && this._popup.destructor();
        this._keyManager && this._keyManager.destructor();
        this.calendar && this.calendar.destructor();
        this.events && this.events.clear();
        this.events = this._uid = this._propsCalendar = this._propsItem = this._props = this._keyManager = null;
        _super.prototype._destructor.call(this);
    };
    DatePicker.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsCalendar.includes(key)) {
                    this.calendar.config[key] = propertyConfig[key];
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.calendar.paint();
        this.paint();
    };
    DatePicker.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    DatePicker.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    DatePicker.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    DatePicker.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    DatePicker.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    DatePicker.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    DatePicker.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    DatePicker.prototype.validate = function (silent) {
        var _a;
        if (silent === void 0) { silent = false; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var value = args.length ? args[0] : this.getValue();
        var checkValue = ((_a = this.config.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "date"
            ? value instanceof Date
            : (0, date_1.stringToDate)(value, this.calendar.config.dateFormat, true);
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required || args.length)
            valid = !!checkValue;
        if (typeof this.config.validation === "function")
            valid = this.config.validation(value);
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    DatePicker.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    DatePicker.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.calendar.setValue(value);
    };
    DatePicker.prototype.getValue = function (asDateObject) {
        var _a;
        return (this.calendar.getValue(((_a = this.config.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "date" || asDateObject) || "");
    };
    DatePicker.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    DatePicker.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this._popup.hide();
            _this.getRootView().refs.input.el.blur();
        });
    };
    DatePicker.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this.calendar.clear();
    };
    DatePicker.prototype.getWidget = function () {
        return this.calendar;
    };
    DatePicker.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.calendar) {
            this.calendar.destructor();
        }
        if (this._popup) {
            this._popup.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            editable: false,
            hidden: false,
            value: "",
            mode: "calendar",
            weekStart: "sunday",
            weekNumbers: false,
            timePicker: false,
            dateFormat: "%d/%m/%y",
            timeFormat: 24,
            thisMonthOnly: false,
            valueFormat: "string",
            required: false,
            icon: "",
            placeholder: "",
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._popup = new ts_popup_1.Popup();
        this.calendar = new ts_calendar_1.Calendar(null, (0, helper_1.widgetConfig)(config));
        this._popup.attach(this.calendar);
    };
    DatePicker.prototype._initHandlers = function () {
        var _this = this;
        this.calendar.events.on(ts_calendar_1.CalendarEvents.beforeChange, function (value) {
            var _a;
            if (value !== "" && ((_a = _this.config.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== "date") {
                value = (0, date_1.getFormattedDate)(_this.calendar.config.dateFormat, value);
            }
            return _this.events.fire(types_1.ItemEvent.beforeChange, [value]);
        });
        this.calendar.events.on(ts_calendar_1.CalendarEvents.change, function (v, d, c, mode) {
            var _a;
            _this.config.value = _this.calendar.getValue(((_a = _this.config.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "date");
            _this.events.fire(types_1.ItemEvent.change, [_this.config.value]);
            if ((0, helper_1.isVerify)(_this.config)) {
                if (mode === "clear") {
                    _this.setValidationStatus(_this.validate(true) ? "success" : "error");
                }
                else {
                    _this.validate();
                }
            }
            _this._popup.hide();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.blur, function () {
            _this._popupIsFocus = false;
            _this.paint();
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (document.activeElement !== _this.getRootView().refs.input.el) {
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
            }
            _this.paint();
        });
    };
    DatePicker.prototype._getHandlers = function () {
        var _this = this;
        return {
            onblur: function () {
                if (!_this._popup.isVisible()) {
                    _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
                }
                _this.paint();
            },
            onfocus: function () {
                if (_this._popup.isVisible()) {
                    return;
                }
                var node = _this.getRootView().refs.input.el;
                _this._popup.show(node, {
                    theme: node,
                });
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
                _this.paint();
            },
            oninput: function (e) {
                var value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onchange: function (e) {
                var value = e.target.value;
                if (_this.config.editable && (0, date_1.stringToDate)(value, _this.calendar.config.dateFormat, true)) {
                    _this.setValue(value);
                }
                else if (value === "") {
                    _this.clear();
                }
            },
            onkeydown: function (event) {
                var _a, _b, _c;
                var activeEl = document.activeElement;
                var element = (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el;
                if (element === activeEl || _this._popup.isVisible()) {
                    _this.events.fire(types_1.ItemEvent.keydown, [event]);
                }
            },
            onmousedown: function () {
                var popup = _this._popup.getContainer();
                var activeEl = document.activeElement;
                if (popup !== activeEl)
                    _this._popupIsFocus = false;
            },
        };
    };
    DatePicker.prototype._initHotkeys = function () {
        var _this = this;
        var handlers = {
            "shift+tab": function () {
                _this._applyTab();
            },
            tab: function () {
                _this._applyTab();
            },
            escape: function () {
                if (_this._popup.isVisible()) {
                    _this.getRootView().refs.input.el.focus();
                }
                _this._popup.hide();
            },
            enter: function (event) {
                event.preventDefault();
                if (!_this._popup.isVisible()) {
                    var node = _this.getRootView().refs.input.el;
                    _this._popup.show(node, {
                        theme: node,
                    });
                }
            },
            arrowRight: function (event) {
                var focusElement = _this._popup.getContainer();
                if (_this._popup.isVisible() && !_this._popupIsFocus) {
                    event.preventDefault();
                    focusElement.focus();
                    _this._popupIsFocus = true;
                }
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    DatePicker.prototype._draw = function () {
        var _a, _b, _c;
        var _d = this.config, icon = _d.icon, required = _d.required, disabled = _d.disabled, placeholder = _d.placeholder, name = _d.name, id = _d.id, editable = _d.editable, label = _d.label, helpMessage = _d.helpMessage;
        var value = this.calendar.getValue();
        var activeFocus = this._popup.isVisible() || ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
        return (0, dom_1.el)("div.dhx_form-group", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), activeFocus),
        }, [
            this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", [
                (0, dom_1.el)("div.dhx_input__container", {}, [
                    (0, dom_1.el)(".dhx_input__icon", {
                        class: icon || "dxi dxi-calendar-today",
                    }),
                    (0, dom_1.el)("input.dhx_input.dhx_input--icon-padding", {
                        tabindex: 0,
                        "data-dhx-id": name || id,
                        _key: this._uid,
                        _ref: "input",
                        value: value,
                        type: "text",
                        required: required,
                        disabled: disabled,
                        class: activeFocus && "dhx_input--focus",
                        placeholder: placeholder || "",
                        name: name || "",
                        id: id || this._uid,
                        onfocus: this._handlers.onfocus,
                        oninput: this._handlers.oninput,
                        onchange: this._handlers.onchange,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        onmousedown: this._handlers.onmousedown,
                        autocomplete: "off",
                        readOnly: !editable,
                        "aria-label": label || "".concat(editable ? "type or" : "", " select date"),
                        "aria-describedby": helpMessage ? "dhx_label__help_".concat(id || this._uid) : null,
                    }),
                ]),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", {}, (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    DatePicker.prototype._applyTab = function () {
        var _a, _b, _c;
        var activeEl = document.activeElement;
        var popup = (_c = (_b = (_a = this._popup.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.el;
        if (activeEl !== popup && !this._popupIsFocus) {
            this._popup.hide();
        }
    };
    return DatePicker;
}(label_1.Label));
exports.DatePicker = DatePicker;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
var dom_1 = __webpack_require__(1);
var view_1 = __webpack_require__(8);
var types_1 = __webpack_require__(5);
var events_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var helper_1 = __webpack_require__(7);
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(container, config) {
        var _this = _super.call(this, container, __assign({ disabled: false, hidden: false, submit: false, full: false, circle: false, loading: false, view: "flat", size: "medium", color: "primary", height: "content", url: "", text: "", icon: "" }, config)) || this;
        _this._propsItem = [
            "submit",
            "url",
            "text",
            "icon",
            "view",
            "size",
            "color",
            "full",
            "circle",
            "loading",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this.config.text = _this.config.text || _this.config.value || "";
        _this.events = new events_1.EventSystem();
        _this._handlers = {
            onclick: function (event) { return _this.events.fire(types_1.ItemEvent.click, [event]); },
            onblur: function () { return _this.events.fire(types_1.ItemEvent.blur, [_this.config.text]); },
            onfocus: function () { return _this.events.fire(types_1.ItemEvent.focus, [_this.config.text]); },
            onkeydown: function (event) { return _this.events.fire(types_1.ItemEvent.keydown, [event]); },
        };
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Button.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this._propsItem = this._props = this.events = this._handlers = this._uid = null;
        this.unmount();
    };
    Button.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.config.text = this.config.text || this.config.value;
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Button.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Button.prototype.show = function () {
        var _a = this.config, _b = _a.text, text = _b === void 0 ? "" : _b, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [text])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [text]);
    };
    Button.prototype.hide = function (init) {
        if (init === void 0) { init = false; }
        var _a = this.config, _b = _a.text, text = _b === void 0 ? "" : _b, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [text, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [text, init]);
    };
    Button.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Button.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Button.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Button.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Button.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.button.el.focus();
        });
    };
    Button.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.button.el.blur();
        });
    };
    Button.prototype._draw = function () {
        var _a = this.config, color = _a.color, size = _a.size, view = _a.view, loading = _a.loading, circle = _a.circle, icon = _a.icon, text = _a.text, disabled = _a.disabled, submit = _a.submit, id = _a.id, name = _a.name, full = _a.full;
        var colorsCss = {
            danger: " dhx_button--color_danger",
            secondary: " dhx_button--color_secondary",
            primary: " dhx_button--color_primary",
            success: " dhx_button--color_success",
        }[color] || " dhx_button--color_primary";
        var sizeCss = {
            small: " dhx_button--size_small",
            medium: " dhx_button--size_medium",
        }[size] || " dhx_button--size_medium";
        var viewCss = {
            flat: " dhx_button--view_flat",
            link: " dhx_button--view_link",
        }[view] || " dhx_button--view_flat";
        var fullCss = full ? " dhx_button--width_full" : "";
        var circleCss = circle ? " dhx_button--circle" : "";
        var loadingCss = loading ? " dhx_button--loading" : "";
        var iconViewCss = icon && !text ? " dhx_button--icon" : "";
        return (0, dom_1.el)("button", {
            disabled: disabled,
            id: id,
            "data-dhx-id": name || id,
            onclick: this._handlers.onclick,
            onfocus: this._handlers.onfocus,
            onblur: this._handlers.onblur,
            onkeydown: this._handlers.onkeydown,
            type: submit ? "submit" : "button",
            class: "dhx_button " +
                colorsCss +
                sizeCss +
                viewCss +
                circleCss +
                fullCss +
                loadingCss +
                iconViewCss,
            _ref: "button",
        }, [
            icon &&
                (0, dom_1.el)("span.dhx_button__icon", {
                    class: icon,
                }),
            text && (0, dom_1.el)("span.dhx_button__text", text),
            loading &&
                (0, dom_1.el)("span.dhx_button__loading", [(0, dom_1.el)("span.dhx_button__loading-icon.dxi.dxi-loading")]),
        ]);
    };
    return Button;
}(view_1.View));
exports.Button = Button;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxGroup = void 0;
var dom_1 = __webpack_require__(1);
var ts_layout_1 = __webpack_require__(16);
var events_1 = __webpack_require__(3);
var checkbox_1 = __webpack_require__(88);
var label_1 = __webpack_require__(14);
var types_1 = __webpack_require__(5);
var core_1 = __webpack_require__(0);
var helper_1 = __webpack_require__(7);
var ts_popup_1 = __webpack_require__(10);
var CheckboxGroup = /** @class */ (function (_super) {
    __extends(CheckboxGroup, _super);
    function CheckboxGroup(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._buttons = [];
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "options",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    CheckboxGroup.prototype.destructor = function () {
        this.events && this.events.clear();
        this.layout && this.layout.destructor();
        this.events = this._uid = this._propsItem = this._props = this._buttons = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    CheckboxGroup.prototype.setProperties = function (arg, props) {
        if (typeof arg === "undefined" ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()])) {
            return;
        }
        if (typeof arg === "object" && !(0, core_1.isEmptyObj)(arg)) {
            for (var key in arg) {
                if (this._props.includes(key)) {
                    this.config[key] = arg[key];
                }
            }
            if (arg.hasOwnProperty("options")) {
                this._initView(this.config);
                this._initHandlers();
            }
        }
        if (typeof arg === "string" && props && !(0, core_1.isEmptyObj)(props)) {
            var checkbox = this._buttons.find(function (item) { return item.config.id === arg; });
            checkbox && checkbox.setProperties(props, true);
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    CheckboxGroup.prototype.getProperties = function (id) {
        if (typeof id === "undefined") {
            var obj = {};
            for (var key in this.config) {
                if (this._props.includes(key)) {
                    obj[key] = this.config[key];
                }
            }
            return obj;
        }
        var checkbox = this._buttons.find(function (item) { return item.config.id === id; });
        return checkbox.getProperties();
    };
    CheckboxGroup.prototype.getValue = function (id) {
        if (typeof id === "undefined") {
            var valueList_1 = {};
            this._buttons.forEach(function (item) {
                valueList_1[item.config.id] = item.getValue();
            });
            return valueList_1;
        }
        var checkbox = this._buttons.find(function (item) { return item.config.id === id; });
        if (id && checkbox) {
            return checkbox.getValue();
        }
    };
    CheckboxGroup.prototype.setValue = function (newValue) {
        if (typeof newValue === "undefined" || (0, core_1.isEmptyObj)(newValue))
            return;
        var currentValue = this.getValue();
        var updatedValue = __assign({}, currentValue);
        var _loop_1 = function (id, value) {
            var checkbox = this_1._buttons.find(function (i) { return i.config.id === id; });
            if (checkbox) {
                var checkboxValue = checkbox.config.value;
                updatedValue[id] =
                    typeof checkboxValue === "string" ? (value && checkboxValue) || "" : !!value;
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.entries(newValue); _i < _a.length; _i++) {
            var _b = _a[_i], id = _b[0], value = _b[1];
            _loop_1(id, value);
        }
        var isSameValue = (0, core_1.compare)(currentValue, updatedValue);
        if (isSameValue || !this.events.fire(types_1.ItemEvent.beforeChange, [updatedValue])) {
            return;
        }
        var _loop_2 = function (id, value) {
            var checkbox = this_2._buttons.find(function (item) { return item.config.id === id; });
            if (checkbox)
                checkbox.setValue(!!value, true);
        };
        var this_2 = this;
        for (var _c = 0, _d = Object.entries(newValue); _c < _d.length; _c++) {
            var _e = _d[_c], id = _e[0], value = _e[1];
            _loop_2(id, value);
        }
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        (0, helper_1.isVerify)(this.config) && this.validate();
    };
    CheckboxGroup.prototype.isChecked = function (id) {
        if (typeof id === "undefined") {
            var checkedList_1 = {};
            this._buttons.forEach(function (item) {
                checkedList_1[item.config.id] = item.isChecked();
            });
            return checkedList_1;
        }
        var checkbox = this._buttons.find(function (item) { return item.config.id === id; });
        if (id && checkbox) {
            return checkbox.isChecked();
        }
    };
    CheckboxGroup.prototype.focus = function (id) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!_this._buttons.length) {
                return;
            }
            if (!id) {
                return _this._buttons[0].focus();
            }
            var checkbox = _this._buttons.find(function (item) { return item.config.id === id; });
            checkbox && checkbox.focus();
        });
    };
    CheckboxGroup.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!_this._buttons.length) {
                return;
            }
            _this._buttons.forEach(function (checkbox) {
                checkbox.blur();
            });
        });
    };
    CheckboxGroup.prototype.show = function (id) {
        var _a;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isHidden = (!button && (this.config.hidden || this._buttons.some(function (item) { return item.config.hidden; }))) ||
            ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.hidden);
        if (!isHidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue(), id])) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.show();
        }
        else {
            this._buttons.forEach(function (item) { return item.show(); });
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue(), id]);
    };
    CheckboxGroup.prototype.hide = function (id, init) {
        var _a;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isHidden = (!button && this.config.hidden) || ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.hidden);
        if ((isHidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), id, init])) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.hide();
            this.config.hidden = this._buttons.every(function (item) { return item.config.hidden; });
        }
        else {
            this._buttons.forEach(function (item) { return item.hide(); });
            this.config.hidden = true;
        }
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), id, init]);
    };
    CheckboxGroup.prototype.isVisible = function (id) {
        var _a;
        var button = this._buttons.find(function (item) { return item.config.id === id; });
        return !(this.config.hidden || ((0, core_1.isDefined)(id) && ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.hidden)));
    };
    CheckboxGroup.prototype.enable = function (id) {
        var _a, _b;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isDisabled = (!button && (this.config.disabled || this._buttons.some(function (item) { return item.config.disabled; }))) ||
            ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.disabled);
        if (!isDisabled) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.enable();
        }
        else {
            this._buttons.forEach(function (item) { return item.enable(); });
        }
        this.config.disabled = false;
        ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.isDisabled()) && this.parent.enable();
        this.paint();
    };
    CheckboxGroup.prototype.disable = function (id, init) {
        var _a;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isDisabled = (!button && this.config.disabled) || ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.disabled);
        if (isDisabled && !init) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.disable();
            this.config.disabled = this._buttons.every(function (item) { return item.config.disabled; });
        }
        else {
            this._buttons.forEach(function (item) { return item.disable(); });
            this.config.disabled = true;
        }
        this.paint();
    };
    CheckboxGroup.prototype.isDisabled = function (id) {
        var _a;
        var button = this._buttons.find(function (item) { return item.config.id === id; });
        return Boolean(this.config.disabled || ((0, core_1.isDefined)(id) && ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.disabled)));
    };
    CheckboxGroup.prototype.clear = function () {
        if (this._buttons.some(function (item) { return item.isChecked(); })) {
            var value_1 = {};
            this._buttons.forEach(function (checkbox) {
                value_1[checkbox.config.id] = typeof checkbox.config.value === "string" ? "" : false;
            });
            if (!this.events.fire(types_1.ItemEvent.beforeChange, [value_1])) {
                return;
            }
            this._buttons.forEach(function (checkbox) {
                checkbox.clear(true);
            });
            this.events.fire(types_1.ItemEvent.change, [value_1]);
            (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
        }
    };
    CheckboxGroup.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var value = this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required) {
            valid = this._buttons.some(function (element) { return element.config.$required && !!element.config.checked; });
        }
        if (!silent) {
            this._buttons.forEach(function (element) {
                element.setValidationStatus(valid ? "success" : "error");
            });
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    CheckboxGroup.prototype.clearValidate = function () {
        this.setValidationStatus();
        this._buttons.forEach(function (element) {
            element.clearValidate();
        });
        this.paint();
    };
    CheckboxGroup.prototype._initView = function (config) {
        var _this = this;
        if ((0, core_1.isEmptyObj)(config) || !config.options || (0, core_1.isEmptyObj)(config.options)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.layout) {
            this.layout.destructor();
        }
        if (this._buttons.length) {
            this._buttons.forEach(function (button) {
                button.destructor();
            });
            this._buttons = [];
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            options: {},
            required: false,
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        var checkboxesConfig = this.config.options.rows || this.config.options.cols;
        checkboxesConfig === null || checkboxesConfig === void 0 ? void 0 : checkboxesConfig.forEach(function (option) {
            option.id = option.id || (0, core_1.uid)();
            option.$group = true;
        });
        this.layout = new ts_layout_1.Layout(null, this.config.options);
        checkboxesConfig === null || checkboxesConfig === void 0 ? void 0 : checkboxesConfig.forEach(function (option) {
            var checkbox = new checkbox_1.Checkbox(null, __assign(__assign({}, option), { disabled: config.disabled || option.disabled, name: config.name, $required: config.required }));
            _this._buttons.push(checkbox);
            _this.layout.getCell(option.id).attach(checkbox);
            checkbox.events.on(types_1.ItemEvent.beforeChange, function (checked) {
                var _a;
                var value = __assign(__assign({}, _this.getValue()), (_a = {}, _a[checkbox.config.id] = checked, _a));
                return _this.events.fire(types_1.ItemEvent.beforeChange, [value]);
            });
            checkbox.events.on(types_1.ItemEvent.change, function () {
                _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                (0, helper_1.isVerify)(_this.config) && _this.validate();
            });
            checkbox.events.on(types_1.ItemEvent.focus, function (_value, id) {
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue(), id]);
            });
            checkbox.events.on(types_1.ItemEvent.blur, function (_value, id) {
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue(), id]);
            });
            checkbox.events.on(types_1.ItemEvent.keydown, function (event, id) {
                _this.events.fire(types_1.ItemEvent.keydown, [event, id]);
            });
            checkbox.events.on(types_1.ItemEvent.afterHide, function () {
                (0, dom_1.awaitRedraw)().then(function () {
                    var _a;
                    (_a = _this.layout.getCell(checkbox.config.id)) === null || _a === void 0 ? void 0 : _a.hide();
                });
            });
            checkbox.events.on(types_1.ItemEvent.afterShow, function () {
                var _a;
                (_a = _this.layout.getCell(checkbox.config.id)) === null || _a === void 0 ? void 0 : _a.show();
            });
        });
        this.config.value && this.setValue(this.config.value);
        this.clearValidate();
        if (!this.config.disabled &&
            this._buttons.length &&
            this._buttons.every(function (item) { return item.config.disabled; })) {
            this.config.disabled = true;
        }
    };
    CheckboxGroup.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function () {
            _this.config.value = _this.getValue();
            _this.paint();
        });
    };
    CheckboxGroup.prototype._draw = function () {
        var visibility = this.config.hidden ? " dhx_form-group--hidden" : "";
        var _a = this.config, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage, required = _a.required, name = _a.name, id = _a.id;
        return (0, dom_1.el)("fieldset.dhx_form-group-fieldset", {}, [
            (0, dom_1.el)("div.dhx_form-group.dhx_form-group--checkbox-group", {
                class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config)) + visibility,
                "data-dhx-id": name || id,
                role: "radiogroup",
                _key: id || this._uid,
            }, [
                label || labelWidth || helpMessage || required ? this._drawLabel() : null,
                (0, dom_1.el)("div.dhx_checkbox-group--container", {}, [
                    this.layout && (0, dom_1.inject)(this.layout.getRootView()),
                    required &&
                        (0, helper_1.getValidationMessage)(this.config) &&
                        (0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config)),
                ]),
            ]),
        ]);
    };
    return CheckboxGroup;
}(label_1.Label));
exports.CheckboxGroup = CheckboxGroup;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioGroup = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var ts_layout_1 = __webpack_require__(16);
var ts_popup_1 = __webpack_require__(10);
var events_1 = __webpack_require__(3);
var radiobutton_1 = __webpack_require__(225);
var helper_1 = __webpack_require__(7);
var label_1 = __webpack_require__(14);
var types_1 = __webpack_require__(5);
var RadioGroup = /** @class */ (function (_super) {
    __extends(RadioGroup, _super);
    function RadioGroup(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._buttons = [];
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "options",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._initView(config);
        _this._initHandlers();
        _this.config.value && _this._setValue(_this.config.value);
        _this.clearValidate();
        if (_this.config.helpMessage) {
            _this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            _this._helper.attachHTML(_this.config.helpMessage);
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    RadioGroup.prototype.destructor = function () {
        this.events && this.events.clear();
        this.layout && this.layout.destructor();
        this.events = this._uid = this._propsItem = this._props = this._buttons = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    RadioGroup.prototype.setProperties = function (arg, props) {
        if (typeof arg === "undefined" ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        if (typeof arg === "object" && !(0, core_1.isEmptyObj)(arg)) {
            for (var key in arg) {
                if (this._props.includes(key)) {
                    this.config[key] = arg[key];
                }
            }
            if (arg.hasOwnProperty("options")) {
                this._initView(this.config);
                this._initHandlers();
            }
        }
        if (typeof arg === "string" && props && !(0, core_1.isEmptyObj)(props)) {
            var radio = this._buttons.find(function (item) { return item.config.id === arg; });
            radio && radio.setProperties(props);
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    RadioGroup.prototype.getProperties = function (id) {
        if (typeof id === "undefined") {
            var obj = {};
            for (var key in this.config) {
                if (this._props.includes(key)) {
                    obj[key] = this.config[key];
                }
            }
            return obj;
        }
        var radio = this._buttons.find(function (item) { return item.config.id === id; });
        return radio.getProperties();
    };
    RadioGroup.prototype.getValue = function () {
        var _this = this;
        this._buttons.forEach(function (element) {
            if (element.getValue()) {
                _this.config.value = element.getValue() || "";
            }
        });
        return this.config.value || "";
    };
    RadioGroup.prototype.setValue = function (value) {
        if (value === this.config.value)
            return;
        this._setValue(value);
        this.events.fire(types_1.ItemEvent.change, [value]);
        (0, helper_1.isVerify)(this.config) && this.validate();
    };
    RadioGroup.prototype.focus = function (id) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!_this._buttons.length) {
                return;
            }
            if (!id) {
                return _this._buttons[0].focus();
            }
            var radiobutton = _this._buttons.find(function (i) { return i.config.id === id; });
            if (!radiobutton) {
                return;
            }
            return radiobutton.focus();
        });
    };
    RadioGroup.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!_this._buttons.length) {
                return;
            }
            _this._buttons.forEach(function (radioButton) { return radioButton.blur(); });
        });
    };
    RadioGroup.prototype.show = function (id) {
        var _a;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isHidden = (!button && (this.config.hidden || this._buttons.some(function (item) { return item.config.hidden; }))) ||
            ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.hidden);
        if (!isHidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue(), id])) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.show();
        }
        else {
            this._buttons.forEach(function (item) { return item.show(); });
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue(), id]);
    };
    RadioGroup.prototype.hide = function (id, init) {
        var _a;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isHidden = (!button && this.config.hidden) || ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.hidden);
        if ((isHidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), id, init])) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.hide();
            this.config.hidden = this._buttons.every(function (item) { return item.config.hidden; });
        }
        else {
            this._buttons.forEach(function (item) { return item.hide(); });
            this.config.hidden = true;
        }
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), id, init]);
    };
    RadioGroup.prototype.isVisible = function (id) {
        var _a;
        var button = this._buttons.find(function (item) { return item.config.id === id; });
        return !(this.config.hidden || ((0, core_1.isDefined)(id) && ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.hidden)));
    };
    RadioGroup.prototype.enable = function (id) {
        var _a, _b;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isDisabled = (!button && (this.config.disabled || this._buttons.some(function (item) { return item.config.disabled; }))) ||
            ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.disabled);
        if (!isDisabled) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.enable();
        }
        else {
            this._buttons.forEach(function (item) { return item.enable(); });
        }
        this.config.disabled = false;
        ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.isDisabled()) && this.parent.enable();
        this.paint();
    };
    RadioGroup.prototype.disable = function (id, init) {
        var _a;
        var button = (id && this._buttons.find(function (item) { return item.config.id === id; }));
        if ((0, core_1.isDefined)(id) && !button) {
            return;
        }
        var isDisabled = (!button && this.config.disabled) || ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.disabled);
        if (isDisabled && !init) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.disable();
            this.config.disabled = this._buttons.every(function (item) { return item.config.disabled; });
        }
        else {
            this._buttons.forEach(function (item) { return item.disable(); });
            this.config.disabled = true;
        }
        this.paint();
    };
    RadioGroup.prototype.isDisabled = function (id) {
        var _a;
        var button = this._buttons.find(function (item) { return item.config.id === id; });
        return Boolean(this.config.disabled || ((0, core_1.isDefined)(id) && ((_a = button === null || button === void 0 ? void 0 : button.config) === null || _a === void 0 ? void 0 : _a.disabled)));
    };
    RadioGroup.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this._buttons.forEach(function (element) {
            element.clear();
        });
        this.config.value = "";
        this.events.fire(types_1.ItemEvent.change, [this.config.value]);
        (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
    };
    RadioGroup.prototype.validate = function (silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        var value = this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required) {
            valid = this._buttons.some(function (element) { return _this.config.required && !!element.config.checked; });
        }
        if (!silent) {
            this._buttons.forEach(function (element) {
                element.setValidationStatus(valid ? "success" : "error");
            });
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    RadioGroup.prototype.clearValidate = function () {
        this.setValidationStatus();
        this._buttons.map(function (element) {
            element.clearValidate();
        });
        this.paint();
    };
    RadioGroup.prototype._initView = function (config) {
        var _this = this;
        if ((0, core_1.isEmptyObj)(config) || !config.options || (0, core_1.isEmptyObj)(config.options)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.layout) {
            this.layout.destructor();
        }
        if (this._buttons.length) {
            this._buttons.forEach(function (button) {
                button.destructor();
            });
            this._buttons = [];
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            value: "",
            disabled: false,
            hidden: false,
            options: {},
            required: false,
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        var radioButtonsConfig = this.config.options.rows || this.config.options.cols;
        radioButtonsConfig === null || radioButtonsConfig === void 0 ? void 0 : radioButtonsConfig.forEach(function (option) {
            option.id = option.id || (0, core_1.uid)();
        });
        this.layout = new ts_layout_1.Layout(null, this.config.options);
        radioButtonsConfig === null || radioButtonsConfig === void 0 ? void 0 : radioButtonsConfig.forEach(function (option) {
            var radioButton = new radiobutton_1.RadioButton(null, __assign(__assign({}, option), { disabled: config.disabled || option.disabled, $name: config.name, $required: config.required }));
            _this._buttons.push(radioButton);
            _this.layout.getCell(option.id).attach(radioButton);
            radioButton.events.on(radiobutton_1.RadioButtonEvents.beforeChange, function () {
                return _this.events.fire(types_1.ItemEvent.beforeChange, [radioButton.config.value || ""]);
            });
            radioButton.events.on(radiobutton_1.RadioButtonEvents.change, function () {
                _this._buttons.map(function (button) {
                    if (button.config.id !== radioButton.config.id) {
                        button.setValue(false);
                    }
                });
                _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                (0, helper_1.isVerify)(_this.config) && _this.validate();
            });
            radioButton.events.on(radiobutton_1.RadioButtonEvents.focus, function (value, id) {
                _this.events.fire(types_1.ItemEvent.focus, [value, id]);
            });
            radioButton.events.on(radiobutton_1.RadioButtonEvents.blur, function (value, id) {
                _this.events.fire(types_1.ItemEvent.blur, [value, id]);
            });
            radioButton.events.on(radiobutton_1.RadioButtonEvents.keydown, function (event, id) {
                _this.events.fire(types_1.ItemEvent.keydown, [event, id]);
            });
            radioButton.events.on(types_1.ItemEvent.afterHide, function () {
                (0, dom_1.awaitRedraw)().then(function () {
                    _this.layout.getCell(radioButton.config.id).hide();
                });
            });
            radioButton.events.on(types_1.ItemEvent.afterShow, function () {
                _this.layout.getCell(radioButton.config.id).show();
            });
        });
        if (!this.config.disabled &&
            this._buttons.length &&
            this._buttons.every(function (item) { return item.config.disabled; })) {
            this.config.disabled = true;
        }
    };
    RadioGroup.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.beforeChange, function () { return _this.paint(); });
        this.events.on(types_1.ItemEvent.change, function () {
            _this.config.value = _this.getValue();
            _this.paint();
        });
    };
    RadioGroup.prototype._draw = function () {
        var _a = this.config, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage, required = _a.required, hidden = _a.hidden, name = _a.name, id = _a.id;
        var visibility = hidden ? " dhx_form-group--hidden" : "";
        return (0, dom_1.el)("fieldset.dhx_form-group-fieldset", {}, [
            (0, dom_1.el)("div.dhx_form-group.dhx_form-group--radio-group", {
                class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config)) + visibility,
                "data-dhx-id": name || id,
                _key: id || this._uid,
            }, [
                label || labelWidth || helpMessage || required ? this._drawLabel() : null,
                (0, dom_1.el)("div.dhx_radio-group--container", {}, [
                    this.layout && (0, dom_1.inject)(this.layout.getRootView()),
                    required &&
                        (0, helper_1.getValidationMessage)(this.config) &&
                        (0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config)),
                ]),
            ]),
        ]);
    };
    RadioGroup.prototype._setValue = function (value) {
        if (typeof value === "undefined" || this._buttons.findIndex(function (i) { return i.config.value === value; }) === -1)
            return;
        this._buttons.forEach(function (element) {
            element.setValue(value === element.config.value);
        });
    };
    return RadioGroup;
}(label_1.Label));
exports.RadioGroup = RadioGroup;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioButton = exports.RadioButtonEvents = void 0;
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var events_1 = __webpack_require__(3);
var helper_1 = __webpack_require__(7);
var label_1 = __webpack_require__(14);
var RadioButtonEvents;
(function (RadioButtonEvents) {
    RadioButtonEvents["beforeChange"] = "beforeChange";
    RadioButtonEvents["change"] = "change";
    RadioButtonEvents["focus"] = "focus";
    RadioButtonEvents["blur"] = "blur";
    RadioButtonEvents["keydown"] = "keydown";
    RadioButtonEvents["beforeHide"] = "beforeHide";
    RadioButtonEvents["afterHide"] = "afterHide";
    RadioButtonEvents["beforeShow"] = "beforeShow";
    RadioButtonEvents["afterShow"] = "afterShow";
})(RadioButtonEvents || (exports.RadioButtonEvents = RadioButtonEvents = {}));
var RadioButton = /** @class */ (function (_super) {
    __extends(RadioButton, _super);
    function RadioButton(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, __assign({ text: "", width: "content", height: "content", checked: false }, config)) || this;
        _this._propsItem = ["text"];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._handlers = {
            onchange: function (e) {
                var checked = e.target.checked;
                if (!_this.events.fire(RadioButtonEvents.beforeChange, [checked])) {
                    return;
                }
                _this.config.checked = checked;
                _this.events.fire(RadioButtonEvents.change, [checked]);
            },
            onfocus: function () { return _this.events.fire(RadioButtonEvents.focus, [_this.getValue() || "", _this.config.id]); },
            onblur: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(RadioButtonEvents.blur, [_this.getValue() || "", _this.config.id]); },
            onkeydown: function (event) {
                _this.events.fire(RadioButtonEvents.keydown, [event, _this.config.id]);
            },
        };
        _this.events = new events_1.EventSystem();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    RadioButton.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this.events = this._handlers = this._uid = this._props = this._propsItem = null;
        this.unmount();
    };
    RadioButton.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig || (0, core_1.isEmptyObj)(propertyConfig))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.paint();
    };
    RadioButton.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    RadioButton.prototype.getValue = function () {
        if (this.config.checked) {
            return this.config.value;
        }
    };
    RadioButton.prototype.setValue = function (checked) {
        this.config.checked = checked;
        this.paint();
    };
    RadioButton.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(RadioButtonEvents.beforeShow, [])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(RadioButtonEvents.afterShow, []);
    };
    RadioButton.prototype.hide = function () {
        var hidden = this.config.hidden;
        if (hidden || !this.events.fire(RadioButtonEvents.beforeHide, [])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(RadioButtonEvents.afterHide, []);
    };
    RadioButton.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    RadioButton.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    RadioButton.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.blur();
        });
    };
    RadioButton.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    RadioButton.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    RadioButton.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    RadioButton.prototype.clear = function () {
        this.config.checked = false;
        this.setValidationStatus(this.validate() ? "success" : "error");
        this.paint();
    };
    RadioButton.prototype.validate = function () {
        var isValid = !!this.config.checked;
        this.setValidationStatus(isValid ? "success" : "error");
        this.paint();
        return isValid;
    };
    RadioButton.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    RadioButton.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, checked = _a.checked, disabled = _a.disabled, $name = _a.$name, $required = _a.$required, text = _a.text;
        return (0, dom_1.el)("label.dhx_radiobutton.dhx_form-group", {
            class: (0, helper_1.getFormItemCss)(this.config, !!$required),
        }, [
            (0, dom_1.el)("input.dhx_radiobutton__input", {
                type: "radio",
                id: id,
                _key: id || this._uid,
                value: value || "",
                name: $name || "",
                disabled: disabled,
                checked: checked,
                onchange: this._handlers.onchange,
                onfocus: this._handlers.onfocus,
                onblur: this._handlers.onblur,
                onkeydown: this._handlers.onkeydown,
                required: $required,
                _ref: "input",
            }),
            (0, dom_1.el)("span.dhx_radiobutton__visual-input"),
            (0, dom_1.el)("span.dhx_text", [text]),
        ]);
    };
    return RadioButton;
}(label_1.Label));
exports.RadioButton = RadioButton;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var label_1 = __webpack_require__(14);
var helper_1 = __webpack_require__(7);
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(5);
var Select = /** @class */ (function (_super) {
    __extends(Select, _super);
    function Select(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = [
            "required",
            "validation",
            "icon",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._initView(config);
        return _this;
    }
    Select.prototype.destructor = function () {
        this.events && this.events.clear();
        this.events = this._uid = this._propsItem = this._props = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    Select.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Select.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Select.prototype.show = function () {
        if (!this.config.hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    Select.prototype.hide = function (init) {
        if ((this.config.hidden && !init) ||
            !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), !!init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), !!init]);
    };
    Select.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Select.prototype.disable = function (value) {
        var option = ((0, core_1.isDefined)(value) &&
            this.config.options.find(function (option) { return option.value === value; }));
        if ((0, core_1.isDefined)(value) && !option) {
            return;
        }
        var isDisabled = (!option && this.config.disabled) || (option === null || option === void 0 ? void 0 : option.disabled);
        if (isDisabled) {
            return;
        }
        if (option) {
            option.disabled = true;
            this.config.disabled = this.config.options.every(function (option) { return option.disabled; });
        }
        else {
            this.config.options = this.config.options.map(function (option) { return (__assign(__assign({}, option), { disabled: true })); });
            this.config.disabled = true;
        }
        this.paint();
    };
    Select.prototype.enable = function (value) {
        var _a;
        var option = ((0, core_1.isDefined)(value) &&
            this.config.options.find(function (option) { return option.value === value; }));
        if ((0, core_1.isDefined)(value) && !option) {
            return;
        }
        var isDisabled = (!option && (this.config.disabled || this.config.options.some(function (option) { return option.disabled; }))) ||
            (option === null || option === void 0 ? void 0 : option.disabled);
        if (!isDisabled) {
            return;
        }
        if (option) {
            option.disabled = false;
        }
        else {
            this.config.options = this.config.options.map(function (option) { return (__assign(__assign({}, option), { disabled: false })); });
        }
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Select.prototype.isDisabled = function (value) {
        var option = this.config.options.find(function (option) { return option.value === value; });
        return Boolean(this.config.disabled || ((0, core_1.isDefined)(value) && (option === null || option === void 0 ? void 0 : option.disabled)));
    };
    Select.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var value = this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required)
            valid = (0, core_1.isDefined)(value);
        if (typeof this.config.validation === "function")
            valid = this.config.validation(value);
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    Select.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    Select.prototype.clear = function () {
        var _a, _b;
        var value = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.options[0]) === null || _b === void 0 ? void 0 : _b.value;
        if (this.config.value === value || !this.events.fire(types_1.ItemEvent.beforeChange, [value])) {
            return;
        }
        this.config.value = value;
        this.events.fire(types_1.ItemEvent.change, [value]);
        (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
        this.paint();
    };
    Select.prototype.setValue = function (value) {
        if (typeof value === "undefined" ||
            value === this.config.value ||
            this.config.options.findIndex(function (i) { return i.value === value; }) === -1 ||
            !this.events.fire(types_1.ItemEvent.beforeChange, [value])) {
            return;
        }
        this.config.value = value;
        this.events.fire(types_1.ItemEvent.change, [value]);
        (0, helper_1.isVerify)(this.config) && this.validate();
        this.paint();
    };
    Select.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.select.el.focus();
        });
    };
    Select.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.select.el.blur();
        });
    };
    Select.prototype.getValue = function () {
        return this.config.value;
    };
    Select.prototype.setOptions = function (options) {
        if (!options || !options.length) {
            throw new Error("Function argument cannot be empty, for more info check documentation https://docs.dhtmlx.com/suite/form__select.html#addingselect");
        }
        if (!this.events.fire(types_1.ItemEvent.beforeChangeOptions, [__spreadArray([], options, true)])) {
            return;
        }
        this._checkOptions(options);
        this.config.options = __spreadArray([], options, true);
        this.events.fire(types_1.ItemEvent.changeOptions, [__spreadArray([], options, true)]);
        this.setValue(this.config.options[0].value);
        this.paint();
    };
    Select.prototype.getOptions = function () {
        return this.config.options;
    };
    Select.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        this._checkOptions(config.options);
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            required: false,
            icon: "",
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
            options: config.options,
            value: config.options[0].value,
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (!this.config.disabled &&
            this.config.options.length &&
            this.config.options.every(function (option) { return option.disabled; })) {
            this.config.disabled = true;
        }
        this.paint();
    };
    Select.prototype._getHandlers = function () {
        var _this = this;
        return {
            onchange: function (e) {
                var value = _this.config.options
                    .map(function (o) { return o.value; })
                    .find(function (v) { return v == e.target.value; });
                if (!_this.events.fire(types_1.ItemEvent.beforeChange, [value]))
                    return;
                _this.config.value = value;
                _this.events.fire(types_1.ItemEvent.change, [value]);
                (0, helper_1.isVerify)(_this.config) && _this.validate();
                _this.paint();
            },
            onblur: function () {
                if (!_this._uid)
                    return;
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
                _this.paint();
            },
            onfocus: function () {
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
                _this.paint();
            },
        };
    };
    Select.prototype._draw = function () {
        var _a, _b, _c;
        var _d = this.config, id = _d.id, options = _d.options, icon = _d.icon, value = _d.value, label = _d.label, labelWidth = _d.labelWidth, helpMessage = _d.helpMessage, required = _d.required, name = _d.name;
        var activeFocus = ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.select) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
        return (0, dom_1.el)(".dhx_form-group", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), activeFocus),
        }, [
            (label || labelWidth || helpMessage) && this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", {}, [
                (0, dom_1.el)("div.dhx_input__container", {}, [
                    (0, dom_1.el)(".dhx_input__icon", {
                        class: icon ? icon : "dxi dxi-menu-down",
                    }),
                    (0, dom_1.el)("select.dhx_select.dhx_input", {
                        id: id,
                        _key: id || this._uid,
                        "data-dhx-id": name || id,
                        tabindex: 0,
                        class: activeFocus && "dhx_input--focus",
                        onchange: this._handlers.onchange,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        _ref: "select",
                        required: required,
                    }, options.length &&
                        options.map(function (option) {
                            return (0, dom_1.el)("option", {
                                value: option.value,
                                disabled: option.disabled,
                                selected: value === option.value,
                            }, option.content);
                        })),
                ]),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    Select.prototype._checkOptions = function (options) {
        if (options.length === 0) {
            throw new Error("Property options* cannot be empty, for more info check documentation https://docs.dhtmlx.com/suite/form__select.html#addingselect");
        }
        options.forEach(function (item) {
            if (!item.hasOwnProperty("value") || !item.hasOwnProperty("content")) {
                throw new Error("The object must contain two required properties value and content, for more info check documentation https://docs.dhtmlx.com/suite/form__select.html#addingselect");
            }
        });
    };
    return Select;
}(label_1.Label));
exports.Select = Select;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Textarea = void 0;
var dom_1 = __webpack_require__(1);
var helper_1 = __webpack_require__(7);
var input_1 = __webpack_require__(45);
var types_1 = __webpack_require__(5);
var core_1 = __webpack_require__(0);
var Textarea = /** @class */ (function (_super) {
    __extends(Textarea, _super);
    function Textarea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._propsItem = [
            "required",
            "validation",
            "placeholder",
            "readOnly",
            "maxlength",
            "minlength",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        return _this;
    }
    Textarea.prototype.getValue = function () {
        var _a;
        return String((_a = this.config.value) !== null && _a !== void 0 ? _a : "");
    };
    Textarea.prototype.isFocused = function () {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.textarea) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
    };
    Textarea.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.textarea.el.focus();
        });
    };
    Textarea.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.textarea.el.blur();
        });
    };
    Textarea.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Textarea.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Textarea.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            required: false,
            validation: undefined,
            placeholder: "",
            readOnly: false,
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this.paint();
    };
    Textarea.prototype._draw = function () {
        var _this = this;
        var _a, _b, _c;
        var _d = this.config, id = _d.id, value = _d.value, disabled = _d.disabled, name = _d.name, placeholder = _d.placeholder, required = _d.required, resizable = _d.resizable, readOnly = _d.readOnly, maxlength = _d.maxlength, minlength = _d.minlength, label = _d.label, helpMessage = _d.helpMessage, height = _d.height;
        var activeFocus = ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.textarea) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
        return (0, dom_1.el)("div.dhx_form-group.dhx_form-group--textarea", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), activeFocus),
        }, [
            this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", [
                (0, dom_1.el)("textarea.dhx_input.dhx_input--textarea", {
                    type: "text",
                    id: id,
                    "data-dhx-id": name || id,
                    placeholder: placeholder || "",
                    value: (0, core_1.isDefined)(value) ? value : "",
                    name: name || "",
                    disabled: disabled,
                    required: required,
                    readOnly: readOnly,
                    maxlength: maxlength,
                    minlength: minlength,
                    onblur: this._handlers.onblur,
                    oninput: this._handlers.oninput,
                    onchange: this._handlers.onchange,
                    onfocus: this._handlers.onfocus,
                    onkeydown: this._handlers.onkeydown,
                    _hooks: __assign(__assign({}, this._getHooks()), { didInsert: function (node) {
                            if (height === "content") {
                                var textarea = node.el;
                                textarea.style.height = textarea.scrollHeight + "px";
                            }
                            node.el.addEventListener("compositionend", _this._handlers.oninput);
                        } }),
                    style: {
                        resize: resizable ? "both" : "none",
                    },
                    _ref: "textarea",
                    "aria-label": label || "".concat(readOnly ? value : "", " type text"),
                    "aria-describedby": helpMessage ? "dhx_label__help_".concat(id || this._uid) : null,
                }),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", {}, (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    return Textarea;
}(input_1.Input));
exports.Textarea = Textarea;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var helper_1 = __webpack_require__(7);
var input_1 = __webpack_require__(45);
var types_1 = __webpack_require__(5);
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._propsItem = [
            "inputType",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        return _this;
    }
    Text.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Text.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Text.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            value: "",
            inputType: "text",
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this.paint();
    };
    Text.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, name = _a.name, inputType = _a.inputType, label = _a.label;
        var valueLength = (value !== null && value !== void 0 ? value : "").toString().length;
        return (0, dom_1.el)("div.dhx_form-group.dhx_form-group--textinput", {
            class: (0, helper_1.getFormItemCss)(this.config),
        }, [
            this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", [
                (0, dom_1.el)("input.dhx_input.dhx_input--textinput", {
                    type: ["text", "number", "password"].includes(inputType) ? inputType : "text",
                    readOnly: true,
                    id: id,
                    "data-dhx-id": name || id,
                    value: value !== null && value !== void 0 ? value : "",
                    name: name,
                    _ref: "input",
                    tabindex: -1,
                    role: "presentation",
                    "aria-label": label || value,
                    size: valueLength > 20 ? valueLength : 20,
                    onkeydown: this._handlers.onkeydown,
                }),
            ]),
        ]);
    };
    return Text;
}(input_1.Input));
exports.Text = Text;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Combo = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var helper_1 = __webpack_require__(7);
var ts_combobox_1 = __webpack_require__(56);
var events_1 = __webpack_require__(3);
var label_1 = __webpack_require__(14);
var types_1 = __webpack_require__(5);
var Combo = /** @class */ (function (_super) {
    __extends(Combo, _super);
    function Combo(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = [
            "required",
            "validation",
            "placeholder",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "readonly",
            "readOnly",
        ];
        _this._propsCombo = [
            "template",
            "filter",
            "multiselection",
            "selectAllButton",
            "itemsCount",
            "itemHeight",
            "virtual",
            "listHeight",
        ];
        _this._props = __spreadArray(__spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true), _this._propsCombo, true);
        _this._isClear = false;
        _this._initView(config);
        _this._initHandlers();
        return _this;
    }
    Combo.prototype.destructor = function () {
        this.events && this.events.clear();
        this.combobox && this.combobox.destructor();
        this.events = this._uid = this._propsCombo = this._propsItem = this._props = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    Combo.prototype.setProperties = function (propertyConfig) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!propertyConfig ||
                (0, core_1.isEmptyObj)(propertyConfig) ||
                !_this.events.fire(types_1.ItemEvent.beforeChangeProperties, [_this.getProperties()])) {
                return;
            }
            for (var key in propertyConfig) {
                if (_this._props.includes(key)) {
                    _this.config[key] = propertyConfig[key];
                }
            }
            var data = [];
            _this.getWidget().data.forEach(function (item) { return data.push(item); });
            _this.config.data = data;
            _this._initView(_this.config);
            _this._initHandlers();
            _this.events.fire(types_1.ItemEvent.afterChangeProperties, [_this.getProperties()]);
        });
    };
    Combo.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Combo.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    Combo.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    Combo.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Combo.prototype.disable = function () {
        this.config.disabled = true;
        this.combobox.disable();
        this.paint();
    };
    Combo.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        this.combobox.enable();
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Combo.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Combo.prototype.clear = function () {
        if (!this.config.value)
            return;
        this.config.value = "";
        this._isClear = true;
        this.combobox.clear();
    };
    Combo.prototype.getValue = function () {
        if (this.config.multiselection) {
            return this.combobox.getValue(true) || [];
        }
        else {
            return this.combobox.getValue() || "";
        }
    };
    Combo.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value.toString() === this.config.value.toString())
            return;
        this._isClear = false;
        this.combobox.setValue(value);
    };
    Combo.prototype.validate = function (silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var value = args.length ? args[0] : this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var text;
        if (Array.isArray(value)) {
            text = value.map(function (id) { return _this._getItemText(id); });
        }
        else {
            text = this._getItemText(value) || "";
        }
        var valid = true;
        if (this.config.required || args.length) {
            valid = this._existData(value);
        }
        if (typeof this.config.validation === "function") {
            valid = this.config.validation(value, text);
        }
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.config.required && this._validationStatus();
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    Combo.prototype.clearValidate = function () {
        this.setValidationStatus();
        this._validationStatus();
        this.paint();
    };
    Combo.prototype.getWidget = function () {
        return this.combobox;
    };
    Combo.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.combobox.focus();
        });
    };
    Combo.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.combobox.blur();
        });
    };
    Combo.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.combobox) {
            this.combobox.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            value: "",
            readOnly: false,
            multiselection: false,
            selectAllButton: false,
            itemHeight: 32,
            virtual: false,
            listHeight: 224,
            required: false,
            placeholder: "",
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        var comboConfig = {};
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
                if (key !== "validation") {
                    comboConfig[key] = config[key];
                }
            }
        }
        this.combobox = new ts_combobox_1.Combobox(null, comboConfig);
        this.paint();
    };
    Combo.prototype._initHandlers = function () {
        var _this = this;
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.beforeChange, function (value) {
            return _this.events.fire(types_1.ItemEvent.beforeChange, [value]);
        });
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.change, function () {
            var value = (_this.config.value = _this.getValue());
            _this.events.fire(types_1.ItemEvent.change, [value]);
            if ((0, helper_1.isVerify)(_this.config)) {
                if (_this._isClear) {
                    _this.setValidationStatus(_this.validate(true) ? "success" : "error");
                    _this._isClear = false;
                }
                else {
                    _this.validate();
                }
            }
            _this.paint();
        });
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.focus, function () {
            _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
            _this.paint();
        });
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.blur, function () {
            _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
            _this.paint();
        });
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.keydown, function (event, id) {
            if (event.code === "Enter") {
                event.preventDefault();
            }
            _this.events.fire(types_1.ItemEvent.keydown, [event, id]);
        });
    };
    Combo.prototype._validationStatus = function () {
        var _a, _b, _c;
        var activeFocus = this.combobox.popup.isVisible() ||
            ((_c = (_b = (_a = this.combobox.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
        if (!activeFocus) {
            switch (this.config.$validationStatus) {
                case types_1.ValidationStatus.success:
                    return (this.combobox.config.css =
                        (this.config.css || "") + " dhx_form-group--state_success");
                case types_1.ValidationStatus.error:
                    return (this.combobox.config.css =
                        (this.config.css || "") + " dhx_form-group--state_error");
                case types_1.ValidationStatus.pre:
                default:
                    return (this.combobox.config.css = this.config.css || "");
            }
        }
        return (this.combobox.config.css = this.config.css || "");
    };
    Combo.prototype._getRootView = function () {
        return this.combobox.getRootView();
    };
    Combo.prototype._draw = function () {
        var _a = this.config, labelWidth = _a.labelWidth, labelPosition = _a.labelPosition, name = _a.name, id = _a.id;
        return (0, dom_1.el)(".dhx_form-group.dhx_form-group--combobox", {
            "data-dhx-id": name || id,
        }, [
            (0, dom_1.el)("div.dhx_form-combobox__container", [(0, dom_1.inject)(this._getRootView())]),
            (0, dom_1.el)("div.dhx_form-combobox__wrapper", {
                style: {
                    "margin-left": "".concat(labelWidth && labelPosition === "left" ? "calc(".concat(labelWidth, " + 16px)") : ""),
                },
                class: this._validationStatus(),
            }, [(0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config))]),
        ]);
    };
    Combo.prototype._existData = function (id) {
        var _this = this;
        if (!(0, core_1.isDefined)(id))
            return false;
        if (id instanceof Array) {
            if (!id.length)
                return false;
            return id.every(function (i) {
                return _this.combobox.data.exists(i);
            });
        }
        return this.combobox.data.exists(id);
    };
    Combo.prototype._getItemText = function (id) {
        var _a;
        return (_a = this.combobox.data.getItem(id)) === null || _a === void 0 ? void 0 : _a.value;
    };
    return Combo;
}(label_1.Label));
exports.Combo = Combo;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderForm = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var ts_slider_1 = __webpack_require__(72);
var events_1 = __webpack_require__(3);
var label_1 = __webpack_require__(14);
var types_1 = __webpack_require__(5);
var helper_1 = __webpack_require__(7);
var SliderForm = /** @class */ (function (_super) {
    __extends(SliderForm, _super);
    function SliderForm(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = ["label", "labelWidth", "labelPosition", "hiddenLabel", "helpMessage"];
        _this._propsSlider = [
            "min",
            "max",
            "step",
            "mode",
            "range",
            "inverse",
            "tooltip",
            "tick",
            "tickTemplate",
            "majorTick",
        ];
        _this._props = __spreadArray(__spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true), _this._propsSlider, true);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._drawSlider(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    SliderForm.prototype.destructor = function () {
        this.events && this.events.clear();
        this.slider && this.slider.destructor();
        this.events = this._uid = this._propsSlider = this._propsItem = this._props = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    SliderForm.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this._initView(this.config);
        this._initHandlers();
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.slider.paint();
        this.paint();
    };
    SliderForm.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    SliderForm.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    SliderForm.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    SliderForm.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    SliderForm.prototype.disable = function () {
        this.config.disabled = true;
        this.slider.disable();
        this.paint();
    };
    SliderForm.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        this.slider.enable();
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    SliderForm.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    SliderForm.prototype.clear = function () {
        var _a = this.config, value = _a.value, min = _a.min;
        if (value[0] === min)
            return;
        this.slider.setValue(min);
    };
    SliderForm.prototype.getValue = function () {
        return this.slider.getValue();
    };
    SliderForm.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value.toString() === this.config.value.toString())
            return;
        this.slider.setValue(value);
    };
    SliderForm.prototype.getWidget = function () {
        return this.slider;
    };
    SliderForm.prototype.focus = function (extra) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.slider.focus(extra);
        });
    };
    SliderForm.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.slider.blur();
        });
    };
    SliderForm.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.slider) {
            this.slider.destructor();
        }
        var sliderConfig = {
            type: config.type,
            id: config.id,
            name: config.name,
            mode: "horizontal",
            min: 0,
            max: 100,
            step: 1,
            range: false,
            inverse: false,
            tooltip: true,
            disabled: false,
            hidden: false,
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                sliderConfig[key] = config[key];
            }
        }
        this.config = __assign({ type: this.config.type }, sliderConfig);
        this.slider = new ts_slider_1.Slider(null, sliderConfig);
        this.config.disabled && this.slider.disable();
        this.config.value = this.slider.getValue();
    };
    SliderForm.prototype._initHandlers = function () {
        var _this = this;
        this.slider.events.on(ts_slider_1.SliderEvents.beforeChange, function (newValue, _oldValue, extra) {
            var value = [newValue];
            if (_this.config.range) {
                var _a = _this.getValue(), v1 = _a[0], v2 = _a[1];
                value = extra ? [v1, newValue] : [newValue, v2];
            }
            return _this.events.fire(types_1.ItemEvent.beforeChange, [value]);
        });
        this.slider.events.on(ts_slider_1.SliderEvents.change, function () {
            if (!_this._uid)
                return;
            var value = (_this.config.value = _this.slider.getValue());
            _this.events.fire(types_1.ItemEvent.change, [value]);
            _this.paint();
        });
        this.slider.events.on(ts_slider_1.SliderEvents.focus, function () {
            _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
        });
        this.slider.events.on(ts_slider_1.SliderEvents.blur, function () {
            _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
        });
        this.slider.events.on(ts_slider_1.SliderEvents.keydown, function (event) {
            _this.events.fire(types_1.ItemEvent.keydown, [event]);
        });
    };
    SliderForm.prototype._drawSlider = function () {
        var _a = this.config, name = _a.name, id = _a.id;
        return (0, dom_1.el)("div.dhx_form-group", {
            "data-dhx-id": name || id,
        }, [(0, dom_1.inject)(this.slider.getRootView())]);
    };
    return SliderForm;
}(label_1.Label));
exports.SliderForm = SliderForm;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(90), exports);
__exportStar(__webpack_require__(232), exports);
__exportStar(__webpack_require__(37), exports);


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vault = void 0;
var core_1 = __webpack_require__(0);
var events_1 = __webpack_require__(3);
var view_1 = __webpack_require__(8);
var ts_data_1 = __webpack_require__(13);
var ts_layout_1 = __webpack_require__(16);
var ts_toolbar_1 = __webpack_require__(33);
var ts_navbar_1 = __webpack_require__(23);
var en_1 = __webpack_require__(46);
var types_1 = __webpack_require__(37);
var Uploader_1 = __webpack_require__(90);
var configs_1 = __webpack_require__(233);
var helper_1 = __webpack_require__(91);
var ProgressBar_1 = __webpack_require__(234);
var ReadStackPreview_1 = __webpack_require__(235);
var ts_dataview_1 = __webpack_require__(236);
var ts_list_1 = __webpack_require__(32);
var dom_1 = __webpack_require__(1);
var Vault = /** @class */ (function (_super) {
    __extends(Vault, _super);
    function Vault(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, (0, core_1.extend)({
            mode: types_1.VaultMode.list,
            modeControls: true,
            toolbar: true,
            updateFromResponse: true,
            scaleFactor: 4,
            customScroll: true,
            uploader: {},
            progressBar: {},
            disablePreview: false,
            editable: true,
        }, config)) || this;
        if (!_this.config.toolbar) {
            _this.config.uploader.autosend = true;
        }
        if (config.data) {
            _this.data = config.data;
            _this.events = config.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({}, _this.events);
        }
        _this.data.config.init = function (obj) {
            var _a, _b, _c, _d;
            obj.status = obj.status || types_1.FileStatus.uploaded;
            if (obj.file) {
                obj.size = obj.file.size;
                obj.name = obj.file.name;
                obj.value = (_a = obj.file.name) === null || _a === void 0 ? void 0 : _a.split(".").slice(0, -1).join(".");
                obj.extension = (_b = obj.file.name) === null || _b === void 0 ? void 0 : _b.split(".").pop();
                obj.preview = !_this.config.disablePreview;
            }
            else {
                obj.size = obj.size || 0;
                obj.name = obj.name || "";
                obj.value =
                    ((_c = obj.name) === null || _c === void 0 ? void 0 : _c.split(".").slice(0, -1).join(".")) || "";
                obj.extension = (_d = obj.name) === null || _d === void 0 ? void 0 : _d.split(".").pop();
                obj.preview = !_this.config.disablePreview;
            }
            if (obj.file && (0, helper_1.isImage)(obj)) {
                _this._readStack.add(obj, _this.uploader.config.autosend || _this.config.disablePreview);
            }
            return obj;
        };
        _this._readStack = new ReadStackPreview_1.ReadStackPreview(_this.data);
        _this.uploader = new Uploader_1.Uploader(_this.config.uploader, _this.data, _this.events);
        _this._progressBar = new ProgressBar_1.ProgressBar(_this.events, _this.config.progressBar);
        _this.events.on(types_1.UploaderEvents.uploadProgress, function (progress, current, total) {
            return _this._progressBar.setState(progress, { current: current, total: total });
        });
        _this._initUI(container);
        _this._initEvents();
        return _this;
    }
    Vault.prototype.destructor = function () {
        this.toolbar.destructor();
        this._readStack.stop();
        this.uploader.unlinkDropArea();
        this.uploader.abort();
        this.unmount();
    };
    Vault.prototype.getRootView = function () {
        return this._layout.getRootView();
    };
    Vault.prototype.paint = function () {
        var isEmpty = this._canDrop || !this.data.getLength();
        this._activeView = isEmpty
            ? this._emptyField
            : this.config.mode === types_1.VaultMode.grid ||
                (this.toolbar && this.toolbar.getState().mode === types_1.VaultMode.grid)
                ? this.grid
                : this.list;
        this._layout.getCell("vault").attach(this._activeView);
    };
    Vault.prototype._initUI = function (container) {
        var vaultElements = [
            {
                id: "toolbar",
                css: "dhx_vault--toolbar",
                height: "content",
            },
            {
                id: "vault",
                css: "dhx_vault--container",
            },
        ];
        var layout = (this._layout = new ts_layout_1.Layout(container, {
            css: "dhx_vault",
            rows: vaultElements,
            on: this._getDragEvents(),
        }));
        this._initToolbar();
        layout.getCell("toolbar").attach(this.toolbar);
        this._initEmpty();
        this._initList();
        this._initGrid(container);
        if (!this.config.toolbar) {
            layout.getCell("toolbar").hide();
        }
        this.paint();
    };
    Vault.prototype._initList = function () {
        var _this = this;
        var supportsTouch = "ontouchstart" in document.documentElement;
        this.list = new ts_list_1.List(null, {
            data: this.data,
            dragMode: "both",
            multiselection: supportsTouch ? true : "ctrlClick",
            template: configs_1.listTemplate,
            eventHandlers: (0, configs_1.getContainersEvents)(this.data),
            keyNavigation: true,
            editable: this.config.editable,
            itemHeight: 49,
            hotkeys: {
                delete: function () {
                    var _a;
                    var selected = (_a = _this.list.selection.getItem()) === null || _a === void 0 ? void 0 : _a.map(function (item) { return item.id; });
                    if (selected.length)
                        _this.data.remove(selected);
                },
            },
        });
        this.list.events.on("afterEditEnd", function (value, id) {
            var item = _this.list.data.getItem(id);
            _this.list.data.update(id, { name: "".concat(value, ".").concat(item.extension) });
        });
    };
    Vault.prototype._initGrid = function (container) {
        var _this = this;
        var supportsTouch = "ontouchstart" in document.documentElement;
        this.grid = new ts_dataview_1.DataView(null, {
            gap: 8,
            itemsInRow: 4,
            dragMode: "both",
            multiselection: supportsTouch ? true : "ctrlClick",
            data: this.data,
            template: configs_1.gridTemplate,
            eventHandlers: (0, configs_1.getContainersEvents)(this.data),
            keyNavigation: true,
            editable: this.config.editable,
            hotkeys: {
                delete: function () {
                    var _a;
                    var selected = (_a = _this.list.selection.getItem()) === null || _a === void 0 ? void 0 : _a.map(function (item) { return item.id; });
                    if (selected.length)
                        _this.data.remove(selected);
                },
            },
        });
        this.grid.selection = this.list.selection;
        if (container) {
            if (typeof container === "string") {
                container = document.getElementById(container);
            }
            this.grid.config.itemsInRow = Math.floor(container.offsetWidth / 100);
        }
    };
    Vault.prototype._initToolbar = function () {
        this.toolbar = new ts_toolbar_1.Toolbar(null, { css: "vault-toolbar" });
        this.toolbar.data.parse([
            {
                id: "add",
                tooltip: en_1.default.add,
                type: "navItem",
                css: "dhx_toolbar-button--circle dhx_toolbar-button--icon",
                icon: "dxi dxi-plus",
            },
            {
                id: "mode-separator",
                type: "separator",
            },
            {
                id: "list",
                tooltip: en_1.default.list,
                type: "navItem",
                css: "dhx_toolbar-button--circle dhx_toolbar-button--icon",
                icon: "dxi dxi-view-sequential",
                active: this.config.mode === types_1.VaultMode.list,
                group: "mode",
            },
            {
                id: "grid",
                tooltip: en_1.default.grid,
                type: "navItem",
                css: "dhx_toolbar-button--circle dhx_toolbar-button--icon",
                icon: "dxi dxi-view-grid",
                active: this.config.mode === types_1.VaultMode.grid,
                group: "mode",
            },
            {
                id: "upload-separator",
                type: "separator",
            },
            {
                id: "upload",
                tooltip: en_1.default.upload,
                type: "navItem",
                css: "dhx_toolbar-button--circle dhx_toolbar-button--icon",
                icon: "dxi dxi-vault",
            },
            {
                id: "spacer",
                type: "spacer",
            },
            {
                id: "remove-all",
                tooltip: en_1.default.clearAll,
                type: "navItem",
                css: "dhx_toolbar-button--circle dhx_toolbar-button--icon",
                icon: "dxi dxi-delete-forever",
            },
        ]);
        if (!this.config.modeControls) {
            this.toolbar.hide(["mode-separator", "list", "grid", "upload-separator"]);
        }
        this._hideAdditionalButtons();
    };
    Vault.prototype._initEmpty = function () {
        var _this = this;
        return (this._emptyField = (0, view_1.toViewLike)((0, dom_1.create)({
            render: function () {
                return (0, dom_1.el)(".dhx-dropable-area.drop-files-here", [
                    (0, dom_1.el)(".dhx-big-icon-block", [(0, dom_1.el)(".dxi.dxi-vault")]),
                    !_this._canDrop && (0, dom_1.el)(".drop-area-bold-text", en_1.default.dragAndDrop),
                    !_this._canDrop && (0, dom_1.el)(".drop-area-bold-text", en_1.default.filesOrFoldersHere),
                    !_this._canDrop && (0, dom_1.el)(".drop-area-light-text", en_1.default.or),
                    !_this._canDrop &&
                        (0, dom_1.el)("button.dhx_button.dhx_button--view_flat.dhx_btn--small.dhx_button--color_primary.dhx_button--size_small", {
                            onclick: function () { return _this.uploader.selectFile(); },
                        }, en_1.default.browse),
                ]);
            },
        })));
    };
    Vault.prototype._changeUI = function (mode) {
        this.config.mode = mode;
        this._activeView = mode === types_1.VaultMode.grid ? this.grid : this.list;
        if (!this.data.getLength()) {
            return;
        }
        this.paint();
    };
    Vault.prototype._initEvents = function () {
        var _this = this;
        this.data.events.on(ts_data_1.DataEvents.change, function () {
            if (!_this.data.getLength()) {
                _this._hideAdditionalButtons();
            }
            else {
                _this._showAdditionalButtons();
            }
            if (_this.config.downloadURL) {
                _this.data.forEach(function (item) {
                    if (!item.downloadURL) {
                        item.downloadURL = _this.config.downloadURL;
                    }
                });
            }
            _this.paint();
        });
        this.events.on(types_1.UploaderEvents.uploadBegin, function () {
            if (_this.config.toolbar) {
                _this._layout.getCell("toolbar").attach(_this._progressBar);
            }
        });
        this.events.on(types_1.UploaderEvents.uploadComplete, function () {
            if (_this.config.toolbar) {
                _this._layout.getCell("toolbar").attach(_this.toolbar);
            }
        });
        this.toolbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            switch (id) {
                case "add":
                    _this.uploader.selectFile();
                    break;
                case "remove-all":
                    if (_this.data.getLength()) {
                        var items = _this._activeView.selection.getItem();
                        if (items && items.length > 0) {
                            items.forEach(function (item) {
                                (0, helper_1.removeItem)(_this.data, item.id);
                            });
                        }
                        else {
                            _this.data.removeAll();
                        }
                    }
                    break;
                case "list":
                case "grid":
                    _this._changeUI(id);
                    break;
                case "upload":
                    _this.uploader.send();
                    break;
            }
        });
        this.events.on(types_1.ProgressBarEvents.cancel, function () {
            _this.uploader.abort();
            _this.paint();
        });
    };
    Vault.prototype._getDragEvents = function () {
        var _this = this;
        var rect = {
            left: null,
            top: null,
            width: null,
            height: null,
        };
        return {
            dragleave: function (e) {
                if (!_this._canDrop) {
                    return;
                }
                if (e.pageX > rect.left + rect.width - 1 ||
                    e.pageX < rect.left ||
                    e.pageY > rect.top + rect.height - 1 ||
                    e.pageY < rect.top) {
                    _this._canDrop = false;
                    if (_this.config.toolbar) {
                        _this._layout.getCell("toolbar").show();
                    }
                    _this._layout.config.css = "dhx_vault";
                    _this.paint();
                }
            },
            dragenter: function (e) {
                e.preventDefault();
                if (_this.uploader.isActive || _this._canDrop) {
                    return;
                }
                var types = e.dataTransfer.types;
                for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var type = types_2[_i];
                    if (type !== "Files" && type !== "application/x-moz-file") {
                        _this._canDrop = false;
                        return;
                    }
                }
                _this._canDrop = true;
                var clientRect = _this.getRootView().node.el.getBoundingClientRect();
                rect.left = clientRect.left + window.pageXOffset;
                rect.top = clientRect.top + window.pageYOffset;
                rect.width = clientRect.width;
                rect.height = clientRect.height;
                _this._canDrop = true;
                if (_this.config.toolbar) {
                    _this._layout.getCell("toolbar").hide();
                }
                _this._layout.config.css = "dhx_vault dhx-dragin ".concat(_this._canDrop ? " drop-here" : "");
                _this.paint();
            },
            dragover: function (e) {
                e.preventDefault();
            },
            drop: function (e) {
                e.preventDefault();
                if (!_this._canDrop) {
                    return;
                }
                var dataTransfer = e.dataTransfer;
                _this.uploader.parseFiles(dataTransfer);
                _this._canDrop = false;
                if (_this.config.toolbar) {
                    _this._layout.getCell("toolbar").show();
                }
                _this._layout.config.css = "dhx_vault";
                _this.paint();
            },
        };
    };
    Vault.prototype._hideAdditionalButtons = function () {
        var _this = this;
        var modeControls = ["mode-separator", "list", "grid"];
        var uploadControls = ["upload", this.config.modeControls ? "upload-separator" : ""];
        var elementsList = __spreadArray(__spreadArray(__spreadArray([], modeControls, true), uploadControls, true), ["remove-all"], false);
        elementsList.forEach(function (item) {
            if (_this.toolbar.data.getItem(item) && !_this.toolbar.data.getItem(item).hidden) {
                _this.toolbar.hide(item);
            }
        });
    };
    Vault.prototype._showAdditionalButtons = function () {
        var _this = this;
        var modeControls = this.config.modeControls ? ["mode-separator", "list", "grid"] : [];
        var uploadControls = !this.uploader.config.autosend
            ? ["upload", this.config.modeControls ? "upload-separator" : ""]
            : [];
        var elementsList = __spreadArray(__spreadArray(__spreadArray([], modeControls, true), uploadControls, true), ["remove-all"], false);
        this.toolbar.data.update("remove-all", {
            tooltip: this._activeView.selection && this._activeView.selection.getItem()
                ? en_1.default.clearAllSelected
                : en_1.default.clearAll,
        });
        elementsList.forEach(function (item) {
            if (_this.toolbar.data.getItem(item) && _this.toolbar.data.getItem(item).hidden) {
                _this.toolbar.show(item);
            }
        });
    };
    return Vault;
}(view_1.View));
exports.Vault = Vault;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getContainersEvents = exports.listTemplate = exports.gridTemplate = void 0;
var html_1 = __webpack_require__(4);
var ts_message_1 = __webpack_require__(17);
var helper_1 = __webpack_require__(91);
var types_1 = __webpack_require__(37);
var en_1 = __webpack_require__(46);
var gridTemplate = function (item) {
    var inProgress = item.status === types_1.FileStatus.inprogress;
    var isError = item.status === types_1.FileStatus.failed;
    var notUploaded = item.status !== types_1.FileStatus.uploaded;
    var className = "dhx_dataview-item--file__";
    switch (item.status) {
        case types_1.FileStatus.inprogress:
            className += "progress";
            break;
        case types_1.FileStatus.queue:
            className += "queue";
            break;
        case types_1.FileStatus.failed:
            className += "failed";
            break;
        default:
            className = "";
            break;
    }
    var link = "";
    var downloadName = "";
    if (item.link) {
        link = (item.downloadURL || "") + item.link;
        downloadName = link
            .split("/")
            .pop()
            .split("?")[0];
    }
    var imagePreview = "";
    if (/image/.exec((0, helper_1.getFileClassName)(item)) && item.preview) {
        if (item.image && item.image.src) {
            imagePreview = "style=\"background:url('".concat(item.image.src, "') center center no-repeat;background-size:cover\"");
        }
        else if (item.link) {
            imagePreview = "style=\"background:url('".concat(link, "') center center no-repeat;background-size:cover\"");
        }
    }
    return "<div class=\"dhx_dataview-item--file ".concat(className, "\">\n\t\t<div class=\"dhx_dataview-item--file-type ").concat((0, helper_1.getFileClassName)(item), "\" ").concat(imagePreview, "></div>\n\t\t").concat(inProgress
        ? "<div class=\"dhx_dataview-item--progress-block\">\n\t\t\t\t\t<div class=\"dhx_dataview-item--progress-value\">".concat((item.progress * 100).toFixed(1) + "%", "</div>\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dhx_vault-item--progress-circle\" viewBox=\"0 0 60 60\">\n\t\t\t\t\t\t<circle cx=\"30\" cy=\"30\" r=\"28\" stroke-width=\"4\" class=\"dhx_vault-item--progress-bar-background\"></circle>\n\t\t\t\t\t\t<circle cx=\"30\" cy=\"30\" r=\"28\" stroke-width=\"4\" stroke-dasharray=\"175.9 175.9\" stroke-dashoffset=\"").concat((1 -
            item.progress) *
            175.9, "\" class=\"active-circle dhx_vault-item--progress-bar-active\"></circle>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>")
        : "<div class=\"dhx_dataview-item--default-block\">\n\t\t\t\t\t".concat(isError
            ? "<div class=\"dhx_dataview-item--error-mark dxi dxi-alert-circle\"></div>"
            : notUploaded
                ? "<div class=\"dhx_dataview-item--error-mark dxi dxi-vault\"></div>"
                : "<div class=\"dhx_dataview-item--success-mark dxi dxi-checkbox-marked-circle\"></div>", "\n\t\t\t\t</div>\n\t\t\t\t<div class=\"dhx_dataview-item--hover-block\">\n\t\t\t\t\t<div class=\"dhx_dataview-item--control-block ").concat(isError || notUploaded || !item.link
            ? "dhx_dataview-item--control-block__withoutLink"
            : "", "\">\n\t\t\t\t\t\t").concat(!isError && !notUploaded && item.link
            ? "<a href=\"".concat(link, "\" class=\"dhx_dataview-item--download-btn dxi dxi-download\" download=\"").concat(downloadName, "\"></a>\n\t\t\t\t\t\t\t\t\t<div class=\"dhx_dataview-item--remove-btn dxi dxi-delete-forever\"></div>")
            : "<div class=\"dhx_dataview-item--remove-btn dxi dxi-delete-forever\"></div>", "\n\t\t\t\t\t</div>\n\t\t\t\t\t").concat(isError
            ? "<div class=\"dhx_dataview-item--error-text\">".concat(en_1.default.error, "</div>")
            : "<div class=\"dhx_dataview-item--file-size\">".concat((0, helper_1.getBasis)(item.size), "</div>"), "\n\t\t\t\t</div>"), "\n\t\t</div>\n\t<div class=\"dhx_dataview-item--file-name\">").concat((0, helper_1.truncateWord)(item.name), "</div>");
};
exports.gridTemplate = gridTemplate;
var listTemplate = function (item) {
    var isError = item.status === types_1.FileStatus.failed;
    var inProgress = item.status === types_1.FileStatus.inprogress;
    var notUploaded = item.status !== types_1.FileStatus.uploaded && !isError;
    var link = "";
    var downloadName = "";
    if (item.link) {
        link = (item.downloadURL || "") + item.link;
        downloadName = link
            .split("/")
            .pop()
            .split("?")[0];
    }
    return "<div class=\"dhx_list-item--icon ".concat(notUploaded ? "dhx_list-item--queue" : "", "\">\n\t\t\t<div class=\"dhx_list-item--file-type ").concat((0, helper_1.getFileClassName)(item), "\"></div>\n\t\t</div>\n\t\t<div class=\"dhx_list-item--content\">\n\t\t").concat(inProgress
        ? "<div class=\"dhx_list-item--name\">".concat(item.value, ".").concat(item.extension, "\n\t\t\t\t\t<p class=\"dhx_item--progress-value\">").concat((item.progress * 100).toFixed(1) + "%", "</p>\n\t\t\t\t</div>")
        : "<div class=\"dhx_list-item--name\">".concat(item.value, ".").concat(item.extension, "</div>\n\t\t\t\t\t").concat(isError ? "<div class=\"dhx_list-item--error-info\">".concat(en_1.default.error, "</div>") : "", "\n\t\t\t\t\t<div class=\"dhx_list-item--size ").concat(isError ? "error" : "", "\">").concat((0, helper_1.getBasis)(item.size), "</div>\t\n\t\t\t\t</div>"), "\n\t\t</div>\n\t\t").concat(inProgress
        ? "<div class=\"dhx_item--download-progress\" style=\"width:".concat((item.progress * 100).toFixed(1), "%\"></div>")
        : "<div class=\"dhx_item--info\">\n\t\t\t\t\t".concat(isError
            ? "<div class=\"dhx_item--error-mark dxi dxi-alert-circle\"></div><div class=\"dhx_item--btn-remove dxi dxi-delete-forever\"></div>"
            : "".concat(notUploaded
                ? "<div class=\"dhx_item--error-mark dxi dxi-vault\"></div>"
                : "<div class=\"dhx_item--success-mark dxi dxi-checkbox-marked-circle\"></div>", "\n\t\t\t\t\t\t\t<div class=\"dhx_item--hover-block\">\n\t\t\t\t\t\t\t\t").concat(!isError && !notUploaded && item.link
                ? "<a href=\"".concat(link, "\" class=\"dhx_item--download-btn dxi dxi-download\" download=\"").concat(downloadName, "\"></a>")
                : "", "\n\t\t\t\t\t\t\t\t<div class=\"dhx_item--btn-remove dxi dxi-delete-forever\"></div>\n\t\t\t\t\t\t\t</div>"), "\n\t\t\t\t</div>"));
};
exports.listTemplate = listTemplate;
var getContainersEvents = function (data) {
    var mouseOverFileNameHandler = function (event) {
        var id = (0, html_1.locate)(event);
        if (!id) {
            return;
        }
        var item = data.getItem(id);
        (0, ts_message_1.tooltip)(item.name, {
            node: event.target,
            position: ts_message_1.Position.bottom,
        });
    };
    return {
        onclick: {
            "dxi-delete-forever": function (event) {
                var id = (0, html_1.locate)(event);
                if (!id) {
                    return;
                }
                (0, helper_1.removeItem)(data, id);
            },
        },
        onmouseover: {
            "dxi-download": function (event) {
                (0, ts_message_1.tooltip)(en_1.default.download, {
                    node: event.target,
                    position: ts_message_1.Position.bottom,
                });
            },
            "dxi-delete-forever": function (event) {
                (0, ts_message_1.tooltip)(en_1.default.clear, {
                    node: event.target,
                    position: ts_message_1.Position.bottom,
                });
            },
            "dhx_list-item--name": mouseOverFileNameHandler,
            "dhx_dataview-item--file-name": mouseOverFileNameHandler,
        },
    };
};
exports.getContainersEvents = getContainersEvents;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBar = void 0;
var dom_1 = __webpack_require__(1);
var view_1 = __webpack_require__(8);
var en_1 = __webpack_require__(46);
var types_1 = __webpack_require__(37);
var ProgressBar = /** @class */ (function (_super) {
    __extends(ProgressBar, _super);
    function ProgressBar(events, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = events;
        _this._progress = 0;
        var render = function () { return _this._draw(); };
        _this.mount(null, (0, dom_1.create)({
            render: render,
        }));
        _this._abortUpload = function () {
            _this.events.fire(types_1.ProgressBarEvents.cancel);
        };
        return _this;
    }
    ProgressBar.prototype.setState = function (progress, extra) {
        this._progress = progress;
        if (this.config.template) {
            this._progressText = this.config.template(progress, extra);
        }
        else {
            this._progressText = this._progress.toFixed(1) + "%";
        }
        this.paint();
    };
    ProgressBar.prototype._draw = function () {
        return (0, dom_1.el)(".progress-bar", {
            _key: this._uid,
        }, [
            (0, dom_1.el)(".progress-indicator", {
                style: {
                    width: this._progress + "%",
                },
            }),
            (0, dom_1.el)(".progress-text", {
                ".innerHTML": this._progressText,
            }),
            (0, dom_1.el)("button", {
                class: "dhx_button dhx_button--color_primary dhx_button--size_small dhx_button--view_flat action-abort-all",
                onclick: this._abortUpload,
            }, en_1.default.cancel),
        ]);
    };
    return ProgressBar;
}(view_1.View));
exports.ProgressBar = ProgressBar;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadStackPreview = void 0;
var ReadStackPreview = /** @class */ (function () {
    function ReadStackPreview(data) {
        this._readerStack = [];
        this._isActive = false;
        this._data = data;
    }
    ReadStackPreview.prototype.add = function (fileWrapper, wait) {
        if (wait === void 0) { wait = false; }
        this._readerStack.push(fileWrapper);
        if (!wait) {
            this.read();
        }
    };
    ReadStackPreview.prototype.read = function () {
        var _this = this;
        if (!this._readerStack.length || this._isActive) {
            return;
        }
        var fileWrapper = this._readerStack.shift();
        this._isActive = true;
        var reader = new FileReader();
        reader.readAsDataURL(fileWrapper.file);
        reader.onload = function (e) {
            var image = new Image();
            image.src = e.target.result;
            image.onload = function () {
                if (_this._data.exists(fileWrapper.id)) {
                    _this._data.update(fileWrapper.id, { image: image });
                }
                _this._isActive = false;
                _this.read();
            };
        };
        reader.onerror = function () {
            _this._isActive = false;
            _this.read();
        };
    };
    ReadStackPreview.prototype.stop = function () {
        this._readerStack = [];
    };
    return ReadStackPreview;
}());
exports.ReadStackPreview = ReadStackPreview;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(92), exports);
__exportStar(__webpack_require__(239), exports);
__exportStar(__webpack_require__(93), exports);


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getEditor = void 0;
var InputEditor_1 = __webpack_require__(238);
function getEditor(item, dataView) {
    return new InputEditor_1.InputEditor(item, dataView);
}
exports.getEditor = getEditor;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InputEditor = void 0;
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(93);
var InputEditor = /** @class */ (function () {
    function InputEditor(item, dataView) {
        var _this = this;
        this._dataView = dataView;
        this._config = dataView.config;
        this._item = item;
        this._dataView.events.on(types_1.DataViewEvents.focusChange, function (index, id) {
            if (_this._mode && id !== _this._item.id) {
                _this.endEdit();
            }
        });
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function () {
        if (this._input) {
            var value = this._input.value;
            if (this._dataView.events.fire(types_1.DataViewEvents.beforeEditEnd, [value, this._item.id])) {
                this._input.removeEventListener("blur", this._handlers.onBlur);
                this._input.removeEventListener("change", this._handlers.onChange);
                this._input.removeEventListener("keydown", this._handlers.onKeyDown);
                this._handlers = {};
                this._mode = false;
                this._dataView.events.fire(types_1.DataViewEvents.afterEditEnd, [value, this._item.id]);
            }
            else {
                this._input.focus();
            }
        }
    };
    InputEditor.prototype.toHTML = function (isLastItemInRow) {
        this._mode = true;
        var _a = this._config, itemsInRow = _a.itemsInRow, gap = _a.gap;
        var gapWithPx = function (gapSize) { return parseFloat(gapSize); };
        return (0, dom_1.el)(".dhx_input__wrapper", {
            style: {
                width: "calc(".concat(100 / itemsInRow, "% - ").concat(gapWithPx(gap), " * ").concat((itemsInRow - 1) /
                    itemsInRow, "px)"),
                maxWidth: "calc(".concat(100 / itemsInRow, "% - ").concat(gapWithPx(gap), " * ").concat((itemsInRow - 1) /
                    itemsInRow, "px)"),
                marginRight: isLastItemInRow ? "" : gap,
            },
            role: "presentation",
        }, [
            (0, dom_1.el)("div.dhx_input__container", {
                style: {
                    height: "100%",
                },
                role: "presentation",
            }, [
                (0, dom_1.el)("input.dhx_input", {
                    class: (this._item.css ? " " + this._item.css : "") +
                        (isLastItemInRow ? " dhx_dataview-item--last-item-in-row" : ""),
                    style: {
                        padding: "8px, 12px",
                        width: "100%",
                        height: "100%",
                    },
                    _hooks: {
                        didInsert: this._handlers.didInsert,
                    },
                    _key: this._item.id,
                    "data-dhx-id": this._item.id,
                }),
            ]),
        ]);
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            onKeyDown: function (e) {
                if (e.key === "Enter" && _this._item.value === _this._input.value)
                    _this.endEdit();
                if (e.key === "Escape") {
                    _this._input.value = _this._item.value;
                    _this.endEdit();
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.value = _this._item.value;
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
                input.addEventListener("keydown", _this._handlers.onKeyDown);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProDataView = void 0;
var ScrollView_1 = __webpack_require__(35);
var DataView_1 = __webpack_require__(92);
var dom_1 = __webpack_require__(1);
var ProDataView = /** @class */ (function (_super) {
    __extends(ProDataView, _super);
    function ProDataView(node, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, node, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        _this.paint();
        return _this;
    }
    ProDataView.prototype.destructor = function () {
        _super.prototype.destructor.call(this);
        this.scrollView = null;
    };
    ProDataView.prototype.scrollTo = function (id) {
        var _a, _b;
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var dataViewEl = ((_a = this.scrollView) === null || _a === void 0 ? void 0 : _a.config.enable)
            ? (_b = this.getRootNode()) === null || _b === void 0 ? void 0 : _b.querySelector(".scroll-view")
            : this.getRootNode();
        this._scrollTo(id, dataViewEl);
    };
    ProDataView.prototype._renderList = function () {
        var _this = this;
        var data = this.data.getRawData(0, -1);
        var _a = this.config, itemsInRow = _a.itemsInRow, css = _a.css, gap = _a.gap;
        var currentCounter = 0;
        var rows = data.reduce(function (items, obj, index) {
            if (currentCounter === 0) {
                items.push([]);
            }
            items[items.length - 1].push(_this._renderItem(obj, index));
            currentCounter = (currentCounter + 1) % itemsInRow;
            return items;
        }, []);
        var kids = rows.map(function (row, index) {
            return (0, dom_1.el)(".dhx_dataview-row", {
                style: { margin: gap },
                "aria-label": "Row ".concat(index + 1),
            }, row);
        });
        var scrollViewEnable = this.scrollView && this.scrollView.config.enable;
        var currentClass = (css ? css : "") +
            " dhx_widget dhx_dataview" +
            (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : "") +
            (scrollViewEnable ? " dhx_dataview--scroll-view" : "");
        return (0, dom_1.el)("", __assign(__assign(__assign({}, this._handlers), { "data-dhx-widget-id": this._uid, class: currentClass, style: {
                height: this.config.height,
            } }), this.getDataViewAriaAttrs(this.config, this.data.getLength(), rows.length, itemsInRow)), scrollViewEnable ? [this.scrollView.render(kids)] : kids);
    };
    return ProDataView;
}(DataView_1.DataView));
exports.ProDataView = ProDataView;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    simpleVaultText: "Drag & drop files or folders here or",
    simpleVaultLabel: "browse files",
};


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimePicker = void 0;
var ts_timepicker_1 = __webpack_require__(53);
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var label_1 = __webpack_require__(14);
var ts_popup_1 = __webpack_require__(10);
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(5);
var helper_1 = __webpack_require__(7);
var KeyManager_1 = __webpack_require__(21);
var TimePicker = /** @class */ (function (_super) {
    __extends(TimePicker, _super);
    function TimePicker(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._popupIsFocus = false;
        _this._propsItem = [
            "required",
            "validation",
            "icon",
            "placeholder",
            "editable",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsTimepicker = ["timeFormat", "controls", "valueFormat"];
        _this._props = __spreadArray(__spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true), _this._propsTimepicker, true);
        _this._keyManager = new KeyManager_1.KeyManager(function () {
            var _a, _b, _c;
            var activeEl = document.activeElement;
            var element = (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el;
            return element === activeEl || _this._popup.isVisible();
        });
        _this._initView(config);
        _this._initHandlers();
        _this._initHotkeys();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    TimePicker.prototype.destructor = function () {
        this.events && this.events.clear();
        this.timepicker && this.timepicker.destructor();
        this._keyManager && this._keyManager.destructor();
        this._popup && this._popup.destructor();
        this.events = this._uid = this._propsItem = this._propsTimepicker = this._props = this._keyManager = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    TimePicker.prototype.setProperties = function (propertyConfig) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            if (!propertyConfig ||
                (0, core_1.isEmptyObj)(propertyConfig) ||
                !_this.events.fire(types_1.ItemEvent.beforeChangeProperties, [_this.getProperties()]))
                return;
            for (var key in propertyConfig) {
                if (_this._props.includes(key)) {
                    _this.config[key] = propertyConfig[key];
                }
            }
            _this._initView(_this.config);
            _this._initHandlers();
            _this.events.fire(types_1.ItemEvent.afterChangeProperties, [_this.getProperties()]);
            _this.paint();
        });
    };
    TimePicker.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    TimePicker.prototype.show = function () {
        if (!this.config.hidden ||
            !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue(this.config.valueFormat === "timeObject")])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue(this.config.valueFormat === "timeObject")]);
    };
    TimePicker.prototype.hide = function (init) {
        if ((this.config.hidden && !init) ||
            !this.events.fire(types_1.ItemEvent.beforeHide, [
                this.getValue(this.config.valueFormat === "timeObject"),
                init,
            ])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [
            this.getValue(this.config.valueFormat === "timeObject"),
            init,
        ]);
    };
    TimePicker.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    TimePicker.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    TimePicker.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    TimePicker.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    TimePicker.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var value = args.length ? args[0] : this.getValue(this._isTimeObject());
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required || args.length) {
            if (typeof value === "string") {
                valid = (0, helper_1.isTimeFormat)(value, this.config.timeFormat);
            }
            else {
                valid = (0, helper_1.isTimeFormat)("".concat(value.hour, ":").concat(value.minute).concat((0, core_1.isDefined)(value.AM) ? (value.AM ? "AM" : "PM") : ""), this.config.timeFormat);
            }
        }
        if (typeof this.config.validation === "function") {
            valid = this.config.validation(value);
        }
        if (!silent) {
            this.config.$validationStatus = valid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    TimePicker.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    TimePicker.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.timepicker.setValue(value);
        if (this.config.controls) {
            var value_1 = this.getValue(this._isTimeObject());
            if (!this.events.fire(types_1.ItemEvent.beforeChange, [value_1])) {
                return;
            }
            this.config.value = this.timepicker.getValue();
            this.events.fire(types_1.ItemEvent.change, [value_1]);
        }
        (0, helper_1.isVerify)(this.config) && this.validate();
        this.paint();
    };
    TimePicker.prototype.getValue = function (asOBject) {
        return asOBject ? this.timepicker.getValue(asOBject) : this.config.value || "";
    };
    TimePicker.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    TimePicker.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this._popup.hide();
            _this.getRootView().refs.input.el.blur();
        });
    };
    TimePicker.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this._clear();
    };
    TimePicker.prototype.getWidget = function () {
        return this.timepicker;
    };
    TimePicker.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.timepicker) {
            this.timepicker.destructor();
        }
        if (this._popup) {
            this._popup.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            value: "",
            disabled: false,
            editable: false,
            hidden: false,
            timeFormat: 24,
            controls: false,
            valueFormat: "string",
            required: false,
            icon: "",
            placeholder: "",
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._popup = new ts_popup_1.Popup();
        this.timepicker = new ts_timepicker_1.Timepicker(null, (0, helper_1.widgetConfig)(config));
        this._popup.attach(this.timepicker);
        if (this.config.value) {
            this.config.value = this.timepicker.getValue();
        }
    };
    TimePicker.prototype._initHandlers = function () {
        var _this = this;
        if (this.config.controls) {
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterClose, function () {
                _this._popup.hide();
            });
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterApply, function () {
                _this._afterApply(true);
            });
            this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
                if (_this.config.value && _this.config.value !== _this.timepicker.getValue()) {
                    _this.timepicker.setValue(_this.config.value);
                }
                else if (_this.config.value === "" || _this.config.value === undefined) {
                    _this._clear(true);
                }
            });
        }
        else {
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.beforeChange, function (value) {
                return _this.events.fire(types_1.ItemEvent.beforeChange, [value]);
            });
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.change, function (value) {
                var compareValue = _this.config.timeFormat === 12 ? "12:00AM" : "00:00";
                var pickerStringValue = _this.timepicker.getValue();
                if ((_this.config.value === "" && compareValue === pickerStringValue) ||
                    _this.config.value === pickerStringValue) {
                    return;
                }
                _this.config.value = _this.timepicker.getValue();
                _this.events.fire(types_1.ItemEvent.change, [value]);
                (0, helper_1.isVerify)(_this.config) && _this.validate();
                _this.paint();
            });
        }
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (document.activeElement !== _this.getRootView().refs.input.el) {
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
            }
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.input, function (value) {
            var timeLength = _this.config.timeFormat === 12 ? 7 : 5;
            if (value.length >= timeLength && (0, helper_1.isTimeFormat)(value, _this.config.timeFormat)) {
                _this.timepicker.setValue(value);
            }
            else if (value === "" && !_this.config.controls) {
                _this._clear();
            }
        });
        this.events.on(types_1.ItemEvent.afterChangeProperties, function () {
            _this.config.value = _this.timepicker.getValue();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.blur, function () {
            _this._popupIsFocus = false;
            _this.paint();
        });
    };
    TimePicker.prototype._getHandlers = function () {
        var _this = this;
        return {
            onfocus: function () {
                if (_this._popup.isVisible()) {
                    return;
                }
                var node = _this.getRootView().refs.input.el;
                _this._popup.show(node, {
                    theme: node,
                });
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
                _this.paint();
            },
            onblur: function () {
                if (!_this._popup.isVisible()) {
                    _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
                }
                _this.paint();
            },
            oninput: function (e) {
                var value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onkeydown: function (event) {
                var _a, _b, _c;
                var activeEl = document.activeElement;
                var element = (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el;
                if (element === activeEl || _this._popup.isVisible()) {
                    _this.events.fire(types_1.ItemEvent.keydown, [event]);
                }
            },
            onmousedown: function () {
                var popup = _this._popup.getContainer();
                var activeEl = document.activeElement;
                if (popup !== activeEl)
                    _this._popupIsFocus = false;
            },
        };
    };
    TimePicker.prototype._initHotkeys = function () {
        var _this = this;
        var handlers = {
            "shift+tab": function () {
                _this._applyTab();
            },
            tab: function () {
                _this._applyTab();
            },
            escape: function () {
                if (_this._popup.isVisible()) {
                    _this.getRootView().refs.input.el.focus();
                }
                _this._popup.hide();
            },
            enter: function (event) {
                event.preventDefault();
                var node = _this.getRootView().refs.input.el;
                if (!_this._popup.isVisible()) {
                    _this._popup.show(node, {
                        theme: node,
                    });
                }
                if (_this._popupIsFocus && _this.config.controls) {
                    _this._afterApply(true);
                }
                else {
                    _this._popup.hide();
                    _this.paint();
                }
            },
            arrowRight: function (event) {
                var focusElement = _this._popup.getContainer();
                _this._popupIsFocus = focusElement.contains(document.activeElement);
                if (_this._popup.isVisible() && !_this._popupIsFocus) {
                    event.preventDefault();
                    focusElement.focus();
                    _this._popupIsFocus = true;
                }
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    TimePicker.prototype._draw = function () {
        var _a, _b, _c;
        var _d = this.config, value = _d.value, required = _d.required, disabled = _d.disabled, placeholder = _d.placeholder, name = _d.name, id = _d.id, editable = _d.editable, label = _d.label, helpMessage = _d.helpMessage;
        var activeFocus = this._popup.isVisible() || ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
        return (0, dom_1.el)("div.dhx_form-group", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), activeFocus),
        }, [
            this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", [
                (0, dom_1.el)("div.dhx_input__container", {}, [
                    (0, dom_1.el)(".dhx_input__icon.dxi.dxi-clock-outline"),
                    (0, dom_1.el)("input.dhx_input.dhx_input--icon-padding", {
                        tabindex: 0,
                        "data-dhx-id": name || id,
                        _key: this._uid,
                        _ref: "input",
                        value: value,
                        type: "text",
                        required: required,
                        disabled: disabled,
                        class: activeFocus && "dhx_input--focus",
                        placeholder: placeholder || "",
                        name: name || "",
                        id: id || this._uid,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        oninput: this._handlers.oninput,
                        onkeydown: this._handlers.onkeydown,
                        onmousedown: this._handlers.onmousedown,
                        autocomplete: "off",
                        readOnly: !editable,
                        "aria-label": label || "".concat(editable ? "type or" : "", " select date"),
                        "aria-describedby": helpMessage ? "dhx_label__help_".concat(id || this._uid) : null,
                    }),
                ]),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", {}, (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    TimePicker.prototype._clear = function (silent) {
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeChange, [""])) {
            return;
        }
        this.config.value = "";
        this.timepicker.clear();
        if (!silent) {
            this.events.fire(types_1.ItemEvent.change, [""]);
            (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
        }
        this.paint();
    };
    TimePicker.prototype._afterApply = function (isApply) {
        if (isApply === void 0) { isApply = false; }
        var inputValue = this.getRootView().refs.input.el.value;
        if (inputValue === "" && !isApply) {
            this.clear();
        }
        else {
            var value = this.timepicker.getValue(this._isTimeObject());
            if (!this.events.fire(types_1.ItemEvent.beforeChange, [value])) {
                return;
            }
            this.config.value = this.timepicker.getValue();
            this.events.fire(types_1.ItemEvent.change, [value]);
            (0, helper_1.isVerify)(this.config) && this.validate();
        }
        this._popup.hide();
        this.paint();
    };
    TimePicker.prototype._applyTab = function () {
        var _a, _b, _c;
        var activeEl = document.activeElement;
        var popup = (_c = (_b = (_a = this._popup.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.el;
        if (activeEl !== popup && !this._popupIsFocus) {
            this._popup.hide();
        }
    };
    TimePicker.prototype._isTimeObject = function () {
        var _a;
        return ((_a = this.config.valueFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "timeobject";
    };
    return TimePicker;
}(label_1.Label));
exports.TimePicker = TimePicker;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPicker = void 0;
var ts_colorpicker_1 = __webpack_require__(63);
var events_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var label_1 = __webpack_require__(14);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(5);
var helper_1 = __webpack_require__(7);
var KeyManager_1 = __webpack_require__(21);
var ColorPicker = /** @class */ (function (_super) {
    __extends(ColorPicker, _super);
    function ColorPicker(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._popupIsFocus = false;
        _this._propsItem = [
            "required",
            "validation",
            "icon",
            "placeholder",
            "editable",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsColorpicker = ["mode", "grayShades", "customColors", "palette"];
        _this._props = __spreadArray(__spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true), _this._propsColorpicker, true);
        _this._keyManager = new KeyManager_1.KeyManager(function () {
            var _a, _b, _c;
            var activeEl = document.activeElement;
            var element = (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el;
            return element === activeEl || _this._popup.isVisible();
        });
        _this._initView(config);
        _this._initHandlers();
        _this._initHotkeys();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    ColorPicker.prototype.destructor = function () {
        this.events && this.events.clear();
        this._popup && this._popup.destructor();
        this._keyManager && this._keyManager.destructor();
        this.colorpicker && this.colorpicker.destructor();
        this.events = this._uid = this._propsColorpicker = this._propsItem = this._props = this._keyManager = null;
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    ColorPicker.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsColorpicker.includes(key)) {
                    this.colorpicker.config[key] = propertyConfig[key];
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.colorpicker.paint();
        this.paint();
    };
    ColorPicker.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    ColorPicker.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    ColorPicker.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    ColorPicker.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    ColorPicker.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    ColorPicker.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    ColorPicker.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    ColorPicker.prototype.validate = function (silent) {
        if (silent === void 0) { silent = false; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var value = args.length ? args[0] : this.getValue();
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required || args.length) {
            valid = (0, ts_colorpicker_1.isHex)(value);
        }
        if (typeof this.config.validation === "function") {
            valid = this.config.validation(value);
        }
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    ColorPicker.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    ColorPicker.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.colorpicker.setValue(value);
    };
    ColorPicker.prototype.getValue = function () {
        return this.colorpicker.getValue();
    };
    ColorPicker.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this.colorpicker.clear();
    };
    ColorPicker.prototype.getWidget = function () {
        return this.colorpicker;
    };
    ColorPicker.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    ColorPicker.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this._popup.hide();
            _this.getRootView().refs.input.el.blur();
        });
    };
    ColorPicker.prototype._initView = function (config) {
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        if (this.colorpicker) {
            this.colorpicker.destructor();
        }
        if (this._popup) {
            this._popup.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            editable: false,
            hidden: false,
            value: "",
            grayShades: true,
            pickerOnly: false,
            paletteOnly: false,
            customColors: [],
            palette: ts_colorpicker_1.palette,
            mode: "palette",
            required: false,
            icon: "",
            placeholder: "",
            label: "",
            labelWidth: "",
            labelPosition: "top",
            hiddenLabel: false,
            helpMessage: "",
            preMessage: "",
            successMessage: "",
            errorMessage: "",
            width: "content",
            height: "content",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._popup = new ts_popup_1.Popup();
        this.colorpicker = new ts_colorpicker_1.Colorpicker(null, (0, helper_1.widgetConfig)(config));
        this.colorpicker.setValue(this.config.value);
        this._popup.attach(this.colorpicker);
    };
    ColorPicker.prototype._initHandlers = function () {
        var _this = this;
        this.colorpicker.events.on(ts_colorpicker_1.ColorpickerEvents.beforeChange, function (value) {
            return _this.events.fire(types_1.ItemEvent.beforeChange, [value]);
        });
        this.colorpicker.events.on(ts_colorpicker_1.ColorpickerEvents.change, function (_v, mode) {
            _this.config.value = _this.colorpicker.getValue();
            _this.events.fire(types_1.ItemEvent.change, [_this.config.value]);
            if ((0, helper_1.isVerify)(_this.config)) {
                if (mode === "clear") {
                    _this.setValidationStatus(_this.validate(true) ? "success" : "error");
                }
                else {
                    _this.validate();
                }
            }
            _this._popup.hide();
            _this.paint();
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (document.activeElement !== _this.getRootView().refs.input.el) {
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
            }
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.blur, function () {
            _this._popupIsFocus = false;
            _this.paint();
        });
    };
    ColorPicker.prototype._getHandlers = function () {
        var _this = this;
        return {
            onblur: function () {
                if (!_this._popup.isVisible()) {
                    _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]);
                }
                _this.paint();
            },
            onfocus: function () {
                if (_this._popup.isVisible()) {
                    return;
                }
                _this.config.value !== "" && _this.clearValidate();
                var node = _this.getRootView().refs.input.el;
                _this._popup.show(node, {
                    theme: node,
                });
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]);
                _this.paint();
            },
            oninput: function (e) {
                var value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onchange: function (e) {
                var value = e.target.value;
                if (_this.config.editable && (0, ts_colorpicker_1.isHex)(value)) {
                    _this.setValue(value);
                }
                else if (value === "") {
                    _this.clear();
                }
            },
            onkeydown: function (event) {
                var _a, _b, _c;
                var activeEl = document.activeElement;
                var element = (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el;
                if (element === activeEl || _this._popup.isVisible()) {
                    _this.events.fire(types_1.ItemEvent.keydown, [event]);
                }
            },
            onmousedown: function () {
                var popup = _this._popup.getContainer();
                var activeEl = document.activeElement;
                if (popup !== activeEl)
                    _this._popupIsFocus = false;
            },
        };
    };
    ColorPicker.prototype._initHotkeys = function () {
        var _this = this;
        var handlers = {
            "shift+tab": function () {
                _this._applyTab();
            },
            tab: function () {
                _this._applyTab();
            },
            escape: function () {
                if (_this._popup.isVisible()) {
                    _this.getRootView().refs.input.el.focus();
                }
                _this._popup.hide();
            },
            enter: function (event) {
                event.preventDefault();
                if (!_this._popup.isVisible()) {
                    var node = _this.getRootView().refs.input.el;
                    _this._popup.show(node, {
                        theme: node,
                    });
                }
            },
            arrowRight: function (event) {
                var focusElement = _this._popup.getContainer();
                if (_this._popup.isVisible() && !_this._popupIsFocus) {
                    event.preventDefault();
                    focusElement.focus();
                    _this._popupIsFocus = true;
                }
            },
            onkeydown: function (e) {
                if (e.key === "Tab") {
                    _this._popup.hide();
                }
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    ColorPicker.prototype._draw = function () {
        var _a, _b, _c;
        var _d = this.config, required = _d.required, value = _d.value, icon = _d.icon, disabled = _d.disabled, placeholder = _d.placeholder, name = _d.name, id = _d.id, editable = _d.editable, label = _d.label, helpMessage = _d.helpMessage;
        var activeFocus = this._popup.isVisible() || ((_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el) === document.activeElement;
        return (0, dom_1.el)("div.dhx_form-group", {
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), activeFocus),
        }, [
            this._drawLabel(),
            (0, dom_1.el)(".dhx_input__wrapper", [
                (0, dom_1.el)("div.dhx_input__container", {}, [
                    (0, dom_1.el)(".dhx_input__icon", {
                        class: icon ||
                            "dxi dxi-eyedropper-variant" +
                                (value ? " dhx_input__icon--color-selected" : ""),
                        style: { "background-color": value || "transparent" },
                    }),
                    (0, dom_1.el)("input.dhx_input.dhx_input--icon-padding", {
                        tabindex: 0,
                        "data-dhx-id": name || id,
                        _key: this._uid,
                        _ref: "input",
                        value: value,
                        type: "text",
                        required: required,
                        disabled: disabled,
                        class: activeFocus && "dhx_input--focus",
                        placeholder: placeholder || "",
                        name: name || "",
                        id: id || this._uid,
                        onfocus: this._handlers.onfocus,
                        oninput: this._handlers.oninput,
                        onchange: this._handlers.onchange,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        onmousedown: this._handlers.onmousedown,
                        autocomplete: "off",
                        readOnly: !editable,
                        "aria-label": label || "".concat(editable ? "type or" : "", " select color"),
                        "aria-describedby": helpMessage ? "dhx_label__help_".concat(id || this._uid) : null,
                    }),
                ]),
                (0, helper_1.getValidationMessage)(this.config) &&
                    (0, dom_1.el)("span.dhx_input__caption", {}, (0, helper_1.getValidationMessage)(this.config)),
            ]),
        ]);
    };
    ColorPicker.prototype._applyTab = function () {
        var _a, _b, _c;
        var activeEl = document.activeElement;
        var popup = (_c = (_b = (_a = this._popup.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.el;
        if (activeEl !== popup && !this._popupIsFocus) {
            this._popup.hide();
        }
    };
    return ColorPicker;
}(label_1.Label));
exports.ColorPicker = ColorPicker;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacer = void 0;
var dom_1 = __webpack_require__(1);
var view_1 = __webpack_require__(8);
var types_1 = __webpack_require__(5);
var events_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var helper_1 = __webpack_require__(7);
var Spacer = /** @class */ (function (_super) {
    __extends(Spacer, _super);
    function Spacer(container, config) {
        var _this = _super.call(this, container, __assign({ disabled: false, hidden: false, width: "content", height: "content" }, config)) || this;
        _this.events = new events_1.EventSystem();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Spacer.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this.events = null;
        this.unmount();
    };
    Spacer.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (helper_1.baseProps.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Spacer.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, baseProps_1 = helper_1.baseProps; _i < baseProps_1.length; _i++) {
            var prop = baseProps_1[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Spacer.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, []);
    };
    Spacer.prototype.hide = function (init) {
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [!!init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [!!init]);
    };
    Spacer.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Spacer.prototype._draw = function () {
        return (0, dom_1.el)("div");
    };
    return Spacer;
}(view_1.View));
exports.Spacer = Spacer;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avatar = void 0;
var dom_1 = __webpack_require__(1);
var core_1 = __webpack_require__(0);
var events_1 = __webpack_require__(3);
var label_1 = __webpack_require__(14);
var types_1 = __webpack_require__(5);
var helper_1 = __webpack_require__(7);
var simplevault_1 = __webpack_require__(89);
var Avatar = /** @class */ (function (_super) {
    __extends(Avatar, _super);
    function Avatar(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = [
            "validation",
            "required",
            "readOnly",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "size",
            "circle",
            "alt",
            "icon",
            "placeholder",
            "preview",
            "accept",
            "autosend",
            "params",
            "headerParams",
            "fieldName",
            "target",
            "updateFromResponse",
            "removeIcon",
        ];
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), _this._propsItem, true);
        _this._isUpload = false;
        _this._initView(config);
        _this._initHandlers();
        return _this;
    }
    Avatar.prototype.send = function (params) {
        var _this = this;
        var _a = this.config, target = _a.target, value = _a.value, updateFromResponse = _a.updateFromResponse, headerParams = _a.headerParams;
        if (this._isUpload ||
            !target ||
            !(value === null || value === void 0 ? void 0 : value.file) ||
            value.status === simplevault_1.FileStatus.uploaded ||
            !this.events.fire(types_1.ItemEvent.beforeUploadFile, [value])) {
            return;
        }
        var formData = this._createFormData(value, params);
        var request = new XMLHttpRequest();
        this._isUpload = true;
        this.config.value = __assign(__assign({}, value), { status: simplevault_1.FileStatus.inprogress, request: request });
        this.events.fire(types_1.ItemEvent.uploadBegin, [this.config.value]);
        this.events.fire(types_1.ItemEvent.uploadProgress, [0, this.config.value]);
        request.open("POST", target);
        if (headerParams) {
            for (var headerItem in headerParams) {
                request.setRequestHeader(headerItem, headerParams[headerItem]);
            }
        }
        request.upload.onprogress = function (ev) {
            var progress = ev.loaded / ev.total;
            _this.config.value = __assign(__assign({}, _this.config.value), { progress: progress });
            _this.events.fire(types_1.ItemEvent.uploadProgress, [progress * 100, _this.config.value]);
        };
        request.onloadend = function () {
            var status = request.status === 200 ? simplevault_1.FileStatus.uploaded : simplevault_1.FileStatus.failed;
            var extra = request.status === 200 && request.response ? JSON.parse(request.response) : null;
            _this.config.value = __assign(__assign({}, _this.config.value), { status: status });
            if (status === simplevault_1.FileStatus.uploaded) {
                if (extra && updateFromResponse)
                    _this.config.value = __assign(__assign({}, _this.config.value), extra);
                _this.events.fire(types_1.ItemEvent.uploadFile, [_this.config.value, extra]);
            }
            else {
                _this.events.fire(types_1.ItemEvent.uploadFail, [_this.config.value]);
            }
            _this._isUpload = false;
            _this.events.fire(types_1.ItemEvent.uploadComplete, [_this.config.value]);
        };
        request.send(formData);
    };
    Avatar.prototype.selectFile = function () {
        var _a, _b, _c;
        (_c = (_b = (_a = this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el.click();
    };
    Avatar.prototype.setValue = function (value) {
        this._setValue(value);
        (0, helper_1.isVerify)(this.config) && this.validate();
    };
    Avatar.prototype._setValue = function (value) {
        if (!this.events.fire(types_1.ItemEvent.beforeChange, [value])) {
            return;
        }
        this.config.value =
            (!(0, core_1.isEmptyObj)(value) && __assign({ id: (0, core_1.uid)(), status: simplevault_1.FileStatus.queue, progress: 0, path: "" }, value)) ||
                {};
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
    };
    Avatar.prototype.getValue = function () {
        return this.config.value || {};
    };
    Avatar.prototype.clear = function () {
        this._setValue({});
        (0, helper_1.isVerify)(this.config) && this.setValidationStatus(this.validate(true) ? "success" : "error");
    };
    Avatar.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Avatar.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Avatar.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Avatar.prototype.show = function () {
        if (!this.config.hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    Avatar.prototype.hide = function (init) {
        if (init === void 0) { init = false; }
        if ((this.config.hidden && !init) ||
            !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), init]);
    };
    Avatar.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Avatar.prototype.validate = function (silent, value) {
        if (silent === void 0) { silent = false; }
        if (value === void 0) { value = this.getValue(); }
        if (!silent && !this.events.fire(types_1.ItemEvent.beforeValidate, [value])) {
            return false;
        }
        var valid = true;
        if (this.config.required)
            valid = !!value.src;
        if (typeof this.config.validation === "function")
            valid = this.config.validation(value);
        if (!silent) {
            this.setValidationStatus(valid ? "success" : "error");
            this.events.fire(types_1.ItemEvent.afterValidate, [value, valid]);
            this.paint();
        }
        return valid;
    };
    Avatar.prototype.clearValidate = function () {
        this.setValidationStatus();
        this.paint();
    };
    Avatar.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key))
                this.config[key] = propertyConfig[key];
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Avatar.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Avatar.prototype.focus = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            var _a, _b, _c;
            (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el.focus();
            _this.paint();
        });
    };
    Avatar.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            var _a, _b, _c;
            (_c = (_b = (_a = _this.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.input) === null || _c === void 0 ? void 0 : _c.el.blur();
            _this.paint();
        });
    };
    Avatar.prototype.destructor = function () {
        this.events && this.events.clear();
        _super.prototype._destructor.call(this);
        this.unmount();
    };
    Avatar.prototype._initView = function (config) {
        this.config = __assign({ size: "medium", labelPosition: "top", width: "content", height: "content", accept: "image/*", fieldName: "file", target: "", alt: "", css: "", label: "", errorMessage: "", successMessage: "", helpMessage: "", icon: "", labelWidth: "", placeholder: "", preMessage: "", removeIcon: true, circle: false, readOnly: false, hiddenLabel: false, autosend: false, updateFromResponse: true }, config);
        this.paint();
    };
    Avatar.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = __assign({ change: function (event) {
                var _a, _b;
                var file = (_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.files) === null || _b === void 0 ? void 0 : _b[0];
                if (_this.config.readOnly || !file) {
                    return;
                }
                var src = URL.createObjectURL(file);
                _this.setValue({ file: file, src: src });
                if (_this.config.autosend && _this.validate(true))
                    _this.send();
            }, drop: function (event) {
                var _a, _b;
                event.preventDefault();
                var file = (_b = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files) === null || _b === void 0 ? void 0 : _b[0];
                if (_this.config.readOnly || !file) {
                    return;
                }
                var src = URL.createObjectURL(file);
                _this._dragover = false;
                _this.setValue({ file: file, src: src });
                if (_this.config.autosend && _this.validate(true))
                    _this.send();
            }, dragover: function (event) {
                event.preventDefault();
                if (_this.config.readOnly) {
                    return;
                }
                var types = event.dataTransfer.types;
                for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var type = types_2[_i];
                    if (type !== "Files" && type !== "application/x-moz-file") {
                        return;
                    }
                }
                if (_this._dragoverTimeout) {
                    clearTimeout(_this._dragoverTimeout);
                }
                else {
                    _this.paint();
                }
                _this._dragover = true;
                _this._dragoverTimeout = setTimeout(function () {
                    _this._dragover = false;
                    _this._dragoverTimeout = null;
                    _this.paint();
                }, 150);
            }, onfocus: function () { return _this.events.fire(types_1.ItemEvent.focus, [_this.getValue()]); }, onblur: function () { return _this.events.fire(types_1.ItemEvent.blur, [_this.getValue()]); }, onkeydown: function (event) { return _this.events.fire(types_1.ItemEvent.keydown, [event]); } }, this._handlers);
        this.events.on(types_1.ItemEvent.change, function () { return _this.paint(); });
    };
    Avatar.prototype._draw = function () {
        var _a = this.config, hidden = _a.hidden, alt = _a.alt, circle = _a.circle, size = _a.size, label = _a.label, value = _a.value, readOnly = _a.readOnly;
        var visibility = (hidden && " dhx_form-group--hidden") || "";
        var avatarCSS = "";
        var avatarStyles = {};
        if (this._dragover)
            avatarCSS += "dhx_avatar--on-drag ";
        if (circle)
            avatarCSS += "dhx_avatar--circle ";
        if (!size || typeof size === "string") {
            if (size && ["small", "medium", "large"].includes(size)) {
                avatarCSS += "dhx_avatar-size--".concat(size, " ");
            }
            else {
                avatarCSS += "dhx_avatar-size--medium ";
            }
        }
        else {
            avatarStyles.width = avatarStyles.height = size;
        }
        return (0, dom_1.el)("div.dhx_form-group.dhx_form-group--avatar", {
            "aria-label": alt || label,
            role: "img",
            class: (0, helper_1.getFormItemCss)(this.config, (0, helper_1.isVerify)(this.config), false) + visibility,
        }, [
            this._drawLabel(),
            (0, dom_1.el)("div.dhx_avatar", {
                class: avatarCSS,
                style: avatarStyles,
                ondragover: this._handlers.dragover,
                ondrop: this._handlers.drop,
            }, [
                (value === null || value === void 0 ? void 0 : value.src) ? this._drawImage(this.config) : this._drawPreview(this.config),
                !readOnly && this._drawCover(this.config),
            ]),
            (0, helper_1.getValidationMessage)(this.config) &&
                (0, dom_1.el)("span.dhx_input__caption", (0, helper_1.getValidationMessage)(this.config)),
        ]);
    };
    Avatar.prototype._drawImage = function (_a) {
        var alt = _a.alt, value = _a.value;
        return (0, dom_1.el)("img.dhx_avatar__image", { src: value === null || value === void 0 ? void 0 : value.src, alt: alt });
    };
    Avatar.prototype._drawPreview = function (_a) {
        var icon = _a.icon, placeholder = _a.placeholder, preview = _a.preview;
        var nodes = [];
        if (icon) {
            nodes.push((0, dom_1.el)("div.dhx_avatar__preview-icon", { class: icon }));
        }
        if (placeholder) {
            nodes.push((0, dom_1.el)("div.dhx_avatar__preview-placeholder", {
                "aria-placeholder": placeholder,
            }, placeholder));
        }
        return (0, dom_1.el)("div.dhx_avatar__preview", {
            style: __assign({}, ((preview && { "background-image": "url(".concat(preview) }) || {})),
        }, [].concat(nodes));
    };
    Avatar.prototype._drawCover = function (_a) {
        var _this = this;
        var accept = _a.accept, id = _a.id, value = _a.value, removeIcon = _a.removeIcon;
        return (0, dom_1.el)("div.dhx_avatar__cover", [
            (0, dom_1.el)("label.dhx_avatar__cover-upload", [
                (0, dom_1.el)("input.dhx_avatar__cover-input", {
                    _ref: "input",
                    id: id,
                    accept: accept,
                    type: "file",
                    onchange: this._handlers.change,
                    onfocus: this._handlers.onfocus,
                    onblur: this._handlers.onblur,
                    onkeydown: this._handlers.onkeydown,
                }),
                (0, dom_1.el)("i.dhx_avatar__cover-icon.dxi.dxi-vault"),
            ]),
            (value === null || value === void 0 ? void 0 : value.src) &&
                removeIcon &&
                (0, dom_1.el)("div.dhx_avatar__cover-remove", {
                    onclick: function () { return _this.clear(); },
                }, [(0, dom_1.el)("i.dhx_avatar__cover-icon.dxi.dxi-delete-forever")]),
        ]);
    };
    Avatar.prototype._createFormData = function (value, params) {
        var fieldName = this.config.fieldName;
        var extraParams = this.config.params;
        var formData = new FormData();
        if (params) {
            for (var key in params) {
                formData.append(key, params[key]);
            }
        }
        if (extraParams) {
            for (var key in extraParams) {
                formData.append(key, extraParams[key]);
            }
        }
        formData.append(fieldName, value.file, value.file.name);
        formData.append(fieldName + "_fullname", value.path + value.file.name);
        formData.append(fieldName + "_id", value.id);
        return formData;
    };
    return Avatar;
}(label_1.Label));
exports.Avatar = Avatar;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fieldset = void 0;
var events_1 = __webpack_require__(3);
var types_1 = __webpack_require__(5);
var helper_1 = __webpack_require__(7);
var core_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var Fieldset = /** @class */ (function () {
    function Fieldset(config) {
        var _this = this;
        this.events = new events_1.EventSystem();
        this.attachments = [];
        this.propsItem = ["label", "labelAlignment", "align"];
        this.props = __spreadArray(__spreadArray([], helper_1.baseProps, true), this.propsItem, true);
        this.config = __assign({ disabled: false, hidden: false, width: "content", height: "content", labelAlignment: "left", label: "", css: "" }, config);
        (0, dom_1.awaitRedraw)().then(function () {
            if (_this.config.disabled)
                _this.disable();
        });
    }
    Fieldset.prototype.forEach = function (callback, tree) {
        if (tree === void 0) { tree = false; }
        var items = tree ? this.getTreeAttachments(this.getAttachments()) : this.attachments;
        for (var index = 0; index < items.length; index++) {
            callback.call(this, items[index], index, items);
        }
    };
    Fieldset.prototype.disable = function () {
        this.forEach(function (item) { return typeof item.disable === "function" && item.disable(); });
        this.config.disabled = this.cell.config.$disabled = true;
        this.cell.paint();
    };
    Fieldset.prototype.enable = function () {
        var _a;
        this.config.disabled = this.cell.config.$disabled = false;
        if (this.attachments.every(function (i) { return i.isDisabled(); })) {
            this.forEach(function (item) { return typeof item.enable === "function" && item.enable(); });
        }
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.cell.paint();
    };
    Fieldset.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Fieldset.prototype.show = function () {
        if (!this.config.hidden) {
            return;
        }
        this.forEach(function (item) { return typeof item.hide === "function" && item.show(); });
        this.config.hidden = false;
        this.cell.show();
    };
    Fieldset.prototype.hide = function (init) {
        if (init === void 0) { init = false; }
        if (this.config.hidden && !init) {
            return;
        }
        this.forEach(function (item) {
            if (typeof item.hide !== "function")
                return;
            if (item.config.type === "checkboxgroup" || item.config.type === "radiogroup") {
                item.hide(undefined, init);
            }
            else {
                item.hide(init);
            }
        });
        this.config.hidden = true;
        this.cell.hide();
    };
    Fieldset.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Fieldset.prototype.setProperties = function (config) {
        if (!config ||
            (0, core_1.isEmptyObj)(config) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in config) {
            if (this.props.includes(key))
                this.config[key] = config[key];
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
    };
    Fieldset.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this.props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Fieldset.prototype.destructor = function () {
        this.cell.hide();
        this.events.clear();
        this.attachments = [];
    };
    Fieldset.prototype.setCell = function (cell) {
        this.cell = cell;
    };
    Fieldset.prototype.getCell = function () {
        return this.cell;
    };
    Fieldset.prototype.setAttachments = function (attachments) {
        this.attachments = attachments;
    };
    Fieldset.prototype.getAttachments = function () {
        return this.attachments;
    };
    Fieldset.prototype.getTreeAttachments = function (attachments) {
        var items = [];
        for (var index = 0; index < attachments.length; index++) {
            var item = attachments[index];
            items.push(item);
            if (item.config.type === "fieldset") {
                items.push.apply(items, item.getTreeAttachments(item.getAttachments()));
            }
        }
        return items;
    };
    return Fieldset;
}());
exports.Fieldset = Fieldset;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleGroup = void 0;
var types_1 = __webpack_require__(5);
var ToggleButton_1 = __webpack_require__(94);
var view_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var helper_1 = __webpack_require__(7);
var events_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var ToggleGroup = /** @class */ (function (_super) {
    __extends(ToggleGroup, _super);
    function ToggleGroup(container, config) {
        var _this = _super.call(this, container, __assign({ full: false, multiselect: false, disabled: false, hidden: false, width: "content", height: "content", gap: 0, css: "", padding: "", items: [] }, config)) || this;
        _this.events = new events_1.EventSystem();
        _this.items = [];
        _this.props = __spreadArray(__spreadArray([], helper_1.baseProps, true), ["options", "full", "gap", "multiselect"], false);
        _this.initView();
        _this.initHandlers();
        var render = function () { return _this.draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    ToggleGroup.prototype.setValue = function (value) {
        var _a;
        if (value === void 0) { value = {}; }
        var currValue = this.getValue();
        var isSameValue = Object.entries(value).every(function (_a) {
            var k = _a[0], v = _a[1];
            return !!v === !!currValue[k];
        });
        if (isSameValue)
            return;
        if (!this.config.multiselection) {
            var targetItem = Object.entries(value).find(function (_a) {
                var k = _a[0], v = _a[1];
                return v;
            });
            var currentValue = this.getValue();
            for (var _i = 0, _b = Object.entries(currentValue); _i < _b.length; _i++) {
                var _c = _b[_i], k = _c[0], v1 = _c[1];
                var v2 = v1;
                if (typeof v1 === "string")
                    v2 = "";
                if (typeof v1 === "number")
                    v2 = 0;
                if (typeof v1 === "boolean")
                    v2 = false;
                value[k] = targetItem ? (targetItem[0] === k ? targetItem[1] : v2) : v2;
            }
        }
        if (!this.events.fire(types_1.ItemEvent.beforeChange, [__assign(__assign({}, this.getValue()), value)])) {
            return false;
        }
        var _loop_1 = function (id, v) {
            (_a = this_1.items.find(function (i) { return i.config.id === id; })) === null || _a === void 0 ? void 0 : _a.setValue(!!v, true);
        };
        var this_1 = this;
        for (var _d = 0, _e = Object.entries(value); _d < _e.length; _d++) {
            var _f = _e[_d], id = _f[0], v = _f[1];
            _loop_1(id, v);
        }
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
    };
    ToggleGroup.prototype.getValue = function (id) {
        if (id) {
            var button = this.items.find(function (i) { return i.config.id === id; });
            if (button)
                return button.getValue();
        }
        var list = {};
        this.items.forEach(function (i) {
            list[i.config.id] = i.getValue();
        });
        return list;
    };
    ToggleGroup.prototype.isSelected = function (id) {
        if (id) {
            var button = this.items.find(function (i) { return i.config.id === id; });
            if (button)
                return button.isSelected();
        }
        var list = {};
        this.items.forEach(function (i) {
            list[i.config.id] = i.isSelected();
        });
        return list;
    };
    ToggleGroup.prototype.show = function (id) {
        var button = id && this.items.find(function (item) { return item.config.id === id; });
        if ((button && !button.config.hidden) ||
            !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue(), id])) {
            return;
        }
        if (button) {
            button.show();
        }
        else {
            this.items.forEach(function (item) { return item.show(); });
        }
        this.config.hidden = false;
        this.checkVisibleOrder(!!button);
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue(), id]);
    };
    ToggleGroup.prototype.hide = function (id, init) {
        var button = id && this.items.find(function (item) { return item.config.id === id; });
        if ((this.config.hidden && !init) ||
            (button && button.config.hidden) ||
            !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), id, init])) {
            return;
        }
        if (button) {
            button.hide();
            this.config.hidden = this.items.every(function (item) { return item.config.hidden; });
        }
        else {
            this.items.forEach(function (item) { return item.hide(); });
            this.config.hidden = true;
        }
        this.checkVisibleOrder(!!button);
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), id, init]);
    };
    ToggleGroup.prototype.isVisible = function (id) {
        var button = this.items.find(function (i) { return i.config.id === id; });
        if (button)
            return button.isVisible();
        return !this.config.hidden;
    };
    ToggleGroup.prototype.focus = function (id) {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            var button = _this.items.find(function (i) { return i.config.id === id; }) || _this.items[0];
            button && button.focus();
        });
    };
    ToggleGroup.prototype.blur = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            _this.items.forEach(function (i) { return i.blur(); });
        });
    };
    ToggleGroup.prototype.disable = function (id) {
        var button = id && this.items.find(function (item) { return item.config.id === id; });
        if (this.config.disabled || (button && button.config.disabled)) {
            return;
        }
        if (button) {
            button.disable();
            this.config.disabled = this.items.every(function (item) { return item.config.disabled; });
        }
        else {
            this.items.forEach(function (item) { return item.disable(); });
            this.config.disabled = true;
        }
        this.paint();
    };
    ToggleGroup.prototype.enable = function (id) {
        var _a;
        var button = id && this.items.find(function (item) { return item.config.id === id; });
        if ((!button && !this.config.disabled) || (button && !button.config.disabled)) {
            return;
        }
        if (button) {
            button === null || button === void 0 ? void 0 : button.enable();
        }
        else {
            this.items.forEach(function (item) { return item.enable(); });
        }
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    ToggleGroup.prototype.isDisabled = function (id) {
        var button = this.items.find(function (i) { return i.config.id === id; });
        if (button)
            return button.isDisabled();
        return !!this.config.disabled;
    };
    ToggleGroup.prototype.setProperties = function (config, id) {
        var button = this.items.find(function (item) { return item.config.id === id; });
        if (!config ||
            (0, core_1.isEmptyObj)(config) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [
                button ? __assign(__assign({}, button.getProperties()), config) : __assign(__assign({}, this.getProperties()), config),
            ])) {
            return;
        }
        if (button) {
            button.setProperties(config);
        }
        else {
            for (var key in config) {
                if (this.props.includes(key))
                    this.config[key] = config[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [
            button ? button.getProperties() : this.getProperties(),
        ]);
    };
    ToggleGroup.prototype.getProperties = function (id) {
        if (id) {
            var button = this.items.find(function (i) { return i.config.id === id; });
            if (button)
                return button.getProperties();
        }
        var obj = {};
        for (var _i = 0, _a = this.props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    ToggleGroup.prototype.destructor = function () {
        this.events.clear();
        this.unmount();
    };
    ToggleGroup.prototype.initView = function () {
        var _this = this;
        var _a;
        if (!((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.length)) {
            throw new Error("Check the configuration is correct");
        }
        this.items = this.config.options.map(function (item, index) {
            if (!item.id)
                item.id = item.name || (0, core_1.uid)();
            if (_this.config.gap)
                item.$gap = index && _this.config.gap;
            return new ToggleButton_1.ToggleButton(null, __assign(__assign({}, item), { $group: true }));
        });
        if (this.config.value) {
            this.setValue(this.config.value);
        }
        this.checkVisibleOrder();
    };
    ToggleGroup.prototype.initHandlers = function () {
        var _this = this;
        this.items.forEach(function (button) {
            button.events.on(types_1.ItemEvent.keydown, function (event) {
                _this.events.fire(types_1.ItemEvent.keydown, [event, button.config.id]);
            });
            button.events.on(types_1.ItemEvent.focus, function () {
                _this.events.fire(types_1.ItemEvent.focus, [_this.getValue(), button.config.id]);
            });
            button.events.on(types_1.ItemEvent.blur, function () {
                _this.events.fire(types_1.ItemEvent.blur, [_this.getValue(), button.config.id]);
            });
            button.events.on(types_1.ItemEvent.beforeChange, function (value) {
                var _a;
                if (typeof button.config.value === "string")
                    value = value ? button.config.value : "";
                if (typeof button.config.value === "number")
                    value = value ? button.config.value : 0;
                return _this.setValue((_a = {},
                    _a[button.config.id] = value,
                    _a));
            });
        });
    };
    ToggleGroup.prototype.draw = function () {
        var _a = this.config, hidden = _a.hidden, id = _a.id, name = _a.name, full = _a.full, gap = _a.gap;
        var elements = this.items.map(function (item) { return (0, dom_1.inject)(item.getRootView()); });
        return (0, dom_1.el)("div.dhx_form-group.dhx_form-group--toggle-group.dhx_toggle-group", {
            "data-dhx-id": name || id,
            "aria-label": name || id,
            role: "group",
            class: ((hidden && "dhx_form-group--hidden ") || "") +
                ((full && "dhx_toggle-group--full ") || "") +
                ((gap && "dhx_toggle-group--segmented ") || "") +
                (0, helper_1.getFormItemCss)(this.config),
        }, [].concat(elements));
    };
    ToggleGroup.prototype.checkVisibleOrder = function (render) {
        var visible = this.items
            .map(function (i) {
            delete i.config.$extraCss;
            return i;
        })
            .filter(function (i) { return !i.config.hidden; });
        if (visible.length) {
            var first = this.items.findIndex(function (i) { return i.config.id === visible[0].config.id; });
            var last = this.items.findIndex(function (i) { return i.config.id === visible[visible.length - 1].config.id; });
            this.items[first].config.$extraCss = "dhx_toggle--first ";
            this.items[last].config.$extraCss = this.items[last].config.$extraCss
                ? this.items[last].config.$extraCss + "dhx_toggle--last "
                : "dhx_toggle--last ";
        }
        render && this.items.forEach(function (i) { return i.paint(); });
    };
    return ToggleGroup;
}(view_1.View));
exports.ToggleGroup = ToggleGroup;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProForm = void 0;
var Form_1 = __webpack_require__(87);
var types_1 = __webpack_require__(5);
var ts_layout_1 = __webpack_require__(16);
var container_1 = __webpack_require__(248);
var helper_1 = __webpack_require__(7);
var ProForm = /** @class */ (function (_super) {
    __extends(ProForm, _super);
    function ProForm(container, config) {
        return _super.call(this, container, config) || this;
    }
    ProForm.prototype._initItemHandlers = function (item, name) {
        var _this = this;
        _super.prototype._initItemHandlers.call(this, item, name);
        switch (item.type) {
            case "container": {
                var container_2 = (this._attachments[name] = new container_1.Container(null, item));
                container_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                container_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props, container_2.config);
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    _this.layout.paint();
                });
                container_2.events.on(types_1.ItemEvent.beforeHide, function (init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name]);
                    }
                });
                container_2.events.on(types_1.ItemEvent.beforeShow, function () {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name]);
                });
                container_2.events.on(types_1.ItemEvent.afterHide, function (init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name]);
                });
                container_2.events.on(types_1.ItemEvent.afterShow, function () {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name]);
                });
                break;
            }
        }
    };
    ProForm.prototype._initUI = function (container) {
        var attachments = (this._attachments = {});
        var layoutConfig = {
            padding: "8px",
        };
        this.config.css += " dhx_form";
        this._createLayoutConfig(this.config, layoutConfig);
        this.layout = new ts_layout_1.ProLayout(container, layoutConfig);
        (0, helper_1.setAttacments)(attachments, this.layout);
    };
    return ProForm;
}(Form_1.Form));
exports.ProForm = ProForm;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
var dom_1 = __webpack_require__(1);
var label_1 = __webpack_require__(14);
var types_1 = __webpack_require__(5);
var events_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var ts_layout_1 = __webpack_require__(16);
var helper_1 = __webpack_require__(7);
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container(container, config) {
        var _this = _super.call(this, container, __assign({ disabled: false, hidden: false, width: "content", height: "content", label: "", labelWidth: "", labelPosition: "top", hiddenLabel: false, helpMessage: "" }, config)) || this;
        _this.events = new events_1.EventSystem();
        _this._props = __spreadArray(__spreadArray([], helper_1.baseProps, true), ["label", "labelWidth", "labelPosition", "hiddenLabel", "helpMessage"], false);
        if ((0, core_1.isEmptyObj)(config)) {
            throw new Error("Check the configuration is correct");
        }
        if (_this.container) {
            _this.container.destructor();
        }
        var cellConfig = {};
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name" && key !== "width" && key !== "height") {
                _this.config[key] = config[key];
                if (key !== "validation") {
                    cellConfig[key] = config[key];
                }
            }
        }
        _this.container = new ts_layout_1.Layout(null, {
            rows: [cellConfig],
        });
        cellConfig.html && _this.container.attachHTML(cellConfig.html);
        _this.paint();
        var render = function () { return _this._draw(); };
        _this.mount(container, (0, dom_1.create)({ render: render }));
        return _this;
    }
    Container.prototype.destructor = function () {
        this.container.destructor();
    };
    Container.prototype.attach = function (widget) {
        this.container.attach(widget);
    };
    Container.prototype.attachHTML = function (html) {
        this.container.attachHTML(html);
    };
    Container.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, []);
    };
    Container.prototype.hide = function (init) {
        if (init === void 0) { init = false; }
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [init]);
    };
    Container.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Container.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Container.prototype.enable = function () {
        var _a;
        this.config.disabled = false;
        ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDisabled()) && this.parent.enable();
        this.paint();
    };
    Container.prototype.isDisabled = function () {
        return !!this.config.disabled;
    };
    Container.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            (0, core_1.isEmptyObj)(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Container.prototype.getProperties = function () {
        var obj = {};
        for (var _i = 0, _a = this._props; _i < _a.length; _i++) {
            var prop = _a[_i];
            obj[prop] = this.config[prop];
        }
        return obj;
    };
    Container.prototype._getRootView = function () {
        return this.container.getRootView();
    };
    Container.prototype._draw = function () {
        var _a = this.config, name = _a.name, id = _a.id;
        return (0, dom_1.el)(".dhx_form-group.dhx_form-group--container", {
            class: (0, helper_1.getFormItemCss)(this.config),
            "data-dhx-id": name || id,
        }, [this._drawLabel(), (0, dom_1.inject)(this._getRootView())]);
    };
    return Container;
}(label_1.Label));
exports.Container = Container;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchForm = void 0;
var ts_window_1 = __webpack_require__(44);
var ts_toolbar_1 = __webpack_require__(33);
var types_1 = __webpack_require__(6);
var ts_navbar_1 = __webpack_require__(23);
var core_1 = __webpack_require__(0);
var main_1 = __webpack_require__(2);
var dom_1 = __webpack_require__(1);
var types_2 = __webpack_require__(43);
var format_1 = __webpack_require__(12);
var SearchForm = /** @class */ (function () {
    function SearchForm(spreadsheet) {
        this._events = spreadsheet.events;
        this._spreadsheet = spreadsheet;
        this._grid = spreadsheet._grid;
        this._selection = spreadsheet.selection;
        this._modal = new ts_window_1.Window({
            css: "dhx-spreadsheet-form-search-modal",
            height: 56,
            left: window.innerWidth - 385,
            viewportOverflow: true,
            top: 0,
            width: 405
        });
        this._toolbar = new ts_toolbar_1.Toolbar(null, {
            data: [
                {
                    type: "input",
                    value: "",
                    placeholder: "Search",
                    icon: "dxi dxi-magnify",
                    id: "search",
                    css: "search-input",
                    width: 200
                },
                {
                    type: "title",
                    value: "",
                    id: "results",
                },
                { icon: "dxi dxi-chevron-up", id: "prev" },
                { icon: "dxi dxi-chevron-down", id: "next" },
                {
                    type: "separator",
                },
                { icon: "dxi dxi-close", id: "close" },
            ],
            css: "dhx-spreadsheet-form-search-form"
        });
        this._modal.attach(this._toolbar);
        this._initHandlers();
    }
    SearchForm.prototype.hide = function () {
        if (this._modal.isVisible()) {
            this._modal.hide();
            this._selection._removeSearchCell();
        }
    };
    SearchForm.prototype.research = function (page) {
        if (page !== this._page) {
            this._page = page;
        }
        this._data = this._page.serialize().map(function (item) {
            var row = item[0], col = item[1], meta = item[2];
            var value = meta.value, format = meta.format;
            return [row, col, __assign(__assign({}, meta), { value: (0, format_1.getFormattedValue)(value, format) })];
        });
        this.search(this._searchText);
    };
    SearchForm.prototype.show = function (page) {
        this.research(page);
        this._modal.show();
        this._toolbar.setState({ search: "" });
        this._toolbar.disable(["next", "prev"]);
    };
    SearchForm.prototype.isVisible = function () {
        return this._modal.isVisible();
    };
    SearchForm.prototype.search = function (text, page) {
        var _this = this;
        if (page && this._page !== page) {
            this.research(page);
        }
        if (this._toolbar.getState().search !== text) {
            this._searchText = text;
            this._toolbar.setState({ search: text });
        }
        this._filtered = [];
        if (text) {
            this._filtered = this._data.filter(function (_a) {
                var _row = _a[0], _col = _a[1], value = _a[2].value;
                return !_this._grid.isRowHidden(_row + 1) &&
                    (!text || ((0, core_1.isDefined)(value) && "".concat(value).toLowerCase().includes(text.toLowerCase())));
            });
        }
        var searchedCells = this._filtered.map(function (cell) { return (0, main_1.getCellNameById)(_this._spreadsheet._grid, cell[0] + 1, cell[1] + 1); });
        if (!this._modal.isVisible())
            return searchedCells;
        if (searchedCells.length) {
            this._selection._setSearchedArray(searchedCells);
        }
        else {
            this._selection._removeSearchCell();
        }
        this._stepIndex = 0;
        this.next();
        if (text) {
            this._toolbar.enable(["next", "prev"]);
        }
        else {
            this._toolbar.disable(["next", "prev"]);
            this._selection._removeSearchCell();
        }
        return searchedCells;
    };
    SearchForm.prototype.next = function () {
        var length = this._filtered.length;
        this._toolbar.data.update("results", { value: "".concat(length ? this._stepIndex + 1 : 0, "/").concat(length) });
        this._updateWindowPos();
        if (!length)
            return;
        this._stepIndex++;
        if (this._stepIndex >= length) {
            this._stepIndex = 0;
        }
        this._selection._setSearchCell(this._stepIndex);
    };
    SearchForm.prototype.prev = function () {
        var length = this._filtered.length;
        this._toolbar.data.update("results", { value: "".concat(length ? this._stepIndex + 1 : 0, "/").concat(length) });
        this._updateWindowPos();
        if (!length)
            return;
        this._stepIndex--;
        if (this._stepIndex < 0) {
            this._stepIndex = length - 1;
        }
        this._toolbar.data.update("results", { value: "".concat(this._stepIndex + 1, "/").concat(length) });
        this._selection._setSearchCell(this._stepIndex);
    };
    SearchForm.prototype.destructor = function () {
        document.removeEventListener("keydown", this._keyHandler);
    };
    SearchForm.prototype._updateWindowPos = function () {
        var _this = this;
        (0, dom_1.awaitRedraw)().then(function () {
            var size = _this._modal.getSize();
            _this._modal.setPosition(window.innerWidth - size.width - 1, 0);
        });
    };
    SearchForm.prototype._keyHandler = function (e) {
        if (e.code === "Escape") {
            e.preventDefault();
            this.hide();
        }
        if (e.code === "KeyG") {
            var ctrl = e.ctrlKey || e.metaKey;
            if (ctrl && !e.shiftKey) {
                e.preventDefault();
                this.next();
            }
            if (ctrl && e.shiftKey) {
                e.preventDefault();
                this.prev();
            }
        }
    };
    SearchForm.prototype._initHandlers = function () {
        var _this = this;
        this._toolbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            switch (id) {
                case "prev":
                    _this.prev();
                    break;
                case "close":
                    _this.hide();
                    break;
                case "next":
                    _this.next();
                    break;
            }
        });
        this._toolbar.events.on(ts_navbar_1.NavigationBarEvents.input, function (_id, text) {
            _this._searchText = text;
            _this.search(text);
        });
        this._modal.events.on(types_2.WindowEvents.afterShow, function () {
            (0, dom_1.awaitRedraw)().then(function () {
                var input = _this._toolbar.getRootNode().querySelector("input");
                input === null || input === void 0 ? void 0 : input.focus();
                input === null || input === void 0 ? void 0 : input.setAttribute("autocomplete", "off");
                _this._toolbar.select("search");
            });
        });
        document.addEventListener("keydown", this._keyHandler.bind(this));
        this._events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            if (_this.isVisible()) {
                _this.research(_this._spreadsheet._activePage);
            }
        });
        this._events.on(types_1.SpreadsheetEvents.afterAction, function () {
            if (_this.isVisible()) {
                _this.research(_this._spreadsheet._activePage);
            }
        });
    };
    return SearchForm;
}());
exports.SearchForm = SearchForm;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkForm = void 0;
var ts_form_1 = __webpack_require__(59);
var ts_window_1 = __webpack_require__(44);
var en_1 = __webpack_require__(11);
var ts_popup_1 = __webpack_require__(10);
var types_1 = __webpack_require__(6);
var ts_toolbar_1 = __webpack_require__(33);
var main_1 = __webpack_require__(2);
var ts_navbar_1 = __webpack_require__(23);
var ts_message_1 = __webpack_require__(17);
var dom_1 = __webpack_require__(1);
var DOMPurify = __webpack_require__(95);
var LinkForm = /** @class */ (function () {
    function LinkForm(grid, set, events) {
        this._set = set;
        this._events = events;
        this._grid = grid;
        this._modal = new ts_window_1.Window({
            title: "".concat(en_1.default.insert, " ").concat(en_1.default.link.toLowerCase()),
            movable: true,
            closable: true,
            css: "dhx-spreadsheet-form-link",
            height: 300,
            width: 300,
        });
        this._form = new ts_form_1.Form("", {
            padding: 15,
            rows: [
                {
                    name: "text",
                    type: "input",
                    label: en_1.default.text,
                    labelPosition: "top",
                    width: 270,
                    placeholder: en_1.default.text,
                },
                {
                    name: "href",
                    type: "input",
                    label: en_1.default.link,
                    labelPosition: "top",
                    width: 270,
                    placeholder: en_1.default.link,
                },
                {
                    align: "end",
                    css: "dhx-button-wrapper",
                    cols: [
                        {
                            type: "button",
                            text: en_1.default.cancel,
                            id: "cancel",
                            view: "link",
                        },
                        {
                            type: "button",
                            text: en_1.default.save,
                            id: "save",
                        },
                    ],
                },
            ],
        });
        this._popup = new ts_popup_1.Popup({
            css: "dhx-spreadsheet-form-link dhx_editor-popup",
        });
        this._toolbar = new ts_toolbar_1.Toolbar(undefined, {
            css: "dhx_link-toolbar",
            data: [
                {
                    type: "customHTML",
                    html: "",
                    css: "dhx_spreadsheet_link href-link",
                    id: "link",
                },
                {
                    icon: "dxi dxi-file-outline",
                    tooltip: en_1.default.copy.toLowerCase(),
                    circle: true,
                    id: "copy",
                },
                { icon: "dxi dxi-pencil", tooltip: en_1.default.edit.toLowerCase(), circle: true, id: "edit" },
                {
                    icon: "dxi dxi-link-variant-off",
                    tooltip: "".concat(en_1.default.remove, " ").concat(en_1.default.link).toLowerCase(),
                    circle: true,
                    id: "unlink",
                },
            ],
        });
        this._modal.attach(this._form);
        this._popup.attach(this._toolbar);
        this._initHandlers();
    }
    LinkForm.prototype.hide = function () {
        if (this._modal.isVisible()) {
            this._modal.hide();
        }
        this._form.setValue({
            text: "",
            href: "",
        });
        this._debounds = false;
        this._events.fire(types_1.SpreadsheetEvents.afterPopupHide);
    };
    LinkForm.prototype.isVisible = function () {
        return this._modal.isVisible();
    };
    LinkForm.prototype.destructor = function () {
        var _a, _b, _c, _d;
        (_a = this._modal) === null || _a === void 0 ? void 0 : _a.destructor();
        (_b = this._form) === null || _b === void 0 ? void 0 : _b.destructor();
        (_c = this._popup) === null || _c === void 0 ? void 0 : _c.destructor();
        (_d = this._toolbar) === null || _d === void 0 ? void 0 : _d.destructor();
    };
    LinkForm.prototype.show = function (cell, cellMeta) {
        var _this = this;
        if (!this._modal.isVisible()) {
            this._modal.show();
        }
        this._cell = cell;
        var value = cellMeta.value, link = cellMeta.link;
        var _a = link || {}, href = _a.href, text = _a.text;
        var hrefVal = !href && (0, main_1.isURL)(value) ? value : href;
        this._form.setValue({
            text: text || value,
            href: hrefVal,
        });
        this.toogleSaveButton((hrefVal === null || hrefVal === void 0 ? void 0 : hrefVal.toString()) || "");
        (0, dom_1.awaitRedraw)().then(function () {
            _this.hideInfo();
        });
    };
    LinkForm.prototype.showInfo = function (cell, cellMeta) {
        if (this._popup.isVisible())
            return;
        this._cell = cell;
        this._cellMeta = cellMeta;
        var link = cellMeta.link, value = cellMeta.value, _a = cellMeta.locked, locked = _a === void 0 ? false : _a;
        var href = link === null || link === void 0 ? void 0 : link.href;
        if (!href) {
            var splited = "".concat(value).split(" ");
            href = splited.find(function (item) { return (0, main_1.isURL)(item); });
        }
        this.toogleLocked(locked);
        if (!href)
            return;
        this._toolbarLink = href;
        this._toolbar.data.update("link", { html: "<a href=\"".concat(href, "\" target=\"blank\">").concat(href, "</a>") });
        this._popup.show((0, main_1.getCellNode)(cell, this._grid, true));
    };
    LinkForm.prototype.hideInfo = function () {
        if (!this._popup.isVisible())
            return;
        this._popup.hide();
        this._toolbarLink = null;
        this._cellMeta = null;
        this._events.fire(types_1.SpreadsheetEvents.afterPopupHide);
    };
    LinkForm.prototype._keyHandler = function (e) {
        var _this = this;
        if (e.code === "Escape") {
            e.preventDefault();
            this.hide();
        }
        if (e.code === "Enter") {
            e.preventDefault();
            this._form.blur("href");
            this._form.blur("text");
            if (!this._debounds) {
                this._debounds = setTimeout(function () {
                    _this._save();
                    _this._debounds = false;
                }, 200);
            }
        }
    };
    LinkForm.prototype._save = function () {
        var _a = this._form.getValue(), text = _a.text, href = _a.href;
        href = DOMPurify.sanitize(href);
        if (!href.startsWith("http")) {
            href = "http://".concat(href);
            this._form.setValue({ href: href });
        }
        if (!this._form.validate()) {
            this._form.setFocus("href");
            return;
        }
        this._set(this._cell, href ? { text: text, href: href } : undefined);
        this.hide();
    };
    LinkForm.prototype.toogleSaveButton = function (text) {
        var save = this._form.getItem("save");
        if (!text) {
            save.disable();
        }
        else {
            save.enable();
        }
    };
    LinkForm.prototype.toogleLocked = function (locked) {
        if (locked) {
            this._toolbar.disable(["edit", "unlink"]);
        }
        else {
            this._toolbar.enable(["edit", "unlink"]);
        }
    };
    LinkForm.prototype._initHandlers = function () {
        var _this = this;
        this._modal.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            _this._form.setFocus("href");
        });
        this._form.events.on(ts_form_1.FormEvents.click, function (name) {
            switch (name) {
                case "save":
                    _this._save();
                    break;
                case "cancel":
                default:
                    _this.hide();
                    break;
            }
        });
        this._form.events.on("keydown", function (event) {
            this._keyHandler(event);
        }.bind(this));
        this._form.getItem("href").events.on("input", function (text) {
            _this.toogleSaveButton(text);
        });
        this._toolbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            switch (id) {
                case "copy":
                    if (window.clipboardData) {
                        window.clipboardData.setData("text/plain", _this._toolbarLink);
                    }
                    else {
                        navigator.clipboard.writeText(_this._toolbarLink);
                    }
                    (0, ts_message_1.message)({
                        text: en_1.default.linkCopied,
                        css: "dhx_message--success",
                        expire: 2000,
                    });
                    break;
                case "edit":
                    _this.show(_this._cell, _this._cellMeta);
                    break;
                case "unlink":
                    _this._set(_this._cell);
                    break;
            }
            _this.hideInfo();
        });
    };
    return LinkForm;
}());
exports.LinkForm = LinkForm;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterForm = void 0;
var ts_form_1 = __webpack_require__(59);
var types_1 = __webpack_require__(6);
var en_1 = __webpack_require__(11);
var ts_popup_1 = __webpack_require__(10);
var main_1 = __webpack_require__(2);
var html_1 = __webpack_require__(4);
var date_1 = __webpack_require__(28);
var core_1 = __webpack_require__(0);
var format_1 = __webpack_require__(12);
var dom_1 = __webpack_require__(1);
var FilterForm = /** @class */ (function () {
    function FilterForm(grid, set) {
        this._grid = grid;
        this._set = set;
        this._popup = new ts_popup_1.Popup({
            css: "dhx_editor-popup dhx_filter-popup",
        });
    }
    FilterForm.prototype.hide = function () {
        var _this = this;
        if (this._popup.isVisible()) {
            this._popup.hide();
            (0, dom_1.awaitRedraw)().then(function () { return _this._form.destructor(); });
        }
    };
    FilterForm.prototype.show = function (cell, e, filter, page) {
        var _this = this;
        var node = (0, html_1.locateNode)(e, "data-dhx-col-id");
        this._initForm();
        var filteredCell = filter.cell, rules = filter.rules;
        var _a = (0, main_1.getCellIds)(filteredCell, this._grid), start = _a.start, end = _a.end;
        var _b = (0, main_1.getCellIds)(cell, this._grid), row = _b.row, col = _b.col;
        this._filter = __assign(__assign({}, filter), { rules: __spreadArray([], filter.rules, true) });
        this._ruleIndex = col - start.col;
        var rule = rules[this._ruleIndex];
        var startRow = row + 1;
        var data = page.getCellRange(startRow, col, end.row, col).map(function (item, index) {
            item = item || {};
            var cellId = (0, core_1.isDefined)(item.value)
                ? (0, main_1.getCellNameByIndex)(startRow + index, col + 1, _this._grid)
                : "empty";
            return __assign(__assign({}, item), { id: cellId });
        });
        var state = {};
        this._hidden = [];
        this._data = [];
        var uniqueValues = [];
        var condition = rule.condition, exclude = rule.exclude;
        data.forEach(function (item, index) {
            var rowId = index + startRow;
            var h = _this._grid.isRowHidden(rowId + 1);
            var _a = item || { id: "empty" }, value = _a.value, id = _a.id, format = _a.format;
            var excluded = (0, core_1.isDefined)(exclude) && (exclude === null || exclude === void 0 ? void 0 : exclude.find(function (i) {
                if (format === null || format === void 0 ? void 0 : format.id) {
                    i = typeof i === "object" ? (0, date_1.getExcelDateFromJs)(i) : (0, date_1.getExcelDateFromString)(i, format);
                }
                return i === value;
            }));
            var hidden = h && !excluded;
            if (hidden || uniqueValues.includes(value)) {
                // items that where hidden by prev filter rule
                if (value) {
                    _this._hidden.push(item);
                }
                return;
            }
            var checked = !excluded;
            uniqueValues.push(value);
            state[id] = checked;
            _this._data.push(__assign(__assign({}, item), { checked: checked }));
        });
        this._setCheckboxes();
        var _c = this._controls, input = _c.input, combo = _c.condition, checkboxes = _c.checkboxes, search = _c.search;
        checkboxes.setValue(state);
        this._checkboxesState = checkboxes.getValue();
        input.hide();
        input.setValue("");
        search.setValue("");
        if (condition === null || condition === void 0 ? void 0 : condition.factor) {
            var factor = condition.factor, value = condition.value;
            this._updateStateByCondition(factor, value);
        }
        else {
            combo.setValue("1");
            input.hide();
        }
        this._popup.show(node);
        this._initValue = this._form.getValue();
    };
    FilterForm.prototype.apply = function () {
        var _this = this;
        var formval = this._form.getValue();
        var condition = formval.condition, value = formval.value, max = formval.max;
        var exclude = [];
        var index = Object.values(this._checkboxesState).findIndex(function (i) { return !i; });
        if (index > -1) {
            Object.keys(this._checkboxesState).forEach(function (key) {
                if (!_this._checkboxesState[key]) {
                    var val = _this._data.find(function (i) { return i.id == key; }).value;
                    exclude.push((0, core_1.isDefined)(val) ? val : null);
                }
            });
        }
        var cond;
        var inputValue = value;
        if (condition !== 1) {
            switch (condition) {
                case types_1.FilterConditions.tdc:
                    if (!value) {
                        inputValue = null;
                    }
                    break;
                case types_1.FilterConditions.d:
                case types_1.FilterConditions.da:
                case types_1.FilterConditions.db:
                    var date = this._controls.datepicker.getValue(true);
                    if (date) {
                        inputValue = (0, date_1.getExcelDateFromJs)(date);
                    }
                    break;
                case types_1.FilterConditions.ib:
                case types_1.FilterConditions.inb:
                    if (typeof value === "number" && typeof max === "number") {
                        inputValue = [Math.min(value, max), Math.max(value, max)];
                    }
                    break;
                case types_1.FilterConditions.e:
                case types_1.FilterConditions.ne:
                    inputValue = true;
                    break;
                default:
                    inputValue = value;
            }
            if ((0, core_1.isDefined)(inputValue)) {
                cond = {
                    factor: condition,
                    value: inputValue,
                };
            }
        }
        if (!(0, core_1.compare)(this._initValue, formval)) {
            this._filter.rules[this._ruleIndex] = { condition: cond, exclude: exclude };
            this._set(this._filter.cell, this._filter.rules);
        }
        this.hide();
    };
    FilterForm.prototype._initForm = function () {
        this._form = new ts_form_1.Form("", {
            css: "dhx_spreadsheet_filter-popup",
            rows: [
                {
                    name: "condition",
                    type: "combo",
                    label: "".concat(en_1.default.condition, ":"),
                    labelPosition: "top",
                    readonly: true,
                    height: 70,
                    data: __spreadArray([
                        { value: en_1.default.none, id: 1 }
                    ], Object.keys(types_1.FilterConditions).map(function (key) { return ({
                        value: en_1.default[key],
                        id: key,
                    }); }), true),
                },
                {
                    name: "value",
                    type: "input",
                    placeholder: en_1.default.value,
                    height: 32,
                },
                {
                    name: "date",
                    type: "datepicker",
                    placeholder: en_1.default.date,
                    height: 32,
                },
                {
                    type: "text",
                    name: "and",
                    value: en_1.default.and,
                    height: 32,
                },
                {
                    name: "max",
                    type: "input",
                    inputType: "number",
                    height: 32,
                    placeholder: en_1.default.value,
                },
                {
                    type: "spacer",
                    height: 10,
                },
                {
                    type: "text",
                    css: "dhx-filter-label",
                    height: 32,
                    value: "".concat(en_1.default.values, ":"),
                },
                {
                    type: "button",
                    name: "unselect",
                    view: "flat",
                    full: true,
                    css: "filter-unselect",
                    text: en_1.default.unselectAll,
                },
                {
                    type: "button",
                    name: "select",
                    view: "flat",
                    full: true,
                    hidden: true,
                    text: en_1.default.selectAll,
                },
                {
                    type: "spacer",
                    height: 5,
                },
                {
                    type: "input",
                    name: "search",
                    height: 50,
                    icon: "dxi dxi-magnify",
                    autocomplite: true,
                },
                {
                    css: "dhx-filter-checkbox-group",
                    rows: [
                        {
                            name: "checkboxes",
                            type: "checkboxGroup",
                            options: {
                                rows: [],
                            },
                        },
                    ],
                },
                {
                    type: "spacer",
                    height: 15,
                },
                {
                    css: "buttons-wrapper",
                    cols: [
                        {
                            name: "cancel",
                            type: "button",
                            view: "link",
                            text: en_1.default.cancel,
                        },
                        {
                            name: "apply",
                            type: "button",
                            view: "flat",
                            text: en_1.default.apply,
                        },
                    ],
                },
            ],
        });
        var select = this._form.getItem("select");
        var unselect = this._form.getItem("unselect");
        var checkboxes = this._form.getItem("checkboxes");
        var condition = this._form.getItem("condition");
        var input = this._form.getItem("value");
        var search = this._form.getItem("search");
        var datepicker = this._form.getItem("date");
        this._controls = {
            unselect: unselect,
            select: select,
            checkboxes: checkboxes,
            condition: condition,
            input: input,
            search: search,
            datepicker: datepicker,
        };
        this._checkboxesState = {};
        this._popup.attach(this._form);
        this._initHandlers();
    };
    FilterForm.prototype._updateStateByCondition = function (condition, val) {
        var _a = this._controls, input = _a.input, combo = _a.condition, datepicker = _a.datepicker;
        combo.setValue(condition);
        var max = this._form.getItem("max");
        var and = this._form.getItem("and");
        max.hide();
        and.hide();
        datepicker.hide();
        input.setValue(val);
        switch (condition) {
            case types_1.FilterConditions.d:
            case types_1.FilterConditions.da:
            case types_1.FilterConditions.db:
                datepicker.show();
                datepicker.setValue((0, core_1.isNumeric)(val) ? (0, date_1.excelDateToJSDate)(val) : "");
                input.hide();
                break;
            case types_1.FilterConditions.e:
            case types_1.FilterConditions.ne:
                input.hide();
                break;
            case types_1.FilterConditions.tc:
            case types_1.FilterConditions.tdc:
            case types_1.FilterConditions.ts:
            case types_1.FilterConditions.te:
            case types_1.FilterConditions.tex:
                input.setProperties({
                    inputType: "text",
                });
                input.setValue(val);
                input.show();
                break;
            case types_1.FilterConditions.ib:
            case types_1.FilterConditions.inb:
                and.show();
                max.setValue(val === null || val === void 0 ? void 0 : val[1]);
                max.show();
            case types_1.FilterConditions.gt:
            case types_1.FilterConditions.geq:
            case types_1.FilterConditions.lt:
            case types_1.FilterConditions.leq:
            case types_1.FilterConditions.eq:
            case types_1.FilterConditions.neq:
                input.setProperties({
                    inputType: "number",
                });
                input.setValue(val instanceof Array ? val[0] : val);
                input.show();
                break;
            default:
                input.hide();
        }
    };
    FilterForm.prototype.applyFilter = function (page) {
        var _this = this;
        var filter = page.getMeta().filter;
        this._grid.data.getInitialData().forEach(function (_a) {
            var id = _a.id;
            if (_this._grid.isRowHidden(id)) {
                _this._showRow(id);
            }
        });
        if (!filter) {
            this._grid.paint();
            this._updateGridData();
            return;
        }
        var cell = filter.cell, rules = filter.rules;
        var cellIds = (0, main_1.getCellIds)(cell, this._grid);
        var start = cellIds.start, end = cellIds.end;
        var index = 0;
        var endCol = end.col;
        var endRow = end.row;
        // exclude first row form filtering
        var startRow = start.row + 1;
        var _loop_1 = function (c) {
            var _a = rules[index], exclude = _a.exclude, condition = _a.condition;
            index++;
            var columnData = page.getCellRange(startRow, c, endRow, c).map(function (c, index) {
                var rowId = index + startRow + 1;
                return __assign(__assign({}, c), { rowId: rowId });
            });
            // filter by values
            if (exclude) {
                columnData = columnData.filter(function (c, index) {
                    var cell = __assign(__assign({}, c), { value: (0, core_1.isDefined)(c === null || c === void 0 ? void 0 : c.value) ? c.value : null });
                    var format = cell.format;
                    var hidden = exclude.find(function (v) {
                        if ((format === null || format === void 0 ? void 0 : format.id) === "date") {
                            v = typeof v === "object" ? (0, date_1.getExcelDateFromJs)(v) : (0, date_1.getExcelDateFromString)(v, format);
                        }
                        return cell.value === v;
                    });
                    var rowId = index + startRow + 1;
                    if (hidden && !_this._grid.isRowHidden(rowId)) {
                        _this._hideRow(rowId);
                    }
                    return !hidden;
                });
            }
            // filter by conditions
            if (condition) {
                var factor_1 = condition.factor, value_1 = condition.value;
                columnData.forEach(function (c) {
                    var _a = (c || {}), val = _a.value, format = _a.format, rowId = _a.rowId;
                    var hide;
                    var formatedValue = (0, format_1.getFormattedValue)(val, format);
                    switch (factor_1) {
                        case types_1.FilterConditions.d:
                        case types_1.FilterConditions.da:
                        case types_1.FilterConditions.db:
                            value_1 = typeof value_1 === "object" ? (0, date_1.getExcelDateFromJs)(value_1) : (0, date_1.getExcelDateFromString)(value_1, format);
                            formatedValue = val;
                    }
                    switch (factor_1) {
                        case types_1.FilterConditions.e:
                            hide = (0, core_1.isDefined)(val);
                            break;
                        case types_1.FilterConditions.ne:
                            hide = !(0, core_1.isDefined)(val);
                            break;
                        case types_1.FilterConditions.tc:
                            hide = (value_1 && !val) || val && !"".concat(formatedValue).toLowerCase().includes(value_1.toLowerCase());
                            break;
                        case types_1.FilterConditions.tdc:
                            hide = val && "".concat(formatedValue).toLowerCase().includes(value_1.toLowerCase());
                            break;
                        case types_1.FilterConditions.ts:
                            hide = val && !"".concat(formatedValue).toLowerCase().startsWith(value_1.toLowerCase());
                            break;
                        case types_1.FilterConditions.te:
                            hide = val && !"".concat(formatedValue).toLowerCase().endsWith(value_1.toLowerCase());
                            break;
                        case types_1.FilterConditions.tex:
                            hide = (0, core_1.isNumeric)(formatedValue) || "".concat(formatedValue) !== value_1;
                            break;
                        case types_1.FilterConditions.d:
                            hide =
                                !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || Math.trunc(val) !== Math.trunc(value_1);
                            break;
                        case types_1.FilterConditions.db:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || Math.trunc(val) >= Math.trunc(value_1);
                            break;
                        case types_1.FilterConditions.da:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || Math.trunc(val) <= Math.trunc(value_1);
                            break;
                        case types_1.FilterConditions.gt:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val <= value_1;
                            break;
                        case types_1.FilterConditions.lt:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val >= value_1;
                            break;
                        case types_1.FilterConditions.geq:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val < value_1;
                            break;
                        case types_1.FilterConditions.leq:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val > value_1;
                            break;
                        case types_1.FilterConditions.eq:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val !== value_1;
                            break;
                        case types_1.FilterConditions.neq:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val === value_1;
                            break;
                        case types_1.FilterConditions.ib:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || val < value_1[0] || val > value_1[1];
                            break;
                        case types_1.FilterConditions.inb:
                            hide = !(0, core_1.isDefined)(val) || !(0, core_1.isNumeric)(val) || (val >= value_1[0] && val <= value_1[1]);
                            break;
                    }
                    if (hide && !_this._grid.isRowHidden(rowId)) {
                        _this._hideRow(rowId);
                    }
                });
            }
        };
        for (var c = start.col; c <= endCol; c++) {
            _loop_1(c);
        }
        this._updateGridData();
        this._grid.paint();
    };
    FilterForm.prototype._showRow = function (id) {
        this._grid.data.update(id, { hidden: false }, true);
    };
    FilterForm.prototype._hideRow = function (id) {
        this._grid.data.update(id, { hidden: true }, true);
    };
    FilterForm.prototype._updateGridData = function () {
        this._grid.data.filter(function (row) { return !row.hidden; });
    };
    FilterForm.prototype._updateButton = function (selectAll) {
        var _a = this._controls, select = _a.select, unselect = _a.unselect;
        (0, dom_1.awaitRedraw)().then(function () {
            if (selectAll) {
                unselect.show();
                select.hide();
            }
            else {
                unselect.hide();
                select.show();
            }
        });
    };
    FilterForm.prototype._setCheckboxes = function (search) {
        if (search === void 0) { search = ""; }
        var options = this._data
            .filter(function (_a) {
            var value = _a.value, format = _a.format;
            return !search ||
                "".concat((0, format_1.getFormattedValue)(value, format))
                    .toLocaleLowerCase()
                    .includes(search.toLocaleLowerCase());
        })
            .map(function (_a) {
            var value = _a.value, checked = _a.checked, id = _a.id, format = _a.format;
            var val = (0, format_1.getFormattedValue)(value, format);
            return {
                type: "checkbox",
                text: val !== null && val !== void 0 ? val : "(".concat(en_1.default.empty, ")"),
                id: id,
                checked: checked,
            };
        });
        this._form.getItem("checkboxes").setProperties({ options: { rows: __spreadArray([], options, true) } });
    };
    FilterForm.prototype._selectAll = function (select) {
        var _this = this;
        var checkboxes = this._controls.checkboxes;
        Object.keys(this._checkboxesState).forEach(function (key) { return (_this._checkboxesState[key] = select); });
        checkboxes.setValue(this._checkboxesState);
        this._updateButton(select);
    };
    FilterForm.prototype._initHandlers = function () {
        var _this = this;
        var _a = this._controls, condition = _a.condition, search = _a.search, checkboxes = _a.checkboxes, datepicker = _a.datepicker;
        var combo = condition.getWidget();
        this._form.events.on(ts_form_1.FormEvents.change, function (name, val) {
            switch (name) {
                case "condition":
                    _this._updateStateByCondition(val);
                    break;
                case "checkboxes":
                    _this._checkboxesState = __assign(__assign({}, _this._checkboxesState), val);
                    var selectAll = Object.values(_this._checkboxesState).findIndex(function (i) { return !i; });
                    _this._updateButton(selectAll < 0);
                    break;
            }
        });
        search.events.on("input", function (text) {
            _this._setCheckboxes("".concat(text));
            checkboxes.setValue(_this._checkboxesState);
        });
        this._form.events.on(ts_form_1.FormEvents.click, function (name) {
            switch (name) {
                case "unselect":
                case "select":
                    _this._selectAll(name === "select");
                    break;
                case "apply":
                    _this.apply();
                    break;
                case "cancel":
                    _this.hide();
                    break;
            }
        });
        // prevent bug from suite
        var comboPopup = combo.popup.getContainer();
        var calendarPopup = datepicker._popup.getContainer();
        this._popup.events.on(ts_popup_1.PopupEvents.beforeHide, function (fromouterclick, e) {
            if (fromouterclick) {
                var parentPopup = (e === null || e === void 0 ? void 0 : e.target).closest(".dhx_popup-content");
                if (fromouterclick && (parentPopup === comboPopup || parentPopup === calendarPopup))
                    return false;
            }
        });
    };
    return FilterForm;
}());
exports.FilterForm = FilterForm;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Merge = void 0;
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(2);
var en_1 = __webpack_require__(11);
var Merge = /** @class */ (function () {
    function Merge(cb, config, grid, isLocked) {
        this._callAction = cb;
        this._config = config;
        this._grid = grid;
        this._isLocked = isLocked;
    }
    Merge.prototype.doAction = function (cell, remove) {
        if (!this.checkBeforeMerge(cell, remove))
            return;
        var action = types_1.Actions[remove ? "unmerge" : "merge"];
        this._callAction({
            action: action,
            groupAction: action,
            cell: cell,
        });
    };
    Merge.prototype.checkBeforeMerge = function (cell, remove) {
        var _this = this;
        if (!(0, main_1.isRangeId)(cell) && !remove)
            return false;
        var _a = this._config, topSplit = _a.topSplit, leftSplit = _a.leftSplit;
        if (topSplit || leftSplit) {
            if (!(0, main_1.checkSpanByNames)(cell, leftSplit, topSplit, this._grid)) {
                (0, main_1.showAlert)(en_1.default.spanMergeAlert);
                return false;
            }
        }
        var locked = (0, main_1.getCellsArray)(cell, this._grid).find(function (c) { return _this._isLocked(c); });
        if (locked) {
            (0, main_1.showAlert)(en_1.default[remove ? "spanUnmergeLockedError" : "spanMergeLockedError"]);
            return false;
        }
        return true;
    };
    Merge.prototype.checkBeforeAction = function (cell, page, action) {
        var merged = page.getMeta().merged;
        var span;
        var cellsArr = (0, main_1.getCellsArray)(cell, this._grid);
        cellsArr.forEach(function (cell) {
            var s = (0, main_1.isCellSpaned)(cell, merged);
            if (s) {
                span = s;
            }
        }, cell);
        if (span) {
            var message = en_1.default.mergeAlertMessage.split("$action");
            (0, main_1.showAlert)("".concat(message[0], " ").concat(action.toLowerCase(), " ").concat(message[1] || ""));
            return false;
        }
        return true;
    };
    return Merge;
}());
exports.Merge = Merge;


/***/ })
/******/ ]);
});if (window.dhx_legacy) { 
					if (window.dhx){
						for (var key in dhx)
							if (key === 'i18n') {
								for (var lang in dhx[key])
									window.dhx_legacy[key][lang] = dhx[key][lang];
							} else {
								dhx_legacy[key] = dhx[key];
							}
					}
					window.dhx = dhx_legacy; delete window.dhx_legacy;
				}
//# sourceMappingURL=spreadsheet.js.map