// * * *     *       *   *       *   *   *   * *** *
// *    *       *     *      *   *       *   *     *
// *   API : panadero-resourceplanning      * *       * 
// *   Location /modules/panadero-resourceplanning  * * 
// *   Modified :JaWsome.Orbit   *                 * 
// *   Date:    05 apr 2025             *          *
// *   Version: v0.1.2             *        *      *
// ** *     *       *   *       *   *   *   *     **
// * *  *       *     *      *   *       *  *  * * *

 //impogantt } from 'dhgantt';
// import "/vendorggantt_9.0.7/codebase/dhgantt.css";

const moduleName = "Panadero-ResourcePlanning";
const moduleGit = "https://github.com/lieuwebakker/panadero-resourceplanning";
const moduleVersion = "0.1.1";
const moduleDate = "29 dec 2024";
const moduleAuthor = "JaWsome.Orbit";
const moduleTitle = "Resource Planning Organized.! modular style!";

class panaderoResourcePlanning {
 constructor(_code="code") {
  this.code = _code;
  this.name = moduleName;
  this.git = moduleGit;
  this.date = moduleDate;
  this.version = moduleVersion;
  this.author = moduleAuthor;
  this.title = moduleTitle;
  this.colors = ['red','gray','white','yellow','magenta','green','blue','cyan','purple','teal'];

  this.resourceData = [];
  this.links = [];
  this.ppl = [];
}



async load(_resourceData, _links, _ppl) {
   var that = this;
   that.resourceData = _resourceData;
   that.links = _links;
   that.ppl = _ppl;
   gantt.message({
      text: "Panadero Resource Planning Module resourceData load",
      expire: 0
   });
}

async serialize() {
   var that = this;
   return gantt.serialize("json");
}

async setSkin(_theme) {
    var that = this;
    gantt.setSkin(_theme);
}

async init() {
   var that = this;
   
   gantt.message({
      text: "Panadero Resource Planning Module Initialize",
      expire: 0
   });
   
   gantt.message({
      text: "Issue resources from module",
      expire: 0
   });

   gantt.config.scale_height = 80;
   gantt.config.scales = [
    {unit: "week", step: 1, format: " Week %w"},
    {unit: "day", step: 1, format: "%d.%m"},
    {unit: "day", step: 1, format: "%D"},
         // {unit: "hour", step: 2, format: "%H"},
    ];

  gantt.config.row_height = 32;
  gantt.config.bar_height = 24;
  gantt.config.min_column_width = 40;

  gantt.config.columns = [
    {name: "text", tree: true, width: 250, resize: true},
    {name: "start_date", align: "center", width: 100, resize: true},
    {name: "owner", align: "center", width: 100, label: "Owner", template: function (task) {
      if (task.type == gantt.config.types.project) {
        return "";
     }

     var store = gantt.getDatastore("resource");
     var assignments = task[gantt.config.resource_property];

     if (!assignments || !assignments.length) {
        return "Unassigned";
     }

     if(assignments.length == 1){
        return store.getItem(assignments[0].resource_id).text;
     }

     var result = "";
     assignments.forEach(function(assignment) {
        var owner = store.getItem(assignment.resource_id);
        if (!owner)
          return;
       result += "<div class='owner-label' title='" + owner.text + "'>" + owner.text.substr(0, 1) + "</div>";

    });

     return result;
  }, resize: true
},
{name: "duration", width: 60, align: "center", resize: true},
{name: "add", width: 44}
];

  function getResourceAssignments(resourceId) {
    var assignments;
    var store = gantt.getDatastore(gantt.config.resource_store);
    var resource = store.getItem(resourceId);

    if (resource.$level === 0) {
      assignments = [];
      store.getChildren(resourceId).forEach(function(childId){
        assignments = assignments.concat(gantt.getResourceAssignments(childId));
     });
   } else if (resource.$level === 1) {
      assignments = gantt.getResourceAssignments(resourceId);
   }else{
      assignments = gantt.getResourceAssignments(resource.$resource_id, resource.$task_id);
   }
   return assignments;
}

var resourceConfig = {
 columns: [
 {
  name: "name", label: "Name", tree:true, template: function (resource) {
    return resource.text;
 }
},
{
  name: "workload", label: "Workload", template: function (resource) {
    var totalDuration = 0;
    if (resource.$level == 2) {
      var assignment = gantt.getResourceAssignments(resource.$resource_id, resource.$task_id)[0];
      totalDuration = resource.duration * assignment.value;
   } else {
      var assignments = getResourceAssignments(resource.id);
      assignments.forEach(function (assignment) {
        var task = gantt.getTask(assignment.task_id);
        totalDuration += Number(assignment.value) * task.duration;
     });
   }

   return (totalDuration || 0) + "h";
}
}
]
};

gantt.templates.resource_cell_class = function(start_date, end_date, resource, tasks){
 var css = [];
 css.push("resource_marker");
 if (tasks.length <= 1) {
   css.push("workday_ok");
} else {
   css.push("workday_over");
}
return css.join(" ");
};

gantt.templates.resource_cell_value = function(start_date, end_date, resource, tasks){
 var result = 0;
 tasks.forEach(function(item) {
   var assignments = gantt.getResourceAssignments(resource.id, item.id);
   assignments.forEach(function(assignment){
     var task = gantt.getTask(assignment.task_id);
     result += assignment.value * 1;
  });
});

 if(result % 1){
   result = Math.round(result * 10)/10;
}
return "<div>" + result + "</div>";
};

gantt.locale.labels.section_resources = "Owners";

gantt.config.lightbox.sections = [
 {name: "description", height: 38, map_to: "text", type: "textarea", focus: true},
 {
   name: "resources", type: "resources", map_to: "owner", options: gantt.serverList("people"), default_value:8
},
{name: "time", type: "duration", map_to: "auto"}
];

gantt.config.resource_store = "resource";
gantt.config.resource_property = "owner";
gantt.config.order_branch = true;
gantt.config.open_tree_initially = true;

gantt.config.layout = {
 css: "gantt_container",
 rows: [
 {
  cols: [
    {view: "grid", group:"grids", scrollY: "scrollVer"},
    {resizer: true, width: 1},
    {view: "timeline", scrollX: "scrollHor", scrollY: "scrollVer"},
    {view: "scrollbar", id: "scrollVer", group:"vertical"}
    ],
  gravity:2
},
{resizer: true, width: 1},
{
  config: resourceConfig,
  cols: [
    {view: "resourceGrid", group:"grids", width: 435, scrollY: "resourceVScroll" },
    {resizer: true, width: 1},
    {view: "resourceTimeline", scrollX: "scrollHor", scrollY: "resourceVScroll"},
    {view: "scrollbar", id: "resourceVScroll", group:"vertical"}
    ],
  gravity:1
},
{view: "scrollbar", id: "scrollHor"}
]
};


   gantt.templates.scale_cell_class = function(date){
    if(date.getDay()==0||date.getDay()==6){
     return "weekend";
   }
   };
   gantt.templates.timeline_cell_class = function(task,date){
    if(date.getDay()==0||date.getDay()==6){ 
     return "weekend" ;
   }
   };

   gantt.init( that.code );

}
   async parse() {
      var that = this;

      var resourcesStore = gantt.createDatastore({
       name: gantt.config.resource_store,
       type: "treeDatastore",
       initItem: function (item) {
         item.parent = item.parent || gantt.config.root_id;
         item[gantt.config.resource_property] = item.parent;
         item.open = true;
         return item;
      }
      });

      resourcesStore.parse(
         that.ppl
      );
      gantt.parse({
         data: that.resourceData,
         links: that.links
      });

      resourcesStore.attachEvent("onParse", function(){
       var people = [];
       resourcesStore.eachItem(function(res){
         if(!resourcesStore.hasChild(res.id)){
           var cogantt.copy(res);
           copy.key = res.id;
           copy.label = res.text;
           people.push(copy);
        }
      });
       gantt.updateCollection("people", people);
      });

   }
}

export { moduleName, moduleVersion, moduleGit, panaderoResourcePlanning }
