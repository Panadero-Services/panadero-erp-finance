<script setup lang="ts">
import { ref, computed, onMounted, watch } from 'vue';
import { useForm, usePage } from "@inertiajs/vue3";
import PostSearch from '@/components/PostSearch.vue';
import { Switch } from '@headlessui/vue';
import { XMarkIcon } from '@heroicons/vue/24/outline';
import TheButton from "@/panadero/components/TheButton.vue";
import { validateField, parseRules } from '@/utils/validators';

const props = defineProps({
  lng: String,
  record: Object,
  module: String,
  table: String,
  superSelfAdmin: Boolean,
  db: Object
  //,form_fields: Object
  //,validation_rules: Object
  //,logAction: Function
});

const emit = defineEmits(['close', 'changeRecord']);

const table = ref(props.table || 'posts')
const titleColumn = ref(props.record.titleColumn || 'title')
const idColumn = ref(props.record.idColumn || 'id')
const fields = ref([]);
const readOnlyFields = ref(['id', 'created_at', 'updated_at']);
const boolFields = ref([
  'is_active', 'animate', 'sidebar', 'header', 'footer', 'public',
  'max_width', 'featured', 'blog', 'smart', 'published', 'locked', 'self'
]);

interface FormFields {
  id?: number;
  //title?: string;
  //body?: string;
  links?: string;
  is_active: boolean;
  //is_archived: boolean;
  [key: string]: any;
}

const form = useForm<FormFields>({
  ...props.record,
  is_active: props.record.is_active || true,
  is_archived: props.record.is_archived || false,
  links: props.record.links || '[]'
});

// Initialize links array if json is empty
// make a check if links is available
if (!form.links) {
  form.links = JSON.stringify([]);
}

// Check for JSON errors
const hasJsonError = computed(() => {
  try {
    const links = JSON.parse(form.links);
    if (!Array.isArray(links)) return true;
    if (links.some(link => typeof link !== 'object' || !link.post_id || !link.type)) return true;
    return false;
  } catch (error) {
    return true;
  }
});

// Get the last link object for editing
const links = computed(() => {
  try {
    return JSON.parse(form.links);
  } catch {
    return [];
  }
});
const link = ref({ post_id: '', type: 'relates_to', post_title: '' });

// Methods for managing links
const addLink = () => {
  const newLinks = [...links.value, link.value];
  form.links = JSON.stringify(newLinks);
};;

const removeLink = (index) => {
  const newLinks = [...links.value];
  newLinks.splice(index, 1);
  form.links = JSON.stringify(newLinks);
};

onMounted(() => {
  // Get all fields except validation_rules and form_fields
  const allFields = Object.keys(props.record).filter(key => (key !== 'validation_rules' && key !== 'form_fields' && key !== 'links_table'));

  // Sort fields by sequence number from form_fields
  fields.value = allFields.sort((a, b) => {
    const seqA = props.record.form_fields?.[a]?.sequence || 0;
    const seqB = props.record.form_fields?.[b]?.sequence || 0;
    return seqA - seqB;
  });


});

const getRulesForField = (key) => {
  return props.record.validation_rules[key] ? parseRules(props.record.validation_rules[key]) : null;
};

const isInvalid = (key) => {
  const rules = getRulesForField(key);
  return !validateField(form[key], rules);
};

const getRuleText = (key) => props.record.validation_rules?.[key] || '';

const submit = async () => {
  if (!isFormValid.value) {
    return;
  }

  // Prevent popup by handling response silently
  form.put(route(`${props.table}.update`, props.record.id), {
    preserveScroll: true,
    onSuccess: () => {
      const _logData = {
        action: `${props.table}.update`,
        user_id: usePage().props.auth.user.id || 'no_uid',
        module: props.module,
        node: 'none',
        team: usePage().props.auth.user.current_team.name || 'no_team',
        project: 'none',
        content: form.title || 'none',
        json: JSON.stringify(form),
        tags: 'content, posts',
      };

      props.db.logAction(_logData);
      emit('close');
    },
    onError: (errors) => {
      // Log errors silently
      console.error('Form submission error:', errors);
    },
    onFinish: () => {
      // Prevent any default behavior
      return false;
    }
  });
};

const isFormValid = computed(() => {
  return fields.value.every(field => {
    const rules = getRulesForField(field);
    return !rules || validateField(form[field], rules);
  });
});
let _switchSection = ".";



// css
const _button = { active: "w-16 rounded px-2 py-1 text-xs ring-1 ring-inset text-gray-600 ring-gray-300 dark:text-gray-300 dark:ring-gray-600 hover:ring-gray-600 hover-text-gray-700 dark:hover:ring-indigo-400", 
                  inactive: "w-16 rounded px-2 py-1 text-xs ring-1 ring-inset text-gray-300 ring-gray-300 dark:text-gray-800 dark:ring-gray-800" 
               };


const _input = {
  base: "w-full pl-3 pr-10 py-2 text-xs rounded-md focus:outline-none focus:ring-1",
  light: "bg-white border-gray-300 text-gray-700 focus:ring-indigo-500",
  dark: "dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 dark:focus:ring-indigo-600"
};


</script>
<template>
  <div>
    <div class="fixed inset-0 z-20 bg-black opacity-20 dark:opacity-75" @click="$emit('close')"></div>
        <div class="z-30 fixed top-1/2 left-1/2 w-full max-w-4xl px-4 lg:p-6 bg-gray-100 dark:bg-slate-800 rounded-lg shadow-xl transform -translate-x-1/2 -translate-y-1/2">
  <!-- Editable Input 
        <div>{{links}}</div>
        <div>link: {{link}}</div>
-->

        <div class="pb-2 text-left">
        <h3 class="text-base  dark:text-white mb-2">
            Edit Record <span class="text-indigo-500">{{ table }}</span>
        </h3>
        </div>

      <form @submit.prevent="submit" class="grid grid-cols-8 gap-4">
        <div
          v-for="f in fields"
          :key="f"
          :class="{
            'col-span-8': record.form_fields?.[f]?.col_span === 8,
            'col-span-6': record.form_fields?.[f]?.col_span === 6,
            'col-span-5': record.form_fields?.[f]?.col_span === 5,
            'col-span-4': record.form_fields?.[f]?.col_span === 4,
            'col-span-3': record.form_fields?.[f]?.col_span === 3,
            'col-span-2': record.form_fields?.[f]?.col_span === 2,
            'col-span-1': record.form_fields?.[f]?.col_span === 1 || !record.form_fields?.[f]?.col_span
          }"
        >

          <!-- Label left.. Boolean center -->
          <label :for="f" :class=" getRuleText(f) == 'boolean' ? 'text-center' : ''"  class="block text-xs font-medium text-gray-700 dark:text-gray-200">
            {{ getRuleText(f) == 'boolean' ? f.replace('is_','') : f }}
            <span v-if="getRuleText(f) && (getRuleText(f)!='boolean')" class="text-xs text-gray-400 ml-1">({{ getRuleText(f) }})</span>
          </label>




          <!-- Boolean Switch -->
          <div v-if="getRuleText(f) == 'boolean' && superSelfAdmin" class="scale-75 text-center">
           

            <Switch v-model="form[f]"
              :class="[
                form[f] ? 'bg-green-600' : 'bg-gray-200 dark:bg-gray-600',
                'relative inline-flex h-6 w-11 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none'
              ]"
            >
                <!-- (28.5.25: what the heck is this?) <span class="sr-only">{{ f }}</span> -->
              <span
                aria-hidden="true"
                :class="[
                  form[f] ? 'translate-x-5' : 'translate-x-0',
                  'inline-block h-5 w-5 transform rounded-full bg-white dark:bg-gray-200 shadow transition'
                ]"
              />
            </Switch>
          </div>

          <!-- Editable Input -->
          <div v-else-if="!readOnlyFields.includes(f) && superSelfAdmin">

            <!-- Links section for json field -->
            <template v-if="f === 'links'">
              <div class="space-y-2 h-48 overflow-scroll z-30">
                <!-- Add new link row -->
                <div class="flex items-center justify-between bg-gray-50 dark:bg-gray-700 p-1.5 rounded-sm">

                  <div class="flex items-center space-x-2 block w-full mr-2">
                    



                        <select v-model="link.type" class="border-gray-300 dark:border-gray-600 rounded-md text-xs" :class="[_input.light, _input.dark]">
                          <option v-for="_link in record.links_table" :value="_link">{{_link.replaceAll('_',' ')}}</option>
                        </select>
                    
                        <PostSearch
                          :model-value="link.post_id==0"
                          :table="table"
                          :title-column="titleColumn"
                          :label="titleColumn"
                          :id-column="idColumn"
                          @update:model-value="(value) => {
                            link.post_id = value;
                            // Update the JSON directly since link is computed
                            // const links = JSON.parse(form.json);
                            // links[links.length - 1].post_id = value;
                            // form.json = JSON.stringify(links);
                          }"
                          @update:post-title="(title) => {
                            link.post_title = title;
                            // Update the JSON directly since link is computed
                            // const links = JSON.parse(form.json);
                            // links[links.length - 1].post_title = title;
                            // form.json = JSON.stringify(links);
                          }"
                        />

                  </div>
                  <button @click.prevent="addLink" :class="[_button.active]" class="ml-2">Add_Link</button>

                </div>

                <!-- JSON Error Message -->
                <div v-if="hasJsonError" class="bg-red-100 dark:bg-red-800 text-red-700 dark:text-red-300 p-2 rounded-sm">
                  JSON Error
                </div>

                <!-- Existing links display -->

                <div class="grid grid-cols-8">
                    <div v-if="!hasJsonError && links" class="col-span-5" >

                      <div v-for="(link, index) in links" 
                          :key="index" 
                          v-if="index !== (links.length - 1)"
                          class="bg-gray-100 dark:bg-gray-700 rounded-sm flex">

                            <button @click.prevent="removeLink(index)" class="text-indigo-500 hover:text-red-700 w-6 ml-1">
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                          </button>

                        <div class="flex items-center justify-between">
                          <div class="flex items-center">
                            <span class="text-xs text-gray-600 dark:text-gray-300 w-24">
                              {{ link?.type?.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase()) || 'N/A' }}
                            </span>

                            <span class="text-xs text-blue-600 dark:text-gray-300 w-6">
                              {{ link?.post_id || 'N/A' }}
                            </span>

                            <span class="text-xs text-blue-600 dark:text-gray-300 w-max hover:text-black cursor-pointer" 
                                  @click="emit('changeRecord', { type: link.type, id: link.post_id })">
                              {{ link?.post_title || 'N/B' }}
                            </span>

                          </div>

                        </div>
                      </div>
                    </div>
                </div>


     
              </div>
            </template>

            <!-- Other fields -->
            <!-- Textarea based on formFields config -->
            <template v-if="record.form_fields?.[f]?.rows > 0">

            <textarea
              v-if="record.form_fields?.[f]?.type === 'textarea' "
              :rows="record.form_fields?.[f]?.rows || 3"
              v-model="form[f]"
              :class="[
                'mt-1 block w-full rounded-md shadow-sm sm:text-xs',
                isInvalid(f)
                  ? 'border-red-500 dark:border-red-400 focus:border-red-500 focus:ring-red-500 dark:focus:ring-red-400'
                  : 'border-gray-300 dark:border-gray-600 focus:border-indigo-500 dark:focus:border-indigo-700 focus:ring-indigo-500 dark:focus:ring-indigo-700',
                'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 placeholder-gray-400 dark:placeholder-gray-400'
              ]"
              :placeholder="record.form_fields?.[f]?.placeholder"
            ></textarea>

            <!-- String input -->
            <input
              v-else-if="typeof form[f] === 'string' || form[f] === null"
              type="text"
              v-model="form[f]"
              :class="[
                'mt-1 block w-full rounded-md shadow-sm sm:text-sm',
                isInvalid(f)
                  ? 'border-red-500 dark:border-red-400 focus:border-red-500 focus:ring-red-500 dark:focus:ring-red-400'
                  : 'border-gray-300 dark:border-gray-600 focus:border-indigo-500 dark:focus:border-indigo-700 focus:ring-indigo-500 dark:focus:ring-indigo-700',
                'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 placeholder-gray-400 dark:placeholder-gray-400'
              ]"
              :placeholder="record.form_fields?.[f]?.placeholder"
            />

            <!-- Number input -->
            <input
              v-else-if="typeof form[f] === 'number'"
              type="number"
              v-model="form[f]"
              :class="[
                'mt-1 block w-full rounded-md shadow-sm sm:text-sm',
                isInvalid(f)
                  ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                  : 'border-gray-300 dark:border-gray-600 focus:border-indigo-500 dark:focus:border-indigo-700 focus:ring-indigo-500 dark:focus:ring-indigo-700'
              ]"
            />

            <!-- Validation message and character count -->
            <div v-if="isInvalid(f)" class="text-xs text-red-600 mt-1">
              Invalid value for {{ f }}.
              <div v-if="typeof form[f] === 'string' && getRulesForField(f)">
                <span v-for="rule in getRulesForField(f)" :key="rule.name">
                  <template v-if="['min', 'max'].includes(rule.name)">
                    Length: {{ form[f]?.length || 0 }} /
                    <span v-if="rule.name === 'min'">min {{ rule.param }}</span>
                    <span v-if="rule.name === 'max'">max {{ rule.param }}</span>
                  </template>
                </span>
              </div>
            </div>
            </template>

          </div>

          <!-- Read-only Field -->
          <div v-else class="mt-1 text-sm text-gray-500 dark:text-gray-300">
            {{ form[f] }}
          </div>

        </div>

        <!-- Buttons -->
        <div class="col-span-8 pt-2 border-t mt-2 flex justify-end space-x-4">
          <button @click="$emit('close')" type="button" :class="[_button.active]">Cancel</button>
          <button v-if="superSelfAdmin" @click="submit" type="button" :class="[_button.active]">Save</button>
        </div>


      </form>
    </div>
  </div>
</template>
